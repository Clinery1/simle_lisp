<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="773.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="5222"><g><title>[[heap]] (1 samples, 0.02%)</title><rect x="0.0000%" y="709" width="0.0191%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (1 samples, 0.02%)</title><rect x="0.0000%" y="693" width="0.0191%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (1 samples, 0.02%)</title><rect x="0.0000%" y="677" width="0.0191%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (1 samples, 0.02%)</title><rect x="0.0000%" y="661" width="0.0191%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="0.0000%" y="645" width="0.0191%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="0.0000%" y="629" width="0.0191%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0000%" y="613" width="0.0191%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.0574%" y="645" width="0.0191%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="0.3074%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.0574%" y="629" width="0.0191%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="1"/><text x="0.3074%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.0574%" y="613" width="0.0191%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="1"/><text x="0.3074%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.0574%" y="597" width="0.0191%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="1"/><text x="0.3074%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.04%)</title><rect x="0.0574%" y="677" width="0.0383%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="2"/><text x="0.3074%" y="687.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.04%)</title><rect x="0.0574%" y="661" width="0.0383%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="2"/><text x="0.3074%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0766%" y="645" width="0.0191%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="1"/><text x="0.3266%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 0.08%)</title><rect x="0.0383%" y="693" width="0.0766%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="4"/><text x="0.2883%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0957%" y="677" width="0.0191%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="0.3457%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0957%" y="661" width="0.0191%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="0.3457%" y="671.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.13%)</title><rect x="0.0191%" y="709" width="0.1340%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="7"/><text x="0.2691%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="0.1149%" y="693" width="0.0383%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="2"/><text x="0.3649%" y="703.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="5.4577%" y="229" width="0.0191%" height="15" fill="rgb(226,26,5)" fg:x="285" fg:w="1"/><text x="5.7077%" y="239.50"></text></g><g><title>__rust_alloc (2 samples, 0.04%)</title><rect x="5.4768%" y="229" width="0.0383%" height="15" fill="rgb(249,33,26)" fg:x="286" fg:w="2"/><text x="5.7268%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (40 samples, 0.77%)</title><rect x="5.4385%" y="325" width="0.7660%" height="15" fill="rgb(235,183,28)" fg:x="284" fg:w="40"/><text x="5.6885%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (40 samples, 0.77%)</title><rect x="5.4385%" y="309" width="0.7660%" height="15" fill="rgb(221,5,38)" fg:x="284" fg:w="40"/><text x="5.6885%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (40 samples, 0.77%)</title><rect x="5.4385%" y="293" width="0.7660%" height="15" fill="rgb(247,18,42)" fg:x="284" fg:w="40"/><text x="5.6885%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (39 samples, 0.75%)</title><rect x="5.4577%" y="277" width="0.7468%" height="15" fill="rgb(241,131,45)" fg:x="285" fg:w="39"/><text x="5.7077%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39 samples, 0.75%)</title><rect x="5.4577%" y="261" width="0.7468%" height="15" fill="rgb(249,31,29)" fg:x="285" fg:w="39"/><text x="5.7077%" y="271.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.75%)</title><rect x="5.4577%" y="245" width="0.7468%" height="15" fill="rgb(225,111,53)" fg:x="285" fg:w="39"/><text x="5.7077%" y="255.50"></text></g><g><title>malloc (36 samples, 0.69%)</title><rect x="5.5151%" y="229" width="0.6894%" height="15" fill="rgb(238,160,17)" fg:x="288" fg:w="36"/><text x="5.7651%" y="239.50"></text></g><g><title>[libc.so.6] (31 samples, 0.59%)</title><rect x="5.6109%" y="213" width="0.5936%" height="15" fill="rgb(214,148,48)" fg:x="293" fg:w="31"/><text x="5.8609%" y="223.50"></text></g><g><title>[libc.so.6] (6 samples, 0.11%)</title><rect x="6.0896%" y="197" width="0.1149%" height="15" fill="rgb(232,36,49)" fg:x="318" fg:w="6"/><text x="6.3396%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (46 samples, 0.88%)</title><rect x="5.3428%" y="405" width="0.8809%" height="15" fill="rgb(209,103,24)" fg:x="279" fg:w="46"/><text x="5.5928%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (41 samples, 0.79%)</title><rect x="5.4385%" y="389" width="0.7851%" height="15" fill="rgb(229,88,8)" fg:x="284" fg:w="41"/><text x="5.6885%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (41 samples, 0.79%)</title><rect x="5.4385%" y="373" width="0.7851%" height="15" fill="rgb(213,181,19)" fg:x="284" fg:w="41"/><text x="5.6885%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (41 samples, 0.79%)</title><rect x="5.4385%" y="357" width="0.7851%" height="15" fill="rgb(254,191,54)" fg:x="284" fg:w="41"/><text x="5.6885%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (41 samples, 0.79%)</title><rect x="5.4385%" y="341" width="0.7851%" height="15" fill="rgb(241,83,37)" fg:x="284" fg:w="41"/><text x="5.6885%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.02%)</title><rect x="6.2045%" y="325" width="0.0191%" height="15" fill="rgb(233,36,39)" fg:x="324" fg:w="1"/><text x="6.4545%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="6.2045%" y="309" width="0.0191%" height="15" fill="rgb(226,3,54)" fg:x="324" fg:w="1"/><text x="6.4545%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="6.2045%" y="293" width="0.0191%" height="15" fill="rgb(245,192,40)" fg:x="324" fg:w="1"/><text x="6.4545%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.10%)</title><rect x="6.2237%" y="405" width="0.0957%" height="15" fill="rgb(238,167,29)" fg:x="325" fg:w="5"/><text x="6.4737%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.10%)</title><rect x="6.2237%" y="389" width="0.0957%" height="15" fill="rgb(232,182,51)" fg:x="325" fg:w="5"/><text x="6.4737%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.10%)</title><rect x="6.2237%" y="373" width="0.0957%" height="15" fill="rgb(231,60,39)" fg:x="325" fg:w="5"/><text x="6.4737%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="6.3194%" y="405" width="0.0383%" height="15" fill="rgb(208,69,12)" fg:x="330" fg:w="2"/><text x="6.5694%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="6.3194%" y="389" width="0.0383%" height="15" fill="rgb(235,93,37)" fg:x="330" fg:w="2"/><text x="6.5694%" y="399.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.04%)</title><rect x="6.3194%" y="373" width="0.0383%" height="15" fill="rgb(213,116,39)" fg:x="330" fg:w="2"/><text x="6.5694%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.04%)</title><rect x="6.3577%" y="405" width="0.0383%" height="15" fill="rgb(222,207,29)" fg:x="332" fg:w="2"/><text x="6.6077%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (28 samples, 0.54%)</title><rect x="6.4343%" y="389" width="0.5362%" height="15" fill="rgb(206,96,30)" fg:x="336" fg:w="28"/><text x="6.6843%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (28 samples, 0.54%)</title><rect x="6.4343%" y="373" width="0.5362%" height="15" fill="rgb(218,138,4)" fg:x="336" fg:w="28"/><text x="6.6843%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (28 samples, 0.54%)</title><rect x="6.4343%" y="357" width="0.5362%" height="15" fill="rgb(250,191,14)" fg:x="336" fg:w="28"/><text x="6.6843%" y="367.50"></text></g><g><title>&lt;indexmap::set::IndexSet&lt;T,S&gt; as indexmap::Entries&gt;::as_entries (6 samples, 0.11%)</title><rect x="6.9705%" y="373" width="0.1149%" height="15" fill="rgb(239,60,40)" fg:x="364" fg:w="6"/><text x="7.2205%" y="383.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as indexmap::Entries&gt;::as_entries (6 samples, 0.11%)</title><rect x="6.9705%" y="357" width="0.1149%" height="15" fill="rgb(206,27,48)" fg:x="364" fg:w="6"/><text x="7.2205%" y="367.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as indexmap::Entries&gt;::as_entries (6 samples, 0.11%)</title><rect x="6.9705%" y="341" width="0.1149%" height="15" fill="rgb(225,35,8)" fg:x="364" fg:w="6"/><text x="7.2205%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.11%)</title><rect x="6.9705%" y="325" width="0.1149%" height="15" fill="rgb(250,213,24)" fg:x="364" fg:w="6"/><text x="7.2205%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (19 samples, 0.36%)</title><rect x="7.0854%" y="373" width="0.3638%" height="15" fill="rgb(247,123,22)" fg:x="370" fg:w="19"/><text x="7.3354%" y="383.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::InstructionIter as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 1.15%)</title><rect x="6.3960%" y="405" width="1.1490%" height="15" fill="rgb(231,138,38)" fg:x="334" fg:w="60"/><text x="6.6460%" y="415.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::get_index (30 samples, 0.57%)</title><rect x="6.9705%" y="389" width="0.5745%" height="15" fill="rgb(231,145,46)" fg:x="364" fg:w="30"/><text x="7.2205%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (5 samples, 0.10%)</title><rect x="7.4493%" y="373" width="0.0957%" height="15" fill="rgb(251,118,11)" fg:x="389" fg:w="5"/><text x="7.6993%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (5 samples, 0.10%)</title><rect x="7.4493%" y="357" width="0.0957%" height="15" fill="rgb(217,147,25)" fg:x="389" fg:w="5"/><text x="7.6993%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="7.5450%" y="405" width="0.0191%" height="15" fill="rgb(247,81,37)" fg:x="394" fg:w="1"/><text x="7.7950%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="7.5450%" y="389" width="0.0191%" height="15" fill="rgb(209,12,38)" fg:x="394" fg:w="1"/><text x="7.7950%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="7.5450%" y="373" width="0.0191%" height="15" fill="rgb(227,1,9)" fg:x="394" fg:w="1"/><text x="7.7950%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="7.5450%" y="357" width="0.0191%" height="15" fill="rgb(248,47,43)" fg:x="394" fg:w="1"/><text x="7.7950%" y="367.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="7.5450%" y="341" width="0.0191%" height="15" fill="rgb(221,10,30)" fg:x="394" fg:w="1"/><text x="7.7950%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="7.5450%" y="325" width="0.0191%" height="15" fill="rgb(210,229,1)" fg:x="394" fg:w="1"/><text x="7.7950%" y="335.50"></text></g><g><title>core::intrinsics::copy (183 samples, 3.50%)</title><rect x="7.5642%" y="389" width="3.5044%" height="15" fill="rgb(222,148,37)" fg:x="395" fg:w="183"/><text x="7.8142%" y="399.50">cor..</text></g><g><title>[libc.so.6] (181 samples, 3.47%)</title><rect x="7.6025%" y="373" width="3.4661%" height="15" fill="rgb(234,67,33)" fg:x="397" fg:w="181"/><text x="7.8525%" y="383.50">[li..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (186 samples, 3.56%)</title><rect x="7.5642%" y="405" width="3.5619%" height="15" fill="rgb(247,98,35)" fg:x="395" fg:w="186"/><text x="7.8142%" y="415.50">allo..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.06%)</title><rect x="11.0686%" y="389" width="0.0574%" height="15" fill="rgb(247,138,52)" fg:x="578" fg:w="3"/><text x="11.3186%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.04%)</title><rect x="11.1260%" y="405" width="0.0383%" height="15" fill="rgb(213,79,30)" fg:x="581" fg:w="2"/><text x="11.3760%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.04%)</title><rect x="11.1260%" y="389" width="0.0383%" height="15" fill="rgb(246,177,23)" fg:x="581" fg:w="2"/><text x="11.3760%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.04%)</title><rect x="11.1260%" y="373" width="0.0383%" height="15" fill="rgb(230,62,27)" fg:x="581" fg:w="2"/><text x="11.3760%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.04%)</title><rect x="11.1260%" y="357" width="0.0383%" height="15" fill="rgb(216,154,8)" fg:x="581" fg:w="2"/><text x="11.3760%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.02%)</title><rect x="11.1452%" y="341" width="0.0191%" height="15" fill="rgb(244,35,45)" fg:x="582" fg:w="1"/><text x="11.3952%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.02%)</title><rect x="11.1452%" y="325" width="0.0191%" height="15" fill="rgb(251,115,12)" fg:x="582" fg:w="1"/><text x="11.3952%" y="335.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::run::_{{closure}} (1 samples, 0.02%)</title><rect x="11.1452%" y="309" width="0.0191%" height="15" fill="rgb(240,54,50)" fg:x="582" fg:w="1"/><text x="11.3952%" y="319.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_dr_to_scope (1 samples, 0.02%)</title><rect x="11.1452%" y="293" width="0.0191%" height="15" fill="rgb(233,84,52)" fg:x="582" fg:w="1"/><text x="11.3952%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (9 samples, 0.17%)</title><rect x="11.1643%" y="405" width="0.1723%" height="15" fill="rgb(207,117,47)" fg:x="583" fg:w="9"/><text x="11.4143%" y="415.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (1 samples, 0.02%)</title><rect x="11.3367%" y="341" width="0.0191%" height="15" fill="rgb(249,43,39)" fg:x="592" fg:w="1"/><text x="11.5867%" y="351.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (1 samples, 0.02%)</title><rect x="11.3367%" y="325" width="0.0191%" height="15" fill="rgb(209,38,44)" fg:x="592" fg:w="1"/><text x="11.5867%" y="335.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (1 samples, 0.02%)</title><rect x="11.3367%" y="309" width="0.0191%" height="15" fill="rgb(236,212,23)" fg:x="592" fg:w="1"/><text x="11.5867%" y="319.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (1 samples, 0.02%)</title><rect x="11.3367%" y="293" width="0.0191%" height="15" fill="rgb(242,79,21)" fg:x="592" fg:w="1"/><text x="11.5867%" y="303.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::HashableDataRef as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="11.3367%" y="277" width="0.0191%" height="15" fill="rgb(211,96,35)" fg:x="592" fg:w="1"/><text x="11.5867%" y="287.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.02%)</title><rect x="11.3367%" y="261" width="0.0191%" height="15" fill="rgb(253,215,40)" fg:x="592" fg:w="1"/><text x="11.5867%" y="271.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="11.3367%" y="245" width="0.0191%" height="15" fill="rgb(211,81,21)" fg:x="592" fg:w="1"/><text x="11.5867%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (3 samples, 0.06%)</title><rect x="11.3367%" y="405" width="0.0574%" height="15" fill="rgb(208,190,38)" fg:x="592" fg:w="3"/><text x="11.5867%" y="415.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::run::_{{closure}} (3 samples, 0.06%)</title><rect x="11.3367%" y="389" width="0.0574%" height="15" fill="rgb(235,213,38)" fg:x="592" fg:w="3"/><text x="11.5867%" y="399.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (3 samples, 0.06%)</title><rect x="11.3367%" y="373" width="0.0574%" height="15" fill="rgb(237,122,38)" fg:x="592" fg:w="3"/><text x="11.5867%" y="383.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (3 samples, 0.06%)</title><rect x="11.3367%" y="357" width="0.0574%" height="15" fill="rgb(244,218,35)" fg:x="592" fg:w="3"/><text x="11.5867%" y="367.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (2 samples, 0.04%)</title><rect x="11.3558%" y="341" width="0.0383%" height="15" fill="rgb(240,68,47)" fg:x="593" fg:w="2"/><text x="11.6058%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="11.3750%" y="325" width="0.0191%" height="15" fill="rgb(210,16,53)" fg:x="594" fg:w="1"/><text x="11.6250%" y="335.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="11.3750%" y="309" width="0.0191%" height="15" fill="rgb(235,124,12)" fg:x="594" fg:w="1"/><text x="11.6250%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;simple_lisp::interpreter::data::Data&gt;&gt; (7 samples, 0.13%)</title><rect x="11.3941%" y="405" width="0.1340%" height="15" fill="rgb(224,169,11)" fg:x="595" fg:w="7"/><text x="11.6441%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (7 samples, 0.13%)</title><rect x="11.3941%" y="389" width="0.1340%" height="15" fill="rgb(250,166,2)" fg:x="595" fg:w="7"/><text x="11.6441%" y="399.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (7 samples, 0.13%)</title><rect x="11.3941%" y="373" width="0.1340%" height="15" fill="rgb(242,216,29)" fg:x="595" fg:w="7"/><text x="11.6441%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (7 samples, 0.13%)</title><rect x="11.3941%" y="357" width="0.1340%" height="15" fill="rgb(230,116,27)" fg:x="595" fg:w="7"/><text x="11.6441%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (7 samples, 0.13%)</title><rect x="11.3941%" y="341" width="0.1340%" height="15" fill="rgb(228,99,48)" fg:x="595" fg:w="7"/><text x="11.6441%" y="351.50"></text></g><g><title>core::mem::replace (7 samples, 0.13%)</title><rect x="11.3941%" y="325" width="0.1340%" height="15" fill="rgb(253,11,6)" fg:x="595" fg:w="7"/><text x="11.6441%" y="335.50"></text></g><g><title>core::ptr::write (7 samples, 0.13%)</title><rect x="11.3941%" y="309" width="0.1340%" height="15" fill="rgb(247,143,39)" fg:x="595" fg:w="7"/><text x="11.6441%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.13%)</title><rect x="11.5282%" y="373" width="0.1340%" height="15" fill="rgb(236,97,10)" fg:x="602" fg:w="7"/><text x="11.7782%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[simple_lisp::interpreter::ScopeItem]&gt; (7 samples, 0.13%)</title><rect x="11.5282%" y="357" width="0.1340%" height="15" fill="rgb(233,208,19)" fg:x="602" fg:w="7"/><text x="11.7782%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::ScopeItem&gt; (7 samples, 0.13%)</title><rect x="11.5282%" y="341" width="0.1340%" height="15" fill="rgb(216,164,2)" fg:x="602" fg:w="7"/><text x="11.7782%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (6 samples, 0.11%)</title><rect x="11.5473%" y="325" width="0.1149%" height="15" fill="rgb(220,129,5)" fg:x="603" fg:w="6"/><text x="11.7973%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (6 samples, 0.11%)</title><rect x="11.5473%" y="309" width="0.1149%" height="15" fill="rgb(242,17,10)" fg:x="603" fg:w="6"/><text x="11.7973%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.11%)</title><rect x="11.5473%" y="293" width="0.1149%" height="15" fill="rgb(242,107,0)" fg:x="603" fg:w="6"/><text x="11.7973%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.11%)</title><rect x="11.5473%" y="277" width="0.1149%" height="15" fill="rgb(251,28,31)" fg:x="603" fg:w="6"/><text x="11.7973%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.11%)</title><rect x="11.5473%" y="261" width="0.1149%" height="15" fill="rgb(233,223,10)" fg:x="603" fg:w="6"/><text x="11.7973%" y="271.50"></text></g><g><title>cfree (6 samples, 0.11%)</title><rect x="11.5473%" y="245" width="0.1149%" height="15" fill="rgb(215,21,27)" fg:x="603" fg:w="6"/><text x="11.7973%" y="255.50"></text></g><g><title>[libc.so.6] (4 samples, 0.08%)</title><rect x="11.5856%" y="229" width="0.0766%" height="15" fill="rgb(232,23,21)" fg:x="605" fg:w="4"/><text x="11.8356%" y="239.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="11.6622%" y="309" width="0.0191%" height="15" fill="rgb(244,5,23)" fg:x="609" fg:w="1"/><text x="11.9122%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.02%)</title><rect x="11.6622%" y="293" width="0.0191%" height="15" fill="rgb(226,81,46)" fg:x="609" fg:w="1"/><text x="11.9122%" y="303.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="11.6813%" y="309" width="0.0191%" height="15" fill="rgb(247,70,30)" fg:x="610" fg:w="1"/><text x="11.9313%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (26 samples, 0.50%)</title><rect x="11.6622%" y="341" width="0.4979%" height="15" fill="rgb(212,68,19)" fg:x="609" fg:w="26"/><text x="11.9122%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (26 samples, 0.50%)</title><rect x="11.6622%" y="325" width="0.4979%" height="15" fill="rgb(240,187,13)" fg:x="609" fg:w="26"/><text x="11.9122%" y="335.50"></text></g><g><title>cfree (24 samples, 0.46%)</title><rect x="11.7005%" y="309" width="0.4596%" height="15" fill="rgb(223,113,26)" fg:x="611" fg:w="24"/><text x="11.9505%" y="319.50"></text></g><g><title>[libc.so.6] (19 samples, 0.36%)</title><rect x="11.7962%" y="293" width="0.3638%" height="15" fill="rgb(206,192,2)" fg:x="616" fg:w="19"/><text x="12.0462%" y="303.50"></text></g><g><title>[libc.so.6] (6 samples, 0.11%)</title><rect x="12.0452%" y="277" width="0.1149%" height="15" fill="rgb(241,108,4)" fg:x="629" fg:w="6"/><text x="12.2952%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;misc_utils::stack::Stack&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (34 samples, 0.65%)</title><rect x="11.5282%" y="405" width="0.6511%" height="15" fill="rgb(247,173,49)" fg:x="602" fg:w="34"/><text x="11.7782%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (34 samples, 0.65%)</title><rect x="11.5282%" y="389" width="0.6511%" height="15" fill="rgb(224,114,35)" fg:x="602" fg:w="34"/><text x="11.7782%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (27 samples, 0.52%)</title><rect x="11.6622%" y="373" width="0.5170%" height="15" fill="rgb(245,159,27)" fg:x="609" fg:w="27"/><text x="11.9122%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.52%)</title><rect x="11.6622%" y="357" width="0.5170%" height="15" fill="rgb(245,172,44)" fg:x="609" fg:w="27"/><text x="11.9122%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.02%)</title><rect x="12.1601%" y="341" width="0.0191%" height="15" fill="rgb(236,23,11)" fg:x="635" fg:w="1"/><text x="12.4101%" y="351.50"></text></g><g><title>misc_utils::slotmap::SlotMap&lt;K,T&gt;::get (6 samples, 0.11%)</title><rect x="12.1792%" y="405" width="0.1149%" height="15" fill="rgb(205,117,38)" fg:x="636" fg:w="6"/><text x="12.4292%" y="415.50"></text></g><g><title>misc_utils::slotmap::SlotMap&lt;K,T&gt;::is_key_valid (5 samples, 0.10%)</title><rect x="12.1984%" y="389" width="0.0957%" height="15" fill="rgb(237,72,25)" fg:x="637" fg:w="5"/><text x="12.4484%" y="399.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (4 samples, 0.08%)</title><rect x="12.2941%" y="405" width="0.0766%" height="15" fill="rgb(244,70,9)" fg:x="642" fg:w="4"/><text x="12.5441%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.08%)</title><rect x="12.2941%" y="389" width="0.0766%" height="15" fill="rgb(217,125,39)" fg:x="642" fg:w="4"/><text x="12.5441%" y="399.50"></text></g><g><title>__rdl_alloc (3 samples, 0.06%)</title><rect x="12.3899%" y="277" width="0.0574%" height="15" fill="rgb(235,36,10)" fg:x="647" fg:w="3"/><text x="12.6399%" y="287.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="12.4473%" y="277" width="0.0191%" height="15" fill="rgb(251,123,47)" fg:x="650" fg:w="1"/><text x="12.6973%" y="287.50"></text></g><g><title>core::ptr::read_volatile (2 samples, 0.04%)</title><rect x="12.4665%" y="277" width="0.0383%" height="15" fill="rgb(221,13,13)" fg:x="651" fg:w="2"/><text x="12.7165%" y="287.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::new (17 samples, 0.33%)</title><rect x="12.3707%" y="405" width="0.3255%" height="15" fill="rgb(238,131,9)" fg:x="646" fg:w="17"/><text x="12.6207%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (17 samples, 0.33%)</title><rect x="12.3707%" y="389" width="0.3255%" height="15" fill="rgb(211,50,8)" fg:x="646" fg:w="17"/><text x="12.6207%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.33%)</title><rect x="12.3707%" y="373" width="0.3255%" height="15" fill="rgb(245,182,24)" fg:x="646" fg:w="17"/><text x="12.6207%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.33%)</title><rect x="12.3707%" y="357" width="0.3255%" height="15" fill="rgb(242,14,37)" fg:x="646" fg:w="17"/><text x="12.6207%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.33%)</title><rect x="12.3707%" y="341" width="0.3255%" height="15" fill="rgb(246,228,12)" fg:x="646" fg:w="17"/><text x="12.6207%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.33%)</title><rect x="12.3707%" y="325" width="0.3255%" height="15" fill="rgb(213,55,15)" fg:x="646" fg:w="17"/><text x="12.6207%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.33%)</title><rect x="12.3707%" y="309" width="0.3255%" height="15" fill="rgb(209,9,3)" fg:x="646" fg:w="17"/><text x="12.6207%" y="319.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.33%)</title><rect x="12.3707%" y="293" width="0.3255%" height="15" fill="rgb(230,59,30)" fg:x="646" fg:w="17"/><text x="12.6207%" y="303.50"></text></g><g><title>malloc (10 samples, 0.19%)</title><rect x="12.5048%" y="277" width="0.1915%" height="15" fill="rgb(209,121,21)" fg:x="653" fg:w="10"/><text x="12.7548%" y="287.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::pop (8 samples, 0.15%)</title><rect x="12.6963%" y="405" width="0.1532%" height="15" fill="rgb(220,109,13)" fg:x="663" fg:w="8"/><text x="12.9463%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (8 samples, 0.15%)</title><rect x="12.6963%" y="389" width="0.1532%" height="15" fill="rgb(232,18,1)" fg:x="663" fg:w="8"/><text x="12.9463%" y="399.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="12.8303%" y="373" width="0.0191%" height="15" fill="rgb(215,41,42)" fg:x="670" fg:w="1"/><text x="13.0803%" y="383.50"></text></g><g><title>__rdl_realloc (1 samples, 0.02%)</title><rect x="13.1367%" y="277" width="0.0191%" height="15" fill="rgb(224,123,36)" fg:x="686" fg:w="1"/><text x="13.3867%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.02%)</title><rect x="13.1367%" y="261" width="0.0191%" height="15" fill="rgb(240,125,3)" fg:x="686" fg:w="1"/><text x="13.3867%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (82 samples, 1.57%)</title><rect x="13.1367%" y="325" width="1.5703%" height="15" fill="rgb(205,98,50)" fg:x="686" fg:w="82"/><text x="13.3867%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (82 samples, 1.57%)</title><rect x="13.1367%" y="309" width="1.5703%" height="15" fill="rgb(205,185,37)" fg:x="686" fg:w="82"/><text x="13.3867%" y="319.50"></text></g><g><title>alloc::alloc::realloc (82 samples, 1.57%)</title><rect x="13.1367%" y="293" width="1.5703%" height="15" fill="rgb(238,207,15)" fg:x="686" fg:w="82"/><text x="13.3867%" y="303.50"></text></g><g><title>realloc (81 samples, 1.55%)</title><rect x="13.1559%" y="277" width="1.5511%" height="15" fill="rgb(213,199,42)" fg:x="687" fg:w="81"/><text x="13.4059%" y="287.50"></text></g><g><title>[libc.so.6] (61 samples, 1.17%)</title><rect x="13.5389%" y="261" width="1.1681%" height="15" fill="rgb(235,201,11)" fg:x="707" fg:w="61"/><text x="13.7889%" y="271.50"></text></g><g><title>[libc.so.6] (54 samples, 1.03%)</title><rect x="13.6729%" y="245" width="1.0341%" height="15" fill="rgb(207,46,11)" fg:x="714" fg:w="54"/><text x="13.9229%" y="255.50"></text></g><g><title>[libc.so.6] (4 samples, 0.08%)</title><rect x="14.6304%" y="229" width="0.0766%" height="15" fill="rgb(241,35,35)" fg:x="764" fg:w="4"/><text x="14.8804%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (85 samples, 1.63%)</title><rect x="13.1176%" y="341" width="1.6277%" height="15" fill="rgb(243,32,47)" fg:x="685" fg:w="85"/><text x="13.3676%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.04%)</title><rect x="14.7070%" y="325" width="0.0383%" height="15" fill="rgb(247,202,23)" fg:x="768" fg:w="2"/><text x="14.9570%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (87 samples, 1.67%)</title><rect x="13.0984%" y="373" width="1.6660%" height="15" fill="rgb(219,102,11)" fg:x="684" fg:w="87"/><text x="13.3484%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (86 samples, 1.65%)</title><rect x="13.1176%" y="357" width="1.6469%" height="15" fill="rgb(243,110,44)" fg:x="685" fg:w="86"/><text x="13.3676%" y="367.50"></text></g><g><title>core::cmp::max (1 samples, 0.02%)</title><rect x="14.7453%" y="341" width="0.0191%" height="15" fill="rgb(222,74,54)" fg:x="770" fg:w="1"/><text x="14.9953%" y="351.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.02%)</title><rect x="14.7453%" y="325" width="0.0191%" height="15" fill="rgb(216,99,12)" fg:x="770" fg:w="1"/><text x="14.9953%" y="335.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.02%)</title><rect x="14.7453%" y="309" width="0.0191%" height="15" fill="rgb(226,22,26)" fg:x="770" fg:w="1"/><text x="14.9953%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="14.7645%" y="373" width="0.0191%" height="15" fill="rgb(217,163,10)" fg:x="771" fg:w="1"/><text x="15.0145%" y="383.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (138 samples, 2.64%)</title><rect x="12.8495%" y="405" width="2.6427%" height="15" fill="rgb(213,25,53)" fg:x="671" fg:w="138"/><text x="13.0995%" y="415.50">mi..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (138 samples, 2.64%)</title><rect x="12.8495%" y="389" width="2.6427%" height="15" fill="rgb(252,105,26)" fg:x="671" fg:w="138"/><text x="13.0995%" y="399.50">al..</text></g><g><title>core::ptr::write (37 samples, 0.71%)</title><rect x="14.7836%" y="373" width="0.7085%" height="15" fill="rgb(220,39,43)" fg:x="772" fg:w="37"/><text x="15.0336%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.11%)</title><rect x="15.8368%" y="373" width="0.1149%" height="15" fill="rgb(229,68,48)" fg:x="827" fg:w="6"/><text x="16.0868%" y="383.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.11%)</title><rect x="15.8368%" y="357" width="0.1149%" height="15" fill="rgb(252,8,32)" fg:x="827" fg:w="6"/><text x="16.0868%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.11%)</title><rect x="15.8368%" y="341" width="0.1149%" height="15" fill="rgb(223,20,43)" fg:x="827" fg:w="6"/><text x="16.0868%" y="351.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2 samples, 0.04%)</title><rect x="15.9134%" y="325" width="0.0383%" height="15" fill="rgb(229,81,49)" fg:x="831" fg:w="2"/><text x="16.1634%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (2 samples, 0.04%)</title><rect x="15.9134%" y="309" width="0.0383%" height="15" fill="rgb(236,28,36)" fg:x="831" fg:w="2"/><text x="16.1634%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.04%)</title><rect x="15.9134%" y="293" width="0.0383%" height="15" fill="rgb(249,185,26)" fg:x="831" fg:w="2"/><text x="16.1634%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.04%)</title><rect x="15.9134%" y="277" width="0.0383%" height="15" fill="rgb(249,174,33)" fg:x="831" fg:w="2"/><text x="16.1634%" y="287.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.11%)</title><rect x="16.0092%" y="341" width="0.1149%" height="15" fill="rgb(233,201,37)" fg:x="836" fg:w="6"/><text x="16.2592%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.11%)</title><rect x="16.0092%" y="325" width="0.1149%" height="15" fill="rgb(221,78,26)" fg:x="836" fg:w="6"/><text x="16.2592%" y="335.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.11%)</title><rect x="16.0092%" y="309" width="0.1149%" height="15" fill="rgb(250,127,30)" fg:x="836" fg:w="6"/><text x="16.2592%" y="319.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (10 samples, 0.19%)</title><rect x="16.1432%" y="245" width="0.1915%" height="15" fill="rgb(230,49,44)" fg:x="843" fg:w="10"/><text x="16.3932%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (10 samples, 0.19%)</title><rect x="16.1432%" y="229" width="0.1915%" height="15" fill="rgb(229,67,23)" fg:x="843" fg:w="10"/><text x="16.3932%" y="239.50"></text></g><g><title>core::cell::BorrowRefMut::new (10 samples, 0.19%)</title><rect x="16.1432%" y="213" width="0.1915%" height="15" fill="rgb(249,83,47)" fg:x="843" fg:w="10"/><text x="16.3932%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (14 samples, 0.27%)</title><rect x="16.1241%" y="341" width="0.2681%" height="15" fill="rgb(215,43,3)" fg:x="842" fg:w="14"/><text x="16.3741%" y="351.50"></text></g><g><title>core::ops::function::FnMut::call_mut (14 samples, 0.27%)</title><rect x="16.1241%" y="325" width="0.2681%" height="15" fill="rgb(238,154,13)" fg:x="842" fg:w="14"/><text x="16.3741%" y="335.50"></text></g><g><title>core::mem::drop (14 samples, 0.27%)</title><rect x="16.1241%" y="309" width="0.2681%" height="15" fill="rgb(219,56,2)" fg:x="842" fg:w="14"/><text x="16.3741%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::ExternalData&gt; (14 samples, 0.27%)</title><rect x="16.1241%" y="293" width="0.2681%" height="15" fill="rgb(233,0,4)" fg:x="842" fg:w="14"/><text x="16.3741%" y="303.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::ExternalData as core::ops::drop::Drop&gt;::drop (14 samples, 0.27%)</title><rect x="16.1241%" y="277" width="0.2681%" height="15" fill="rgb(235,30,7)" fg:x="842" fg:w="14"/><text x="16.3741%" y="287.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::unset_external (14 samples, 0.27%)</title><rect x="16.1241%" y="261" width="0.2681%" height="15" fill="rgb(250,79,13)" fg:x="842" fg:w="14"/><text x="16.3741%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;usize&gt;&gt; (3 samples, 0.06%)</title><rect x="16.3347%" y="245" width="0.0574%" height="15" fill="rgb(211,146,34)" fg:x="853" fg:w="3"/><text x="16.5847%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (3 samples, 0.06%)</title><rect x="16.3347%" y="229" width="0.0574%" height="15" fill="rgb(228,22,38)" fg:x="853" fg:w="3"/><text x="16.5847%" y="239.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (3 samples, 0.06%)</title><rect x="16.3347%" y="213" width="0.0574%" height="15" fill="rgb(235,168,5)" fg:x="853" fg:w="3"/><text x="16.5847%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (3 samples, 0.06%)</title><rect x="16.3347%" y="197" width="0.0574%" height="15" fill="rgb(221,155,16)" fg:x="853" fg:w="3"/><text x="16.5847%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (3 samples, 0.06%)</title><rect x="16.3347%" y="181" width="0.0574%" height="15" fill="rgb(215,215,53)" fg:x="853" fg:w="3"/><text x="16.5847%" y="191.50"></text></g><g><title>core::mem::replace (3 samples, 0.06%)</title><rect x="16.3347%" y="165" width="0.0574%" height="15" fill="rgb(223,4,10)" fg:x="853" fg:w="3"/><text x="16.5847%" y="175.50"></text></g><g><title>core::ptr::write (3 samples, 0.06%)</title><rect x="16.3347%" y="149" width="0.0574%" height="15" fill="rgb(234,103,6)" fg:x="853" fg:w="3"/><text x="16.5847%" y="159.50"></text></g><g><title>core::ptr::read (14 samples, 0.27%)</title><rect x="16.8518%" y="277" width="0.2681%" height="15" fill="rgb(227,97,0)" fg:x="880" fg:w="14"/><text x="17.1018%" y="287.50"></text></g><g><title>core::mem::take (16 samples, 0.31%)</title><rect x="16.8518%" y="309" width="0.3064%" height="15" fill="rgb(234,150,53)" fg:x="880" fg:w="16"/><text x="17.1018%" y="319.50"></text></g><g><title>core::mem::replace (16 samples, 0.31%)</title><rect x="16.8518%" y="293" width="0.3064%" height="15" fill="rgb(228,201,54)" fg:x="880" fg:w="16"/><text x="17.1018%" y="303.50"></text></g><g><title>core::ptr::write (2 samples, 0.04%)</title><rect x="17.1199%" y="277" width="0.0383%" height="15" fill="rgb(222,22,37)" fg:x="894" fg:w="2"/><text x="17.3699%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (64 samples, 1.23%)</title><rect x="15.9517%" y="373" width="1.2256%" height="15" fill="rgb(237,53,32)" fg:x="833" fg:w="64"/><text x="16.2017%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (61 samples, 1.17%)</title><rect x="16.0092%" y="357" width="1.1681%" height="15" fill="rgb(233,25,53)" fg:x="836" fg:w="61"/><text x="16.2592%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (41 samples, 0.79%)</title><rect x="16.3922%" y="341" width="0.7851%" height="15" fill="rgb(210,40,34)" fg:x="856" fg:w="41"/><text x="16.6422%" y="351.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.73%)</title><rect x="16.4496%" y="325" width="0.7277%" height="15" fill="rgb(241,220,44)" fg:x="859" fg:w="38"/><text x="16.6996%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::ExternalData,alloc::alloc::Global&gt;&gt; (1 samples, 0.02%)</title><rect x="17.1582%" y="309" width="0.0191%" height="15" fill="rgb(235,28,35)" fg:x="896" fg:w="1"/><text x="17.4082%" y="319.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="17.1582%" y="293" width="0.0191%" height="15" fill="rgb(210,56,17)" fg:x="896" fg:w="1"/><text x="17.4082%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (2 samples, 0.04%)</title><rect x="17.1773%" y="341" width="0.0383%" height="15" fill="rgb(224,130,29)" fg:x="897" fg:w="2"/><text x="17.4273%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.04%)</title><rect x="17.1773%" y="325" width="0.0383%" height="15" fill="rgb(235,212,8)" fg:x="897" fg:w="2"/><text x="17.4273%" y="335.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.04%)</title><rect x="17.3880%" y="181" width="0.0383%" height="15" fill="rgb(223,33,50)" fg:x="908" fg:w="2"/><text x="17.6380%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.04%)</title><rect x="17.3880%" y="165" width="0.0383%" height="15" fill="rgb(219,149,13)" fg:x="908" fg:w="2"/><text x="17.6380%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (37 samples, 0.71%)</title><rect x="17.3305%" y="213" width="0.7085%" height="15" fill="rgb(250,156,29)" fg:x="905" fg:w="37"/><text x="17.5805%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (37 samples, 0.71%)</title><rect x="17.3305%" y="197" width="0.7085%" height="15" fill="rgb(216,193,19)" fg:x="905" fg:w="37"/><text x="17.5805%" y="207.50"></text></g><g><title>cfree (32 samples, 0.61%)</title><rect x="17.4263%" y="181" width="0.6128%" height="15" fill="rgb(216,135,14)" fg:x="910" fg:w="32"/><text x="17.6763%" y="191.50"></text></g><g><title>[libc.so.6] (22 samples, 0.42%)</title><rect x="17.6178%" y="165" width="0.4213%" height="15" fill="rgb(241,47,5)" fg:x="920" fg:w="22"/><text x="17.8678%" y="175.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::clear (48 samples, 0.92%)</title><rect x="17.1773%" y="373" width="0.9192%" height="15" fill="rgb(233,42,35)" fg:x="897" fg:w="48"/><text x="17.4273%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (48 samples, 0.92%)</title><rect x="17.1773%" y="357" width="0.9192%" height="15" fill="rgb(231,13,6)" fg:x="897" fg:w="48"/><text x="17.4273%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;]&gt; (46 samples, 0.88%)</title><rect x="17.2156%" y="341" width="0.8809%" height="15" fill="rgb(207,181,40)" fg:x="899" fg:w="46"/><text x="17.4656%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (45 samples, 0.86%)</title><rect x="17.2348%" y="325" width="0.8617%" height="15" fill="rgb(254,173,49)" fg:x="900" fg:w="45"/><text x="17.4848%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (45 samples, 0.86%)</title><rect x="17.2348%" y="309" width="0.8617%" height="15" fill="rgb(221,1,38)" fg:x="900" fg:w="45"/><text x="17.4848%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;simple_lisp::interpreter::ast::Ident,(),core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (45 samples, 0.86%)</title><rect x="17.2348%" y="293" width="0.8617%" height="15" fill="rgb(206,124,46)" fg:x="900" fg:w="45"/><text x="17.4848%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(simple_lisp::interpreter::ast::Ident,())&gt;&gt; (45 samples, 0.86%)</title><rect x="17.2348%" y="277" width="0.8617%" height="15" fill="rgb(249,21,11)" fg:x="900" fg:w="45"/><text x="17.4848%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.86%)</title><rect x="17.2348%" y="261" width="0.8617%" height="15" fill="rgb(222,201,40)" fg:x="900" fg:w="45"/><text x="17.4848%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (45 samples, 0.86%)</title><rect x="17.2348%" y="245" width="0.8617%" height="15" fill="rgb(235,61,29)" fg:x="900" fg:w="45"/><text x="17.4848%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (40 samples, 0.77%)</title><rect x="17.3305%" y="229" width="0.7660%" height="15" fill="rgb(219,207,3)" fg:x="905" fg:w="40"/><text x="17.5805%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::allocation_info (3 samples, 0.06%)</title><rect x="18.0391%" y="213" width="0.0574%" height="15" fill="rgb(222,56,46)" fg:x="942" fg:w="3"/><text x="18.2891%" y="223.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (3 samples, 0.06%)</title><rect x="18.0391%" y="197" width="0.0574%" height="15" fill="rgb(239,76,54)" fg:x="942" fg:w="3"/><text x="18.2891%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.02%)</title><rect x="18.0965%" y="341" width="0.0191%" height="15" fill="rgb(231,124,27)" fg:x="945" fg:w="1"/><text x="18.3465%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="18.0965%" y="325" width="0.0191%" height="15" fill="rgb(249,195,6)" fg:x="945" fg:w="1"/><text x="18.3465%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.02%)</title><rect x="18.1157%" y="341" width="0.0191%" height="15" fill="rgb(237,174,47)" fg:x="946" fg:w="1"/><text x="18.3657%" y="351.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::drain (3 samples, 0.06%)</title><rect x="18.0965%" y="373" width="0.0574%" height="15" fill="rgb(206,201,31)" fg:x="945" fg:w="3"/><text x="18.3465%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (3 samples, 0.06%)</title><rect x="18.0965%" y="357" width="0.0574%" height="15" fill="rgb(231,57,52)" fg:x="945" fg:w="3"/><text x="18.3465%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.02%)</title><rect x="18.1348%" y="341" width="0.0191%" height="15" fill="rgb(248,177,22)" fg:x="947" fg:w="1"/><text x="18.3848%" y="351.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="18.1348%" y="325" width="0.0191%" height="15" fill="rgb(215,211,37)" fg:x="947" fg:w="1"/><text x="18.3848%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect x="18.1348%" y="309" width="0.0191%" height="15" fill="rgb(241,128,51)" fg:x="947" fg:w="1"/><text x="18.3848%" y="319.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (2 samples, 0.04%)</title><rect x="18.1540%" y="373" width="0.0383%" height="15" fill="rgb(227,165,31)" fg:x="948" fg:w="2"/><text x="18.4040%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.04%)</title><rect x="18.1540%" y="357" width="0.0383%" height="15" fill="rgb(228,167,24)" fg:x="948" fg:w="2"/><text x="18.4040%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (2 samples, 0.04%)</title><rect x="18.1923%" y="277" width="0.0383%" height="15" fill="rgb(228,143,12)" fg:x="950" fg:w="2"/><text x="18.4423%" y="287.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clear_env (144 samples, 2.76%)</title><rect x="15.4921%" y="405" width="2.7576%" height="15" fill="rgb(249,149,8)" fg:x="809" fg:w="144"/><text x="15.7421%" y="415.50">si..</text></g><g><title>simple_lisp::interpreter::Env::clear (142 samples, 2.72%)</title><rect x="15.5304%" y="389" width="2.7193%" height="15" fill="rgb(243,35,44)" fg:x="811" fg:w="142"/><text x="15.7804%" y="399.50">si..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter_mut (3 samples, 0.06%)</title><rect x="18.1923%" y="373" width="0.0574%" height="15" fill="rgb(246,89,9)" fg:x="950" fg:w="3"/><text x="18.4423%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter_mut (3 samples, 0.06%)</title><rect x="18.1923%" y="357" width="0.0574%" height="15" fill="rgb(233,213,13)" fg:x="950" fg:w="3"/><text x="18.4423%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (3 samples, 0.06%)</title><rect x="18.1923%" y="341" width="0.0574%" height="15" fill="rgb(233,141,41)" fg:x="950" fg:w="3"/><text x="18.4423%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (3 samples, 0.06%)</title><rect x="18.1923%" y="325" width="0.0574%" height="15" fill="rgb(239,167,4)" fg:x="950" fg:w="3"/><text x="18.4423%" y="335.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (3 samples, 0.06%)</title><rect x="18.1923%" y="309" width="0.0574%" height="15" fill="rgb(209,217,16)" fg:x="950" fg:w="3"/><text x="18.4423%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (3 samples, 0.06%)</title><rect x="18.1923%" y="293" width="0.0574%" height="15" fill="rgb(219,88,35)" fg:x="950" fg:w="3"/><text x="18.4423%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.02%)</title><rect x="18.2306%" y="277" width="0.0191%" height="15" fill="rgb(220,193,23)" fg:x="952" fg:w="1"/><text x="18.4806%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="18.2306%" y="261" width="0.0191%" height="15" fill="rgb(230,90,52)" fg:x="952" fg:w="1"/><text x="18.4806%" y="271.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (1 samples, 0.02%)</title><rect x="18.3263%" y="389" width="0.0191%" height="15" fill="rgb(252,106,19)" fg:x="957" fg:w="1"/><text x="18.5763%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.02%)</title><rect x="18.3263%" y="373" width="0.0191%" height="15" fill="rgb(206,74,20)" fg:x="957" fg:w="1"/><text x="18.5763%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.02%)</title><rect x="18.4029%" y="357" width="0.0191%" height="15" fill="rgb(230,138,44)" fg:x="961" fg:w="1"/><text x="18.6529%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="18.4029%" y="341" width="0.0191%" height="15" fill="rgb(235,182,43)" fg:x="961" fg:w="1"/><text x="18.6529%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="18.4029%" y="325" width="0.0191%" height="15" fill="rgb(242,16,51)" fg:x="961" fg:w="1"/><text x="18.6529%" y="335.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (5 samples, 0.10%)</title><rect x="18.4029%" y="373" width="0.0957%" height="15" fill="rgb(248,9,4)" fg:x="961" fg:w="5"/><text x="18.6529%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.08%)</title><rect x="18.4221%" y="357" width="0.0766%" height="15" fill="rgb(210,31,22)" fg:x="962" fg:w="4"/><text x="18.6721%" y="367.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (25 samples, 0.48%)</title><rect x="18.4987%" y="373" width="0.4787%" height="15" fill="rgb(239,54,39)" fg:x="966" fg:w="25"/><text x="18.7487%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (25 samples, 0.48%)</title><rect x="18.4987%" y="357" width="0.4787%" height="15" fill="rgb(230,99,41)" fg:x="966" fg:w="25"/><text x="18.7487%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (3 samples, 0.06%)</title><rect x="18.9966%" y="341" width="0.0574%" height="15" fill="rgb(253,106,12)" fg:x="992" fg:w="3"/><text x="19.2466%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (3 samples, 0.06%)</title><rect x="18.9966%" y="325" width="0.0574%" height="15" fill="rgb(213,46,41)" fg:x="992" fg:w="3"/><text x="19.2466%" y="335.50"></text></g><g><title>core::cell::BorrowRefMut::new (3 samples, 0.06%)</title><rect x="18.9966%" y="309" width="0.0574%" height="15" fill="rgb(215,133,35)" fg:x="992" fg:w="3"/><text x="19.2466%" y="319.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::external (6 samples, 0.11%)</title><rect x="18.9774%" y="373" width="0.1149%" height="15" fill="rgb(213,28,5)" fg:x="991" fg:w="6"/><text x="19.2274%" y="383.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::set_external (6 samples, 0.11%)</title><rect x="18.9774%" y="357" width="0.1149%" height="15" fill="rgb(215,77,49)" fg:x="991" fg:w="6"/><text x="19.2274%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;usize&gt;&gt; (2 samples, 0.04%)</title><rect x="19.0540%" y="341" width="0.0383%" height="15" fill="rgb(248,100,22)" fg:x="995" fg:w="2"/><text x="19.3040%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (2 samples, 0.04%)</title><rect x="19.0540%" y="325" width="0.0383%" height="15" fill="rgb(208,67,9)" fg:x="995" fg:w="2"/><text x="19.3040%" y="335.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="19.0540%" y="309" width="0.0383%" height="15" fill="rgb(219,133,21)" fg:x="995" fg:w="2"/><text x="19.3040%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.04%)</title><rect x="19.0540%" y="293" width="0.0383%" height="15" fill="rgb(246,46,29)" fg:x="995" fg:w="2"/><text x="19.3040%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.04%)</title><rect x="19.0540%" y="277" width="0.0383%" height="15" fill="rgb(246,185,52)" fg:x="995" fg:w="2"/><text x="19.3040%" y="287.50"></text></g><g><title>core::mem::replace (2 samples, 0.04%)</title><rect x="19.0540%" y="261" width="0.0383%" height="15" fill="rgb(252,136,11)" fg:x="995" fg:w="2"/><text x="19.3040%" y="271.50"></text></g><g><title>core::ptr::write (2 samples, 0.04%)</title><rect x="19.0540%" y="245" width="0.0383%" height="15" fill="rgb(219,138,53)" fg:x="995" fg:w="2"/><text x="19.3040%" y="255.50"></text></g><g><title>__rdl_alloc (2 samples, 0.04%)</title><rect x="19.0923%" y="213" width="0.0383%" height="15" fill="rgb(211,51,23)" fg:x="997" fg:w="2"/><text x="19.3423%" y="223.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="19.1306%" y="213" width="0.0191%" height="15" fill="rgb(247,221,28)" fg:x="999" fg:w="1"/><text x="19.3806%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once (22 samples, 0.42%)</title><rect x="19.0923%" y="357" width="0.4213%" height="15" fill="rgb(251,222,45)" fg:x="997" fg:w="22"/><text x="19.3423%" y="367.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::new (22 samples, 0.42%)</title><rect x="19.0923%" y="341" width="0.4213%" height="15" fill="rgb(217,162,53)" fg:x="997" fg:w="22"/><text x="19.3423%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (22 samples, 0.42%)</title><rect x="19.0923%" y="325" width="0.4213%" height="15" fill="rgb(229,93,14)" fg:x="997" fg:w="22"/><text x="19.3423%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (22 samples, 0.42%)</title><rect x="19.0923%" y="309" width="0.4213%" height="15" fill="rgb(209,67,49)" fg:x="997" fg:w="22"/><text x="19.3423%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (22 samples, 0.42%)</title><rect x="19.0923%" y="293" width="0.4213%" height="15" fill="rgb(213,87,29)" fg:x="997" fg:w="22"/><text x="19.3423%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (22 samples, 0.42%)</title><rect x="19.0923%" y="277" width="0.4213%" height="15" fill="rgb(205,151,52)" fg:x="997" fg:w="22"/><text x="19.3423%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.42%)</title><rect x="19.0923%" y="261" width="0.4213%" height="15" fill="rgb(253,215,39)" fg:x="997" fg:w="22"/><text x="19.3423%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.42%)</title><rect x="19.0923%" y="245" width="0.4213%" height="15" fill="rgb(221,220,41)" fg:x="997" fg:w="22"/><text x="19.3423%" y="255.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.42%)</title><rect x="19.0923%" y="229" width="0.4213%" height="15" fill="rgb(218,133,21)" fg:x="997" fg:w="22"/><text x="19.3423%" y="239.50"></text></g><g><title>malloc (19 samples, 0.36%)</title><rect x="19.1498%" y="213" width="0.3638%" height="15" fill="rgb(221,193,43)" fg:x="1000" fg:w="19"/><text x="19.3998%" y="223.50"></text></g><g><title>[libc.so.6] (17 samples, 0.33%)</title><rect x="19.1881%" y="197" width="0.3255%" height="15" fill="rgb(240,128,52)" fg:x="1002" fg:w="17"/><text x="19.4381%" y="207.50"></text></g><g><title>[libc.so.6] (3 samples, 0.06%)</title><rect x="19.4561%" y="181" width="0.0574%" height="15" fill="rgb(253,114,12)" fg:x="1016" fg:w="3"/><text x="19.7061%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="19.6093%" y="261" width="0.0191%" height="15" fill="rgb(215,223,47)" fg:x="1024" fg:w="1"/><text x="19.8593%" y="271.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (1 samples, 0.02%)</title><rect x="19.6093%" y="245" width="0.0191%" height="15" fill="rgb(248,225,23)" fg:x="1024" fg:w="1"/><text x="19.8593%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (4 samples, 0.08%)</title><rect x="19.5902%" y="277" width="0.0766%" height="15" fill="rgb(250,108,0)" fg:x="1023" fg:w="4"/><text x="19.8402%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (2 samples, 0.04%)</title><rect x="19.6285%" y="261" width="0.0383%" height="15" fill="rgb(228,208,7)" fg:x="1025" fg:w="2"/><text x="19.8785%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.04%)</title><rect x="19.6285%" y="245" width="0.0383%" height="15" fill="rgb(244,45,10)" fg:x="1025" fg:w="2"/><text x="19.8785%" y="255.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (33 samples, 0.63%)</title><rect x="19.0923%" y="373" width="0.6319%" height="15" fill="rgb(207,125,25)" fg:x="997" fg:w="33"/><text x="19.3423%" y="383.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (11 samples, 0.21%)</title><rect x="19.5136%" y="357" width="0.2106%" height="15" fill="rgb(210,195,18)" fg:x="1019" fg:w="11"/><text x="19.7636%" y="367.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (11 samples, 0.21%)</title><rect x="19.5136%" y="341" width="0.2106%" height="15" fill="rgb(249,80,12)" fg:x="1019" fg:w="11"/><text x="19.7636%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (11 samples, 0.21%)</title><rect x="19.5136%" y="325" width="0.2106%" height="15" fill="rgb(221,65,9)" fg:x="1019" fg:w="11"/><text x="19.7636%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (10 samples, 0.19%)</title><rect x="19.5327%" y="309" width="0.1915%" height="15" fill="rgb(235,49,36)" fg:x="1020" fg:w="10"/><text x="19.7827%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (10 samples, 0.19%)</title><rect x="19.5327%" y="293" width="0.1915%" height="15" fill="rgb(225,32,20)" fg:x="1020" fg:w="10"/><text x="19.7827%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3 samples, 0.06%)</title><rect x="19.6668%" y="277" width="0.0574%" height="15" fill="rgb(215,141,46)" fg:x="1027" fg:w="3"/><text x="19.9168%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (2 samples, 0.04%)</title><rect x="19.6859%" y="261" width="0.0383%" height="15" fill="rgb(250,160,47)" fg:x="1028" fg:w="2"/><text x="19.9359%" y="271.50"></text></g><g><title>hashbrown::raw::is_full (2 samples, 0.04%)</title><rect x="19.6859%" y="245" width="0.0383%" height="15" fill="rgb(216,222,40)" fg:x="1028" fg:w="2"/><text x="19.9359%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.02%)</title><rect x="19.8200%" y="229" width="0.0191%" height="15" fill="rgb(234,217,39)" fg:x="1035" fg:w="1"/><text x="20.0700%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.02%)</title><rect x="19.8200%" y="213" width="0.0191%" height="15" fill="rgb(207,178,40)" fg:x="1035" fg:w="1"/><text x="20.0700%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="19.8200%" y="197" width="0.0191%" height="15" fill="rgb(221,136,13)" fg:x="1035" fg:w="1"/><text x="20.0700%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2 samples, 0.04%)</title><rect x="19.8200%" y="341" width="0.0383%" height="15" fill="rgb(249,199,10)" fg:x="1035" fg:w="2"/><text x="20.0700%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.04%)</title><rect x="19.8200%" y="325" width="0.0383%" height="15" fill="rgb(249,222,13)" fg:x="1035" fg:w="2"/><text x="20.0700%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.04%)</title><rect x="19.8200%" y="309" width="0.0383%" height="15" fill="rgb(244,185,38)" fg:x="1035" fg:w="2"/><text x="20.0700%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (2 samples, 0.04%)</title><rect x="19.8200%" y="293" width="0.0383%" height="15" fill="rgb(236,202,9)" fg:x="1035" fg:w="2"/><text x="20.0700%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (2 samples, 0.04%)</title><rect x="19.8200%" y="277" width="0.0383%" height="15" fill="rgb(250,229,37)" fg:x="1035" fg:w="2"/><text x="20.0700%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (2 samples, 0.04%)</title><rect x="19.8200%" y="261" width="0.0383%" height="15" fill="rgb(206,174,23)" fg:x="1035" fg:w="2"/><text x="20.0700%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (2 samples, 0.04%)</title><rect x="19.8200%" y="245" width="0.0383%" height="15" fill="rgb(211,33,43)" fg:x="1035" fg:w="2"/><text x="20.0700%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.02%)</title><rect x="19.8391%" y="229" width="0.0191%" height="15" fill="rgb(245,58,50)" fg:x="1036" fg:w="1"/><text x="20.0891%" y="239.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (9 samples, 0.17%)</title><rect x="19.8583%" y="261" width="0.1723%" height="15" fill="rgb(244,68,36)" fg:x="1037" fg:w="9"/><text x="20.1083%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (11 samples, 0.21%)</title><rect x="19.8583%" y="341" width="0.2106%" height="15" fill="rgb(232,229,15)" fg:x="1037" fg:w="11"/><text x="20.1083%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.21%)</title><rect x="19.8583%" y="325" width="0.2106%" height="15" fill="rgb(254,30,23)" fg:x="1037" fg:w="11"/><text x="20.1083%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (11 samples, 0.21%)</title><rect x="19.8583%" y="309" width="0.2106%" height="15" fill="rgb(235,160,14)" fg:x="1037" fg:w="11"/><text x="20.1083%" y="319.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (11 samples, 0.21%)</title><rect x="19.8583%" y="293" width="0.2106%" height="15" fill="rgb(212,155,44)" fg:x="1037" fg:w="11"/><text x="20.1083%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (11 samples, 0.21%)</title><rect x="19.8583%" y="277" width="0.2106%" height="15" fill="rgb(226,2,50)" fg:x="1037" fg:w="11"/><text x="20.1083%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (2 samples, 0.04%)</title><rect x="20.0306%" y="261" width="0.0383%" height="15" fill="rgb(234,177,6)" fg:x="1046" fg:w="2"/><text x="20.2806%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.13%)</title><rect x="20.1838%" y="309" width="0.1340%" height="15" fill="rgb(217,24,9)" fg:x="1054" fg:w="7"/><text x="20.4338%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.02%)</title><rect x="20.2987%" y="293" width="0.0191%" height="15" fill="rgb(220,13,46)" fg:x="1060" fg:w="1"/><text x="20.5487%" y="303.50"></text></g><g><title>hashbrown::raw::h2 (9 samples, 0.17%)</title><rect x="20.3179%" y="309" width="0.1723%" height="15" fill="rgb(239,221,27)" fg:x="1061" fg:w="9"/><text x="20.5679%" y="319.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (42 samples, 0.80%)</title><rect x="19.7242%" y="357" width="0.8043%" height="15" fill="rgb(222,198,25)" fg:x="1030" fg:w="42"/><text x="19.9742%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (24 samples, 0.46%)</title><rect x="20.0689%" y="341" width="0.4596%" height="15" fill="rgb(211,99,13)" fg:x="1048" fg:w="24"/><text x="20.3189%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (24 samples, 0.46%)</title><rect x="20.0689%" y="325" width="0.4596%" height="15" fill="rgb(232,111,31)" fg:x="1048" fg:w="24"/><text x="20.3189%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2 samples, 0.04%)</title><rect x="20.4902%" y="309" width="0.0383%" height="15" fill="rgb(245,82,37)" fg:x="1070" fg:w="2"/><text x="20.7402%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.04%)</title><rect x="20.4902%" y="293" width="0.0383%" height="15" fill="rgb(227,149,46)" fg:x="1070" fg:w="2"/><text x="20.7402%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.04%)</title><rect x="20.4902%" y="277" width="0.0383%" height="15" fill="rgb(218,36,50)" fg:x="1070" fg:w="2"/><text x="20.7402%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (45 samples, 0.86%)</title><rect x="19.7242%" y="373" width="0.8617%" height="15" fill="rgb(226,80,48)" fg:x="1030" fg:w="45"/><text x="19.9742%" y="383.50"></text></g><g><title>std::collections::hash::map::map_entry (3 samples, 0.06%)</title><rect x="20.5285%" y="357" width="0.0574%" height="15" fill="rgb(238,224,15)" fg:x="1072" fg:w="3"/><text x="20.7785%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.10%)</title><rect x="20.6243%" y="309" width="0.0957%" height="15" fill="rgb(241,136,10)" fg:x="1077" fg:w="5"/><text x="20.8743%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.10%)</title><rect x="20.6243%" y="293" width="0.0957%" height="15" fill="rgb(208,32,45)" fg:x="1077" fg:w="5"/><text x="20.8743%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.10%)</title><rect x="20.6243%" y="277" width="0.0957%" height="15" fill="rgb(207,135,9)" fg:x="1077" fg:w="5"/><text x="20.8743%" y="287.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (5 samples, 0.10%)</title><rect x="20.6243%" y="261" width="0.0957%" height="15" fill="rgb(206,86,44)" fg:x="1077" fg:w="5"/><text x="20.8743%" y="271.50"></text></g><g><title>core::hash::Hasher::write_usize (5 samples, 0.10%)</title><rect x="20.6243%" y="245" width="0.0957%" height="15" fill="rgb(245,177,15)" fg:x="1077" fg:w="5"/><text x="20.8743%" y="255.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (5 samples, 0.10%)</title><rect x="20.6243%" y="229" width="0.0957%" height="15" fill="rgb(206,64,50)" fg:x="1077" fg:w="5"/><text x="20.8743%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.02%)</title><rect x="20.7009%" y="213" width="0.0191%" height="15" fill="rgb(234,36,40)" fg:x="1081" fg:w="1"/><text x="20.9509%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="20.7392%" y="261" width="0.0191%" height="15" fill="rgb(213,64,8)" fg:x="1083" fg:w="1"/><text x="20.9892%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.06%)</title><rect x="20.7583%" y="261" width="0.0574%" height="15" fill="rgb(210,75,36)" fg:x="1084" fg:w="3"/><text x="21.0083%" y="271.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (13 samples, 0.25%)</title><rect x="20.5860%" y="373" width="0.2489%" height="15" fill="rgb(229,88,21)" fg:x="1075" fg:w="13"/><text x="20.8360%" y="383.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (13 samples, 0.25%)</title><rect x="20.5860%" y="357" width="0.2489%" height="15" fill="rgb(252,204,47)" fg:x="1075" fg:w="13"/><text x="20.8360%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (13 samples, 0.25%)</title><rect x="20.5860%" y="341" width="0.2489%" height="15" fill="rgb(208,77,27)" fg:x="1075" fg:w="13"/><text x="20.8360%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (13 samples, 0.25%)</title><rect x="20.5860%" y="325" width="0.2489%" height="15" fill="rgb(221,76,26)" fg:x="1075" fg:w="13"/><text x="20.8360%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (6 samples, 0.11%)</title><rect x="20.7200%" y="309" width="0.1149%" height="15" fill="rgb(225,139,18)" fg:x="1082" fg:w="6"/><text x="20.9700%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6 samples, 0.11%)</title><rect x="20.7200%" y="293" width="0.1149%" height="15" fill="rgb(230,137,11)" fg:x="1082" fg:w="6"/><text x="20.9700%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6 samples, 0.11%)</title><rect x="20.7200%" y="277" width="0.1149%" height="15" fill="rgb(212,28,1)" fg:x="1082" fg:w="6"/><text x="20.9700%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.02%)</title><rect x="20.8158%" y="261" width="0.0191%" height="15" fill="rgb(248,164,17)" fg:x="1087" fg:w="1"/><text x="21.0658%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="20.8158%" y="245" width="0.0191%" height="15" fill="rgb(222,171,42)" fg:x="1087" fg:w="1"/><text x="21.0658%" y="255.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (6 samples, 0.11%)</title><rect x="21.0264%" y="245" width="0.1149%" height="15" fill="rgb(243,84,45)" fg:x="1098" fg:w="6"/><text x="21.2764%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (3 samples, 0.06%)</title><rect x="21.0839%" y="229" width="0.0574%" height="15" fill="rgb(252,49,23)" fg:x="1101" fg:w="3"/><text x="21.3339%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.13%)</title><rect x="21.0264%" y="325" width="0.1340%" height="15" fill="rgb(215,19,7)" fg:x="1098" fg:w="7"/><text x="21.2764%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.13%)</title><rect x="21.0264%" y="309" width="0.1340%" height="15" fill="rgb(238,81,41)" fg:x="1098" fg:w="7"/><text x="21.2764%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.13%)</title><rect x="21.0264%" y="293" width="0.1340%" height="15" fill="rgb(210,199,37)" fg:x="1098" fg:w="7"/><text x="21.2764%" y="303.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (7 samples, 0.13%)</title><rect x="21.0264%" y="277" width="0.1340%" height="15" fill="rgb(244,192,49)" fg:x="1098" fg:w="7"/><text x="21.2764%" y="287.50"></text></g><g><title>core::hash::Hasher::write_usize (7 samples, 0.13%)</title><rect x="21.0264%" y="261" width="0.1340%" height="15" fill="rgb(226,211,11)" fg:x="1098" fg:w="7"/><text x="21.2764%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.02%)</title><rect x="21.1413%" y="245" width="0.0191%" height="15" fill="rgb(236,162,54)" fg:x="1104" fg:w="1"/><text x="21.3913%" y="255.50"></text></g><g><title>core::mem::swap (1 samples, 0.02%)</title><rect x="21.1988%" y="245" width="0.0191%" height="15" fill="rgb(220,229,9)" fg:x="1107" fg:w="1"/><text x="21.4488%" y="255.50"></text></g><g><title>core::mem::swap_simple (1 samples, 0.02%)</title><rect x="21.1988%" y="229" width="0.0191%" height="15" fill="rgb(250,87,22)" fg:x="1107" fg:w="1"/><text x="21.4488%" y="239.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="21.1988%" y="213" width="0.0191%" height="15" fill="rgb(239,43,17)" fg:x="1107" fg:w="1"/><text x="21.4488%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (2 samples, 0.04%)</title><rect x="21.2179%" y="213" width="0.0383%" height="15" fill="rgb(231,177,25)" fg:x="1108" fg:w="2"/><text x="21.4679%" y="223.50"></text></g><g><title>core::intrinsics::write_bytes (2 samples, 0.04%)</title><rect x="21.2179%" y="197" width="0.0383%" height="15" fill="rgb(219,179,1)" fg:x="1108" fg:w="2"/><text x="21.4679%" y="207.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="21.2179%" y="181" width="0.0383%" height="15" fill="rgb(238,219,53)" fg:x="1108" fg:w="2"/><text x="21.4679%" y="191.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="21.2945%" y="133" width="0.0191%" height="15" fill="rgb(232,167,36)" fg:x="1112" fg:w="1"/><text x="21.5445%" y="143.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="21.3137%" y="133" width="0.0191%" height="15" fill="rgb(244,19,51)" fg:x="1113" fg:w="1"/><text x="21.5637%" y="143.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (12 samples, 0.23%)</title><rect x="21.2562%" y="197" width="0.2298%" height="15" fill="rgb(224,6,22)" fg:x="1110" fg:w="12"/><text x="21.5062%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.23%)</title><rect x="21.2562%" y="181" width="0.2298%" height="15" fill="rgb(224,145,5)" fg:x="1110" fg:w="12"/><text x="21.5062%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.23%)</title><rect x="21.2562%" y="165" width="0.2298%" height="15" fill="rgb(234,130,49)" fg:x="1110" fg:w="12"/><text x="21.5062%" y="175.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.23%)</title><rect x="21.2562%" y="149" width="0.2298%" height="15" fill="rgb(254,6,2)" fg:x="1110" fg:w="12"/><text x="21.5062%" y="159.50"></text></g><g><title>malloc (8 samples, 0.15%)</title><rect x="21.3328%" y="133" width="0.1532%" height="15" fill="rgb(208,96,46)" fg:x="1114" fg:w="8"/><text x="21.5828%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (13 samples, 0.25%)</title><rect x="21.2562%" y="213" width="0.2489%" height="15" fill="rgb(239,3,39)" fg:x="1110" fg:w="13"/><text x="21.5062%" y="223.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.02%)</title><rect x="21.4860%" y="197" width="0.0191%" height="15" fill="rgb(233,210,1)" fg:x="1122" fg:w="1"/><text x="21.7360%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (19 samples, 0.36%)</title><rect x="21.1988%" y="261" width="0.3638%" height="15" fill="rgb(244,137,37)" fg:x="1107" fg:w="19"/><text x="21.4488%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (18 samples, 0.34%)</title><rect x="21.2179%" y="245" width="0.3447%" height="15" fill="rgb(240,136,2)" fg:x="1108" fg:w="18"/><text x="21.4679%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (18 samples, 0.34%)</title><rect x="21.2179%" y="229" width="0.3447%" height="15" fill="rgb(239,18,37)" fg:x="1108" fg:w="18"/><text x="21.4679%" y="239.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (3 samples, 0.06%)</title><rect x="21.5052%" y="213" width="0.0574%" height="15" fill="rgb(218,185,22)" fg:x="1123" fg:w="3"/><text x="21.7552%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (22 samples, 0.42%)</title><rect x="21.1605%" y="309" width="0.4213%" height="15" fill="rgb(225,218,4)" fg:x="1105" fg:w="22"/><text x="21.4105%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (21 samples, 0.40%)</title><rect x="21.1796%" y="293" width="0.4021%" height="15" fill="rgb(230,182,32)" fg:x="1106" fg:w="21"/><text x="21.4296%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (20 samples, 0.38%)</title><rect x="21.1988%" y="277" width="0.3830%" height="15" fill="rgb(242,56,43)" fg:x="1107" fg:w="20"/><text x="21.4488%" y="287.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.02%)</title><rect x="21.5626%" y="261" width="0.0191%" height="15" fill="rgb(233,99,24)" fg:x="1126" fg:w="1"/><text x="21.8126%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.17%)</title><rect x="21.5818%" y="293" width="0.1723%" height="15" fill="rgb(234,209,42)" fg:x="1127" fg:w="9"/><text x="21.8318%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (9 samples, 0.17%)</title><rect x="21.5818%" y="277" width="0.1723%" height="15" fill="rgb(227,7,12)" fg:x="1127" fg:w="9"/><text x="21.8318%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (2 samples, 0.04%)</title><rect x="21.7541%" y="293" width="0.0383%" height="15" fill="rgb(245,203,43)" fg:x="1136" fg:w="2"/><text x="22.0041%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="21.7733%" y="277" width="0.0191%" height="15" fill="rgb(238,205,33)" fg:x="1137" fg:w="1"/><text x="22.0233%" y="287.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (1 samples, 0.02%)</title><rect x="21.7733%" y="261" width="0.0191%" height="15" fill="rgb(231,56,7)" fg:x="1137" fg:w="1"/><text x="22.0233%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (4 samples, 0.08%)</title><rect x="21.7924%" y="293" width="0.0766%" height="15" fill="rgb(244,186,29)" fg:x="1138" fg:w="4"/><text x="22.0424%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (3 samples, 0.06%)</title><rect x="21.8116%" y="277" width="0.0574%" height="15" fill="rgb(234,111,31)" fg:x="1139" fg:w="3"/><text x="22.0616%" y="287.50"></text></g><g><title>hashbrown::raw::is_full (3 samples, 0.06%)</title><rect x="21.8116%" y="261" width="0.0574%" height="15" fill="rgb(241,149,10)" fg:x="1139" fg:w="3"/><text x="22.0616%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (10 samples, 0.19%)</title><rect x="21.8690%" y="293" width="0.1915%" height="15" fill="rgb(249,206,44)" fg:x="1142" fg:w="10"/><text x="22.1190%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (57 samples, 1.09%)</title><rect x="22.0605%" y="293" width="1.0915%" height="15" fill="rgb(251,153,30)" fg:x="1152" fg:w="57"/><text x="22.3105%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (57 samples, 1.09%)</title><rect x="22.0605%" y="277" width="1.0915%" height="15" fill="rgb(239,152,38)" fg:x="1152" fg:w="57"/><text x="22.3105%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (105 samples, 2.01%)</title><rect x="21.1605%" y="325" width="2.0107%" height="15" fill="rgb(249,139,47)" fg:x="1105" fg:w="105"/><text x="21.4105%" y="335.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (83 samples, 1.59%)</title><rect x="21.5818%" y="309" width="1.5894%" height="15" fill="rgb(244,64,35)" fg:x="1127" fg:w="83"/><text x="21.8318%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.02%)</title><rect x="23.1520%" y="293" width="0.0191%" height="15" fill="rgb(216,46,15)" fg:x="1209" fg:w="1"/><text x="23.4020%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.02%)</title><rect x="23.1520%" y="277" width="0.0191%" height="15" fill="rgb(250,74,19)" fg:x="1209" fg:w="1"/><text x="23.4020%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="23.1520%" y="261" width="0.0191%" height="15" fill="rgb(249,42,33)" fg:x="1209" fg:w="1"/><text x="23.4020%" y="271.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::define_var (260 samples, 4.98%)</title><rect x="18.2497%" y="405" width="4.9789%" height="15" fill="rgb(242,149,17)" fg:x="953" fg:w="260"/><text x="18.4997%" y="415.50">simple..</text></g><g><title>simple_lisp::interpreter::Env::insert (255 samples, 4.88%)</title><rect x="18.3455%" y="389" width="4.8832%" height="15" fill="rgb(244,29,21)" fg:x="958" fg:w="255"/><text x="18.5955%" y="399.50">simple..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (125 samples, 2.39%)</title><rect x="20.8349%" y="373" width="2.3937%" height="15" fill="rgb(220,130,37)" fg:x="1088" fg:w="125"/><text x="21.0849%" y="383.50">st..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (125 samples, 2.39%)</title><rect x="20.8349%" y="357" width="2.3937%" height="15" fill="rgb(211,67,2)" fg:x="1088" fg:w="125"/><text x="21.0849%" y="367.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (121 samples, 2.32%)</title><rect x="20.9115%" y="341" width="2.3171%" height="15" fill="rgb(235,68,52)" fg:x="1092" fg:w="121"/><text x="21.1615%" y="351.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (3 samples, 0.06%)</title><rect x="23.1712%" y="325" width="0.0574%" height="15" fill="rgb(246,142,3)" fg:x="1210" fg:w="3"/><text x="23.4212%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (3 samples, 0.06%)</title><rect x="23.1712%" y="309" width="0.0574%" height="15" fill="rgb(241,25,7)" fg:x="1210" fg:w="3"/><text x="23.4212%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 0.02%)</title><rect x="23.2095%" y="293" width="0.0191%" height="15" fill="rgb(242,119,39)" fg:x="1212" fg:w="1"/><text x="23.4595%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.02%)</title><rect x="23.2095%" y="277" width="0.0191%" height="15" fill="rgb(241,98,45)" fg:x="1212" fg:w="1"/><text x="23.4595%" y="287.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (3 samples, 0.06%)</title><rect x="24.0904%" y="389" width="0.0574%" height="15" fill="rgb(254,28,30)" fg:x="1258" fg:w="3"/><text x="24.3404%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.06%)</title><rect x="24.0904%" y="373" width="0.0574%" height="15" fill="rgb(241,142,54)" fg:x="1258" fg:w="3"/><text x="24.3404%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.06%)</title><rect x="24.0904%" y="357" width="0.0574%" height="15" fill="rgb(222,85,15)" fg:x="1258" fg:w="3"/><text x="24.3404%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.06%)</title><rect x="24.0904%" y="341" width="0.0574%" height="15" fill="rgb(210,85,47)" fg:x="1258" fg:w="3"/><text x="24.3404%" y="351.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (1 samples, 0.02%)</title><rect x="24.1478%" y="389" width="0.0191%" height="15" fill="rgb(224,206,25)" fg:x="1261" fg:w="1"/><text x="24.3978%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.02%)</title><rect x="24.1478%" y="373" width="0.0191%" height="15" fill="rgb(243,201,19)" fg:x="1261" fg:w="1"/><text x="24.3978%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (14 samples, 0.27%)</title><rect x="25.2202%" y="357" width="0.2681%" height="15" fill="rgb(236,59,4)" fg:x="1317" fg:w="14"/><text x="25.4702%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (14 samples, 0.27%)</title><rect x="25.2202%" y="341" width="0.2681%" height="15" fill="rgb(254,179,45)" fg:x="1317" fg:w="14"/><text x="25.4702%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (14 samples, 0.27%)</title><rect x="25.2202%" y="325" width="0.2681%" height="15" fill="rgb(226,14,10)" fg:x="1317" fg:w="14"/><text x="25.4702%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.04%)</title><rect x="25.4883%" y="357" width="0.0383%" height="15" fill="rgb(244,27,41)" fg:x="1331" fg:w="2"/><text x="25.7383%" y="367.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (26 samples, 0.50%)</title><rect x="25.2011%" y="373" width="0.4979%" height="15" fill="rgb(235,35,32)" fg:x="1316" fg:w="26"/><text x="25.4511%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (9 samples, 0.17%)</title><rect x="25.5266%" y="357" width="0.1723%" height="15" fill="rgb(218,68,31)" fg:x="1333" fg:w="9"/><text x="25.7766%" y="367.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (116 samples, 2.22%)</title><rect x="26.1777%" y="245" width="2.2214%" height="15" fill="rgb(207,120,37)" fg:x="1367" fg:w="116"/><text x="26.4277%" y="255.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (71 samples, 1.36%)</title><rect x="27.0394%" y="229" width="1.3596%" height="15" fill="rgb(227,98,0)" fg:x="1412" fg:w="71"/><text x="27.2894%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (126 samples, 2.41%)</title><rect x="26.1777%" y="325" width="2.4129%" height="15" fill="rgb(207,7,3)" fg:x="1367" fg:w="126"/><text x="26.4277%" y="335.50">ha..</text></g><g><title>core::hash::BuildHasher::hash_one (126 samples, 2.41%)</title><rect x="26.1777%" y="309" width="2.4129%" height="15" fill="rgb(206,98,19)" fg:x="1367" fg:w="126"/><text x="26.4277%" y="319.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (126 samples, 2.41%)</title><rect x="26.1777%" y="293" width="2.4129%" height="15" fill="rgb(217,5,26)" fg:x="1367" fg:w="126"/><text x="26.4277%" y="303.50">co..</text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (126 samples, 2.41%)</title><rect x="26.1777%" y="277" width="2.4129%" height="15" fill="rgb(235,190,38)" fg:x="1367" fg:w="126"/><text x="26.4277%" y="287.50">&lt;s..</text></g><g><title>core::hash::Hasher::write_usize (126 samples, 2.41%)</title><rect x="26.1777%" y="261" width="2.4129%" height="15" fill="rgb(247,86,24)" fg:x="1367" fg:w="126"/><text x="26.4277%" y="271.50">co..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (10 samples, 0.19%)</title><rect x="28.3991%" y="245" width="0.1915%" height="15" fill="rgb(205,101,16)" fg:x="1483" fg:w="10"/><text x="28.6491%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (6 samples, 0.11%)</title><rect x="30.2375%" y="261" width="0.1149%" height="15" fill="rgb(246,168,33)" fg:x="1579" fg:w="6"/><text x="30.4875%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.80%)</title><rect x="29.6438%" y="277" width="0.8043%" height="15" fill="rgb(231,114,1)" fg:x="1548" fg:w="42"/><text x="29.8938%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (5 samples, 0.10%)</title><rect x="30.3524%" y="261" width="0.0957%" height="15" fill="rgb(207,184,53)" fg:x="1585" fg:w="5"/><text x="30.6024%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (21 samples, 0.40%)</title><rect x="30.4481%" y="277" width="0.4021%" height="15" fill="rgb(224,95,51)" fg:x="1590" fg:w="21"/><text x="30.6981%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (21 samples, 0.40%)</title><rect x="30.4481%" y="261" width="0.4021%" height="15" fill="rgb(212,188,45)" fg:x="1590" fg:w="21"/><text x="30.6981%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (21 samples, 0.40%)</title><rect x="30.4481%" y="245" width="0.4021%" height="15" fill="rgb(223,154,38)" fg:x="1590" fg:w="21"/><text x="30.6981%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (21 samples, 0.40%)</title><rect x="30.4481%" y="229" width="0.4021%" height="15" fill="rgb(251,22,52)" fg:x="1590" fg:w="21"/><text x="30.6981%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (21 samples, 0.40%)</title><rect x="30.4481%" y="213" width="0.4021%" height="15" fill="rgb(229,209,22)" fg:x="1590" fg:w="21"/><text x="30.6981%" y="223.50"></text></g><g><title>hashbrown::raw::h2 (56 samples, 1.07%)</title><rect x="30.8502%" y="277" width="1.0724%" height="15" fill="rgb(234,138,34)" fg:x="1611" fg:w="56"/><text x="31.1002%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (19 samples, 0.36%)</title><rect x="31.9226%" y="277" width="0.3638%" height="15" fill="rgb(212,95,11)" fg:x="1667" fg:w="19"/><text x="32.1726%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (19 samples, 0.36%)</title><rect x="31.9226%" y="261" width="0.3638%" height="15" fill="rgb(240,179,47)" fg:x="1667" fg:w="19"/><text x="32.1726%" y="271.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::get_var (484 samples, 9.27%)</title><rect x="23.2286%" y="405" width="9.2685%" height="15" fill="rgb(240,163,11)" fg:x="1213" fg:w="484"/><text x="23.4786%" y="415.50">simple_lisp::..</text></g><g><title>simple_lisp::interpreter::Env::get (435 samples, 8.33%)</title><rect x="24.1670%" y="389" width="8.3301%" height="15" fill="rgb(236,37,12)" fg:x="1262" fg:w="435"/><text x="24.4170%" y="399.50">simple_lisp:..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (355 samples, 6.80%)</title><rect x="25.6990%" y="373" width="6.7982%" height="15" fill="rgb(232,164,16)" fg:x="1342" fg:w="355"/><text x="25.9490%" y="383.50">std::coll..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (355 samples, 6.80%)</title><rect x="25.6990%" y="357" width="6.7982%" height="15" fill="rgb(244,205,15)" fg:x="1342" fg:w="355"/><text x="25.9490%" y="367.50">hashbrown..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (355 samples, 6.80%)</title><rect x="25.6990%" y="341" width="6.7982%" height="15" fill="rgb(223,117,47)" fg:x="1342" fg:w="355"/><text x="25.9490%" y="351.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (204 samples, 3.91%)</title><rect x="28.5906%" y="325" width="3.9065%" height="15" fill="rgb(244,107,35)" fg:x="1493" fg:w="204"/><text x="28.8406%" y="335.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (204 samples, 3.91%)</title><rect x="28.5906%" y="309" width="3.9065%" height="15" fill="rgb(205,140,8)" fg:x="1493" fg:w="204"/><text x="28.8406%" y="319.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (204 samples, 3.91%)</title><rect x="28.5906%" y="293" width="3.9065%" height="15" fill="rgb(228,84,46)" fg:x="1493" fg:w="204"/><text x="28.8406%" y="303.50">hash..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (11 samples, 0.21%)</title><rect x="32.2865%" y="277" width="0.2106%" height="15" fill="rgb(254,188,9)" fg:x="1686" fg:w="11"/><text x="32.5365%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (11 samples, 0.21%)</title><rect x="32.2865%" y="261" width="0.2106%" height="15" fill="rgb(206,112,54)" fg:x="1686" fg:w="11"/><text x="32.5365%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (11 samples, 0.21%)</title><rect x="32.2865%" y="245" width="0.2106%" height="15" fill="rgb(216,84,49)" fg:x="1686" fg:w="11"/><text x="32.5365%" y="255.50"></text></g><g><title>cfree (2 samples, 0.04%)</title><rect x="32.4971%" y="389" width="0.0383%" height="15" fill="rgb(214,194,35)" fg:x="1697" fg:w="2"/><text x="32.7471%" y="399.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="32.5163%" y="373" width="0.0191%" height="15" fill="rgb(249,28,3)" fg:x="1698" fg:w="1"/><text x="32.7663%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (7 samples, 0.13%)</title><rect x="32.5354%" y="389" width="0.1340%" height="15" fill="rgb(222,56,52)" fg:x="1699" fg:w="7"/><text x="32.7854%" y="399.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.02%)</title><rect x="32.7461%" y="309" width="0.0191%" height="15" fill="rgb(245,217,50)" fg:x="1710" fg:w="1"/><text x="32.9961%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::Drain&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.06%)</title><rect x="32.7461%" y="357" width="0.0574%" height="15" fill="rgb(213,201,24)" fg:x="1710" fg:w="3"/><text x="32.9961%" y="367.50"></text></g><g><title>&lt;hashbrown::map::Drain&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.06%)</title><rect x="32.7461%" y="341" width="0.0574%" height="15" fill="rgb(248,116,28)" fg:x="1710" fg:w="3"/><text x="32.9961%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawDrain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.06%)</title><rect x="32.7461%" y="325" width="0.0574%" height="15" fill="rgb(219,72,43)" fg:x="1710" fg:w="3"/><text x="32.9961%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="32.7652%" y="309" width="0.0383%" height="15" fill="rgb(209,138,14)" fg:x="1711" fg:w="2"/><text x="33.0152%" y="319.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2 samples, 0.04%)</title><rect x="32.7652%" y="293" width="0.0383%" height="15" fill="rgb(222,18,33)" fg:x="1711" fg:w="2"/><text x="33.0152%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="32.7844%" y="277" width="0.0191%" height="15" fill="rgb(213,199,7)" fg:x="1712" fg:w="1"/><text x="33.0344%" y="287.50"></text></g><g><title>core::mem::drop (5 samples, 0.10%)</title><rect x="32.8035%" y="357" width="0.0957%" height="15" fill="rgb(250,110,10)" fg:x="1713" fg:w="5"/><text x="33.0535%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::ExternalData&gt; (5 samples, 0.10%)</title><rect x="32.8035%" y="341" width="0.0957%" height="15" fill="rgb(248,123,6)" fg:x="1713" fg:w="5"/><text x="33.0535%" y="351.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::ExternalData as core::ops::drop::Drop&gt;::drop (5 samples, 0.10%)</title><rect x="32.8035%" y="325" width="0.0957%" height="15" fill="rgb(206,91,31)" fg:x="1713" fg:w="5"/><text x="33.0535%" y="335.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::unset_external (5 samples, 0.10%)</title><rect x="32.8035%" y="309" width="0.0957%" height="15" fill="rgb(211,154,13)" fg:x="1713" fg:w="5"/><text x="33.0535%" y="319.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (5 samples, 0.10%)</title><rect x="32.8035%" y="293" width="0.0957%" height="15" fill="rgb(225,148,7)" fg:x="1713" fg:w="5"/><text x="33.0535%" y="303.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (5 samples, 0.10%)</title><rect x="32.8035%" y="277" width="0.0957%" height="15" fill="rgb(220,160,43)" fg:x="1713" fg:w="5"/><text x="33.0535%" y="287.50"></text></g><g><title>core::cell::BorrowRefMut::new (5 samples, 0.10%)</title><rect x="32.8035%" y="261" width="0.0957%" height="15" fill="rgb(213,52,39)" fg:x="1713" fg:w="5"/><text x="33.0535%" y="271.50"></text></g><g><title>__rust_dealloc (3 samples, 0.06%)</title><rect x="32.8993%" y="261" width="0.0574%" height="15" fill="rgb(243,137,7)" fg:x="1718" fg:w="3"/><text x="33.1493%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;misc_utils::stack::Stack&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (11 samples, 0.21%)</title><rect x="32.8993%" y="357" width="0.2106%" height="15" fill="rgb(230,79,13)" fg:x="1718" fg:w="11"/><text x="33.1493%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (11 samples, 0.21%)</title><rect x="32.8993%" y="341" width="0.2106%" height="15" fill="rgb(247,105,23)" fg:x="1718" fg:w="11"/><text x="33.1493%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (11 samples, 0.21%)</title><rect x="32.8993%" y="325" width="0.2106%" height="15" fill="rgb(223,179,41)" fg:x="1718" fg:w="11"/><text x="33.1493%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.21%)</title><rect x="32.8993%" y="309" width="0.2106%" height="15" fill="rgb(218,9,34)" fg:x="1718" fg:w="11"/><text x="33.1493%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.21%)</title><rect x="32.8993%" y="293" width="0.2106%" height="15" fill="rgb(222,106,8)" fg:x="1718" fg:w="11"/><text x="33.1493%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.21%)</title><rect x="32.8993%" y="277" width="0.2106%" height="15" fill="rgb(211,220,0)" fg:x="1718" fg:w="11"/><text x="33.1493%" y="287.50"></text></g><g><title>cfree (8 samples, 0.15%)</title><rect x="32.9567%" y="261" width="0.1532%" height="15" fill="rgb(229,52,16)" fg:x="1721" fg:w="8"/><text x="33.2067%" y="271.50"></text></g><g><title>[libc.so.6] (5 samples, 0.10%)</title><rect x="33.0142%" y="245" width="0.0957%" height="15" fill="rgb(212,155,18)" fg:x="1724" fg:w="5"/><text x="33.2642%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (34 samples, 0.65%)</title><rect x="33.1291%" y="293" width="0.6511%" height="15" fill="rgb(242,21,14)" fg:x="1730" fg:w="34"/><text x="33.3791%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.65%)</title><rect x="33.1291%" y="277" width="0.6511%" height="15" fill="rgb(222,19,48)" fg:x="1730" fg:w="34"/><text x="33.3791%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::Drain&lt;simple_lisp::interpreter::ast::Ident,misc_utils::stack::Stack&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt;&gt; (47 samples, 0.90%)</title><rect x="33.1099%" y="357" width="0.9000%" height="15" fill="rgb(232,45,27)" fg:x="1729" fg:w="47"/><text x="33.3599%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::Drain&lt;simple_lisp::interpreter::ast::Ident,misc_utils::stack::Stack&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt;&gt; (47 samples, 0.90%)</title><rect x="33.1099%" y="341" width="0.9000%" height="15" fill="rgb(249,103,42)" fg:x="1729" fg:w="47"/><text x="33.3599%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawDrain&lt;(simple_lisp::interpreter::ast::Ident,misc_utils::stack::Stack&lt;simple_lisp::interpreter::data::ExternalData&gt;)&gt;&gt; (47 samples, 0.90%)</title><rect x="33.1099%" y="325" width="0.9000%" height="15" fill="rgb(246,81,33)" fg:x="1729" fg:w="47"/><text x="33.3599%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawDrain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.90%)</title><rect x="33.1099%" y="309" width="0.9000%" height="15" fill="rgb(252,33,42)" fg:x="1729" fg:w="47"/><text x="33.3599%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::clear_no_drop (12 samples, 0.23%)</title><rect x="33.7802%" y="293" width="0.2298%" height="15" fill="rgb(209,212,41)" fg:x="1764" fg:w="12"/><text x="34.0302%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (2 samples, 0.04%)</title><rect x="33.9717%" y="277" width="0.0383%" height="15" fill="rgb(207,154,6)" fg:x="1774" fg:w="2"/><text x="34.2217%" y="287.50"></text></g><g><title>core::intrinsics::write_bytes (2 samples, 0.04%)</title><rect x="33.9717%" y="261" width="0.0383%" height="15" fill="rgb(223,64,47)" fg:x="1774" fg:w="2"/><text x="34.2217%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="33.9908%" y="245" width="0.0191%" height="15" fill="rgb(211,161,38)" fg:x="1775" fg:w="1"/><text x="34.2408%" y="255.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::pop (4 samples, 0.08%)</title><rect x="34.0100%" y="357" width="0.0766%" height="15" fill="rgb(219,138,40)" fg:x="1776" fg:w="4"/><text x="34.2600%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (4 samples, 0.08%)</title><rect x="34.0100%" y="341" width="0.0766%" height="15" fill="rgb(241,228,46)" fg:x="1776" fg:w="4"/><text x="34.2600%" y="351.50"></text></g><g><title>&lt;simple_lisp::interpreter::Env as core::ops::drop::Drop&gt;::drop (74 samples, 1.42%)</title><rect x="32.6886%" y="373" width="1.4171%" height="15" fill="rgb(223,209,38)" fg:x="1707" fg:w="74"/><text x="32.9386%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::drain (1 samples, 0.02%)</title><rect x="34.0866%" y="357" width="0.0191%" height="15" fill="rgb(236,164,45)" fg:x="1780" fg:w="1"/><text x="34.3366%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::drain (1 samples, 0.02%)</title><rect x="34.0866%" y="341" width="0.0191%" height="15" fill="rgb(231,15,5)" fg:x="1780" fg:w="1"/><text x="34.3366%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drain (1 samples, 0.02%)</title><rect x="34.0866%" y="325" width="0.0191%" height="15" fill="rgb(252,35,15)" fg:x="1780" fg:w="1"/><text x="34.3366%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drain_iter_from (1 samples, 0.02%)</title><rect x="34.0866%" y="309" width="0.0191%" height="15" fill="rgb(248,181,18)" fg:x="1780" fg:w="1"/><text x="34.3366%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::Env&gt; (77 samples, 1.47%)</title><rect x="32.6695%" y="389" width="1.4745%" height="15" fill="rgb(233,39,42)" fg:x="1706" fg:w="77"/><text x="32.9195%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;misc_utils::stack::Stack&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt;&gt; (2 samples, 0.04%)</title><rect x="34.1057%" y="373" width="0.0383%" height="15" fill="rgb(238,110,33)" fg:x="1781" fg:w="2"/><text x="34.3557%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt;&gt; (2 samples, 0.04%)</title><rect x="34.1057%" y="357" width="0.0383%" height="15" fill="rgb(233,195,10)" fg:x="1781" fg:w="2"/><text x="34.3557%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="34.1057%" y="341" width="0.0383%" height="15" fill="rgb(254,105,3)" fg:x="1781" fg:w="2"/><text x="34.3557%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;]&gt; (2 samples, 0.04%)</title><rect x="34.1057%" y="325" width="0.0383%" height="15" fill="rgb(221,225,9)" fg:x="1781" fg:w="2"/><text x="34.3557%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="34.1249%" y="309" width="0.0191%" height="15" fill="rgb(224,227,45)" fg:x="1782" fg:w="1"/><text x="34.3749%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="34.1249%" y="293" width="0.0191%" height="15" fill="rgb(229,198,43)" fg:x="1782" fg:w="1"/><text x="34.3749%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;simple_lisp::interpreter::ast::Ident,(),core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="34.1249%" y="277" width="0.0191%" height="15" fill="rgb(206,209,35)" fg:x="1782" fg:w="1"/><text x="34.3749%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(simple_lisp::interpreter::ast::Ident,())&gt;&gt; (1 samples, 0.02%)</title><rect x="34.1249%" y="261" width="0.0191%" height="15" fill="rgb(245,195,53)" fg:x="1782" fg:w="1"/><text x="34.3749%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="34.1249%" y="245" width="0.0191%" height="15" fill="rgb(240,92,26)" fg:x="1782" fg:w="1"/><text x="34.3749%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.02%)</title><rect x="34.1249%" y="229" width="0.0191%" height="15" fill="rgb(207,40,23)" fg:x="1782" fg:w="1"/><text x="34.3749%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1 samples, 0.02%)</title><rect x="34.1249%" y="213" width="0.0191%" height="15" fill="rgb(223,111,35)" fg:x="1782" fg:w="1"/><text x="34.3749%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="34.1249%" y="197" width="0.0191%" height="15" fill="rgb(229,147,28)" fg:x="1782" fg:w="1"/><text x="34.3749%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="34.1249%" y="181" width="0.0191%" height="15" fill="rgb(211,29,28)" fg:x="1782" fg:w="1"/><text x="34.3749%" y="191.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="34.1249%" y="165" width="0.0191%" height="15" fill="rgb(228,72,33)" fg:x="1782" fg:w="1"/><text x="34.3749%" y="175.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="34.1249%" y="149" width="0.0191%" height="15" fill="rgb(205,214,31)" fg:x="1782" fg:w="1"/><text x="34.3749%" y="159.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::pop (1 samples, 0.02%)</title><rect x="34.1440%" y="389" width="0.0191%" height="15" fill="rgb(224,111,15)" fg:x="1783" fg:w="1"/><text x="34.3940%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.02%)</title><rect x="34.1440%" y="373" width="0.0191%" height="15" fill="rgb(253,21,26)" fg:x="1783" fg:w="1"/><text x="34.3940%" y="383.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="34.1440%" y="357" width="0.0191%" height="15" fill="rgb(245,139,43)" fg:x="1783" fg:w="1"/><text x="34.3940%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="34.1823%" y="373" width="0.0191%" height="15" fill="rgb(252,170,7)" fg:x="1785" fg:w="1"/><text x="34.4323%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="34.1823%" y="357" width="0.0191%" height="15" fill="rgb(231,118,14)" fg:x="1785" fg:w="1"/><text x="34.4323%" y="367.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="34.1823%" y="341" width="0.0191%" height="15" fill="rgb(238,83,0)" fg:x="1785" fg:w="1"/><text x="34.4323%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="34.1823%" y="325" width="0.0191%" height="15" fill="rgb(221,39,39)" fg:x="1785" fg:w="1"/><text x="34.4323%" y="335.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::pop_env (90 samples, 1.72%)</title><rect x="32.4971%" y="405" width="1.7235%" height="15" fill="rgb(222,119,46)" fg:x="1697" fg:w="90"/><text x="32.7471%" y="415.50"></text></g><g><title>simple_lisp::interpreter::Env::var_count (3 samples, 0.06%)</title><rect x="34.1632%" y="389" width="0.0574%" height="15" fill="rgb(222,165,49)" fg:x="1784" fg:w="3"/><text x="34.4132%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::values (1 samples, 0.02%)</title><rect x="34.2015%" y="373" width="0.0191%" height="15" fill="rgb(219,113,52)" fg:x="1786" fg:w="1"/><text x="34.4515%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (1 samples, 0.02%)</title><rect x="34.2015%" y="357" width="0.0191%" height="15" fill="rgb(214,7,15)" fg:x="1786" fg:w="1"/><text x="34.4515%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (1 samples, 0.02%)</title><rect x="34.2015%" y="341" width="0.0191%" height="15" fill="rgb(235,32,4)" fg:x="1786" fg:w="1"/><text x="34.4515%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1 samples, 0.02%)</title><rect x="34.2015%" y="325" width="0.0191%" height="15" fill="rgb(238,90,54)" fg:x="1786" fg:w="1"/><text x="34.4515%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (1 samples, 0.02%)</title><rect x="34.2015%" y="309" width="0.0191%" height="15" fill="rgb(213,208,19)" fg:x="1786" fg:w="1"/><text x="34.4515%" y="319.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="34.2015%" y="293" width="0.0191%" height="15" fill="rgb(233,156,4)" fg:x="1786" fg:w="1"/><text x="34.4515%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (1 samples, 0.02%)</title><rect x="34.2015%" y="277" width="0.0191%" height="15" fill="rgb(207,194,5)" fg:x="1786" fg:w="1"/><text x="34.4515%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (1 samples, 0.02%)</title><rect x="34.2015%" y="261" width="0.0191%" height="15" fill="rgb(206,111,30)" fg:x="1786" fg:w="1"/><text x="34.4515%" y="271.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="34.2781%" y="389" width="0.0191%" height="15" fill="rgb(243,70,54)" fg:x="1790" fg:w="1"/><text x="34.5281%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="34.2781%" y="373" width="0.0191%" height="15" fill="rgb(242,28,8)" fg:x="1790" fg:w="1"/><text x="34.5281%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.02%)</title><rect x="34.2781%" y="357" width="0.0191%" height="15" fill="rgb(219,106,18)" fg:x="1790" fg:w="1"/><text x="34.5281%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="34.2781%" y="341" width="0.0191%" height="15" fill="rgb(244,222,10)" fg:x="1790" fg:w="1"/><text x="34.5281%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.04%)</title><rect x="34.2972%" y="389" width="0.0383%" height="15" fill="rgb(236,179,52)" fg:x="1791" fg:w="2"/><text x="34.5472%" y="399.50"></text></g><g><title>core::ptr::read (2 samples, 0.04%)</title><rect x="34.2972%" y="373" width="0.0383%" height="15" fill="rgb(213,23,39)" fg:x="1791" fg:w="2"/><text x="34.5472%" y="383.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::pop_from_scope (7 samples, 0.13%)</title><rect x="34.2206%" y="405" width="0.1340%" height="15" fill="rgb(238,48,10)" fg:x="1787" fg:w="7"/><text x="34.4706%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.02%)</title><rect x="34.3355%" y="389" width="0.0191%" height="15" fill="rgb(251,196,23)" fg:x="1793" fg:w="1"/><text x="34.5855%" y="399.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="34.3355%" y="373" width="0.0191%" height="15" fill="rgb(250,152,24)" fg:x="1793" fg:w="1"/><text x="34.5855%" y="383.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="34.3355%" y="357" width="0.0191%" height="15" fill="rgb(209,150,17)" fg:x="1793" fg:w="1"/><text x="34.5855%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (17 samples, 0.33%)</title><rect x="34.4121%" y="373" width="0.3255%" height="15" fill="rgb(234,202,34)" fg:x="1797" fg:w="17"/><text x="34.6621%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (17 samples, 0.33%)</title><rect x="34.4121%" y="357" width="0.3255%" height="15" fill="rgb(253,148,53)" fg:x="1797" fg:w="17"/><text x="34.6621%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (17 samples, 0.33%)</title><rect x="34.4121%" y="341" width="0.3255%" height="15" fill="rgb(218,129,16)" fg:x="1797" fg:w="17"/><text x="34.6621%" y="351.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (18 samples, 0.34%)</title><rect x="34.4121%" y="389" width="0.3447%" height="15" fill="rgb(216,85,19)" fg:x="1797" fg:w="18"/><text x="34.6621%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.02%)</title><rect x="34.7376%" y="373" width="0.0191%" height="15" fill="rgb(235,228,7)" fg:x="1814" fg:w="1"/><text x="34.9876%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.13%)</title><rect x="35.6568%" y="341" width="0.1340%" height="15" fill="rgb(245,175,0)" fg:x="1862" fg:w="7"/><text x="35.9068%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.02%)</title><rect x="35.7909%" y="341" width="0.0191%" height="15" fill="rgb(208,168,36)" fg:x="1869" fg:w="1"/><text x="36.0409%" y="351.50"></text></g><g><title>__rdl_alloc (5 samples, 0.10%)</title><rect x="36.2505%" y="325" width="0.0957%" height="15" fill="rgb(246,171,24)" fg:x="1893" fg:w="5"/><text x="36.5005%" y="335.50"></text></g><g><title>__rust_alloc (6 samples, 0.11%)</title><rect x="36.3462%" y="325" width="0.1149%" height="15" fill="rgb(215,142,24)" fg:x="1898" fg:w="6"/><text x="36.5962%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.02%)</title><rect x="36.4611%" y="325" width="0.0191%" height="15" fill="rgb(250,187,7)" fg:x="1904" fg:w="1"/><text x="36.7111%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (99 samples, 1.90%)</title><rect x="35.8100%" y="341" width="1.8958%" height="15" fill="rgb(228,66,33)" fg:x="1870" fg:w="99"/><text x="36.0600%" y="351.50">a..</text></g><g><title>malloc (64 samples, 1.23%)</title><rect x="36.4803%" y="325" width="1.2256%" height="15" fill="rgb(234,215,21)" fg:x="1905" fg:w="64"/><text x="36.7303%" y="335.50"></text></g><g><title>[libc.so.6] (32 samples, 0.61%)</title><rect x="37.0931%" y="309" width="0.6128%" height="15" fill="rgb(222,191,20)" fg:x="1937" fg:w="32"/><text x="37.3431%" y="319.50"></text></g><g><title>[libc.so.6] (8 samples, 0.15%)</title><rect x="37.5527%" y="293" width="0.1532%" height="15" fill="rgb(245,79,54)" fg:x="1961" fg:w="8"/><text x="37.8027%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.04%)</title><rect x="37.7059%" y="341" width="0.0383%" height="15" fill="rgb(240,10,37)" fg:x="1969" fg:w="2"/><text x="37.9559%" y="351.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.04%)</title><rect x="37.7059%" y="325" width="0.0383%" height="15" fill="rgb(214,192,32)" fg:x="1969" fg:w="2"/><text x="37.9559%" y="335.50"></text></g><g><title>core::cmp::max (6 samples, 0.11%)</title><rect x="37.7442%" y="341" width="0.1149%" height="15" fill="rgb(209,36,54)" fg:x="1971" fg:w="6"/><text x="37.9942%" y="351.50"></text></g><g><title>core::cmp::Ord::max (6 samples, 0.11%)</title><rect x="37.7442%" y="325" width="0.1149%" height="15" fill="rgb(220,10,11)" fg:x="1971" fg:w="6"/><text x="37.9942%" y="335.50"></text></g><g><title>core::cmp::max_by (6 samples, 0.11%)</title><rect x="37.7442%" y="309" width="0.1149%" height="15" fill="rgb(221,106,17)" fg:x="1971" fg:w="6"/><text x="37.9942%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (142 samples, 2.72%)</title><rect x="35.1972%" y="373" width="2.7193%" height="15" fill="rgb(251,142,44)" fg:x="1838" fg:w="142"/><text x="35.4472%" y="383.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (135 samples, 2.59%)</title><rect x="35.3313%" y="357" width="2.5852%" height="15" fill="rgb(238,13,15)" fg:x="1845" fg:w="135"/><text x="35.5813%" y="367.50">al..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.06%)</title><rect x="37.8591%" y="341" width="0.0574%" height="15" fill="rgb(208,107,27)" fg:x="1977" fg:w="3"/><text x="38.1091%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.06%)</title><rect x="37.8591%" y="325" width="0.0574%" height="15" fill="rgb(205,136,37)" fg:x="1977" fg:w="3"/><text x="38.1091%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (8 samples, 0.15%)</title><rect x="37.9165%" y="373" width="0.1532%" height="15" fill="rgb(250,205,27)" fg:x="1980" fg:w="8"/><text x="38.1665%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8 samples, 0.15%)</title><rect x="37.9165%" y="357" width="0.1532%" height="15" fill="rgb(210,80,43)" fg:x="1980" fg:w="8"/><text x="38.1665%" y="367.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_dr_to_scope (205 samples, 3.93%)</title><rect x="34.3547%" y="405" width="3.9257%" height="15" fill="rgb(247,160,36)" fg:x="1794" fg:w="205"/><text x="34.6047%" y="415.50">simp..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (184 samples, 3.52%)</title><rect x="34.7568%" y="389" width="3.5236%" height="15" fill="rgb(234,13,49)" fg:x="1815" fg:w="184"/><text x="35.0068%" y="399.50">all..</text></g><g><title>core::ptr::write (11 samples, 0.21%)</title><rect x="38.0697%" y="373" width="0.2106%" height="15" fill="rgb(234,122,0)" fg:x="1988" fg:w="11"/><text x="38.3197%" y="383.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_env (33 samples, 0.63%)</title><rect x="38.2804%" y="405" width="0.6319%" height="15" fill="rgb(207,146,38)" fg:x="1999" fg:w="33"/><text x="38.5304%" y="415.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (31 samples, 0.59%)</title><rect x="38.3187%" y="389" width="0.5936%" height="15" fill="rgb(207,177,25)" fg:x="2001" fg:w="31"/><text x="38.5687%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (31 samples, 0.59%)</title><rect x="38.3187%" y="373" width="0.5936%" height="15" fill="rgb(211,178,42)" fg:x="2001" fg:w="31"/><text x="38.5687%" y="383.50"></text></g><g><title>core::ptr::write (31 samples, 0.59%)</title><rect x="38.3187%" y="357" width="0.5936%" height="15" fill="rgb(230,69,54)" fg:x="2001" fg:w="31"/><text x="38.5687%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.06%)</title><rect x="38.9123%" y="373" width="0.0574%" height="15" fill="rgb(214,135,41)" fg:x="2032" fg:w="3"/><text x="39.1623%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 0.06%)</title><rect x="38.9123%" y="357" width="0.0574%" height="15" fill="rgb(237,67,25)" fg:x="2032" fg:w="3"/><text x="39.1623%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.06%)</title><rect x="38.9123%" y="341" width="0.0574%" height="15" fill="rgb(222,189,50)" fg:x="2032" fg:w="3"/><text x="39.1623%" y="351.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (4 samples, 0.08%)</title><rect x="38.9123%" y="389" width="0.0766%" height="15" fill="rgb(245,148,34)" fg:x="2032" fg:w="4"/><text x="39.1623%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.02%)</title><rect x="38.9697%" y="373" width="0.0191%" height="15" fill="rgb(222,29,6)" fg:x="2035" fg:w="1"/><text x="39.2197%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (214 samples, 4.10%)</title><rect x="39.2378%" y="293" width="4.0980%" height="15" fill="rgb(221,189,43)" fg:x="2049" fg:w="214"/><text x="39.4878%" y="303.50">&lt;all..</text></g><g><title>alloc::alloc::Global::grow_impl (214 samples, 4.10%)</title><rect x="39.2378%" y="277" width="4.0980%" height="15" fill="rgb(207,36,27)" fg:x="2049" fg:w="214"/><text x="39.4878%" y="287.50">allo..</text></g><g><title>alloc::alloc::realloc (214 samples, 4.10%)</title><rect x="39.2378%" y="261" width="4.0980%" height="15" fill="rgb(217,90,24)" fg:x="2049" fg:w="214"/><text x="39.4878%" y="271.50">allo..</text></g><g><title>realloc (214 samples, 4.10%)</title><rect x="39.2378%" y="245" width="4.0980%" height="15" fill="rgb(224,66,35)" fg:x="2049" fg:w="214"/><text x="39.4878%" y="255.50">real..</text></g><g><title>[libc.so.6] (214 samples, 4.10%)</title><rect x="39.2378%" y="229" width="4.0980%" height="15" fill="rgb(221,13,50)" fg:x="2049" fg:w="214"/><text x="39.4878%" y="239.50">[lib..</text></g><g><title>[libc.so.6] (212 samples, 4.06%)</title><rect x="39.2761%" y="213" width="4.0597%" height="15" fill="rgb(236,68,49)" fg:x="2051" fg:w="212"/><text x="39.5261%" y="223.50">[lib..</text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="43.3167%" y="197" width="0.0191%" height="15" fill="rgb(229,146,28)" fg:x="2262" fg:w="1"/><text x="43.5667%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (215 samples, 4.12%)</title><rect x="39.2378%" y="341" width="4.1172%" height="15" fill="rgb(225,31,38)" fg:x="2049" fg:w="215"/><text x="39.4878%" y="351.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (215 samples, 4.12%)</title><rect x="39.2378%" y="325" width="4.1172%" height="15" fill="rgb(250,208,3)" fg:x="2049" fg:w="215"/><text x="39.4878%" y="335.50">allo..</text></g><g><title>alloc::raw_vec::finish_grow (215 samples, 4.12%)</title><rect x="39.2378%" y="309" width="4.1172%" height="15" fill="rgb(246,54,23)" fg:x="2049" fg:w="215"/><text x="39.4878%" y="319.50">allo..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.02%)</title><rect x="43.3359%" y="293" width="0.0191%" height="15" fill="rgb(243,76,11)" fg:x="2263" fg:w="1"/><text x="43.5859%" y="303.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_env_scope (241 samples, 4.62%)</title><rect x="38.9123%" y="405" width="4.6151%" height="15" fill="rgb(245,21,50)" fg:x="2032" fg:w="241"/><text x="39.1623%" y="415.50">simpl..</text></g><g><title>simple_lisp::interpreter::Env::push_scope (237 samples, 4.54%)</title><rect x="38.9889%" y="389" width="4.5385%" height="15" fill="rgb(228,9,43)" fg:x="2036" fg:w="237"/><text x="39.2389%" y="399.50">simpl..</text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (237 samples, 4.54%)</title><rect x="38.9889%" y="373" width="4.5385%" height="15" fill="rgb(208,100,47)" fg:x="2036" fg:w="237"/><text x="39.2389%" y="383.50">misc_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (237 samples, 4.54%)</title><rect x="38.9889%" y="357" width="4.5385%" height="15" fill="rgb(232,26,8)" fg:x="2036" fg:w="237"/><text x="39.2389%" y="367.50">alloc..</text></g><g><title>core::ptr::write (9 samples, 0.17%)</title><rect x="43.3550%" y="341" width="0.1723%" height="15" fill="rgb(216,166,38)" fg:x="2264" fg:w="9"/><text x="43.6050%" y="351.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (34 samples, 0.65%)</title><rect x="44.1019%" y="261" width="0.6511%" height="15" fill="rgb(251,202,51)" fg:x="2303" fg:w="34"/><text x="44.3519%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (9 samples, 0.17%)</title><rect x="44.5806%" y="245" width="0.1723%" height="15" fill="rgb(254,216,34)" fg:x="2328" fg:w="9"/><text x="44.8306%" y="255.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (47 samples, 0.90%)</title><rect x="44.1019%" y="309" width="0.9000%" height="15" fill="rgb(251,32,27)" fg:x="2303" fg:w="47"/><text x="44.3519%" y="319.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::HashableDataRef as core::hash::Hash&gt;::hash (47 samples, 0.90%)</title><rect x="44.1019%" y="293" width="0.9000%" height="15" fill="rgb(208,127,28)" fg:x="2303" fg:w="47"/><text x="44.3519%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (47 samples, 0.90%)</title><rect x="44.1019%" y="277" width="0.9000%" height="15" fill="rgb(224,137,22)" fg:x="2303" fg:w="47"/><text x="44.3519%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (13 samples, 0.25%)</title><rect x="44.7530%" y="261" width="0.2489%" height="15" fill="rgb(254,70,32)" fg:x="2337" fg:w="13"/><text x="45.0030%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (15 samples, 0.29%)</title><rect x="45.0402%" y="277" width="0.2872%" height="15" fill="rgb(229,75,37)" fg:x="2352" fg:w="15"/><text x="45.2902%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.02%)</title><rect x="45.3466%" y="261" width="0.0191%" height="15" fill="rgb(252,64,23)" fg:x="2368" fg:w="1"/><text x="45.5966%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.11%)</title><rect x="45.3275%" y="277" width="0.1149%" height="15" fill="rgb(232,162,48)" fg:x="2367" fg:w="6"/><text x="45.5775%" y="287.50"></text></g><g><title>core::ptr::write (4 samples, 0.08%)</title><rect x="45.3658%" y="261" width="0.0766%" height="15" fill="rgb(246,160,12)" fg:x="2369" fg:w="4"/><text x="45.6158%" y="271.50"></text></g><g><title>[unknown] (4 samples, 0.08%)</title><rect x="45.3658%" y="245" width="0.0766%" height="15" fill="rgb(247,166,0)" fg:x="2369" fg:w="4"/><text x="45.6158%" y="255.50"></text></g><g><title>[unknown] (4 samples, 0.08%)</title><rect x="45.3658%" y="229" width="0.0766%" height="15" fill="rgb(249,219,21)" fg:x="2369" fg:w="4"/><text x="45.6158%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.02%)</title><rect x="45.4424%" y="213" width="0.0191%" height="15" fill="rgb(205,209,3)" fg:x="2373" fg:w="1"/><text x="45.6924%" y="223.50"></text></g><g><title>__rdl_realloc (1 samples, 0.02%)</title><rect x="45.4615%" y="149" width="0.0191%" height="15" fill="rgb(243,44,1)" fg:x="2374" fg:w="1"/><text x="45.7115%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.7488%" y="85" width="0.0191%" height="15" fill="rgb(206,159,16)" fg:x="2389" fg:w="1"/><text x="45.9988%" y="95.50"></text></g><g><title>[libc.so.6] (4 samples, 0.08%)</title><rect x="45.7296%" y="101" width="0.0766%" height="15" fill="rgb(244,77,30)" fg:x="2388" fg:w="4"/><text x="45.9796%" y="111.50"></text></g><g><title>__default_morecore (2 samples, 0.04%)</title><rect x="45.7679%" y="85" width="0.0383%" height="15" fill="rgb(218,69,12)" fg:x="2390" fg:w="2"/><text x="46.0179%" y="95.50"></text></g><g><title>__sbrk (2 samples, 0.04%)</title><rect x="45.7679%" y="69" width="0.0383%" height="15" fill="rgb(212,87,7)" fg:x="2390" fg:w="2"/><text x="46.0179%" y="79.50"></text></g><g><title>brk (1 samples, 0.02%)</title><rect x="45.7871%" y="53" width="0.0191%" height="15" fill="rgb(245,114,25)" fg:x="2391" fg:w="1"/><text x="46.0371%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="45.7871%" y="37" width="0.0191%" height="15" fill="rgb(210,61,42)" fg:x="2391" fg:w="1"/><text x="46.0371%" y="47.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (47 samples, 0.90%)</title><rect x="45.0019%" y="293" width="0.9000%" height="15" fill="rgb(211,52,33)" fg:x="2350" fg:w="47"/><text x="45.2519%" y="303.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::reserve_entries (24 samples, 0.46%)</title><rect x="45.4424%" y="277" width="0.4596%" height="15" fill="rgb(234,58,33)" fg:x="2373" fg:w="24"/><text x="45.6924%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::try_reserve_exact (24 samples, 0.46%)</title><rect x="45.4424%" y="261" width="0.4596%" height="15" fill="rgb(220,115,36)" fg:x="2373" fg:w="24"/><text x="45.6924%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (24 samples, 0.46%)</title><rect x="45.4424%" y="245" width="0.4596%" height="15" fill="rgb(243,153,54)" fg:x="2373" fg:w="24"/><text x="45.6924%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (24 samples, 0.46%)</title><rect x="45.4424%" y="229" width="0.4596%" height="15" fill="rgb(251,47,18)" fg:x="2373" fg:w="24"/><text x="45.6924%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (23 samples, 0.44%)</title><rect x="45.4615%" y="213" width="0.4404%" height="15" fill="rgb(242,102,42)" fg:x="2374" fg:w="23"/><text x="45.7115%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (23 samples, 0.44%)</title><rect x="45.4615%" y="197" width="0.4404%" height="15" fill="rgb(234,31,38)" fg:x="2374" fg:w="23"/><text x="45.7115%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (23 samples, 0.44%)</title><rect x="45.4615%" y="181" width="0.4404%" height="15" fill="rgb(221,117,51)" fg:x="2374" fg:w="23"/><text x="45.7115%" y="191.50"></text></g><g><title>alloc::alloc::realloc (23 samples, 0.44%)</title><rect x="45.4615%" y="165" width="0.4404%" height="15" fill="rgb(212,20,18)" fg:x="2374" fg:w="23"/><text x="45.7115%" y="175.50"></text></g><g><title>realloc (22 samples, 0.42%)</title><rect x="45.4807%" y="149" width="0.4213%" height="15" fill="rgb(245,133,36)" fg:x="2375" fg:w="22"/><text x="45.7307%" y="159.50"></text></g><g><title>[libc.so.6] (22 samples, 0.42%)</title><rect x="45.4807%" y="133" width="0.4213%" height="15" fill="rgb(212,6,19)" fg:x="2375" fg:w="22"/><text x="45.7307%" y="143.50"></text></g><g><title>[libc.so.6] (22 samples, 0.42%)</title><rect x="45.4807%" y="117" width="0.4213%" height="15" fill="rgb(218,1,36)" fg:x="2375" fg:w="22"/><text x="45.7307%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.10%)</title><rect x="45.8062%" y="101" width="0.0957%" height="15" fill="rgb(246,84,54)" fg:x="2392" fg:w="5"/><text x="46.0562%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="45.9020%" y="277" width="0.0191%" height="15" fill="rgb(242,110,6)" fg:x="2397" fg:w="1"/><text x="46.1520%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.02%)</title><rect x="45.9020%" y="261" width="0.0191%" height="15" fill="rgb(214,47,5)" fg:x="2397" fg:w="1"/><text x="46.1520%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="45.9020%" y="245" width="0.0191%" height="15" fill="rgb(218,159,25)" fg:x="2397" fg:w="1"/><text x="46.1520%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::inner::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="46.1509%" y="197" width="0.0191%" height="15" fill="rgb(215,211,28)" fg:x="2410" fg:w="1"/><text x="46.4009%" y="207.50"></text></g><g><title>hashbrown::raw::inner::FullBucketsIndices::next_impl (1 samples, 0.02%)</title><rect x="46.1509%" y="181" width="0.0191%" height="15" fill="rgb(238,59,32)" fg:x="2410" fg:w="1"/><text x="46.4009%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.27%)</title><rect x="46.1700%" y="197" width="0.2681%" height="15" fill="rgb(226,82,3)" fg:x="2411" fg:w="14"/><text x="46.4200%" y="207.50"></text></g><g><title>[unknown] (11 samples, 0.21%)</title><rect x="46.2275%" y="181" width="0.2106%" height="15" fill="rgb(240,164,32)" fg:x="2414" fg:w="11"/><text x="46.4775%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="46.3998%" y="165" width="0.0383%" height="15" fill="rgb(232,46,7)" fg:x="2423" fg:w="2"/><text x="46.6498%" y="175.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (2 samples, 0.04%)</title><rect x="46.4381%" y="197" width="0.0383%" height="15" fill="rgb(229,129,53)" fg:x="2425" fg:w="2"/><text x="46.6881%" y="207.50"></text></g><g><title>indexmap::map::core::get_hash::_{{closure}} (1 samples, 0.02%)</title><rect x="46.4573%" y="181" width="0.0191%" height="15" fill="rgb(234,188,29)" fg:x="2426" fg:w="1"/><text x="46.7073%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::bucket_ptr (9 samples, 0.17%)</title><rect x="46.4764%" y="197" width="0.1723%" height="15" fill="rgb(246,141,4)" fg:x="2427" fg:w="9"/><text x="46.7264%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.02%)</title><rect x="46.6296%" y="181" width="0.0191%" height="15" fill="rgb(229,23,39)" fg:x="2435" fg:w="1"/><text x="46.8796%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="46.6296%" y="165" width="0.0191%" height="15" fill="rgb(206,12,3)" fg:x="2435" fg:w="1"/><text x="46.8796%" y="175.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (14 samples, 0.27%)</title><rect x="47.8361%" y="149" width="0.2681%" height="15" fill="rgb(252,226,20)" fg:x="2498" fg:w="14"/><text x="48.0861%" y="159.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (14 samples, 0.27%)</title><rect x="47.8361%" y="133" width="0.2681%" height="15" fill="rgb(216,123,35)" fg:x="2498" fg:w="14"/><text x="48.0861%" y="143.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (51 samples, 0.98%)</title><rect x="47.4722%" y="165" width="0.9766%" height="15" fill="rgb(212,68,40)" fg:x="2479" fg:w="51"/><text x="47.7222%" y="175.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (18 samples, 0.34%)</title><rect x="48.1042%" y="149" width="0.3447%" height="15" fill="rgb(254,125,32)" fg:x="2512" fg:w="18"/><text x="48.3542%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.34%)</title><rect x="48.1042%" y="133" width="0.3447%" height="15" fill="rgb(253,97,22)" fg:x="2512" fg:w="18"/><text x="48.3542%" y="143.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (118 samples, 2.26%)</title><rect x="48.4489%" y="165" width="2.2597%" height="15" fill="rgb(241,101,14)" fg:x="2530" fg:w="118"/><text x="48.6989%" y="175.50">h..</text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot (216 samples, 4.14%)</title><rect x="46.6488%" y="181" width="4.1363%" height="15" fill="rgb(238,103,29)" fg:x="2436" fg:w="216"/><text x="46.8988%" y="191.50">hashb..</text></g><g><title>hashbrown::raw::inner::RawTableInner::probe_seq (4 samples, 0.08%)</title><rect x="50.7085%" y="165" width="0.0766%" height="15" fill="rgb(233,195,47)" fg:x="2648" fg:w="4"/><text x="50.9585%" y="175.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::prepare_insert_slot (217 samples, 4.16%)</title><rect x="46.6488%" y="197" width="4.1555%" height="15" fill="rgb(246,218,30)" fg:x="2436" fg:w="217"/><text x="46.8988%" y="207.50">hashb..</text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (1 samples, 0.02%)</title><rect x="50.7851%" y="181" width="0.0191%" height="15" fill="rgb(219,145,47)" fg:x="2652" fg:w="1"/><text x="51.0351%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (1 samples, 0.02%)</title><rect x="50.7851%" y="165" width="0.0191%" height="15" fill="rgb(243,12,26)" fg:x="2652" fg:w="1"/><text x="51.0351%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.02%)</title><rect x="50.8043%" y="165" width="0.0191%" height="15" fill="rgb(214,87,16)" fg:x="2653" fg:w="1"/><text x="51.0543%" y="175.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.02%)</title><rect x="50.8043%" y="149" width="0.0191%" height="15" fill="rgb(208,99,42)" fg:x="2653" fg:w="1"/><text x="51.0543%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="50.8043%" y="133" width="0.0191%" height="15" fill="rgb(253,99,2)" fg:x="2653" fg:w="1"/><text x="51.0543%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.8043%" y="117" width="0.0191%" height="15" fill="rgb(220,168,23)" fg:x="2653" fg:w="1"/><text x="51.0543%" y="127.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (259 samples, 4.96%)</title><rect x="45.9977%" y="261" width="4.9598%" height="15" fill="rgb(242,38,24)" fg:x="2402" fg:w="259"/><text x="46.2477%" y="271.50">hashbr..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (258 samples, 4.94%)</title><rect x="46.0169%" y="245" width="4.9406%" height="15" fill="rgb(225,182,9)" fg:x="2403" fg:w="258"/><text x="46.2669%" y="255.50">hashbr..</text></g><g><title>hashbrown::raw::inner::RawTableInner::reserve_rehash_inner (258 samples, 4.94%)</title><rect x="46.0169%" y="229" width="4.9406%" height="15" fill="rgb(243,178,37)" fg:x="2403" fg:w="258"/><text x="46.2669%" y="239.50">hashbr..</text></g><g><title>hashbrown::raw::inner::RawTableInner::resize_inner (257 samples, 4.92%)</title><rect x="46.0360%" y="213" width="4.9215%" height="15" fill="rgb(232,139,19)" fg:x="2404" fg:w="257"/><text x="46.2860%" y="223.50">hashbr..</text></g><g><title>hashbrown::raw::inner::RawTableInner::prepare_resize (8 samples, 0.15%)</title><rect x="50.8043%" y="197" width="0.1532%" height="15" fill="rgb(225,201,24)" fg:x="2653" fg:w="8"/><text x="51.0543%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fallible_with_capacity (8 samples, 0.15%)</title><rect x="50.8043%" y="181" width="0.1532%" height="15" fill="rgb(221,47,46)" fg:x="2653" fg:w="8"/><text x="51.0543%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::new_uninitialized (7 samples, 0.13%)</title><rect x="50.8234%" y="165" width="0.1340%" height="15" fill="rgb(249,23,13)" fg:x="2654" fg:w="7"/><text x="51.0734%" y="175.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (7 samples, 0.13%)</title><rect x="50.8234%" y="149" width="0.1340%" height="15" fill="rgb(219,9,5)" fg:x="2654" fg:w="7"/><text x="51.0734%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (7 samples, 0.13%)</title><rect x="50.8234%" y="133" width="0.1340%" height="15" fill="rgb(254,171,16)" fg:x="2654" fg:w="7"/><text x="51.0734%" y="143.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.13%)</title><rect x="50.8234%" y="117" width="0.1340%" height="15" fill="rgb(230,171,20)" fg:x="2654" fg:w="7"/><text x="51.0734%" y="127.50"></text></g><g><title>malloc (7 samples, 0.13%)</title><rect x="50.8234%" y="101" width="0.1340%" height="15" fill="rgb(210,71,41)" fg:x="2654" fg:w="7"/><text x="51.0734%" y="111.50"></text></g><g><title>[libc.so.6] (7 samples, 0.13%)</title><rect x="50.8234%" y="85" width="0.1340%" height="15" fill="rgb(206,173,20)" fg:x="2654" fg:w="7"/><text x="51.0734%" y="95.50"></text></g><g><title>[libc.so.6] (5 samples, 0.10%)</title><rect x="50.8617%" y="69" width="0.0957%" height="15" fill="rgb(233,88,34)" fg:x="2656" fg:w="5"/><text x="51.1117%" y="79.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (2 samples, 0.04%)</title><rect x="51.3213%" y="229" width="0.0383%" height="15" fill="rgb(223,209,46)" fg:x="2680" fg:w="2"/><text x="51.5713%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.17%)</title><rect x="51.2064%" y="245" width="0.1723%" height="15" fill="rgb(250,43,18)" fg:x="2674" fg:w="9"/><text x="51.4564%" y="255.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (1 samples, 0.02%)</title><rect x="51.3596%" y="229" width="0.0191%" height="15" fill="rgb(208,13,10)" fg:x="2682" fg:w="1"/><text x="51.6096%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (2 samples, 0.04%)</title><rect x="51.3788%" y="245" width="0.0383%" height="15" fill="rgb(212,200,36)" fg:x="2683" fg:w="2"/><text x="51.6288%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.04%)</title><rect x="51.3788%" y="229" width="0.0383%" height="15" fill="rgb(225,90,30)" fg:x="2683" fg:w="2"/><text x="51.6288%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (2 samples, 0.04%)</title><rect x="51.4171%" y="245" width="0.0383%" height="15" fill="rgb(236,182,39)" fg:x="2685" fg:w="2"/><text x="51.6671%" y="255.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (1 samples, 0.02%)</title><rect x="51.4362%" y="229" width="0.0191%" height="15" fill="rgb(212,144,35)" fg:x="2686" fg:w="1"/><text x="51.6862%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (4 samples, 0.08%)</title><rect x="51.4554%" y="245" width="0.0766%" height="15" fill="rgb(228,63,44)" fg:x="2687" fg:w="4"/><text x="51.7054%" y="255.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (3 samples, 0.06%)</title><rect x="51.4745%" y="229" width="0.0574%" height="15" fill="rgb(228,109,6)" fg:x="2688" fg:w="3"/><text x="51.7245%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (9 samples, 0.17%)</title><rect x="51.5320%" y="245" width="0.1723%" height="15" fill="rgb(238,117,24)" fg:x="2691" fg:w="9"/><text x="51.7820%" y="255.50"></text></g><g><title>hashbrown::raw::inner::h2 (11 samples, 0.21%)</title><rect x="51.7043%" y="245" width="0.2106%" height="15" fill="rgb(242,26,26)" fg:x="2700" fg:w="11"/><text x="51.9543%" y="255.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (14 samples, 0.27%)</title><rect x="51.9150%" y="245" width="0.2681%" height="15" fill="rgb(221,92,48)" fg:x="2711" fg:w="14"/><text x="52.1650%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14 samples, 0.27%)</title><rect x="51.9150%" y="229" width="0.2681%" height="15" fill="rgb(209,209,32)" fg:x="2711" fg:w="14"/><text x="52.1650%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (328 samples, 6.28%)</title><rect x="45.9211%" y="277" width="6.2811%" height="15" fill="rgb(221,70,22)" fg:x="2398" fg:w="328"/><text x="46.1711%" y="287.50">hashbrow..</text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (65 samples, 1.24%)</title><rect x="50.9575%" y="261" width="1.2447%" height="15" fill="rgb(248,145,5)" fg:x="2661" fg:w="65"/><text x="51.2075%" y="271.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (1 samples, 0.02%)</title><rect x="52.1831%" y="245" width="0.0191%" height="15" fill="rgb(226,116,26)" fg:x="2725" fg:w="1"/><text x="52.4331%" y="255.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.02%)</title><rect x="52.1831%" y="229" width="0.0191%" height="15" fill="rgb(244,5,17)" fg:x="2725" fg:w="1"/><text x="52.4331%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="52.1831%" y="213" width="0.0191%" height="15" fill="rgb(252,159,33)" fg:x="2725" fg:w="1"/><text x="52.4331%" y="223.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (1 samples, 0.02%)</title><rect x="52.2022%" y="261" width="0.0191%" height="15" fill="rgb(206,71,0)" fg:x="2726" fg:w="1"/><text x="52.4522%" y="271.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (1 samples, 0.02%)</title><rect x="52.2022%" y="245" width="0.0191%" height="15" fill="rgb(233,118,54)" fg:x="2726" fg:w="1"/><text x="52.4522%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.02%)</title><rect x="52.2022%" y="229" width="0.0191%" height="15" fill="rgb(234,83,48)" fg:x="2726" fg:w="1"/><text x="52.4522%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="52.2022%" y="213" width="0.0191%" height="15" fill="rgb(228,3,54)" fg:x="2726" fg:w="1"/><text x="52.4522%" y="223.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (452 samples, 8.66%)</title><rect x="43.6423%" y="357" width="8.6557%" height="15" fill="rgb(226,155,13)" fg:x="2279" fg:w="452"/><text x="43.8923%" y="367.50">indexmap::se..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (452 samples, 8.66%)</title><rect x="43.6423%" y="341" width="8.6557%" height="15" fill="rgb(241,28,37)" fg:x="2279" fg:w="452"/><text x="43.8923%" y="351.50">indexmap::ma..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (451 samples, 8.64%)</title><rect x="43.6614%" y="325" width="8.6365%" height="15" fill="rgb(233,93,10)" fg:x="2280" fg:w="451"/><text x="43.9114%" y="335.50">indexmap::ma..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (381 samples, 7.30%)</title><rect x="45.0019%" y="309" width="7.2961%" height="15" fill="rgb(225,113,19)" fg:x="2350" fg:w="381"/><text x="45.2519%" y="319.50">indexmap::..</text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (334 samples, 6.40%)</title><rect x="45.9020%" y="293" width="6.3960%" height="15" fill="rgb(241,2,18)" fg:x="2397" fg:w="334"/><text x="46.1520%" y="303.50">indexmap..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (5 samples, 0.10%)</title><rect x="52.2022%" y="277" width="0.0957%" height="15" fill="rgb(228,207,21)" fg:x="2726" fg:w="5"/><text x="52.4522%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (4 samples, 0.08%)</title><rect x="52.2214%" y="261" width="0.0766%" height="15" fill="rgb(213,211,35)" fg:x="2727" fg:w="4"/><text x="52.4714%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (1 samples, 0.02%)</title><rect x="52.2788%" y="245" width="0.0191%" height="15" fill="rgb(209,83,10)" fg:x="2730" fg:w="1"/><text x="52.5288%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (1 samples, 0.02%)</title><rect x="52.2788%" y="229" width="0.0191%" height="15" fill="rgb(209,164,1)" fg:x="2730" fg:w="1"/><text x="52.5288%" y="239.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (154 samples, 2.95%)</title><rect x="52.2980%" y="357" width="2.9491%" height="15" fill="rgb(213,184,43)" fg:x="2731" fg:w="154"/><text x="52.5480%" y="367.50">si..</text></g><g><title>__rdl_alloc (3 samples, 0.06%)</title><rect x="56.3194%" y="325" width="0.0574%" height="15" fill="rgb(231,61,34)" fg:x="2941" fg:w="3"/><text x="56.5694%" y="335.50"></text></g><g><title>__rust_alloc (3 samples, 0.06%)</title><rect x="56.3769%" y="325" width="0.0574%" height="15" fill="rgb(235,75,3)" fg:x="2944" fg:w="3"/><text x="56.6269%" y="335.50"></text></g><g><title>alloc::alloc::alloc (119 samples, 2.28%)</title><rect x="56.2428%" y="341" width="2.2788%" height="15" fill="rgb(220,106,47)" fg:x="2937" fg:w="119"/><text x="56.4928%" y="351.50">a..</text></g><g><title>malloc (109 samples, 2.09%)</title><rect x="56.4343%" y="325" width="2.0873%" height="15" fill="rgb(210,196,33)" fg:x="2947" fg:w="109"/><text x="56.6843%" y="335.50">m..</text></g><g><title>[libc.so.6] (101 samples, 1.93%)</title><rect x="56.5875%" y="309" width="1.9341%" height="15" fill="rgb(229,154,42)" fg:x="2955" fg:w="101"/><text x="56.8375%" y="319.50">[..</text></g><g><title>[libc.so.6] (30 samples, 0.57%)</title><rect x="57.9471%" y="293" width="0.5745%" height="15" fill="rgb(228,114,26)" fg:x="3026" fg:w="30"/><text x="58.1971%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (2 samples, 0.04%)</title><rect x="58.5216%" y="341" width="0.0383%" height="15" fill="rgb(208,144,1)" fg:x="3056" fg:w="2"/><text x="58.7716%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="58.5599%" y="341" width="0.0191%" height="15" fill="rgb(239,112,37)" fg:x="3058" fg:w="1"/><text x="58.8099%" y="351.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_to_scope (792 samples, 15.17%)</title><rect x="43.5274%" y="405" width="15.1666%" height="15" fill="rgb(210,96,50)" fg:x="2273" fg:w="792"/><text x="43.7774%" y="415.50">simple_lisp::interprete..</text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (792 samples, 15.17%)</title><rect x="43.5274%" y="389" width="15.1666%" height="15" fill="rgb(222,178,2)" fg:x="2273" fg:w="792"/><text x="43.7774%" y="399.50">simple_lisp::interprete..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (790 samples, 15.13%)</title><rect x="43.5657%" y="373" width="15.1283%" height="15" fill="rgb(226,74,18)" fg:x="2275" fg:w="790"/><text x="43.8157%" y="383.50">simple_lisp::interprete..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (180 samples, 3.45%)</title><rect x="55.2470%" y="357" width="3.4470%" height="15" fill="rgb(225,67,54)" fg:x="2885" fg:w="180"/><text x="55.4970%" y="367.50">sim..</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (6 samples, 0.11%)</title><rect x="58.5791%" y="341" width="0.1149%" height="15" fill="rgb(251,92,32)" fg:x="3059" fg:w="6"/><text x="58.8291%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6 samples, 0.11%)</title><rect x="58.5791%" y="325" width="0.1149%" height="15" fill="rgb(228,149,22)" fg:x="3059" fg:w="6"/><text x="58.8291%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6 samples, 0.11%)</title><rect x="58.5791%" y="309" width="0.1149%" height="15" fill="rgb(243,54,13)" fg:x="3059" fg:w="6"/><text x="58.8291%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (6 samples, 0.11%)</title><rect x="58.5791%" y="293" width="0.1149%" height="15" fill="rgb(243,180,28)" fg:x="3059" fg:w="6"/><text x="58.8291%" y="303.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (6 samples, 0.11%)</title><rect x="58.5791%" y="277" width="0.1149%" height="15" fill="rgb(208,167,24)" fg:x="3059" fg:w="6"/><text x="58.8291%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (6 samples, 0.11%)</title><rect x="58.5791%" y="261" width="0.1149%" height="15" fill="rgb(245,73,45)" fg:x="3059" fg:w="6"/><text x="58.8291%" y="271.50"></text></g><g><title>core::cell::BorrowRefMut::new (6 samples, 0.11%)</title><rect x="58.5791%" y="245" width="0.1149%" height="15" fill="rgb(237,203,48)" fg:x="3059" fg:w="6"/><text x="58.8291%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (4 samples, 0.08%)</title><rect x="58.9046%" y="389" width="0.0766%" height="15" fill="rgb(211,197,16)" fg:x="3076" fg:w="4"/><text x="59.1546%" y="399.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (4 samples, 0.08%)</title><rect x="58.9046%" y="373" width="0.0766%" height="15" fill="rgb(243,99,51)" fg:x="3076" fg:w="4"/><text x="59.1546%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.10%)</title><rect x="58.9812%" y="389" width="0.0957%" height="15" fill="rgb(215,123,29)" fg:x="3080" fg:w="5"/><text x="59.2312%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.10%)</title><rect x="58.9812%" y="373" width="0.0957%" height="15" fill="rgb(239,186,37)" fg:x="3080" fg:w="5"/><text x="59.2312%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (5 samples, 0.10%)</title><rect x="58.9812%" y="357" width="0.0957%" height="15" fill="rgb(252,136,39)" fg:x="3080" fg:w="5"/><text x="59.2312%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (2 samples, 0.04%)</title><rect x="59.0387%" y="341" width="0.0383%" height="15" fill="rgb(223,213,32)" fg:x="3083" fg:w="2"/><text x="59.2887%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (2 samples, 0.04%)</title><rect x="59.0387%" y="325" width="0.0383%" height="15" fill="rgb(233,115,5)" fg:x="3083" fg:w="2"/><text x="59.2887%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (4 samples, 0.08%)</title><rect x="59.0770%" y="389" width="0.0766%" height="15" fill="rgb(207,226,44)" fg:x="3085" fg:w="4"/><text x="59.3270%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.08%)</title><rect x="59.0770%" y="373" width="0.0766%" height="15" fill="rgb(208,126,0)" fg:x="3085" fg:w="4"/><text x="59.3270%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (4 samples, 0.08%)</title><rect x="59.0770%" y="357" width="0.0766%" height="15" fill="rgb(244,66,21)" fg:x="3085" fg:w="4"/><text x="59.3270%" y="367.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.08%)</title><rect x="59.0770%" y="341" width="0.0766%" height="15" fill="rgb(222,97,12)" fg:x="3085" fg:w="4"/><text x="59.3270%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (4 samples, 0.08%)</title><rect x="59.0770%" y="325" width="0.0766%" height="15" fill="rgb(219,213,19)" fg:x="3085" fg:w="4"/><text x="59.3270%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.08%)</title><rect x="59.0770%" y="309" width="0.0766%" height="15" fill="rgb(252,169,30)" fg:x="3085" fg:w="4"/><text x="59.3270%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.08%)</title><rect x="59.0770%" y="293" width="0.0766%" height="15" fill="rgb(206,32,51)" fg:x="3085" fg:w="4"/><text x="59.3270%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.08%)</title><rect x="59.0770%" y="277" width="0.0766%" height="15" fill="rgb(250,172,42)" fg:x="3085" fg:w="4"/><text x="59.3270%" y="287.50"></text></g><g><title>cfree (4 samples, 0.08%)</title><rect x="59.0770%" y="261" width="0.0766%" height="15" fill="rgb(209,34,43)" fg:x="3085" fg:w="4"/><text x="59.3270%" y="271.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="59.1153%" y="245" width="0.0383%" height="15" fill="rgb(223,11,35)" fg:x="3087" fg:w="2"/><text x="59.3653%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.02%)</title><rect x="59.1536%" y="389" width="0.0191%" height="15" fill="rgb(251,219,26)" fg:x="3089" fg:w="1"/><text x="59.4036%" y="399.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (18 samples, 0.34%)</title><rect x="59.4600%" y="261" width="0.3447%" height="15" fill="rgb(231,119,3)" fg:x="3105" fg:w="18"/><text x="59.7100%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (6 samples, 0.11%)</title><rect x="59.6898%" y="245" width="0.1149%" height="15" fill="rgb(216,97,11)" fg:x="3117" fg:w="6"/><text x="59.9398%" y="255.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (29 samples, 0.56%)</title><rect x="59.4600%" y="309" width="0.5553%" height="15" fill="rgb(223,59,9)" fg:x="3105" fg:w="29"/><text x="59.7100%" y="319.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::HashableDataRef as core::hash::Hash&gt;::hash (29 samples, 0.56%)</title><rect x="59.4600%" y="293" width="0.5553%" height="15" fill="rgb(233,93,31)" fg:x="3105" fg:w="29"/><text x="59.7100%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (29 samples, 0.56%)</title><rect x="59.4600%" y="277" width="0.5553%" height="15" fill="rgb(239,81,33)" fg:x="3105" fg:w="29"/><text x="59.7100%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (11 samples, 0.21%)</title><rect x="59.8047%" y="261" width="0.2106%" height="15" fill="rgb(213,120,34)" fg:x="3123" fg:w="11"/><text x="60.0547%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (11 samples, 0.21%)</title><rect x="60.0153%" y="277" width="0.2106%" height="15" fill="rgb(243,49,53)" fg:x="3134" fg:w="11"/><text x="60.2653%" y="287.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (12 samples, 0.23%)</title><rect x="60.0153%" y="293" width="0.2298%" height="15" fill="rgb(247,216,33)" fg:x="3134" fg:w="12"/><text x="60.2653%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="60.2260%" y="277" width="0.0191%" height="15" fill="rgb(226,26,14)" fg:x="3145" fg:w="1"/><text x="60.4760%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.04%)</title><rect x="60.2451%" y="277" width="0.0383%" height="15" fill="rgb(215,49,53)" fg:x="3146" fg:w="2"/><text x="60.4951%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.04%)</title><rect x="60.2451%" y="261" width="0.0383%" height="15" fill="rgb(245,162,40)" fg:x="3146" fg:w="2"/><text x="60.4951%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.04%)</title><rect x="60.2451%" y="245" width="0.0383%" height="15" fill="rgb(229,68,17)" fg:x="3146" fg:w="2"/><text x="60.4951%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.06%)</title><rect x="60.5132%" y="245" width="0.0574%" height="15" fill="rgb(213,182,10)" fg:x="3160" fg:w="3"/><text x="60.7632%" y="255.50"></text></g><g><title>hashbrown::raw::inner::ProbeSeq::move_next (1 samples, 0.02%)</title><rect x="60.5707%" y="245" width="0.0191%" height="15" fill="rgb(245,125,30)" fg:x="3163" fg:w="1"/><text x="60.8207%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1 samples, 0.02%)</title><rect x="60.5898%" y="245" width="0.0191%" height="15" fill="rgb(232,202,2)" fg:x="3164" fg:w="1"/><text x="60.8398%" y="255.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (1 samples, 0.02%)</title><rect x="60.5898%" y="229" width="0.0191%" height="15" fill="rgb(237,140,51)" fg:x="3164" fg:w="1"/><text x="60.8398%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (2 samples, 0.04%)</title><rect x="60.6090%" y="245" width="0.0383%" height="15" fill="rgb(236,157,25)" fg:x="3165" fg:w="2"/><text x="60.8590%" y="255.50"></text></g><g><title>hashbrown::raw::inner::h2 (6 samples, 0.11%)</title><rect x="60.6473%" y="245" width="0.1149%" height="15" fill="rgb(219,209,0)" fg:x="3167" fg:w="6"/><text x="60.8973%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (31 samples, 0.59%)</title><rect x="60.2834%" y="277" width="0.5936%" height="15" fill="rgb(240,116,54)" fg:x="3148" fg:w="31"/><text x="60.5334%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (25 samples, 0.48%)</title><rect x="60.3983%" y="261" width="0.4787%" height="15" fill="rgb(216,10,36)" fg:x="3154" fg:w="25"/><text x="60.6483%" y="271.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (6 samples, 0.11%)</title><rect x="60.7622%" y="245" width="0.1149%" height="15" fill="rgb(222,72,44)" fg:x="3173" fg:w="6"/><text x="61.0122%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.11%)</title><rect x="60.7622%" y="229" width="0.1149%" height="15" fill="rgb(232,159,9)" fg:x="3173" fg:w="6"/><text x="61.0122%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (2 samples, 0.04%)</title><rect x="60.9154%" y="245" width="0.0383%" height="15" fill="rgb(210,39,32)" fg:x="3181" fg:w="2"/><text x="61.1654%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (2 samples, 0.04%)</title><rect x="60.9154%" y="229" width="0.0383%" height="15" fill="rgb(216,194,45)" fg:x="3181" fg:w="2"/><text x="61.1654%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.04%)</title><rect x="60.9154%" y="213" width="0.0383%" height="15" fill="rgb(218,18,35)" fg:x="3181" fg:w="2"/><text x="61.1654%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (5 samples, 0.10%)</title><rect x="60.8771%" y="277" width="0.0957%" height="15" fill="rgb(207,83,51)" fg:x="3179" fg:w="5"/><text x="61.1271%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (5 samples, 0.10%)</title><rect x="60.8771%" y="261" width="0.0957%" height="15" fill="rgb(225,63,43)" fg:x="3179" fg:w="5"/><text x="61.1271%" y="271.50"></text></g><g><title>hashbrown::raw::inner::special_is_empty (1 samples, 0.02%)</title><rect x="60.9537%" y="245" width="0.0191%" height="15" fill="rgb(207,57,36)" fg:x="3183" fg:w="1"/><text x="61.2037%" y="255.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (94 samples, 1.80%)</title><rect x="59.1919%" y="357" width="1.8001%" height="15" fill="rgb(216,99,33)" fg:x="3091" fg:w="94"/><text x="59.4419%" y="367.50">i..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (94 samples, 1.80%)</title><rect x="59.1919%" y="341" width="1.8001%" height="15" fill="rgb(225,42,16)" fg:x="3091" fg:w="94"/><text x="59.4419%" y="351.50">i..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (94 samples, 1.80%)</title><rect x="59.1919%" y="325" width="1.8001%" height="15" fill="rgb(220,201,45)" fg:x="3091" fg:w="94"/><text x="59.4419%" y="335.50">i..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (51 samples, 0.98%)</title><rect x="60.0153%" y="309" width="0.9766%" height="15" fill="rgb(225,33,4)" fg:x="3134" fg:w="51"/><text x="60.2653%" y="319.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (39 samples, 0.75%)</title><rect x="60.2451%" y="293" width="0.7468%" height="15" fill="rgb(224,33,50)" fg:x="3146" fg:w="39"/><text x="60.4951%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::len (1 samples, 0.02%)</title><rect x="60.9728%" y="277" width="0.0191%" height="15" fill="rgb(246,198,51)" fg:x="3184" fg:w="1"/><text x="61.2228%" y="287.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (116 samples, 2.22%)</title><rect x="60.9920%" y="357" width="2.2214%" height="15" fill="rgb(205,22,4)" fg:x="3185" fg:w="116"/><text x="61.2420%" y="367.50">s..</text></g><g><title>__rust_alloc (2 samples, 0.04%)</title><rect x="64.2474%" y="325" width="0.0383%" height="15" fill="rgb(206,3,8)" fg:x="3355" fg:w="2"/><text x="64.4974%" y="335.50"></text></g><g><title>alloc::alloc::alloc (83 samples, 1.59%)</title><rect x="64.2474%" y="341" width="1.5894%" height="15" fill="rgb(251,23,15)" fg:x="3355" fg:w="83"/><text x="64.4974%" y="351.50"></text></g><g><title>malloc (81 samples, 1.55%)</title><rect x="64.2857%" y="325" width="1.5511%" height="15" fill="rgb(252,88,28)" fg:x="3357" fg:w="81"/><text x="64.5357%" y="335.50"></text></g><g><title>[libc.so.6] (72 samples, 1.38%)</title><rect x="64.4581%" y="309" width="1.3788%" height="15" fill="rgb(212,127,14)" fg:x="3366" fg:w="72"/><text x="64.7081%" y="319.50"></text></g><g><title>[libc.so.6] (32 samples, 0.61%)</title><rect x="65.2241%" y="293" width="0.6128%" height="15" fill="rgb(247,145,37)" fg:x="3406" fg:w="32"/><text x="65.4741%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (1 samples, 0.02%)</title><rect x="65.8368%" y="341" width="0.0191%" height="15" fill="rgb(209,117,53)" fg:x="3438" fg:w="1"/><text x="66.0868%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (3 samples, 0.06%)</title><rect x="65.8560%" y="277" width="0.0574%" height="15" fill="rgb(212,90,42)" fg:x="3439" fg:w="3"/><text x="66.1060%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (3 samples, 0.06%)</title><rect x="65.8560%" y="261" width="0.0574%" height="15" fill="rgb(218,164,37)" fg:x="3439" fg:w="3"/><text x="66.1060%" y="271.50"></text></g><g><title>core::cell::BorrowRefMut::new (3 samples, 0.06%)</title><rect x="65.8560%" y="245" width="0.0574%" height="15" fill="rgb(246,65,34)" fg:x="3439" fg:w="3"/><text x="66.1060%" y="255.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (353 samples, 6.76%)</title><rect x="59.1727%" y="389" width="6.7599%" height="15" fill="rgb(231,100,33)" fg:x="3090" fg:w="353"/><text x="59.4227%" y="399.50">simple_li..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (352 samples, 6.74%)</title><rect x="59.1919%" y="373" width="6.7407%" height="15" fill="rgb(228,126,14)" fg:x="3091" fg:w="352"/><text x="59.4419%" y="383.50">simple_li..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (142 samples, 2.72%)</title><rect x="63.2133%" y="357" width="2.7193%" height="15" fill="rgb(215,173,21)" fg:x="3301" fg:w="142"/><text x="63.4633%" y="367.50">si..</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (4 samples, 0.08%)</title><rect x="65.8560%" y="341" width="0.0766%" height="15" fill="rgb(210,6,40)" fg:x="3439" fg:w="4"/><text x="66.1060%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.08%)</title><rect x="65.8560%" y="325" width="0.0766%" height="15" fill="rgb(212,48,18)" fg:x="3439" fg:w="4"/><text x="66.1060%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.08%)</title><rect x="65.8560%" y="309" width="0.0766%" height="15" fill="rgb(230,214,11)" fg:x="3439" fg:w="4"/><text x="66.1060%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (4 samples, 0.08%)</title><rect x="65.8560%" y="293" width="0.0766%" height="15" fill="rgb(254,105,39)" fg:x="3439" fg:w="4"/><text x="66.1060%" y="303.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new::_{{closure}} (1 samples, 0.02%)</title><rect x="65.9134%" y="277" width="0.0191%" height="15" fill="rgb(245,158,5)" fg:x="3442" fg:w="1"/><text x="66.1634%" y="287.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="66.0283%" y="357" width="0.0191%" height="15" fill="rgb(249,208,11)" fg:x="3448" fg:w="1"/><text x="66.2783%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="66.0283%" y="341" width="0.0191%" height="15" fill="rgb(210,39,28)" fg:x="3448" fg:w="1"/><text x="66.2783%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.02%)</title><rect x="66.0283%" y="325" width="0.0191%" height="15" fill="rgb(211,56,53)" fg:x="3448" fg:w="1"/><text x="66.2783%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="66.0283%" y="309" width="0.0191%" height="15" fill="rgb(226,201,30)" fg:x="3448" fg:w="1"/><text x="66.2783%" y="319.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (6 samples, 0.11%)</title><rect x="66.0475%" y="357" width="0.1149%" height="15" fill="rgb(239,101,34)" fg:x="3449" fg:w="6"/><text x="66.2975%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.11%)</title><rect x="66.0475%" y="341" width="0.1149%" height="15" fill="rgb(226,209,5)" fg:x="3449" fg:w="6"/><text x="66.2975%" y="351.50"></text></g><g><title>__rdl_alloc (2 samples, 0.04%)</title><rect x="66.1624%" y="197" width="0.0383%" height="15" fill="rgb(250,105,47)" fg:x="3455" fg:w="2"/><text x="66.4124%" y="207.50"></text></g><g><title>core::ops::function::FnOnce::call_once (5 samples, 0.10%)</title><rect x="66.1624%" y="341" width="0.0957%" height="15" fill="rgb(230,72,3)" fg:x="3455" fg:w="5"/><text x="66.4124%" y="351.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::new (5 samples, 0.10%)</title><rect x="66.1624%" y="325" width="0.0957%" height="15" fill="rgb(232,218,39)" fg:x="3455" fg:w="5"/><text x="66.4124%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 0.10%)</title><rect x="66.1624%" y="309" width="0.0957%" height="15" fill="rgb(248,166,6)" fg:x="3455" fg:w="5"/><text x="66.4124%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.10%)</title><rect x="66.1624%" y="293" width="0.0957%" height="15" fill="rgb(247,89,20)" fg:x="3455" fg:w="5"/><text x="66.4124%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.10%)</title><rect x="66.1624%" y="277" width="0.0957%" height="15" fill="rgb(248,130,54)" fg:x="3455" fg:w="5"/><text x="66.4124%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.10%)</title><rect x="66.1624%" y="261" width="0.0957%" height="15" fill="rgb(234,196,4)" fg:x="3455" fg:w="5"/><text x="66.4124%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.10%)</title><rect x="66.1624%" y="245" width="0.0957%" height="15" fill="rgb(250,143,31)" fg:x="3455" fg:w="5"/><text x="66.4124%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.10%)</title><rect x="66.1624%" y="229" width="0.0957%" height="15" fill="rgb(211,110,34)" fg:x="3455" fg:w="5"/><text x="66.4124%" y="239.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.10%)</title><rect x="66.1624%" y="213" width="0.0957%" height="15" fill="rgb(215,124,48)" fg:x="3455" fg:w="5"/><text x="66.4124%" y="223.50"></text></g><g><title>malloc (3 samples, 0.06%)</title><rect x="66.2007%" y="197" width="0.0574%" height="15" fill="rgb(216,46,13)" fg:x="3457" fg:w="3"/><text x="66.4507%" y="207.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (1 samples, 0.02%)</title><rect x="66.2581%" y="341" width="0.0191%" height="15" fill="rgb(205,184,25)" fg:x="3460" fg:w="1"/><text x="66.5081%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (1 samples, 0.02%)</title><rect x="66.2581%" y="325" width="0.0191%" height="15" fill="rgb(228,1,10)" fg:x="3460" fg:w="1"/><text x="66.5081%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.04%)</title><rect x="66.4113%" y="245" width="0.0383%" height="15" fill="rgb(213,116,27)" fg:x="3468" fg:w="2"/><text x="66.6613%" y="255.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (2 samples, 0.04%)</title><rect x="66.4113%" y="229" width="0.0383%" height="15" fill="rgb(241,95,50)" fg:x="3468" fg:w="2"/><text x="66.6613%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (14 samples, 0.27%)</title><rect x="66.3730%" y="261" width="0.2681%" height="15" fill="rgb(238,48,32)" fg:x="3466" fg:w="14"/><text x="66.6230%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (10 samples, 0.19%)</title><rect x="66.4496%" y="245" width="0.1915%" height="15" fill="rgb(235,113,49)" fg:x="3470" fg:w="10"/><text x="66.6996%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (10 samples, 0.19%)</title><rect x="66.4496%" y="229" width="0.1915%" height="15" fill="rgb(205,127,43)" fg:x="3470" fg:w="10"/><text x="66.6996%" y="239.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (27 samples, 0.52%)</title><rect x="66.1624%" y="357" width="0.5170%" height="15" fill="rgb(250,162,2)" fg:x="3455" fg:w="27"/><text x="66.4124%" y="367.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (21 samples, 0.40%)</title><rect x="66.2773%" y="341" width="0.4021%" height="15" fill="rgb(220,13,41)" fg:x="3461" fg:w="21"/><text x="66.5273%" y="351.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (21 samples, 0.40%)</title><rect x="66.2773%" y="325" width="0.4021%" height="15" fill="rgb(249,221,25)" fg:x="3461" fg:w="21"/><text x="66.5273%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (21 samples, 0.40%)</title><rect x="66.2773%" y="309" width="0.4021%" height="15" fill="rgb(215,208,19)" fg:x="3461" fg:w="21"/><text x="66.5273%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (21 samples, 0.40%)</title><rect x="66.2773%" y="293" width="0.4021%" height="15" fill="rgb(236,175,2)" fg:x="3461" fg:w="21"/><text x="66.5273%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (21 samples, 0.40%)</title><rect x="66.2773%" y="277" width="0.4021%" height="15" fill="rgb(241,52,2)" fg:x="3461" fg:w="21"/><text x="66.5273%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (2 samples, 0.04%)</title><rect x="66.6411%" y="261" width="0.0383%" height="15" fill="rgb(248,140,14)" fg:x="3480" fg:w="2"/><text x="66.8911%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.02%)</title><rect x="66.6603%" y="245" width="0.0191%" height="15" fill="rgb(253,22,42)" fg:x="3481" fg:w="1"/><text x="66.9103%" y="255.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.02%)</title><rect x="66.6603%" y="229" width="0.0191%" height="15" fill="rgb(234,61,47)" fg:x="3481" fg:w="1"/><text x="66.9103%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (5 samples, 0.10%)</title><rect x="67.0816%" y="213" width="0.0957%" height="15" fill="rgb(208,226,15)" fg:x="3503" fg:w="5"/><text x="67.3316%" y="223.50"></text></g><g><title>core::intrinsics::write_bytes (5 samples, 0.10%)</title><rect x="67.0816%" y="197" width="0.0957%" height="15" fill="rgb(217,221,4)" fg:x="3503" fg:w="5"/><text x="67.3316%" y="207.50"></text></g><g><title>[libc.so.6] (4 samples, 0.08%)</title><rect x="67.1007%" y="181" width="0.0766%" height="15" fill="rgb(212,174,34)" fg:x="3504" fg:w="4"/><text x="67.3507%" y="191.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (5 samples, 0.10%)</title><rect x="67.1965%" y="197" width="0.0957%" height="15" fill="rgb(253,83,4)" fg:x="3509" fg:w="5"/><text x="67.4465%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.10%)</title><rect x="67.1965%" y="181" width="0.0957%" height="15" fill="rgb(250,195,49)" fg:x="3509" fg:w="5"/><text x="67.4465%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.10%)</title><rect x="67.1965%" y="165" width="0.0957%" height="15" fill="rgb(241,192,25)" fg:x="3509" fg:w="5"/><text x="67.4465%" y="175.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.10%)</title><rect x="67.1965%" y="149" width="0.0957%" height="15" fill="rgb(208,124,10)" fg:x="3509" fg:w="5"/><text x="67.4465%" y="159.50"></text></g><g><title>malloc (5 samples, 0.10%)</title><rect x="67.1965%" y="133" width="0.0957%" height="15" fill="rgb(222,33,0)" fg:x="3509" fg:w="5"/><text x="67.4465%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (7 samples, 0.13%)</title><rect x="67.1773%" y="213" width="0.1340%" height="15" fill="rgb(234,209,28)" fg:x="3508" fg:w="7"/><text x="67.4273%" y="223.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.02%)</title><rect x="67.2922%" y="197" width="0.0191%" height="15" fill="rgb(224,11,23)" fg:x="3514" fg:w="1"/><text x="67.5422%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (15 samples, 0.29%)</title><rect x="67.0433%" y="325" width="0.2872%" height="15" fill="rgb(232,99,1)" fg:x="3501" fg:w="15"/><text x="67.2933%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (15 samples, 0.29%)</title><rect x="67.0433%" y="309" width="0.2872%" height="15" fill="rgb(237,95,45)" fg:x="3501" fg:w="15"/><text x="67.2933%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.29%)</title><rect x="67.0433%" y="293" width="0.2872%" height="15" fill="rgb(208,109,11)" fg:x="3501" fg:w="15"/><text x="67.2933%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (13 samples, 0.25%)</title><rect x="67.0816%" y="277" width="0.2489%" height="15" fill="rgb(216,190,48)" fg:x="3503" fg:w="13"/><text x="67.3316%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (13 samples, 0.25%)</title><rect x="67.0816%" y="261" width="0.2489%" height="15" fill="rgb(251,171,36)" fg:x="3503" fg:w="13"/><text x="67.3316%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (13 samples, 0.25%)</title><rect x="67.0816%" y="245" width="0.2489%" height="15" fill="rgb(230,62,22)" fg:x="3503" fg:w="13"/><text x="67.3316%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (13 samples, 0.25%)</title><rect x="67.0816%" y="229" width="0.2489%" height="15" fill="rgb(225,114,35)" fg:x="3503" fg:w="13"/><text x="67.3316%" y="239.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (1 samples, 0.02%)</title><rect x="67.3114%" y="213" width="0.0191%" height="15" fill="rgb(215,118,42)" fg:x="3515" fg:w="1"/><text x="67.5614%" y="223.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (9 samples, 0.17%)</title><rect x="67.3305%" y="245" width="0.1723%" height="15" fill="rgb(243,119,21)" fg:x="3516" fg:w="9"/><text x="67.5805%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.02%)</title><rect x="67.4837%" y="229" width="0.0191%" height="15" fill="rgb(252,177,53)" fg:x="3524" fg:w="1"/><text x="67.7337%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 0.27%)</title><rect x="67.3305%" y="325" width="0.2681%" height="15" fill="rgb(237,209,29)" fg:x="3516" fg:w="14"/><text x="67.5805%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.27%)</title><rect x="67.3305%" y="309" width="0.2681%" height="15" fill="rgb(212,65,23)" fg:x="3516" fg:w="14"/><text x="67.5805%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (14 samples, 0.27%)</title><rect x="67.3305%" y="293" width="0.2681%" height="15" fill="rgb(230,222,46)" fg:x="3516" fg:w="14"/><text x="67.5805%" y="303.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (14 samples, 0.27%)</title><rect x="67.3305%" y="277" width="0.2681%" height="15" fill="rgb(215,135,32)" fg:x="3516" fg:w="14"/><text x="67.5805%" y="287.50"></text></g><g><title>core::hash::Hasher::write_usize (14 samples, 0.27%)</title><rect x="67.3305%" y="261" width="0.2681%" height="15" fill="rgb(246,101,22)" fg:x="3516" fg:w="14"/><text x="67.5805%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (5 samples, 0.10%)</title><rect x="67.5029%" y="245" width="0.0957%" height="15" fill="rgb(206,107,13)" fg:x="3525" fg:w="5"/><text x="67.7529%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="67.6369%" y="293" width="0.0383%" height="15" fill="rgb(250,100,44)" fg:x="3532" fg:w="2"/><text x="67.8869%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.02%)</title><rect x="67.6561%" y="277" width="0.0191%" height="15" fill="rgb(231,147,38)" fg:x="3533" fg:w="1"/><text x="67.9061%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.02%)</title><rect x="67.6752%" y="293" width="0.0191%" height="15" fill="rgb(229,8,40)" fg:x="3534" fg:w="1"/><text x="67.9252%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="67.6752%" y="277" width="0.0191%" height="15" fill="rgb(221,135,30)" fg:x="3534" fg:w="1"/><text x="67.9252%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.02%)</title><rect x="67.6752%" y="261" width="0.0191%" height="15" fill="rgb(249,193,18)" fg:x="3534" fg:w="1"/><text x="67.9252%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.02%)</title><rect x="67.6752%" y="245" width="0.0191%" height="15" fill="rgb(209,133,39)" fg:x="3534" fg:w="1"/><text x="67.9252%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="67.6752%" y="229" width="0.0191%" height="15" fill="rgb(232,100,14)" fg:x="3534" fg:w="1"/><text x="67.9252%" y="239.50"></text></g><g><title>hashbrown::raw::h2 (4 samples, 0.08%)</title><rect x="67.6944%" y="293" width="0.0766%" height="15" fill="rgb(224,185,1)" fg:x="3535" fg:w="4"/><text x="67.9444%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (56 samples, 1.07%)</title><rect x="66.7560%" y="341" width="1.0724%" height="15" fill="rgb(223,139,8)" fg:x="3486" fg:w="56"/><text x="67.0060%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (12 samples, 0.23%)</title><rect x="67.5986%" y="325" width="0.2298%" height="15" fill="rgb(232,213,38)" fg:x="3530" fg:w="12"/><text x="67.8486%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (12 samples, 0.23%)</title><rect x="67.5986%" y="309" width="0.2298%" height="15" fill="rgb(207,94,22)" fg:x="3530" fg:w="12"/><text x="67.8486%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (3 samples, 0.06%)</title><rect x="67.7710%" y="293" width="0.0574%" height="15" fill="rgb(219,183,54)" fg:x="3539" fg:w="3"/><text x="68.0210%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.06%)</title><rect x="67.7710%" y="277" width="0.0574%" height="15" fill="rgb(216,185,54)" fg:x="3539" fg:w="3"/><text x="68.0210%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.06%)</title><rect x="67.7710%" y="261" width="0.0574%" height="15" fill="rgb(254,217,39)" fg:x="3539" fg:w="3"/><text x="68.0210%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (64 samples, 1.23%)</title><rect x="66.6794%" y="357" width="1.2256%" height="15" fill="rgb(240,178,23)" fg:x="3482" fg:w="64"/><text x="66.9294%" y="367.50"></text></g><g><title>std::collections::hash::map::map_entry (4 samples, 0.08%)</title><rect x="67.8284%" y="341" width="0.0766%" height="15" fill="rgb(218,11,47)" fg:x="3542" fg:w="4"/><text x="68.0784%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.06%)</title><rect x="67.9050%" y="293" width="0.0574%" height="15" fill="rgb(218,51,51)" fg:x="3546" fg:w="3"/><text x="68.1550%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.06%)</title><rect x="67.9050%" y="277" width="0.0574%" height="15" fill="rgb(238,126,27)" fg:x="3546" fg:w="3"/><text x="68.1550%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.06%)</title><rect x="67.9050%" y="261" width="0.0574%" height="15" fill="rgb(249,202,22)" fg:x="3546" fg:w="3"/><text x="68.1550%" y="271.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (3 samples, 0.06%)</title><rect x="67.9050%" y="245" width="0.0574%" height="15" fill="rgb(254,195,49)" fg:x="3546" fg:w="3"/><text x="68.1550%" y="255.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.06%)</title><rect x="67.9050%" y="229" width="0.0574%" height="15" fill="rgb(208,123,14)" fg:x="3546" fg:w="3"/><text x="68.1550%" y="239.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="67.9050%" y="213" width="0.0574%" height="15" fill="rgb(224,200,8)" fg:x="3546" fg:w="3"/><text x="68.1550%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (3 samples, 0.06%)</title><rect x="67.9050%" y="197" width="0.0574%" height="15" fill="rgb(217,61,36)" fg:x="3546" fg:w="3"/><text x="68.1550%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.44%)</title><rect x="68.0199%" y="245" width="0.4404%" height="15" fill="rgb(206,35,45)" fg:x="3552" fg:w="23"/><text x="68.2699%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="68.4412%" y="229" width="0.0191%" height="15" fill="rgb(217,65,33)" fg:x="3574" fg:w="1"/><text x="68.6912%" y="239.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.06%)</title><rect x="68.4604%" y="245" width="0.0574%" height="15" fill="rgb(222,158,48)" fg:x="3575" fg:w="3"/><text x="68.7104%" y="255.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (46 samples, 0.88%)</title><rect x="67.9050%" y="357" width="0.8809%" height="15" fill="rgb(254,2,54)" fg:x="3546" fg:w="46"/><text x="68.1550%" y="367.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (46 samples, 0.88%)</title><rect x="67.9050%" y="341" width="0.8809%" height="15" fill="rgb(250,143,38)" fg:x="3546" fg:w="46"/><text x="68.1550%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (46 samples, 0.88%)</title><rect x="67.9050%" y="325" width="0.8809%" height="15" fill="rgb(248,25,0)" fg:x="3546" fg:w="46"/><text x="68.1550%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (46 samples, 0.88%)</title><rect x="67.9050%" y="309" width="0.8809%" height="15" fill="rgb(206,152,27)" fg:x="3546" fg:w="46"/><text x="68.1550%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (43 samples, 0.82%)</title><rect x="67.9625%" y="293" width="0.8234%" height="15" fill="rgb(240,77,30)" fg:x="3549" fg:w="43"/><text x="68.2125%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (43 samples, 0.82%)</title><rect x="67.9625%" y="277" width="0.8234%" height="15" fill="rgb(231,5,3)" fg:x="3549" fg:w="43"/><text x="68.2125%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (43 samples, 0.82%)</title><rect x="67.9625%" y="261" width="0.8234%" height="15" fill="rgb(207,226,32)" fg:x="3549" fg:w="43"/><text x="68.2125%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (14 samples, 0.27%)</title><rect x="68.5178%" y="245" width="0.2681%" height="15" fill="rgb(222,207,47)" fg:x="3578" fg:w="14"/><text x="68.7678%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14 samples, 0.27%)</title><rect x="68.5178%" y="229" width="0.2681%" height="15" fill="rgb(229,115,45)" fg:x="3578" fg:w="14"/><text x="68.7678%" y="239.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (5 samples, 0.10%)</title><rect x="68.8242%" y="229" width="0.0957%" height="15" fill="rgb(224,191,6)" fg:x="3594" fg:w="5"/><text x="69.0742%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.02%)</title><rect x="68.9008%" y="213" width="0.0191%" height="15" fill="rgb(230,227,24)" fg:x="3598" fg:w="1"/><text x="69.1508%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.11%)</title><rect x="68.8242%" y="309" width="0.1149%" height="15" fill="rgb(228,80,19)" fg:x="3594" fg:w="6"/><text x="69.0742%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.11%)</title><rect x="68.8242%" y="293" width="0.1149%" height="15" fill="rgb(247,229,0)" fg:x="3594" fg:w="6"/><text x="69.0742%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.11%)</title><rect x="68.8242%" y="277" width="0.1149%" height="15" fill="rgb(237,194,15)" fg:x="3594" fg:w="6"/><text x="69.0742%" y="287.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (6 samples, 0.11%)</title><rect x="68.8242%" y="261" width="0.1149%" height="15" fill="rgb(219,203,20)" fg:x="3594" fg:w="6"/><text x="69.0742%" y="271.50"></text></g><g><title>core::hash::Hasher::write_usize (6 samples, 0.11%)</title><rect x="68.8242%" y="245" width="0.1149%" height="15" fill="rgb(234,128,8)" fg:x="3594" fg:w="6"/><text x="69.0742%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.02%)</title><rect x="68.9200%" y="229" width="0.0191%" height="15" fill="rgb(248,202,8)" fg:x="3599" fg:w="1"/><text x="69.1700%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.06%)</title><rect x="69.0157%" y="245" width="0.0574%" height="15" fill="rgb(206,104,37)" fg:x="3604" fg:w="3"/><text x="69.2657%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.06%)</title><rect x="69.0157%" y="229" width="0.0574%" height="15" fill="rgb(223,8,27)" fg:x="3604" fg:w="3"/><text x="69.2657%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="69.0732%" y="229" width="0.0191%" height="15" fill="rgb(216,217,28)" fg:x="3607" fg:w="1"/><text x="69.3232%" y="239.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (1 samples, 0.02%)</title><rect x="69.0732%" y="213" width="0.0191%" height="15" fill="rgb(249,199,1)" fg:x="3607" fg:w="1"/><text x="69.3232%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="69.0732%" y="197" width="0.0191%" height="15" fill="rgb(240,85,17)" fg:x="3607" fg:w="1"/><text x="69.3232%" y="207.50"></text></g><g><title>core::mem::swap (3 samples, 0.06%)</title><rect x="69.0923%" y="229" width="0.0574%" height="15" fill="rgb(206,108,45)" fg:x="3608" fg:w="3"/><text x="69.3423%" y="239.50"></text></g><g><title>core::mem::swap_simple (3 samples, 0.06%)</title><rect x="69.0923%" y="213" width="0.0574%" height="15" fill="rgb(245,210,41)" fg:x="3608" fg:w="3"/><text x="69.3423%" y="223.50"></text></g><g><title>core::ptr::read (3 samples, 0.06%)</title><rect x="69.0923%" y="197" width="0.0574%" height="15" fill="rgb(206,13,37)" fg:x="3608" fg:w="3"/><text x="69.3423%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="69.1498%" y="229" width="0.0191%" height="15" fill="rgb(250,61,18)" fg:x="3611" fg:w="1"/><text x="69.3998%" y="239.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="69.1498%" y="213" width="0.0191%" height="15" fill="rgb(235,172,48)" fg:x="3611" fg:w="1"/><text x="69.3998%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (1 samples, 0.02%)</title><rect x="69.1498%" y="197" width="0.0191%" height="15" fill="rgb(249,201,17)" fg:x="3611" fg:w="1"/><text x="69.3998%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (1 samples, 0.02%)</title><rect x="69.1689%" y="229" width="0.0191%" height="15" fill="rgb(219,208,6)" fg:x="3612" fg:w="1"/><text x="69.4189%" y="239.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (1 samples, 0.02%)</title><rect x="69.1689%" y="213" width="0.0191%" height="15" fill="rgb(248,31,23)" fg:x="3612" fg:w="1"/><text x="69.4189%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.02%)</title><rect x="69.1689%" y="197" width="0.0191%" height="15" fill="rgb(245,15,42)" fg:x="3612" fg:w="1"/><text x="69.4189%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="69.1689%" y="181" width="0.0191%" height="15" fill="rgb(222,217,39)" fg:x="3612" fg:w="1"/><text x="69.4189%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.02%)</title><rect x="69.1689%" y="165" width="0.0191%" height="15" fill="rgb(210,219,27)" fg:x="3612" fg:w="1"/><text x="69.4189%" y="175.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="69.1689%" y="149" width="0.0191%" height="15" fill="rgb(252,166,36)" fg:x="3612" fg:w="1"/><text x="69.4189%" y="159.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.02%)</title><rect x="69.1689%" y="133" width="0.0191%" height="15" fill="rgb(245,132,34)" fg:x="3612" fg:w="1"/><text x="69.4189%" y="143.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="69.1689%" y="117" width="0.0191%" height="15" fill="rgb(236,54,3)" fg:x="3612" fg:w="1"/><text x="69.4189%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.02%)</title><rect x="69.1689%" y="101" width="0.0191%" height="15" fill="rgb(241,173,43)" fg:x="3612" fg:w="1"/><text x="69.4189%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner::full_buckets_indices (1 samples, 0.02%)</title><rect x="69.1881%" y="229" width="0.0191%" height="15" fill="rgb(215,190,9)" fg:x="3613" fg:w="1"/><text x="69.4381%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (1 samples, 0.02%)</title><rect x="69.1881%" y="213" width="0.0191%" height="15" fill="rgb(242,101,16)" fg:x="3613" fg:w="1"/><text x="69.4381%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (1 samples, 0.02%)</title><rect x="69.1881%" y="197" width="0.0191%" height="15" fill="rgb(223,190,21)" fg:x="3613" fg:w="1"/><text x="69.4381%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.02%)</title><rect x="69.2072%" y="229" width="0.0191%" height="15" fill="rgb(215,228,25)" fg:x="3614" fg:w="1"/><text x="69.4572%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.02%)</title><rect x="69.2072%" y="213" width="0.0191%" height="15" fill="rgb(225,36,22)" fg:x="3614" fg:w="1"/><text x="69.4572%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.02%)</title><rect x="69.2072%" y="197" width="0.0191%" height="15" fill="rgb(251,106,46)" fg:x="3614" fg:w="1"/><text x="69.4572%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (7 samples, 0.13%)</title><rect x="69.2264%" y="197" width="0.1340%" height="15" fill="rgb(208,90,1)" fg:x="3615" fg:w="7"/><text x="69.4764%" y="207.50"></text></g><g><title>core::intrinsics::write_bytes (7 samples, 0.13%)</title><rect x="69.2264%" y="181" width="0.1340%" height="15" fill="rgb(243,10,4)" fg:x="3615" fg:w="7"/><text x="69.4764%" y="191.50"></text></g><g><title>[libc.so.6] (5 samples, 0.10%)</title><rect x="69.2646%" y="165" width="0.0957%" height="15" fill="rgb(212,137,27)" fg:x="3617" fg:w="5"/><text x="69.5146%" y="175.50"></text></g><g><title>__rdl_alloc (2 samples, 0.04%)</title><rect x="69.3604%" y="117" width="0.0383%" height="15" fill="rgb(231,220,49)" fg:x="3622" fg:w="2"/><text x="69.6104%" y="127.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="69.3987%" y="117" width="0.0191%" height="15" fill="rgb(237,96,20)" fg:x="3624" fg:w="1"/><text x="69.6487%" y="127.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (13 samples, 0.25%)</title><rect x="69.3604%" y="181" width="0.2489%" height="15" fill="rgb(239,229,30)" fg:x="3622" fg:w="13"/><text x="69.6104%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.25%)</title><rect x="69.3604%" y="165" width="0.2489%" height="15" fill="rgb(219,65,33)" fg:x="3622" fg:w="13"/><text x="69.6104%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.25%)</title><rect x="69.3604%" y="149" width="0.2489%" height="15" fill="rgb(243,134,7)" fg:x="3622" fg:w="13"/><text x="69.6104%" y="159.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.25%)</title><rect x="69.3604%" y="133" width="0.2489%" height="15" fill="rgb(216,177,54)" fg:x="3622" fg:w="13"/><text x="69.6104%" y="143.50"></text></g><g><title>malloc (10 samples, 0.19%)</title><rect x="69.4178%" y="117" width="0.1915%" height="15" fill="rgb(211,160,20)" fg:x="3625" fg:w="10"/><text x="69.6678%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (36 samples, 0.69%)</title><rect x="68.9583%" y="293" width="0.6894%" height="15" fill="rgb(239,85,39)" fg:x="3601" fg:w="36"/><text x="69.2083%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (36 samples, 0.69%)</title><rect x="68.9583%" y="277" width="0.6894%" height="15" fill="rgb(232,125,22)" fg:x="3601" fg:w="36"/><text x="69.2083%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (36 samples, 0.69%)</title><rect x="68.9583%" y="261" width="0.6894%" height="15" fill="rgb(244,57,34)" fg:x="3601" fg:w="36"/><text x="69.2083%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (30 samples, 0.57%)</title><rect x="69.0732%" y="245" width="0.5745%" height="15" fill="rgb(214,203,32)" fg:x="3607" fg:w="30"/><text x="69.3232%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (22 samples, 0.42%)</title><rect x="69.2264%" y="229" width="0.4213%" height="15" fill="rgb(207,58,43)" fg:x="3615" fg:w="22"/><text x="69.4764%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (22 samples, 0.42%)</title><rect x="69.2264%" y="213" width="0.4213%" height="15" fill="rgb(215,193,15)" fg:x="3615" fg:w="22"/><text x="69.4764%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (15 samples, 0.29%)</title><rect x="69.3604%" y="197" width="0.2872%" height="15" fill="rgb(232,15,44)" fg:x="3622" fg:w="15"/><text x="69.6104%" y="207.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (2 samples, 0.04%)</title><rect x="69.6093%" y="181" width="0.0383%" height="15" fill="rgb(212,3,48)" fg:x="3635" fg:w="2"/><text x="69.8593%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.21%)</title><rect x="69.6476%" y="277" width="0.2106%" height="15" fill="rgb(218,128,7)" fg:x="3637" fg:w="11"/><text x="69.8976%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (11 samples, 0.21%)</title><rect x="69.6476%" y="261" width="0.2106%" height="15" fill="rgb(226,216,39)" fg:x="3637" fg:w="11"/><text x="69.8976%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (4 samples, 0.08%)</title><rect x="69.8583%" y="277" width="0.0766%" height="15" fill="rgb(243,47,51)" fg:x="3648" fg:w="4"/><text x="70.1083%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (4 samples, 0.08%)</title><rect x="69.8583%" y="261" width="0.0766%" height="15" fill="rgb(241,183,40)" fg:x="3648" fg:w="4"/><text x="70.1083%" y="271.50"></text></g><g><title>hashbrown::raw::is_full (4 samples, 0.08%)</title><rect x="69.8583%" y="245" width="0.0766%" height="15" fill="rgb(231,217,32)" fg:x="3648" fg:w="4"/><text x="70.1083%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (4 samples, 0.08%)</title><rect x="69.9349%" y="277" width="0.0766%" height="15" fill="rgb(229,61,38)" fg:x="3652" fg:w="4"/><text x="70.1849%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (137 samples, 2.62%)</title><rect x="68.9391%" y="309" width="2.6235%" height="15" fill="rgb(225,210,5)" fg:x="3600" fg:w="137"/><text x="69.1891%" y="319.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (100 samples, 1.91%)</title><rect x="69.6476%" y="293" width="1.9150%" height="15" fill="rgb(231,79,45)" fg:x="3637" fg:w="100"/><text x="69.8976%" y="303.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (81 samples, 1.55%)</title><rect x="70.0115%" y="277" width="1.5511%" height="15" fill="rgb(224,100,7)" fg:x="3656" fg:w="81"/><text x="70.2615%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (81 samples, 1.55%)</title><rect x="70.0115%" y="261" width="1.5511%" height="15" fill="rgb(241,198,18)" fg:x="3656" fg:w="81"/><text x="70.2615%" y="271.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::set_func_args (673 samples, 12.89%)</title><rect x="58.6940%" y="405" width="12.8878%" height="15" fill="rgb(252,97,53)" fg:x="3065" fg:w="673"/><text x="58.9440%" y="415.50">simple_lisp::interp..</text></g><g><title>simple_lisp::interpreter::Interpreter::define_var (295 samples, 5.65%)</title><rect x="65.9326%" y="389" width="5.6492%" height="15" fill="rgb(220,88,7)" fg:x="3443" fg:w="295"/><text x="66.1826%" y="399.50">simple_..</text></g><g><title>simple_lisp::interpreter::Env::insert (290 samples, 5.55%)</title><rect x="66.0283%" y="373" width="5.5534%" height="15" fill="rgb(213,176,14)" fg:x="3448" fg:w="290"/><text x="66.2783%" y="383.50">simple_..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (146 samples, 2.80%)</title><rect x="68.7859%" y="357" width="2.7959%" height="15" fill="rgb(246,73,7)" fg:x="3592" fg:w="146"/><text x="69.0359%" y="367.50">st..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (146 samples, 2.80%)</title><rect x="68.7859%" y="341" width="2.7959%" height="15" fill="rgb(245,64,36)" fg:x="3592" fg:w="146"/><text x="69.0359%" y="351.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (144 samples, 2.76%)</title><rect x="68.8242%" y="325" width="2.7576%" height="15" fill="rgb(245,80,10)" fg:x="3594" fg:w="144"/><text x="69.0742%" y="335.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.02%)</title><rect x="71.5626%" y="309" width="0.0191%" height="15" fill="rgb(232,107,50)" fg:x="3737" fg:w="1"/><text x="71.8126%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (1 samples, 0.02%)</title><rect x="71.5626%" y="293" width="0.0191%" height="15" fill="rgb(253,3,0)" fg:x="3737" fg:w="1"/><text x="71.8126%" y="303.50"></text></g><g><title>simple_lisp::interpreter::ScopeItem::last (2 samples, 0.04%)</title><rect x="71.5818%" y="405" width="0.0383%" height="15" fill="rgb(212,99,53)" fg:x="3738" fg:w="2"/><text x="71.8318%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.02%)</title><rect x="71.6009%" y="389" width="0.0191%" height="15" fill="rgb(249,111,54)" fg:x="3739" fg:w="1"/><text x="71.8509%" y="399.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="71.6009%" y="373" width="0.0191%" height="15" fill="rgb(249,55,30)" fg:x="3739" fg:w="1"/><text x="71.8509%" y="383.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="71.6009%" y="357" width="0.0191%" height="15" fill="rgb(237,47,42)" fg:x="3739" fg:w="1"/><text x="71.8509%" y="367.50"></text></g><g><title>simple_lisp::interpreter::ast::FnSignature::match_arg_count (7 samples, 0.13%)</title><rect x="71.6201%" y="405" width="0.1340%" height="15" fill="rgb(211,20,18)" fg:x="3740" fg:w="7"/><text x="71.8701%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (11 samples, 0.21%)</title><rect x="71.7541%" y="389" width="0.2106%" height="15" fill="rgb(231,203,46)" fg:x="3747" fg:w="11"/><text x="72.0041%" y="399.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as indexmap::Entries&gt;::as_entries (5 samples, 0.10%)</title><rect x="72.0031%" y="357" width="0.0957%" height="15" fill="rgb(237,142,3)" fg:x="3760" fg:w="5"/><text x="72.2531%" y="367.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as indexmap::Entries&gt;::as_entries (5 samples, 0.10%)</title><rect x="72.0031%" y="341" width="0.0957%" height="15" fill="rgb(241,107,1)" fg:x="3760" fg:w="5"/><text x="72.2531%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.10%)</title><rect x="72.0031%" y="325" width="0.0957%" height="15" fill="rgb(229,83,13)" fg:x="3760" fg:w="5"/><text x="72.2531%" y="335.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (35 samples, 0.67%)</title><rect x="72.0988%" y="309" width="0.6702%" height="15" fill="rgb(241,91,40)" fg:x="3765" fg:w="35"/><text x="72.3488%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (17 samples, 0.33%)</title><rect x="72.4435%" y="293" width="0.3255%" height="15" fill="rgb(225,3,45)" fg:x="3783" fg:w="17"/><text x="72.6935%" y="303.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (45 samples, 0.86%)</title><rect x="72.0988%" y="357" width="0.8617%" height="15" fill="rgb(244,223,14)" fg:x="3765" fg:w="45"/><text x="72.3488%" y="367.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::InstructionId as core::hash::Hash&gt;::hash (45 samples, 0.86%)</title><rect x="72.0988%" y="341" width="0.8617%" height="15" fill="rgb(224,124,37)" fg:x="3765" fg:w="45"/><text x="72.3488%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (45 samples, 0.86%)</title><rect x="72.0988%" y="325" width="0.8617%" height="15" fill="rgb(251,171,30)" fg:x="3765" fg:w="45"/><text x="72.3488%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (10 samples, 0.19%)</title><rect x="72.7691%" y="309" width="0.1915%" height="15" fill="rgb(236,46,54)" fg:x="3800" fg:w="10"/><text x="73.0191%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="72.9606%" y="341" width="0.0191%" height="15" fill="rgb(245,213,5)" fg:x="3810" fg:w="1"/><text x="73.2106%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.02%)</title><rect x="72.9606%" y="325" width="0.0191%" height="15" fill="rgb(230,144,27)" fg:x="3810" fg:w="1"/><text x="73.2106%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="72.9606%" y="309" width="0.0191%" height="15" fill="rgb(220,86,6)" fg:x="3810" fg:w="1"/><text x="73.2106%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.21%)</title><rect x="73.7265%" y="293" width="0.2106%" height="15" fill="rgb(240,20,13)" fg:x="3850" fg:w="11"/><text x="73.9765%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::_{{closure}} (41 samples, 0.79%)</title><rect x="73.9372%" y="293" width="0.7851%" height="15" fill="rgb(217,89,34)" fg:x="3861" fg:w="41"/><text x="74.1872%" y="303.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (36 samples, 0.69%)</title><rect x="74.0329%" y="277" width="0.6894%" height="15" fill="rgb(229,13,5)" fg:x="3866" fg:w="36"/><text x="74.2829%" y="287.50"></text></g><g><title>hashbrown::raw::inner::h2 (25 samples, 0.48%)</title><rect x="74.7223%" y="293" width="0.4787%" height="15" fill="rgb(244,67,35)" fg:x="3902" fg:w="25"/><text x="74.9723%" y="303.50"></text></g><g><title>simple_lisp::interpreter::ast::InstructionIter::jump (184 samples, 3.52%)</title><rect x="71.7541%" y="405" width="3.5236%" height="15" fill="rgb(221,40,2)" fg:x="3747" fg:w="184"/><text x="72.0041%" y="415.50">sim..</text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::get_index_of (173 samples, 3.31%)</title><rect x="71.9648%" y="389" width="3.3129%" height="15" fill="rgb(237,157,21)" fg:x="3758" fg:w="173"/><text x="72.2148%" y="399.50">ind..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (173 samples, 3.31%)</title><rect x="71.9648%" y="373" width="3.3129%" height="15" fill="rgb(222,94,11)" fg:x="3758" fg:w="173"/><text x="72.2148%" y="383.50">ind..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (121 samples, 2.32%)</title><rect x="72.9606%" y="357" width="2.3171%" height="15" fill="rgb(249,113,6)" fg:x="3810" fg:w="121"/><text x="73.2106%" y="367.50">i..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (120 samples, 2.30%)</title><rect x="72.9797%" y="341" width="2.2980%" height="15" fill="rgb(238,137,36)" fg:x="3811" fg:w="120"/><text x="73.2297%" y="351.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (120 samples, 2.30%)</title><rect x="72.9797%" y="325" width="2.2980%" height="15" fill="rgb(210,102,26)" fg:x="3811" fg:w="120"/><text x="73.2297%" y="335.50">h..</text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (120 samples, 2.30%)</title><rect x="72.9797%" y="309" width="2.2980%" height="15" fill="rgb(218,30,30)" fg:x="3811" fg:w="120"/><text x="73.2297%" y="319.50">h..</text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (4 samples, 0.08%)</title><rect x="75.2011%" y="293" width="0.0766%" height="15" fill="rgb(214,67,26)" fg:x="3927" fg:w="4"/><text x="75.4511%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.08%)</title><rect x="75.2011%" y="277" width="0.0766%" height="15" fill="rgb(251,9,53)" fg:x="3927" fg:w="4"/><text x="75.4511%" y="287.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::Data as core::clone::Clone&gt;::clone (1 samples, 0.02%)</title><rect x="75.3543%" y="373" width="0.0191%" height="15" fill="rgb(228,204,25)" fg:x="3935" fg:w="1"/><text x="75.6043%" y="383.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (3 samples, 0.06%)</title><rect x="75.4500%" y="245" width="0.0574%" height="15" fill="rgb(207,153,8)" fg:x="3940" fg:w="3"/><text x="75.7000%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.02%)</title><rect x="75.4883%" y="229" width="0.0191%" height="15" fill="rgb(242,9,16)" fg:x="3942" fg:w="1"/><text x="75.7383%" y="239.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (5 samples, 0.10%)</title><rect x="75.4500%" y="293" width="0.0957%" height="15" fill="rgb(217,211,10)" fg:x="3940" fg:w="5"/><text x="75.7000%" y="303.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::HashableDataRef as core::hash::Hash&gt;::hash (5 samples, 0.10%)</title><rect x="75.4500%" y="277" width="0.0957%" height="15" fill="rgb(219,228,52)" fg:x="3940" fg:w="5"/><text x="75.7000%" y="287.50"></text></g><g><title>core::hash::Hasher::write_usize (5 samples, 0.10%)</title><rect x="75.4500%" y="261" width="0.0957%" height="15" fill="rgb(231,92,29)" fg:x="3940" fg:w="5"/><text x="75.7000%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (2 samples, 0.04%)</title><rect x="75.5075%" y="245" width="0.0383%" height="15" fill="rgb(232,8,23)" fg:x="3943" fg:w="2"/><text x="75.7575%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.04%)</title><rect x="75.5458%" y="261" width="0.0383%" height="15" fill="rgb(216,211,34)" fg:x="3945" fg:w="2"/><text x="75.7958%" y="271.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (4 samples, 0.08%)</title><rect x="75.5458%" y="277" width="0.0766%" height="15" fill="rgb(236,151,0)" fg:x="3945" fg:w="4"/><text x="75.7958%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.04%)</title><rect x="75.5841%" y="261" width="0.0383%" height="15" fill="rgb(209,168,3)" fg:x="3947" fg:w="2"/><text x="75.8341%" y="271.50"></text></g><g><title>core::ptr::write (2 samples, 0.04%)</title><rect x="75.5841%" y="245" width="0.0383%" height="15" fill="rgb(208,129,28)" fg:x="3947" fg:w="2"/><text x="75.8341%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="75.5841%" y="229" width="0.0383%" height="15" fill="rgb(229,78,22)" fg:x="3947" fg:w="2"/><text x="75.8341%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.04%)</title><rect x="75.5841%" y="213" width="0.0383%" height="15" fill="rgb(228,187,13)" fg:x="3947" fg:w="2"/><text x="75.8341%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="75.6798%" y="229" width="0.0191%" height="15" fill="rgb(240,119,24)" fg:x="3952" fg:w="1"/><text x="75.9298%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (1 samples, 0.02%)</title><rect x="75.6990%" y="229" width="0.0191%" height="15" fill="rgb(209,194,42)" fg:x="3953" fg:w="1"/><text x="75.9490%" y="239.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="75.6990%" y="213" width="0.0191%" height="15" fill="rgb(247,200,46)" fg:x="3953" fg:w="1"/><text x="75.9490%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (1 samples, 0.02%)</title><rect x="75.7181%" y="229" width="0.0191%" height="15" fill="rgb(218,76,16)" fg:x="3954" fg:w="1"/><text x="75.9681%" y="239.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (20 samples, 0.38%)</title><rect x="75.3734%" y="341" width="0.3830%" height="15" fill="rgb(225,21,48)" fg:x="3936" fg:w="20"/><text x="75.6234%" y="351.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (20 samples, 0.38%)</title><rect x="75.3734%" y="325" width="0.3830%" height="15" fill="rgb(239,223,50)" fg:x="3936" fg:w="20"/><text x="75.6234%" y="335.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (19 samples, 0.36%)</title><rect x="75.3926%" y="309" width="0.3638%" height="15" fill="rgb(244,45,21)" fg:x="3937" fg:w="19"/><text x="75.6426%" y="319.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (11 samples, 0.21%)</title><rect x="75.5458%" y="293" width="0.2106%" height="15" fill="rgb(232,33,43)" fg:x="3945" fg:w="11"/><text x="75.7958%" y="303.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (7 samples, 0.13%)</title><rect x="75.6224%" y="277" width="0.1340%" height="15" fill="rgb(209,8,3)" fg:x="3949" fg:w="7"/><text x="75.8724%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (7 samples, 0.13%)</title><rect x="75.6224%" y="261" width="0.1340%" height="15" fill="rgb(214,25,53)" fg:x="3949" fg:w="7"/><text x="75.8724%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (5 samples, 0.10%)</title><rect x="75.6607%" y="245" width="0.0957%" height="15" fill="rgb(254,186,54)" fg:x="3951" fg:w="5"/><text x="75.9107%" y="255.50"></text></g><g><title>hashbrown::raw::inner::h2 (1 samples, 0.02%)</title><rect x="75.7373%" y="229" width="0.0191%" height="15" fill="rgb(208,174,49)" fg:x="3955" fg:w="1"/><text x="75.9873%" y="239.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (12 samples, 0.23%)</title><rect x="75.7564%" y="341" width="0.2298%" height="15" fill="rgb(233,191,51)" fg:x="3956" fg:w="12"/><text x="76.0064%" y="351.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.13%)</title><rect x="76.1203%" y="325" width="0.1340%" height="15" fill="rgb(222,134,10)" fg:x="3975" fg:w="7"/><text x="76.3703%" y="335.50"></text></g><g><title>malloc (6 samples, 0.11%)</title><rect x="76.1394%" y="309" width="0.1149%" height="15" fill="rgb(230,226,20)" fg:x="3976" fg:w="6"/><text x="76.3894%" y="319.50"></text></g><g><title>[libc.so.6] (6 samples, 0.11%)</title><rect x="76.1394%" y="293" width="0.1149%" height="15" fill="rgb(251,111,25)" fg:x="3976" fg:w="6"/><text x="76.3894%" y="303.50"></text></g><g><title>[libc.so.6] (4 samples, 0.08%)</title><rect x="76.1777%" y="277" width="0.0766%" height="15" fill="rgb(224,40,46)" fg:x="3978" fg:w="4"/><text x="76.4277%" y="287.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (47 samples, 0.90%)</title><rect x="75.3734%" y="373" width="0.9000%" height="15" fill="rgb(236,108,47)" fg:x="3936" fg:w="47"/><text x="75.6234%" y="383.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (47 samples, 0.90%)</title><rect x="75.3734%" y="357" width="0.9000%" height="15" fill="rgb(234,93,0)" fg:x="3936" fg:w="47"/><text x="75.6234%" y="367.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (15 samples, 0.29%)</title><rect x="75.9862%" y="341" width="0.2872%" height="15" fill="rgb(224,213,32)" fg:x="3968" fg:w="15"/><text x="76.2362%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (1 samples, 0.02%)</title><rect x="76.2543%" y="325" width="0.0191%" height="15" fill="rgb(251,11,48)" fg:x="3982" fg:w="1"/><text x="76.5043%" y="335.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clone_data (61 samples, 1.17%)</title><rect x="75.3543%" y="389" width="1.1681%" height="15" fill="rgb(236,173,5)" fg:x="3935" fg:w="61"/><text x="75.6043%" y="399.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (13 samples, 0.25%)</title><rect x="76.2735%" y="373" width="0.2489%" height="15" fill="rgb(230,95,12)" fg:x="3983" fg:w="13"/><text x="76.5235%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (13 samples, 0.25%)</title><rect x="76.2735%" y="357" width="0.2489%" height="15" fill="rgb(232,209,1)" fg:x="3983" fg:w="13"/><text x="76.5235%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (13 samples, 0.25%)</title><rect x="76.2735%" y="341" width="0.2489%" height="15" fill="rgb(232,6,1)" fg:x="3983" fg:w="13"/><text x="76.5235%" y="351.50"></text></g><g><title>core::cell::BorrowRef::new (13 samples, 0.25%)</title><rect x="76.2735%" y="325" width="0.2489%" height="15" fill="rgb(210,224,50)" fg:x="3983" fg:w="13"/><text x="76.5235%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (13 samples, 0.25%)</title><rect x="76.2735%" y="309" width="0.2489%" height="15" fill="rgb(228,127,35)" fg:x="3983" fg:w="13"/><text x="76.5235%" y="319.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::add (67 samples, 1.28%)</title><rect x="75.2777%" y="405" width="1.2830%" height="15" fill="rgb(245,102,45)" fg:x="3931" fg:w="67"/><text x="75.5277%" y="415.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::do_the_thing_add (2 samples, 0.04%)</title><rect x="76.5224%" y="389" width="0.0383%" height="15" fill="rgb(214,1,49)" fg:x="3996" fg:w="2"/><text x="76.7724%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="76.6182%" y="389" width="0.0383%" height="15" fill="rgb(226,163,40)" fg:x="4001" fg:w="2"/><text x="76.8682%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.04%)</title><rect x="76.6565%" y="389" width="0.0383%" height="15" fill="rgb(239,212,28)" fg:x="4003" fg:w="2"/><text x="76.9065%" y="399.50"></text></g><g><title>cfree (4 samples, 0.08%)</title><rect x="76.6948%" y="389" width="0.0766%" height="15" fill="rgb(220,20,13)" fg:x="4005" fg:w="4"/><text x="76.9448%" y="399.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="76.7331%" y="373" width="0.0383%" height="15" fill="rgb(210,164,35)" fg:x="4007" fg:w="2"/><text x="76.9831%" y="383.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.04%)</title><rect x="76.7714%" y="261" width="0.0383%" height="15" fill="rgb(248,109,41)" fg:x="4009" fg:w="2"/><text x="77.0214%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.04%)</title><rect x="76.7714%" y="245" width="0.0383%" height="15" fill="rgb(238,23,50)" fg:x="4009" fg:w="2"/><text x="77.0214%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (3 samples, 0.06%)</title><rect x="76.7714%" y="389" width="0.0574%" height="15" fill="rgb(211,48,49)" fg:x="4009" fg:w="3"/><text x="77.0214%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.06%)</title><rect x="76.7714%" y="373" width="0.0574%" height="15" fill="rgb(223,36,21)" fg:x="4009" fg:w="3"/><text x="77.0214%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (3 samples, 0.06%)</title><rect x="76.7714%" y="357" width="0.0574%" height="15" fill="rgb(207,123,46)" fg:x="4009" fg:w="3"/><text x="77.0214%" y="367.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.06%)</title><rect x="76.7714%" y="341" width="0.0574%" height="15" fill="rgb(240,218,32)" fg:x="4009" fg:w="3"/><text x="77.0214%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (3 samples, 0.06%)</title><rect x="76.7714%" y="325" width="0.0574%" height="15" fill="rgb(252,5,43)" fg:x="4009" fg:w="3"/><text x="77.0214%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.06%)</title><rect x="76.7714%" y="309" width="0.0574%" height="15" fill="rgb(252,84,19)" fg:x="4009" fg:w="3"/><text x="77.0214%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.06%)</title><rect x="76.7714%" y="293" width="0.0574%" height="15" fill="rgb(243,152,39)" fg:x="4009" fg:w="3"/><text x="77.0214%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.06%)</title><rect x="76.7714%" y="277" width="0.0574%" height="15" fill="rgb(234,160,15)" fg:x="4009" fg:w="3"/><text x="77.0214%" y="287.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="76.8097%" y="261" width="0.0191%" height="15" fill="rgb(237,34,20)" fg:x="4011" fg:w="1"/><text x="77.0597%" y="271.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (9 samples, 0.17%)</title><rect x="76.9437%" y="261" width="0.1723%" height="15" fill="rgb(229,97,13)" fg:x="4018" fg:w="9"/><text x="77.1937%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (2 samples, 0.04%)</title><rect x="77.0777%" y="245" width="0.0383%" height="15" fill="rgb(234,71,50)" fg:x="4025" fg:w="2"/><text x="77.3277%" y="255.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (10 samples, 0.19%)</title><rect x="76.9437%" y="309" width="0.1915%" height="15" fill="rgb(253,155,4)" fg:x="4018" fg:w="10"/><text x="77.1937%" y="319.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::HashableDataRef as core::hash::Hash&gt;::hash (10 samples, 0.19%)</title><rect x="76.9437%" y="293" width="0.1915%" height="15" fill="rgb(222,185,37)" fg:x="4018" fg:w="10"/><text x="77.1937%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (10 samples, 0.19%)</title><rect x="76.9437%" y="277" width="0.1915%" height="15" fill="rgb(251,177,13)" fg:x="4018" fg:w="10"/><text x="77.1937%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.02%)</title><rect x="77.1160%" y="261" width="0.0191%" height="15" fill="rgb(250,179,40)" fg:x="4027" fg:w="1"/><text x="77.3660%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.08%)</title><rect x="77.1352%" y="277" width="0.0766%" height="15" fill="rgb(242,44,2)" fg:x="4028" fg:w="4"/><text x="77.3852%" y="287.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (5 samples, 0.10%)</title><rect x="77.1352%" y="293" width="0.0957%" height="15" fill="rgb(216,177,13)" fg:x="4028" fg:w="5"/><text x="77.3852%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="77.2118%" y="277" width="0.0191%" height="15" fill="rgb(216,106,43)" fg:x="4032" fg:w="1"/><text x="77.4618%" y="287.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="77.2118%" y="261" width="0.0191%" height="15" fill="rgb(216,183,2)" fg:x="4032" fg:w="1"/><text x="77.4618%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="77.2118%" y="245" width="0.0191%" height="15" fill="rgb(249,75,3)" fg:x="4032" fg:w="1"/><text x="77.4618%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="77.2118%" y="229" width="0.0191%" height="15" fill="rgb(219,67,39)" fg:x="4032" fg:w="1"/><text x="77.4618%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="77.2692%" y="245" width="0.0191%" height="15" fill="rgb(253,228,2)" fg:x="4035" fg:w="1"/><text x="77.5192%" y="255.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="77.2692%" y="229" width="0.0191%" height="15" fill="rgb(235,138,27)" fg:x="4035" fg:w="1"/><text x="77.5192%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.02%)</title><rect x="77.2884%" y="245" width="0.0191%" height="15" fill="rgb(236,97,51)" fg:x="4036" fg:w="1"/><text x="77.5384%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.02%)</title><rect x="77.2884%" y="229" width="0.0191%" height="15" fill="rgb(240,80,30)" fg:x="4036" fg:w="1"/><text x="77.5384%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (3 samples, 0.06%)</title><rect x="77.3075%" y="245" width="0.0574%" height="15" fill="rgb(230,178,19)" fg:x="4037" fg:w="3"/><text x="77.5575%" y="255.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (2 samples, 0.04%)</title><rect x="77.3267%" y="229" width="0.0383%" height="15" fill="rgb(210,190,27)" fg:x="4038" fg:w="2"/><text x="77.5767%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (2 samples, 0.04%)</title><rect x="77.3650%" y="245" width="0.0383%" height="15" fill="rgb(222,107,31)" fg:x="4040" fg:w="2"/><text x="77.6150%" y="255.50"></text></g><g><title>hashbrown::raw::inner::h2 (2 samples, 0.04%)</title><rect x="77.4033%" y="245" width="0.0383%" height="15" fill="rgb(216,127,34)" fg:x="4042" fg:w="2"/><text x="77.6533%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (13 samples, 0.25%)</title><rect x="77.2309%" y="277" width="0.2489%" height="15" fill="rgb(234,116,52)" fg:x="4033" fg:w="13"/><text x="77.4809%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (11 samples, 0.21%)</title><rect x="77.2692%" y="261" width="0.2106%" height="15" fill="rgb(222,124,15)" fg:x="4035" fg:w="11"/><text x="77.5192%" y="271.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (2 samples, 0.04%)</title><rect x="77.4416%" y="245" width="0.0383%" height="15" fill="rgb(231,179,28)" fg:x="4044" fg:w="2"/><text x="77.6916%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.04%)</title><rect x="77.4416%" y="229" width="0.0383%" height="15" fill="rgb(226,93,45)" fg:x="4044" fg:w="2"/><text x="77.6916%" y="239.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (34 samples, 0.65%)</title><rect x="76.8480%" y="357" width="0.6511%" height="15" fill="rgb(215,8,51)" fg:x="4013" fg:w="34"/><text x="77.0980%" y="367.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (34 samples, 0.65%)</title><rect x="76.8480%" y="341" width="0.6511%" height="15" fill="rgb(223,106,5)" fg:x="4013" fg:w="34"/><text x="77.0980%" y="351.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (33 samples, 0.63%)</title><rect x="76.8671%" y="325" width="0.6319%" height="15" fill="rgb(250,191,5)" fg:x="4014" fg:w="33"/><text x="77.1171%" y="335.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (19 samples, 0.36%)</title><rect x="77.1352%" y="309" width="0.3638%" height="15" fill="rgb(242,132,44)" fg:x="4028" fg:w="19"/><text x="77.3852%" y="319.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (14 samples, 0.27%)</title><rect x="77.2309%" y="293" width="0.2681%" height="15" fill="rgb(251,152,29)" fg:x="4033" fg:w="14"/><text x="77.4809%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.02%)</title><rect x="77.4799%" y="277" width="0.0191%" height="15" fill="rgb(218,179,5)" fg:x="4046" fg:w="1"/><text x="77.7299%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (1 samples, 0.02%)</title><rect x="77.4799%" y="261" width="0.0191%" height="15" fill="rgb(227,67,19)" fg:x="4046" fg:w="1"/><text x="77.7299%" y="271.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (1 samples, 0.02%)</title><rect x="77.4799%" y="245" width="0.0191%" height="15" fill="rgb(233,119,31)" fg:x="4046" fg:w="1"/><text x="77.7299%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.02%)</title><rect x="77.4799%" y="229" width="0.0191%" height="15" fill="rgb(241,120,22)" fg:x="4046" fg:w="1"/><text x="77.7299%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="77.4799%" y="213" width="0.0191%" height="15" fill="rgb(224,102,30)" fg:x="4046" fg:w="1"/><text x="77.7299%" y="223.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (45 samples, 0.86%)</title><rect x="77.4990%" y="357" width="0.8617%" height="15" fill="rgb(210,164,37)" fg:x="4047" fg:w="45"/><text x="77.7490%" y="367.50"></text></g><g><title>__rdl_alloc (3 samples, 0.06%)</title><rect x="78.3991%" y="325" width="0.0574%" height="15" fill="rgb(226,191,16)" fg:x="4094" fg:w="3"/><text x="78.6491%" y="335.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (111 samples, 2.13%)</title><rect x="76.8288%" y="389" width="2.1256%" height="15" fill="rgb(214,40,45)" fg:x="4012" fg:w="111"/><text x="77.0788%" y="399.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (111 samples, 2.13%)</title><rect x="76.8288%" y="373" width="2.1256%" height="15" fill="rgb(244,29,26)" fg:x="4012" fg:w="111"/><text x="77.0788%" y="383.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (31 samples, 0.59%)</title><rect x="78.3608%" y="357" width="0.5936%" height="15" fill="rgb(216,16,5)" fg:x="4092" fg:w="31"/><text x="78.6108%" y="367.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.57%)</title><rect x="78.3799%" y="341" width="0.5745%" height="15" fill="rgb(249,76,35)" fg:x="4093" fg:w="30"/><text x="78.6299%" y="351.50"></text></g><g><title>malloc (26 samples, 0.50%)</title><rect x="78.4565%" y="325" width="0.4979%" height="15" fill="rgb(207,11,44)" fg:x="4097" fg:w="26"/><text x="78.7065%" y="335.50"></text></g><g><title>[libc.so.6] (14 samples, 0.27%)</title><rect x="78.6863%" y="309" width="0.2681%" height="15" fill="rgb(228,190,49)" fg:x="4109" fg:w="14"/><text x="78.9363%" y="319.50"></text></g><g><title>[libc.so.6] (4 samples, 0.08%)</title><rect x="78.8778%" y="293" width="0.0766%" height="15" fill="rgb(214,173,12)" fg:x="4119" fg:w="4"/><text x="79.1278%" y="303.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::equal (127 samples, 2.43%)</title><rect x="76.5607%" y="405" width="2.4320%" height="15" fill="rgb(218,26,35)" fg:x="3998" fg:w="127"/><text x="76.8107%" y="415.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (2 samples, 0.04%)</title><rect x="78.9544%" y="389" width="0.0383%" height="15" fill="rgb(220,200,19)" fg:x="4123" fg:w="2"/><text x="79.2044%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (2 samples, 0.04%)</title><rect x="78.9544%" y="373" width="0.0383%" height="15" fill="rgb(239,95,49)" fg:x="4123" fg:w="2"/><text x="79.2044%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (2 samples, 0.04%)</title><rect x="78.9544%" y="357" width="0.0383%" height="15" fill="rgb(235,85,53)" fg:x="4123" fg:w="2"/><text x="79.2044%" y="367.50"></text></g><g><title>core::cell::BorrowRef::new (2 samples, 0.04%)</title><rect x="78.9544%" y="341" width="0.0383%" height="15" fill="rgb(233,133,31)" fg:x="4123" fg:w="2"/><text x="79.2044%" y="351.50"></text></g><g><title>core::cell::is_reading (2 samples, 0.04%)</title><rect x="78.9544%" y="325" width="0.0383%" height="15" fill="rgb(218,25,20)" fg:x="4123" fg:w="2"/><text x="79.2044%" y="335.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (1 samples, 0.02%)</title><rect x="78.9927%" y="357" width="0.0191%" height="15" fill="rgb(252,210,38)" fg:x="4125" fg:w="1"/><text x="79.2427%" y="367.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (1 samples, 0.02%)</title><rect x="78.9927%" y="341" width="0.0191%" height="15" fill="rgb(242,134,21)" fg:x="4125" fg:w="1"/><text x="79.2427%" y="351.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (1 samples, 0.02%)</title><rect x="78.9927%" y="325" width="0.0191%" height="15" fill="rgb(213,28,48)" fg:x="4125" fg:w="1"/><text x="79.2427%" y="335.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (1 samples, 0.02%)</title><rect x="78.9927%" y="309" width="0.0191%" height="15" fill="rgb(250,196,2)" fg:x="4125" fg:w="1"/><text x="79.2427%" y="319.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (1 samples, 0.02%)</title><rect x="78.9927%" y="293" width="0.0191%" height="15" fill="rgb(227,5,17)" fg:x="4125" fg:w="1"/><text x="79.2427%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.02%)</title><rect x="78.9927%" y="277" width="0.0191%" height="15" fill="rgb(221,226,24)" fg:x="4125" fg:w="1"/><text x="79.2427%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.02%)</title><rect x="78.9927%" y="261" width="0.0191%" height="15" fill="rgb(211,5,48)" fg:x="4125" fg:w="1"/><text x="79.2427%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (1 samples, 0.02%)</title><rect x="78.9927%" y="245" width="0.0191%" height="15" fill="rgb(219,150,6)" fg:x="4125" fg:w="1"/><text x="79.2427%" y="255.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::less (2 samples, 0.04%)</title><rect x="78.9927%" y="405" width="0.0383%" height="15" fill="rgb(251,46,16)" fg:x="4125" fg:w="2"/><text x="79.2427%" y="415.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (2 samples, 0.04%)</title><rect x="78.9927%" y="389" width="0.0383%" height="15" fill="rgb(220,204,40)" fg:x="4125" fg:w="2"/><text x="79.2427%" y="399.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (2 samples, 0.04%)</title><rect x="78.9927%" y="373" width="0.0383%" height="15" fill="rgb(211,85,2)" fg:x="4125" fg:w="2"/><text x="79.2427%" y="383.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (1 samples, 0.02%)</title><rect x="79.0119%" y="357" width="0.0191%" height="15" fill="rgb(229,17,7)" fg:x="4126" fg:w="1"/><text x="79.2619%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="79.0119%" y="341" width="0.0191%" height="15" fill="rgb(239,72,28)" fg:x="4126" fg:w="1"/><text x="79.2619%" y="351.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="79.0119%" y="325" width="0.0191%" height="15" fill="rgb(230,47,54)" fg:x="4126" fg:w="1"/><text x="79.2619%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.10%)</title><rect x="79.1076%" y="389" width="0.0957%" height="15" fill="rgb(214,50,8)" fg:x="4131" fg:w="5"/><text x="79.3576%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.02%)</title><rect x="79.2034%" y="389" width="0.0191%" height="15" fill="rgb(216,198,43)" fg:x="4136" fg:w="1"/><text x="79.4534%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="79.2034%" y="373" width="0.0191%" height="15" fill="rgb(234,20,35)" fg:x="4136" fg:w="1"/><text x="79.4534%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (1 samples, 0.02%)</title><rect x="79.2034%" y="357" width="0.0191%" height="15" fill="rgb(254,45,19)" fg:x="4136" fg:w="1"/><text x="79.4534%" y="367.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="79.2034%" y="341" width="0.0191%" height="15" fill="rgb(219,14,44)" fg:x="4136" fg:w="1"/><text x="79.4534%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.02%)</title><rect x="79.2034%" y="325" width="0.0191%" height="15" fill="rgb(217,220,26)" fg:x="4136" fg:w="1"/><text x="79.4534%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="79.2034%" y="309" width="0.0191%" height="15" fill="rgb(213,158,28)" fg:x="4136" fg:w="1"/><text x="79.4534%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="79.2034%" y="293" width="0.0191%" height="15" fill="rgb(252,51,52)" fg:x="4136" fg:w="1"/><text x="79.4534%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="79.2034%" y="277" width="0.0191%" height="15" fill="rgb(246,89,16)" fg:x="4136" fg:w="1"/><text x="79.4534%" y="287.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="79.2034%" y="261" width="0.0191%" height="15" fill="rgb(216,158,49)" fg:x="4136" fg:w="1"/><text x="79.4534%" y="271.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (7 samples, 0.13%)</title><rect x="79.2225%" y="261" width="0.1340%" height="15" fill="rgb(236,107,19)" fg:x="4137" fg:w="7"/><text x="79.4725%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (4 samples, 0.08%)</title><rect x="79.2800%" y="245" width="0.0766%" height="15" fill="rgb(228,185,30)" fg:x="4140" fg:w="4"/><text x="79.5300%" y="255.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (8 samples, 0.15%)</title><rect x="79.2225%" y="309" width="0.1532%" height="15" fill="rgb(246,134,8)" fg:x="4137" fg:w="8"/><text x="79.4725%" y="319.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::HashableDataRef as core::hash::Hash&gt;::hash (8 samples, 0.15%)</title><rect x="79.2225%" y="293" width="0.1532%" height="15" fill="rgb(214,143,50)" fg:x="4137" fg:w="8"/><text x="79.4725%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (8 samples, 0.15%)</title><rect x="79.2225%" y="277" width="0.1532%" height="15" fill="rgb(228,75,8)" fg:x="4137" fg:w="8"/><text x="79.4725%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.02%)</title><rect x="79.3566%" y="261" width="0.0191%" height="15" fill="rgb(207,175,4)" fg:x="4144" fg:w="1"/><text x="79.6066%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.02%)</title><rect x="79.3757%" y="277" width="0.0191%" height="15" fill="rgb(205,108,24)" fg:x="4145" fg:w="1"/><text x="79.6257%" y="287.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (2 samples, 0.04%)</title><rect x="79.3757%" y="293" width="0.0383%" height="15" fill="rgb(244,120,49)" fg:x="4145" fg:w="2"/><text x="79.6257%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="79.3949%" y="277" width="0.0191%" height="15" fill="rgb(223,47,38)" fg:x="4146" fg:w="1"/><text x="79.6449%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="79.4140%" y="277" width="0.0191%" height="15" fill="rgb(229,179,11)" fg:x="4147" fg:w="1"/><text x="79.6640%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.02%)</title><rect x="79.4140%" y="261" width="0.0191%" height="15" fill="rgb(231,122,1)" fg:x="4147" fg:w="1"/><text x="79.6640%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="79.4140%" y="245" width="0.0191%" height="15" fill="rgb(245,119,9)" fg:x="4147" fg:w="1"/><text x="79.6640%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (1 samples, 0.02%)</title><rect x="79.5098%" y="245" width="0.0191%" height="15" fill="rgb(241,163,25)" fg:x="4152" fg:w="1"/><text x="79.7598%" y="255.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="79.5098%" y="229" width="0.0191%" height="15" fill="rgb(217,214,3)" fg:x="4152" fg:w="1"/><text x="79.7598%" y="239.50"></text></g><g><title>hashbrown::raw::inner::h2 (1 samples, 0.02%)</title><rect x="79.5289%" y="245" width="0.0191%" height="15" fill="rgb(240,86,28)" fg:x="4153" fg:w="1"/><text x="79.7789%" y="255.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (18 samples, 0.34%)</title><rect x="79.2225%" y="357" width="0.3447%" height="15" fill="rgb(215,47,9)" fg:x="4137" fg:w="18"/><text x="79.4725%" y="367.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (18 samples, 0.34%)</title><rect x="79.2225%" y="341" width="0.3447%" height="15" fill="rgb(252,25,45)" fg:x="4137" fg:w="18"/><text x="79.4725%" y="351.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (18 samples, 0.34%)</title><rect x="79.2225%" y="325" width="0.3447%" height="15" fill="rgb(251,164,9)" fg:x="4137" fg:w="18"/><text x="79.4725%" y="335.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (10 samples, 0.19%)</title><rect x="79.3757%" y="309" width="0.1915%" height="15" fill="rgb(233,194,0)" fg:x="4145" fg:w="10"/><text x="79.6257%" y="319.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (8 samples, 0.15%)</title><rect x="79.4140%" y="293" width="0.1532%" height="15" fill="rgb(249,111,24)" fg:x="4147" fg:w="8"/><text x="79.6640%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (7 samples, 0.13%)</title><rect x="79.4332%" y="277" width="0.1340%" height="15" fill="rgb(250,223,3)" fg:x="4148" fg:w="7"/><text x="79.6832%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (4 samples, 0.08%)</title><rect x="79.4906%" y="261" width="0.0766%" height="15" fill="rgb(236,178,37)" fg:x="4151" fg:w="4"/><text x="79.7406%" y="271.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.02%)</title><rect x="79.5481%" y="245" width="0.0191%" height="15" fill="rgb(241,158,50)" fg:x="4154" fg:w="1"/><text x="79.7981%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="79.5481%" y="229" width="0.0191%" height="15" fill="rgb(213,121,41)" fg:x="4154" fg:w="1"/><text x="79.7981%" y="239.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (18 samples, 0.34%)</title><rect x="79.5672%" y="357" width="0.3447%" height="15" fill="rgb(240,92,3)" fg:x="4155" fg:w="18"/><text x="79.8172%" y="367.50"></text></g><g><title>__rdl_alloc (2 samples, 0.04%)</title><rect x="80.0268%" y="325" width="0.0383%" height="15" fill="rgb(205,123,3)" fg:x="4179" fg:w="2"/><text x="80.2768%" y="335.50"></text></g><g><title>__rust_alloc (5 samples, 0.10%)</title><rect x="80.0651%" y="325" width="0.0957%" height="15" fill="rgb(205,97,47)" fg:x="4181" fg:w="5"/><text x="80.3151%" y="335.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (65 samples, 1.24%)</title><rect x="79.2225%" y="389" width="1.2447%" height="15" fill="rgb(247,152,14)" fg:x="4137" fg:w="65"/><text x="79.4725%" y="399.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (65 samples, 1.24%)</title><rect x="79.2225%" y="373" width="1.2447%" height="15" fill="rgb(248,195,53)" fg:x="4137" fg:w="65"/><text x="79.4725%" y="383.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (29 samples, 0.56%)</title><rect x="79.9119%" y="357" width="0.5553%" height="15" fill="rgb(226,201,16)" fg:x="4173" fg:w="29"/><text x="80.1619%" y="367.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.54%)</title><rect x="79.9311%" y="341" width="0.5362%" height="15" fill="rgb(205,98,0)" fg:x="4174" fg:w="28"/><text x="80.1811%" y="351.50"></text></g><g><title>malloc (16 samples, 0.31%)</title><rect x="80.1609%" y="325" width="0.3064%" height="15" fill="rgb(214,191,48)" fg:x="4186" fg:w="16"/><text x="80.4109%" y="335.50"></text></g><g><title>[libc.so.6] (3 samples, 0.06%)</title><rect x="80.4098%" y="309" width="0.0574%" height="15" fill="rgb(237,112,39)" fg:x="4199" fg:w="3"/><text x="80.6598%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="80.4481%" y="293" width="0.0191%" height="15" fill="rgb(247,203,27)" fg:x="4201" fg:w="1"/><text x="80.6981%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="80.4673%" y="325" width="0.0191%" height="15" fill="rgb(235,124,28)" fg:x="4202" fg:w="1"/><text x="80.7173%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.02%)</title><rect x="80.4864%" y="325" width="0.0191%" height="15" fill="rgb(208,207,46)" fg:x="4203" fg:w="1"/><text x="80.7364%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.02%)</title><rect x="80.4864%" y="309" width="0.0191%" height="15" fill="rgb(234,176,4)" fg:x="4203" fg:w="1"/><text x="80.7364%" y="319.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="80.4864%" y="293" width="0.0191%" height="15" fill="rgb(230,133,28)" fg:x="4203" fg:w="1"/><text x="80.7364%" y="303.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="80.4864%" y="277" width="0.0191%" height="15" fill="rgb(211,137,40)" fg:x="4203" fg:w="1"/><text x="80.7364%" y="287.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::less_equal (80 samples, 1.53%)</title><rect x="79.0310%" y="405" width="1.5320%" height="15" fill="rgb(254,35,13)" fg:x="4127" fg:w="80"/><text x="79.2810%" y="415.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (5 samples, 0.10%)</title><rect x="80.4673%" y="389" width="0.0957%" height="15" fill="rgb(225,49,51)" fg:x="4202" fg:w="5"/><text x="80.7173%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (5 samples, 0.10%)</title><rect x="80.4673%" y="373" width="0.0957%" height="15" fill="rgb(251,10,15)" fg:x="4202" fg:w="5"/><text x="80.7173%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (5 samples, 0.10%)</title><rect x="80.4673%" y="357" width="0.0957%" height="15" fill="rgb(228,207,15)" fg:x="4202" fg:w="5"/><text x="80.7173%" y="367.50"></text></g><g><title>core::cell::BorrowRef::new (5 samples, 0.10%)</title><rect x="80.4673%" y="341" width="0.0957%" height="15" fill="rgb(241,99,19)" fg:x="4202" fg:w="5"/><text x="80.7173%" y="351.50"></text></g><g><title>core::cell::is_reading (3 samples, 0.06%)</title><rect x="80.5056%" y="325" width="0.0574%" height="15" fill="rgb(207,104,49)" fg:x="4204" fg:w="3"/><text x="80.7556%" y="335.50"></text></g><g><title>cfree (3 samples, 0.06%)</title><rect x="80.8119%" y="389" width="0.0574%" height="15" fill="rgb(234,99,18)" fg:x="4220" fg:w="3"/><text x="81.0619%" y="399.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="80.8311%" y="373" width="0.0383%" height="15" fill="rgb(213,191,49)" fg:x="4221" fg:w="2"/><text x="81.0811%" y="383.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::Data as core::clone::Clone&gt;::clone (3 samples, 0.06%)</title><rect x="80.8694%" y="373" width="0.0574%" height="15" fill="rgb(210,226,19)" fg:x="4223" fg:w="3"/><text x="81.1194%" y="383.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (12 samples, 0.23%)</title><rect x="81.0800%" y="245" width="0.2298%" height="15" fill="rgb(229,97,18)" fg:x="4234" fg:w="12"/><text x="81.3300%" y="255.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (15 samples, 0.29%)</title><rect x="81.0800%" y="293" width="0.2872%" height="15" fill="rgb(211,167,15)" fg:x="4234" fg:w="15"/><text x="81.3300%" y="303.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::HashableDataRef as core::hash::Hash&gt;::hash (15 samples, 0.29%)</title><rect x="81.0800%" y="277" width="0.2872%" height="15" fill="rgb(210,169,34)" fg:x="4234" fg:w="15"/><text x="81.3300%" y="287.50"></text></g><g><title>core::hash::Hasher::write_usize (15 samples, 0.29%)</title><rect x="81.0800%" y="261" width="0.2872%" height="15" fill="rgb(241,121,31)" fg:x="4234" fg:w="15"/><text x="81.3300%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (3 samples, 0.06%)</title><rect x="81.3098%" y="245" width="0.0574%" height="15" fill="rgb(232,40,11)" fg:x="4246" fg:w="3"/><text x="81.5598%" y="255.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (6 samples, 0.11%)</title><rect x="81.3673%" y="277" width="0.1149%" height="15" fill="rgb(205,86,26)" fg:x="4249" fg:w="6"/><text x="81.6173%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (6 samples, 0.11%)</title><rect x="81.3673%" y="261" width="0.1149%" height="15" fill="rgb(231,126,28)" fg:x="4249" fg:w="6"/><text x="81.6173%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="81.5205%" y="229" width="0.0191%" height="15" fill="rgb(219,221,18)" fg:x="4257" fg:w="1"/><text x="81.7705%" y="239.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="81.5205%" y="213" width="0.0191%" height="15" fill="rgb(211,40,0)" fg:x="4257" fg:w="1"/><text x="81.7705%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (2 samples, 0.04%)</title><rect x="81.5396%" y="229" width="0.0383%" height="15" fill="rgb(239,85,43)" fg:x="4258" fg:w="2"/><text x="81.7896%" y="239.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (2 samples, 0.04%)</title><rect x="81.5396%" y="213" width="0.0383%" height="15" fill="rgb(231,55,21)" fg:x="4258" fg:w="2"/><text x="81.7896%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (2 samples, 0.04%)</title><rect x="81.5779%" y="229" width="0.0383%" height="15" fill="rgb(225,184,43)" fg:x="4260" fg:w="2"/><text x="81.8279%" y="239.50"></text></g><g><title>hashbrown::raw::inner::h2 (6 samples, 0.11%)</title><rect x="81.6162%" y="229" width="0.1149%" height="15" fill="rgb(251,158,41)" fg:x="4262" fg:w="6"/><text x="81.8662%" y="239.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (2 samples, 0.04%)</title><rect x="81.7311%" y="229" width="0.0383%" height="15" fill="rgb(234,159,37)" fg:x="4268" fg:w="2"/><text x="81.9811%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.04%)</title><rect x="81.7311%" y="213" width="0.0383%" height="15" fill="rgb(216,204,22)" fg:x="4268" fg:w="2"/><text x="81.9811%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (16 samples, 0.31%)</title><rect x="81.4822%" y="261" width="0.3064%" height="15" fill="rgb(214,17,3)" fg:x="4255" fg:w="16"/><text x="81.7322%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (14 samples, 0.27%)</title><rect x="81.5205%" y="245" width="0.2681%" height="15" fill="rgb(212,111,17)" fg:x="4257" fg:w="14"/><text x="81.7705%" y="255.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (1 samples, 0.02%)</title><rect x="81.7694%" y="229" width="0.0191%" height="15" fill="rgb(221,157,24)" fg:x="4270" fg:w="1"/><text x="82.0194%" y="239.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.02%)</title><rect x="81.7694%" y="213" width="0.0191%" height="15" fill="rgb(252,16,13)" fg:x="4270" fg:w="1"/><text x="82.0194%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="81.7694%" y="197" width="0.0191%" height="15" fill="rgb(221,62,2)" fg:x="4270" fg:w="1"/><text x="82.0194%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (2 samples, 0.04%)</title><rect x="81.7886%" y="261" width="0.0383%" height="15" fill="rgb(247,87,22)" fg:x="4271" fg:w="2"/><text x="82.0386%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (2 samples, 0.04%)</title><rect x="81.7886%" y="245" width="0.0383%" height="15" fill="rgb(215,73,9)" fg:x="4271" fg:w="2"/><text x="82.0386%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (1 samples, 0.02%)</title><rect x="81.8077%" y="229" width="0.0191%" height="15" fill="rgb(207,175,33)" fg:x="4272" fg:w="1"/><text x="82.0577%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (1 samples, 0.02%)</title><rect x="81.8077%" y="213" width="0.0191%" height="15" fill="rgb(243,129,54)" fg:x="4272" fg:w="1"/><text x="82.0577%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.02%)</title><rect x="81.8077%" y="197" width="0.0191%" height="15" fill="rgb(227,119,45)" fg:x="4272" fg:w="1"/><text x="82.0577%" y="207.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (48 samples, 0.92%)</title><rect x="80.9268%" y="341" width="0.9192%" height="15" fill="rgb(205,109,36)" fg:x="4226" fg:w="48"/><text x="81.1768%" y="351.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (48 samples, 0.92%)</title><rect x="80.9268%" y="325" width="0.9192%" height="15" fill="rgb(205,6,39)" fg:x="4226" fg:w="48"/><text x="81.1768%" y="335.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (48 samples, 0.92%)</title><rect x="80.9268%" y="309" width="0.9192%" height="15" fill="rgb(221,32,16)" fg:x="4226" fg:w="48"/><text x="81.1768%" y="319.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (25 samples, 0.48%)</title><rect x="81.3673%" y="293" width="0.4787%" height="15" fill="rgb(228,144,50)" fg:x="4249" fg:w="25"/><text x="81.6173%" y="303.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (19 samples, 0.36%)</title><rect x="81.4822%" y="277" width="0.3638%" height="15" fill="rgb(229,201,53)" fg:x="4255" fg:w="19"/><text x="81.7322%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::len (1 samples, 0.02%)</title><rect x="81.8269%" y="261" width="0.0191%" height="15" fill="rgb(249,153,27)" fg:x="4273" fg:w="1"/><text x="82.0769%" y="271.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (45 samples, 0.86%)</title><rect x="81.8460%" y="341" width="0.8617%" height="15" fill="rgb(227,106,25)" fg:x="4274" fg:w="45"/><text x="82.0960%" y="351.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="82.8227%" y="309" width="0.0191%" height="15" fill="rgb(230,65,29)" fg:x="4325" fg:w="1"/><text x="83.0727%" y="319.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (111 samples, 2.13%)</title><rect x="80.9268%" y="373" width="2.1256%" height="15" fill="rgb(221,57,46)" fg:x="4226" fg:w="111"/><text x="81.1768%" y="383.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (111 samples, 2.13%)</title><rect x="80.9268%" y="357" width="2.1256%" height="15" fill="rgb(229,161,17)" fg:x="4226" fg:w="111"/><text x="81.1768%" y="367.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (18 samples, 0.34%)</title><rect x="82.7078%" y="341" width="0.3447%" height="15" fill="rgb(222,213,11)" fg:x="4319" fg:w="18"/><text x="82.9578%" y="351.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.27%)</title><rect x="82.7844%" y="325" width="0.2681%" height="15" fill="rgb(235,35,13)" fg:x="4323" fg:w="14"/><text x="83.0344%" y="335.50"></text></g><g><title>malloc (11 samples, 0.21%)</title><rect x="82.8418%" y="309" width="0.2106%" height="15" fill="rgb(233,158,34)" fg:x="4326" fg:w="11"/><text x="83.0918%" y="319.50"></text></g><g><title>[libc.so.6] (11 samples, 0.21%)</title><rect x="82.8418%" y="293" width="0.2106%" height="15" fill="rgb(215,151,48)" fg:x="4326" fg:w="11"/><text x="83.0918%" y="303.50"></text></g><g><title>[libc.so.6] (4 samples, 0.08%)</title><rect x="82.9759%" y="277" width="0.0766%" height="15" fill="rgb(229,84,14)" fg:x="4333" fg:w="4"/><text x="83.2259%" y="287.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clone_data (120 samples, 2.30%)</title><rect x="80.8694%" y="389" width="2.2980%" height="15" fill="rgb(229,68,14)" fg:x="4223" fg:w="120"/><text x="81.1194%" y="399.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (6 samples, 0.11%)</title><rect x="83.0525%" y="373" width="0.1149%" height="15" fill="rgb(243,106,26)" fg:x="4337" fg:w="6"/><text x="83.3025%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (6 samples, 0.11%)</title><rect x="83.0525%" y="357" width="0.1149%" height="15" fill="rgb(206,45,38)" fg:x="4337" fg:w="6"/><text x="83.3025%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (6 samples, 0.11%)</title><rect x="83.0525%" y="341" width="0.1149%" height="15" fill="rgb(226,6,15)" fg:x="4337" fg:w="6"/><text x="83.3025%" y="351.50"></text></g><g><title>core::cell::BorrowRef::new (6 samples, 0.11%)</title><rect x="83.0525%" y="325" width="0.1149%" height="15" fill="rgb(232,22,54)" fg:x="4337" fg:w="6"/><text x="83.3025%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (6 samples, 0.11%)</title><rect x="83.0525%" y="309" width="0.1149%" height="15" fill="rgb(229,222,32)" fg:x="4337" fg:w="6"/><text x="83.3025%" y="319.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::modulo (142 samples, 2.72%)</title><rect x="80.5630%" y="405" width="2.7193%" height="15" fill="rgb(228,62,29)" fg:x="4207" fg:w="142"/><text x="80.8130%" y="415.50">si..</text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::modulo::do_the_thing (6 samples, 0.11%)</title><rect x="83.1674%" y="389" width="0.1149%" height="15" fill="rgb(251,103,34)" fg:x="4343" fg:w="6"/><text x="83.4174%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.02%)</title><rect x="83.3589%" y="389" width="0.0191%" height="15" fill="rgb(233,12,30)" fg:x="4353" fg:w="1"/><text x="83.6089%" y="399.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="83.3589%" y="373" width="0.0191%" height="15" fill="rgb(238,52,0)" fg:x="4353" fg:w="1"/><text x="83.6089%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.04%)</title><rect x="83.3780%" y="389" width="0.0383%" height="15" fill="rgb(223,98,5)" fg:x="4354" fg:w="2"/><text x="83.6280%" y="399.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="83.4163%" y="261" width="0.0191%" height="15" fill="rgb(228,75,37)" fg:x="4356" fg:w="1"/><text x="83.6663%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.02%)</title><rect x="83.4163%" y="245" width="0.0191%" height="15" fill="rgb(205,115,49)" fg:x="4356" fg:w="1"/><text x="83.6663%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (2 samples, 0.04%)</title><rect x="83.4163%" y="389" width="0.0383%" height="15" fill="rgb(250,154,43)" fg:x="4356" fg:w="2"/><text x="83.6663%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="83.4163%" y="373" width="0.0383%" height="15" fill="rgb(226,43,29)" fg:x="4356" fg:w="2"/><text x="83.6663%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (2 samples, 0.04%)</title><rect x="83.4163%" y="357" width="0.0383%" height="15" fill="rgb(249,228,39)" fg:x="4356" fg:w="2"/><text x="83.6663%" y="367.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="83.4163%" y="341" width="0.0383%" height="15" fill="rgb(216,79,43)" fg:x="4356" fg:w="2"/><text x="83.6663%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (2 samples, 0.04%)</title><rect x="83.4163%" y="325" width="0.0383%" height="15" fill="rgb(228,95,12)" fg:x="4356" fg:w="2"/><text x="83.6663%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.04%)</title><rect x="83.4163%" y="309" width="0.0383%" height="15" fill="rgb(249,221,15)" fg:x="4356" fg:w="2"/><text x="83.6663%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.04%)</title><rect x="83.4163%" y="293" width="0.0383%" height="15" fill="rgb(233,34,13)" fg:x="4356" fg:w="2"/><text x="83.6663%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.04%)</title><rect x="83.4163%" y="277" width="0.0383%" height="15" fill="rgb(214,103,39)" fg:x="4356" fg:w="2"/><text x="83.6663%" y="287.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="83.4355%" y="261" width="0.0191%" height="15" fill="rgb(251,126,39)" fg:x="4357" fg:w="1"/><text x="83.6855%" y="271.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (2 samples, 0.04%)</title><rect x="83.4738%" y="309" width="0.0383%" height="15" fill="rgb(214,216,36)" fg:x="4359" fg:w="2"/><text x="83.7238%" y="319.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::HashableDataRef as core::hash::Hash&gt;::hash (2 samples, 0.04%)</title><rect x="83.4738%" y="293" width="0.0383%" height="15" fill="rgb(220,221,8)" fg:x="4359" fg:w="2"/><text x="83.7238%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.04%)</title><rect x="83.4738%" y="277" width="0.0383%" height="15" fill="rgb(240,216,3)" fg:x="4359" fg:w="2"/><text x="83.7238%" y="287.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="83.4738%" y="261" width="0.0383%" height="15" fill="rgb(232,218,17)" fg:x="4359" fg:w="2"/><text x="83.7238%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.02%)</title><rect x="83.4929%" y="245" width="0.0191%" height="15" fill="rgb(229,163,45)" fg:x="4360" fg:w="1"/><text x="83.7429%" y="255.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (2 samples, 0.04%)</title><rect x="83.5121%" y="293" width="0.0383%" height="15" fill="rgb(231,110,42)" fg:x="4361" fg:w="2"/><text x="83.7621%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.04%)</title><rect x="83.5121%" y="277" width="0.0383%" height="15" fill="rgb(208,170,48)" fg:x="4361" fg:w="2"/><text x="83.7621%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (3 samples, 0.06%)</title><rect x="83.5695%" y="245" width="0.0574%" height="15" fill="rgb(239,116,25)" fg:x="4364" fg:w="3"/><text x="83.8195%" y="255.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (10 samples, 0.19%)</title><rect x="83.4546%" y="357" width="0.1915%" height="15" fill="rgb(219,200,50)" fg:x="4358" fg:w="10"/><text x="83.7046%" y="367.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (10 samples, 0.19%)</title><rect x="83.4546%" y="341" width="0.1915%" height="15" fill="rgb(245,200,0)" fg:x="4358" fg:w="10"/><text x="83.7046%" y="351.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (9 samples, 0.17%)</title><rect x="83.4738%" y="325" width="0.1723%" height="15" fill="rgb(245,119,33)" fg:x="4359" fg:w="9"/><text x="83.7238%" y="335.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (7 samples, 0.13%)</title><rect x="83.5121%" y="309" width="0.1340%" height="15" fill="rgb(231,125,12)" fg:x="4361" fg:w="7"/><text x="83.7621%" y="319.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (5 samples, 0.10%)</title><rect x="83.5504%" y="293" width="0.0957%" height="15" fill="rgb(216,96,41)" fg:x="4363" fg:w="5"/><text x="83.8004%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (5 samples, 0.10%)</title><rect x="83.5504%" y="277" width="0.0957%" height="15" fill="rgb(248,43,45)" fg:x="4363" fg:w="5"/><text x="83.8004%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (4 samples, 0.08%)</title><rect x="83.5695%" y="261" width="0.0766%" height="15" fill="rgb(217,222,7)" fg:x="4364" fg:w="4"/><text x="83.8195%" y="271.50"></text></g><g><title>hashbrown::raw::inner::h2 (1 samples, 0.02%)</title><rect x="83.6270%" y="245" width="0.0191%" height="15" fill="rgb(233,28,6)" fg:x="4367" fg:w="1"/><text x="83.8770%" y="255.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (10 samples, 0.19%)</title><rect x="83.6461%" y="357" width="0.1915%" height="15" fill="rgb(231,218,15)" fg:x="4368" fg:w="10"/><text x="83.8961%" y="367.50"></text></g><g><title>__rdl_alloc (2 samples, 0.04%)</title><rect x="83.9334%" y="325" width="0.0383%" height="15" fill="rgb(226,171,48)" fg:x="4383" fg:w="2"/><text x="84.1834%" y="335.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="83.9717%" y="325" width="0.0191%" height="15" fill="rgb(235,201,9)" fg:x="4385" fg:w="1"/><text x="84.2217%" y="335.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.52%)</title><rect x="83.8759%" y="341" width="0.5170%" height="15" fill="rgb(217,80,15)" fg:x="4380" fg:w="27"/><text x="84.1259%" y="351.50"></text></g><g><title>malloc (21 samples, 0.40%)</title><rect x="83.9908%" y="325" width="0.4021%" height="15" fill="rgb(219,152,8)" fg:x="4386" fg:w="21"/><text x="84.2408%" y="335.50"></text></g><g><title>[libc.so.6] (10 samples, 0.19%)</title><rect x="84.2015%" y="309" width="0.1915%" height="15" fill="rgb(243,107,38)" fg:x="4397" fg:w="10"/><text x="84.4515%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="84.3738%" y="293" width="0.0191%" height="15" fill="rgb(231,17,5)" fg:x="4406" fg:w="1"/><text x="84.6238%" y="303.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (51 samples, 0.98%)</title><rect x="83.4546%" y="389" width="0.9766%" height="15" fill="rgb(209,25,54)" fg:x="4358" fg:w="51"/><text x="83.7046%" y="399.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (51 samples, 0.98%)</title><rect x="83.4546%" y="373" width="0.9766%" height="15" fill="rgb(219,0,2)" fg:x="4358" fg:w="51"/><text x="83.7046%" y="383.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (31 samples, 0.59%)</title><rect x="83.8376%" y="357" width="0.5936%" height="15" fill="rgb(246,9,5)" fg:x="4378" fg:w="31"/><text x="84.0876%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (2 samples, 0.04%)</title><rect x="84.3930%" y="341" width="0.0383%" height="15" fill="rgb(226,159,4)" fg:x="4407" fg:w="2"/><text x="84.6430%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.04%)</title><rect x="84.3930%" y="325" width="0.0383%" height="15" fill="rgb(219,175,34)" fg:x="4407" fg:w="2"/><text x="84.6430%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.04%)</title><rect x="84.3930%" y="309" width="0.0383%" height="15" fill="rgb(236,10,46)" fg:x="4407" fg:w="2"/><text x="84.6430%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (2 samples, 0.04%)</title><rect x="84.3930%" y="293" width="0.0383%" height="15" fill="rgb(240,211,16)" fg:x="4407" fg:w="2"/><text x="84.6430%" y="303.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (2 samples, 0.04%)</title><rect x="84.3930%" y="277" width="0.0383%" height="15" fill="rgb(205,3,43)" fg:x="4407" fg:w="2"/><text x="84.6430%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (2 samples, 0.04%)</title><rect x="84.3930%" y="261" width="0.0383%" height="15" fill="rgb(245,7,22)" fg:x="4407" fg:w="2"/><text x="84.6430%" y="271.50"></text></g><g><title>core::cell::BorrowRefMut::new (2 samples, 0.04%)</title><rect x="84.3930%" y="245" width="0.0383%" height="15" fill="rgb(239,132,32)" fg:x="4407" fg:w="2"/><text x="84.6430%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (6 samples, 0.11%)</title><rect x="84.4504%" y="325" width="0.1149%" height="15" fill="rgb(228,202,34)" fg:x="4410" fg:w="6"/><text x="84.7004%" y="335.50"></text></g><g><title>simple_lisp::interpreter::builtins::core::and (75 samples, 1.44%)</title><rect x="83.2823%" y="405" width="1.4362%" height="15" fill="rgb(254,200,22)" fg:x="4349" fg:w="75"/><text x="83.5323%" y="415.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (15 samples, 0.29%)</title><rect x="84.4313%" y="389" width="0.2872%" height="15" fill="rgb(219,10,39)" fg:x="4409" fg:w="15"/><text x="84.6813%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (15 samples, 0.29%)</title><rect x="84.4313%" y="373" width="0.2872%" height="15" fill="rgb(226,210,39)" fg:x="4409" fg:w="15"/><text x="84.6813%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (15 samples, 0.29%)</title><rect x="84.4313%" y="357" width="0.2872%" height="15" fill="rgb(208,219,16)" fg:x="4409" fg:w="15"/><text x="84.6813%" y="367.50"></text></g><g><title>core::cell::BorrowRef::new (15 samples, 0.29%)</title><rect x="84.4313%" y="341" width="0.2872%" height="15" fill="rgb(216,158,51)" fg:x="4409" fg:w="15"/><text x="84.6813%" y="351.50"></text></g><g><title>core::cell::is_reading (8 samples, 0.15%)</title><rect x="84.5653%" y="325" width="0.1532%" height="15" fill="rgb(233,14,44)" fg:x="4416" fg:w="8"/><text x="84.8153%" y="335.50"></text></g><g><title>&lt;indexmap::set::iter::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.11%)</title><rect x="87.3612%" y="357" width="0.1149%" height="15" fill="rgb(237,97,39)" fg:x="4562" fg:w="6"/><text x="87.6112%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.11%)</title><rect x="87.3612%" y="341" width="0.1149%" height="15" fill="rgb(218,198,43)" fg:x="4562" fg:w="6"/><text x="87.6112%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.02%)</title><rect x="88.1846%" y="293" width="0.0191%" height="15" fill="rgb(231,104,20)" fg:x="4605" fg:w="1"/><text x="88.4346%" y="303.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::collect::_{{closure}} (1 samples, 0.02%)</title><rect x="88.1846%" y="277" width="0.0191%" height="15" fill="rgb(254,36,13)" fg:x="4605" fg:w="1"/><text x="88.4346%" y="287.50"></text></g><g><title>simple_lisp::interpreter::data::Data::add_data_refs (1 samples, 0.02%)</title><rect x="88.1846%" y="261" width="0.0191%" height="15" fill="rgb(248,14,50)" fg:x="4605" fg:w="1"/><text x="88.4346%" y="271.50"></text></g><g><title>&lt;indexmap::set::IndexSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.02%)</title><rect x="88.1846%" y="245" width="0.0191%" height="15" fill="rgb(217,107,29)" fg:x="4605" fg:w="1"/><text x="88.4346%" y="255.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.02%)</title><rect x="88.1846%" y="229" width="0.0191%" height="15" fill="rgb(251,169,33)" fg:x="4605" fg:w="1"/><text x="88.4346%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="88.1846%" y="213" width="0.0191%" height="15" fill="rgb(217,108,32)" fg:x="4605" fg:w="1"/><text x="88.4346%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="88.1846%" y="197" width="0.0191%" height="15" fill="rgb(219,66,42)" fg:x="4605" fg:w="1"/><text x="88.4346%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="88.1846%" y="181" width="0.0191%" height="15" fill="rgb(206,180,7)" fg:x="4605" fg:w="1"/><text x="88.4346%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="88.1846%" y="165" width="0.0191%" height="15" fill="rgb(208,226,31)" fg:x="4605" fg:w="1"/><text x="88.4346%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="88.1846%" y="149" width="0.0191%" height="15" fill="rgb(218,26,49)" fg:x="4605" fg:w="1"/><text x="88.4346%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="88.1846%" y="133" width="0.0191%" height="15" fill="rgb(233,197,48)" fg:x="4605" fg:w="1"/><text x="88.4346%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="88.1846%" y="117" width="0.0191%" height="15" fill="rgb(252,181,51)" fg:x="4605" fg:w="1"/><text x="88.4346%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="88.1846%" y="101" width="0.0191%" height="15" fill="rgb(253,90,19)" fg:x="4605" fg:w="1"/><text x="88.4346%" y="111.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="88.1846%" y="85" width="0.0191%" height="15" fill="rgb(215,171,30)" fg:x="4605" fg:w="1"/><text x="88.4346%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="88.1846%" y="69" width="0.0191%" height="15" fill="rgb(214,222,9)" fg:x="4605" fg:w="1"/><text x="88.4346%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (49 samples, 0.94%)</title><rect x="87.4761%" y="357" width="0.9383%" height="15" fill="rgb(223,3,22)" fg:x="4568" fg:w="49"/><text x="87.7261%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (49 samples, 0.94%)</title><rect x="87.4761%" y="341" width="0.9383%" height="15" fill="rgb(225,196,46)" fg:x="4568" fg:w="49"/><text x="87.7261%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (49 samples, 0.94%)</title><rect x="87.4761%" y="325" width="0.9383%" height="15" fill="rgb(209,110,37)" fg:x="4568" fg:w="49"/><text x="87.7261%" y="335.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (49 samples, 0.94%)</title><rect x="87.4761%" y="309" width="0.9383%" height="15" fill="rgb(249,89,12)" fg:x="4568" fg:w="49"/><text x="87.7261%" y="319.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::collect::_{{closure}} (11 samples, 0.21%)</title><rect x="88.2038%" y="293" width="0.2106%" height="15" fill="rgb(226,27,33)" fg:x="4606" fg:w="11"/><text x="88.4538%" y="303.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::is_external (6 samples, 0.11%)</title><rect x="88.2995%" y="277" width="0.1149%" height="15" fill="rgb(213,82,22)" fg:x="4611" fg:w="6"/><text x="88.5495%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (4 samples, 0.08%)</title><rect x="88.3378%" y="261" width="0.0766%" height="15" fill="rgb(248,140,0)" fg:x="4613" fg:w="4"/><text x="88.5878%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (4 samples, 0.08%)</title><rect x="88.3378%" y="245" width="0.0766%" height="15" fill="rgb(228,106,3)" fg:x="4613" fg:w="4"/><text x="88.5878%" y="255.50"></text></g><g><title>core::cell::BorrowRef::new (4 samples, 0.08%)</title><rect x="88.3378%" y="229" width="0.0766%" height="15" fill="rgb(209,23,37)" fg:x="4613" fg:w="4"/><text x="88.5878%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::set::IndexSet&lt;simple_lisp::interpreter::data::HashableDataRef,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="88.4144%" y="357" width="0.0191%" height="15" fill="rgb(241,93,50)" fg:x="4617" fg:w="1"/><text x="88.6644%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::map::IndexMap&lt;simple_lisp::interpreter::data::HashableDataRef,(),core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="88.4144%" y="341" width="0.0191%" height="15" fill="rgb(253,46,43)" fg:x="4617" fg:w="1"/><text x="88.6644%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::map::core::IndexMapCore&lt;simple_lisp::interpreter::data::HashableDataRef,()&gt;&gt; (1 samples, 0.02%)</title><rect x="88.4144%" y="325" width="0.0191%" height="15" fill="rgb(226,206,43)" fg:x="4617" fg:w="1"/><text x="88.6644%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;simple_lisp::interpreter::data::HashableDataRef,()&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="88.4144%" y="309" width="0.0191%" height="15" fill="rgb(217,54,7)" fg:x="4617" fg:w="1"/><text x="88.6644%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;indexmap::Bucket&lt;simple_lisp::interpreter::data::HashableDataRef,()&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="88.4144%" y="293" width="0.0191%" height="15" fill="rgb(223,5,52)" fg:x="4617" fg:w="1"/><text x="88.6644%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="88.4144%" y="277" width="0.0191%" height="15" fill="rgb(206,52,46)" fg:x="4617" fg:w="1"/><text x="88.6644%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="88.4144%" y="261" width="0.0191%" height="15" fill="rgb(253,136,11)" fg:x="4617" fg:w="1"/><text x="88.6644%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="88.4144%" y="245" width="0.0191%" height="15" fill="rgb(208,106,33)" fg:x="4617" fg:w="1"/><text x="88.6644%" y="255.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="88.4144%" y="229" width="0.0191%" height="15" fill="rgb(206,54,4)" fg:x="4617" fg:w="1"/><text x="88.6644%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="88.4144%" y="213" width="0.0191%" height="15" fill="rgb(213,3,15)" fg:x="4617" fg:w="1"/><text x="88.6644%" y="223.50"></text></g><g><title>cfree (369 samples, 7.07%)</title><rect x="88.4336%" y="213" width="7.0663%" height="15" fill="rgb(252,211,39)" fg:x="4618" fg:w="369"/><text x="88.6836%" y="223.50">cfree</text></g><g><title>[libc.so.6] (369 samples, 7.07%)</title><rect x="88.4336%" y="197" width="7.0663%" height="15" fill="rgb(223,6,36)" fg:x="4618" fg:w="369"/><text x="88.6836%" y="207.50">[libc.so...</text></g><g><title>[libc.so.6] (368 samples, 7.05%)</title><rect x="88.4527%" y="181" width="7.0471%" height="15" fill="rgb(252,169,45)" fg:x="4619" fg:w="368"/><text x="88.7027%" y="191.50">[libc.so...</text></g><g><title>[libc.so.6] (83 samples, 1.59%)</title><rect x="93.9104%" y="165" width="1.5894%" height="15" fill="rgb(212,48,26)" fg:x="4904" fg:w="83"/><text x="94.1604%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::set::iter::IntoIter&lt;simple_lisp::interpreter::data::HashableDataRef&gt;&gt; (370 samples, 7.09%)</title><rect x="88.4336%" y="357" width="7.0854%" height="15" fill="rgb(251,102,48)" fg:x="4618" fg:w="370"/><text x="88.6836%" y="367.50">core::ptr:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;indexmap::Bucket&lt;simple_lisp::interpreter::data::HashableDataRef,()&gt;&gt;&gt; (370 samples, 7.09%)</title><rect x="88.4336%" y="341" width="7.0854%" height="15" fill="rgb(243,208,16)" fg:x="4618" fg:w="370"/><text x="88.6836%" y="351.50">core::ptr:..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (370 samples, 7.09%)</title><rect x="88.4336%" y="325" width="7.0854%" height="15" fill="rgb(219,96,24)" fg:x="4618" fg:w="370"/><text x="88.6836%" y="335.50">&lt;alloc::ve..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;indexmap::Bucket&lt;simple_lisp::interpreter::data::HashableDataRef,()&gt;,alloc::alloc::Global&gt;&gt; (370 samples, 7.09%)</title><rect x="88.4336%" y="309" width="7.0854%" height="15" fill="rgb(219,33,29)" fg:x="4618" fg:w="370"/><text x="88.6836%" y="319.50">core::ptr:..</text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (370 samples, 7.09%)</title><rect x="88.4336%" y="293" width="7.0854%" height="15" fill="rgb(223,176,5)" fg:x="4618" fg:w="370"/><text x="88.6836%" y="303.50">&lt;&lt;alloc::v..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;indexmap::Bucket&lt;simple_lisp::interpreter::data::HashableDataRef,()&gt;&gt;&gt; (370 samples, 7.09%)</title><rect x="88.4336%" y="277" width="7.0854%" height="15" fill="rgb(228,140,14)" fg:x="4618" fg:w="370"/><text x="88.6836%" y="287.50">core::ptr:..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (370 samples, 7.09%)</title><rect x="88.4336%" y="261" width="7.0854%" height="15" fill="rgb(217,179,31)" fg:x="4618" fg:w="370"/><text x="88.6836%" y="271.50">&lt;alloc::ra..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (370 samples, 7.09%)</title><rect x="88.4336%" y="245" width="7.0854%" height="15" fill="rgb(230,9,30)" fg:x="4618" fg:w="370"/><text x="88.6836%" y="255.50">&lt;alloc::al..</text></g><g><title>alloc::alloc::dealloc (370 samples, 7.09%)</title><rect x="88.4336%" y="229" width="7.0854%" height="15" fill="rgb(230,136,20)" fg:x="4618" fg:w="370"/><text x="88.6836%" y="239.50">alloc::all..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (1 samples, 0.02%)</title><rect x="95.4998%" y="213" width="0.0191%" height="15" fill="rgb(215,210,22)" fg:x="4987" fg:w="1"/><text x="95.7498%" y="223.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (1 samples, 0.02%)</title><rect x="95.4998%" y="197" width="0.0191%" height="15" fill="rgb(218,43,5)" fg:x="4987" fg:w="1"/><text x="95.7498%" y="207.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (1 samples, 0.02%)</title><rect x="95.4998%" y="181" width="0.0191%" height="15" fill="rgb(216,11,5)" fg:x="4987" fg:w="1"/><text x="95.7498%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="95.4998%" y="165" width="0.0191%" height="15" fill="rgb(209,82,29)" fg:x="4987" fg:w="1"/><text x="95.7498%" y="175.50"></text></g><g><title>core::ptr::write (1 samples, 0.02%)</title><rect x="95.4998%" y="149" width="0.0191%" height="15" fill="rgb(244,115,12)" fg:x="4987" fg:w="1"/><text x="95.7498%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="95.4998%" y="133" width="0.0191%" height="15" fill="rgb(222,82,18)" fg:x="4987" fg:w="1"/><text x="95.7498%" y="143.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (1 samples, 0.02%)</title><rect x="95.5381%" y="293" width="0.0191%" height="15" fill="rgb(249,227,8)" fg:x="4989" fg:w="1"/><text x="95.7881%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.02%)</title><rect x="95.5381%" y="277" width="0.0191%" height="15" fill="rgb(253,141,45)" fg:x="4989" fg:w="1"/><text x="95.7881%" y="287.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (3 samples, 0.06%)</title><rect x="95.5190%" y="357" width="0.0574%" height="15" fill="rgb(234,184,4)" fg:x="4988" fg:w="3"/><text x="95.7690%" y="367.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (3 samples, 0.06%)</title><rect x="95.5190%" y="341" width="0.0574%" height="15" fill="rgb(218,194,23)" fg:x="4988" fg:w="3"/><text x="95.7690%" y="351.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (3 samples, 0.06%)</title><rect x="95.5190%" y="325" width="0.0574%" height="15" fill="rgb(235,66,41)" fg:x="4988" fg:w="3"/><text x="95.7690%" y="335.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (2 samples, 0.04%)</title><rect x="95.5381%" y="309" width="0.0383%" height="15" fill="rgb(245,217,1)" fg:x="4989" fg:w="2"/><text x="95.7881%" y="319.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (1 samples, 0.02%)</title><rect x="95.5573%" y="293" width="0.0191%" height="15" fill="rgb(229,91,1)" fg:x="4990" fg:w="1"/><text x="95.8073%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.02%)</title><rect x="95.5573%" y="277" width="0.0191%" height="15" fill="rgb(207,101,30)" fg:x="4990" fg:w="1"/><text x="95.8073%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.02%)</title><rect x="95.5573%" y="261" width="0.0191%" height="15" fill="rgb(223,82,49)" fg:x="4990" fg:w="1"/><text x="95.8073%" y="271.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (1 samples, 0.02%)</title><rect x="95.5573%" y="245" width="0.0191%" height="15" fill="rgb(218,167,17)" fg:x="4990" fg:w="1"/><text x="95.8073%" y="255.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.02%)</title><rect x="95.5573%" y="229" width="0.0191%" height="15" fill="rgb(208,103,14)" fg:x="4990" fg:w="1"/><text x="95.8073%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="95.5573%" y="213" width="0.0191%" height="15" fill="rgb(238,20,8)" fg:x="4990" fg:w="1"/><text x="95.8073%" y="223.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::retain (1 samples, 0.02%)</title><rect x="95.5764%" y="357" width="0.0191%" height="15" fill="rgb(218,80,54)" fg:x="4991" fg:w="1"/><text x="95.8264%" y="367.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::retain (1 samples, 0.02%)</title><rect x="95.5764%" y="341" width="0.0191%" height="15" fill="rgb(240,144,17)" fg:x="4991" fg:w="1"/><text x="95.8264%" y="351.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::retain_in_order (1 samples, 0.02%)</title><rect x="95.5764%" y="325" width="0.0191%" height="15" fill="rgb(245,27,50)" fg:x="4991" fg:w="1"/><text x="95.8264%" y="335.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::rebuild_hash_table (1 samples, 0.02%)</title><rect x="95.5764%" y="309" width="0.0191%" height="15" fill="rgb(251,51,7)" fg:x="4991" fg:w="1"/><text x="95.8264%" y="319.50"></text></g><g><title>indexmap::map::core::raw::insert_bulk_no_grow (1 samples, 0.02%)</title><rect x="95.5764%" y="293" width="0.0191%" height="15" fill="rgb(245,217,29)" fg:x="4991" fg:w="1"/><text x="95.8264%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.02%)</title><rect x="95.5764%" y="277" width="0.0191%" height="15" fill="rgb(221,176,29)" fg:x="4991" fg:w="1"/><text x="95.8264%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::prepare_insert_slot (1 samples, 0.02%)</title><rect x="95.5764%" y="261" width="0.0191%" height="15" fill="rgb(212,180,24)" fg:x="4991" fg:w="1"/><text x="95.8264%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot (1 samples, 0.02%)</title><rect x="95.5764%" y="245" width="0.0191%" height="15" fill="rgb(254,24,2)" fg:x="4991" fg:w="1"/><text x="95.8264%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (1 samples, 0.02%)</title><rect x="95.5764%" y="229" width="0.0191%" height="15" fill="rgb(230,100,2)" fg:x="4991" fg:w="1"/><text x="95.8264%" y="239.50"></text></g><g><title>simple_lisp::interpreter::data::Data::add_data_refs (1 samples, 0.02%)</title><rect x="95.5956%" y="357" width="0.0191%" height="15" fill="rgb(219,142,25)" fg:x="4992" fg:w="1"/><text x="95.8456%" y="367.50"></text></g><g><title>&lt;indexmap::set::IndexSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.02%)</title><rect x="95.5956%" y="341" width="0.0191%" height="15" fill="rgb(240,73,43)" fg:x="4992" fg:w="1"/><text x="95.8456%" y="351.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.02%)</title><rect x="95.5956%" y="325" width="0.0191%" height="15" fill="rgb(214,114,15)" fg:x="4992" fg:w="1"/><text x="95.8456%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.02%)</title><rect x="95.5956%" y="309" width="0.0191%" height="15" fill="rgb(207,130,4)" fg:x="4992" fg:w="1"/><text x="95.8456%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="95.5956%" y="293" width="0.0191%" height="15" fill="rgb(221,25,40)" fg:x="4992" fg:w="1"/><text x="95.8456%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="95.5956%" y="277" width="0.0191%" height="15" fill="rgb(241,184,7)" fg:x="4992" fg:w="1"/><text x="95.8456%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="95.5956%" y="261" width="0.0191%" height="15" fill="rgb(235,159,4)" fg:x="4992" fg:w="1"/><text x="95.8456%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.02%)</title><rect x="95.5956%" y="245" width="0.0191%" height="15" fill="rgb(214,87,48)" fg:x="4992" fg:w="1"/><text x="95.8456%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.02%)</title><rect x="95.5956%" y="229" width="0.0191%" height="15" fill="rgb(246,198,24)" fg:x="4992" fg:w="1"/><text x="95.8456%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.02%)</title><rect x="95.5956%" y="213" width="0.0191%" height="15" fill="rgb(209,66,40)" fg:x="4992" fg:w="1"/><text x="95.8456%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.02%)</title><rect x="95.5956%" y="197" width="0.0191%" height="15" fill="rgb(233,147,39)" fg:x="4992" fg:w="1"/><text x="95.8456%" y="207.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.02%)</title><rect x="95.5956%" y="181" width="0.0191%" height="15" fill="rgb(231,145,52)" fg:x="4992" fg:w="1"/><text x="95.8456%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.02%)</title><rect x="95.5956%" y="165" width="0.0191%" height="15" fill="rgb(206,20,26)" fg:x="4992" fg:w="1"/><text x="95.8456%" y="175.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (1 samples, 0.02%)</title><rect x="95.5956%" y="149" width="0.0191%" height="15" fill="rgb(238,220,4)" fg:x="4992" fg:w="1"/><text x="95.8456%" y="159.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (1 samples, 0.02%)</title><rect x="95.5956%" y="133" width="0.0191%" height="15" fill="rgb(252,195,42)" fg:x="4992" fg:w="1"/><text x="95.8456%" y="143.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::allocation_size (23 samples, 0.44%)</title><rect x="95.6147%" y="357" width="0.4404%" height="15" fill="rgb(209,10,6)" fg:x="4993" fg:w="23"/><text x="95.8647%" y="367.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::allocation_size (23 samples, 0.44%)</title><rect x="95.6147%" y="341" width="0.4404%" height="15" fill="rgb(229,3,52)" fg:x="4993" fg:w="23"/><text x="95.8647%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (23 samples, 0.44%)</title><rect x="95.6147%" y="325" width="0.4404%" height="15" fill="rgb(253,49,37)" fg:x="4993" fg:w="23"/><text x="95.8647%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (23 samples, 0.44%)</title><rect x="95.6147%" y="309" width="0.4404%" height="15" fill="rgb(240,103,49)" fg:x="4993" fg:w="23"/><text x="95.8647%" y="319.50"></text></g><g><title>core::cell::BorrowRef::new (23 samples, 0.44%)</title><rect x="95.6147%" y="293" width="0.4404%" height="15" fill="rgb(250,182,30)" fg:x="4993" fg:w="23"/><text x="95.8647%" y="303.50"></text></g><g><title>core::cell::is_reading (5 samples, 0.10%)</title><rect x="95.9594%" y="277" width="0.0957%" height="15" fill="rgb(248,8,30)" fg:x="5011" fg:w="5"/><text x="96.2094%" y="287.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.06%)</title><rect x="96.1700%" y="325" width="0.0574%" height="15" fill="rgb(237,120,30)" fg:x="5022" fg:w="3"/><text x="96.4200%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.06%)</title><rect x="96.1700%" y="309" width="0.0574%" height="15" fill="rgb(221,146,34)" fg:x="5022" fg:w="3"/><text x="96.4200%" y="319.50"></text></g><g><title>__rust_dealloc (3 samples, 0.06%)</title><rect x="96.2275%" y="325" width="0.0574%" height="15" fill="rgb(242,55,13)" fg:x="5025" fg:w="3"/><text x="96.4775%" y="335.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::dealloc (146 samples, 2.80%)</title><rect x="96.0552%" y="357" width="2.7959%" height="15" fill="rgb(242,112,31)" fg:x="5016" fg:w="146"/><text x="96.3052%" y="367.50">si..</text></g><g><title>alloc::alloc::dealloc (146 samples, 2.80%)</title><rect x="96.0552%" y="341" width="2.7959%" height="15" fill="rgb(249,192,27)" fg:x="5016" fg:w="146"/><text x="96.3052%" y="351.50">al..</text></g><g><title>cfree (134 samples, 2.57%)</title><rect x="96.2849%" y="325" width="2.5661%" height="15" fill="rgb(208,204,44)" fg:x="5028" fg:w="134"/><text x="96.5349%" y="335.50">cf..</text></g><g><title>[libc.so.6] (103 samples, 1.97%)</title><rect x="96.8786%" y="309" width="1.9724%" height="15" fill="rgb(208,93,54)" fg:x="5059" fg:w="103"/><text x="97.1286%" y="319.50">[..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_generation (1 samples, 0.02%)</title><rect x="98.8510%" y="357" width="0.0191%" height="15" fill="rgb(242,1,31)" fg:x="5162" fg:w="1"/><text x="99.1010%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="98.8510%" y="341" width="0.0191%" height="15" fill="rgb(241,83,25)" fg:x="5162" fg:w="1"/><text x="99.1010%" y="351.50"></text></g><g><title>simple_lisp::interpreter::builtins::core::gc_collect (758 samples, 14.52%)</title><rect x="84.7185%" y="405" width="14.5155%" height="15" fill="rgb(205,169,50)" fg:x="4424" fg:w="758"/><text x="84.9685%" y="415.50">simple_lisp::interpret..</text></g><g><title>simple_lisp::interpreter::Interpreter::gc_collect (758 samples, 14.52%)</title><rect x="84.7185%" y="389" width="14.5155%" height="15" fill="rgb(239,186,37)" fg:x="4424" fg:w="758"/><text x="84.9685%" y="399.50">simple_lisp::interpret..</text></g><g><title>simple_lisp::interpreter::data::DataStore::collect (758 samples, 14.52%)</title><rect x="84.7185%" y="373" width="14.5155%" height="15" fill="rgb(205,221,10)" fg:x="4424" fg:w="758"/><text x="84.9685%" y="383.50">simple_lisp::interpret..</text></g><g><title>simple_lisp::interpreter::data::DataRef::is_external (19 samples, 0.36%)</title><rect x="98.8702%" y="357" width="0.3638%" height="15" fill="rgb(218,196,15)" fg:x="5163" fg:w="19"/><text x="99.1202%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (19 samples, 0.36%)</title><rect x="98.8702%" y="341" width="0.3638%" height="15" fill="rgb(218,196,35)" fg:x="5163" fg:w="19"/><text x="99.1202%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (19 samples, 0.36%)</title><rect x="98.8702%" y="325" width="0.3638%" height="15" fill="rgb(233,63,24)" fg:x="5163" fg:w="19"/><text x="99.1202%" y="335.50"></text></g><g><title>core::cell::BorrowRef::new (19 samples, 0.36%)</title><rect x="98.8702%" y="309" width="0.3638%" height="15" fill="rgb(225,8,4)" fg:x="5163" fg:w="19"/><text x="99.1202%" y="319.50"></text></g><g><title>core::cell::is_reading (5 samples, 0.10%)</title><rect x="99.1383%" y="293" width="0.0957%" height="15" fill="rgb(234,105,35)" fg:x="5177" fg:w="5"/><text x="99.3883%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.02%)</title><rect x="99.2340%" y="341" width="0.0191%" height="15" fill="rgb(236,21,32)" fg:x="5182" fg:w="1"/><text x="99.4840%" y="351.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (16 samples, 0.31%)</title><rect x="99.2340%" y="405" width="0.3064%" height="15" fill="rgb(228,109,6)" fg:x="5182" fg:w="16"/><text x="99.4840%" y="415.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (16 samples, 0.31%)</title><rect x="99.2340%" y="389" width="0.3064%" height="15" fill="rgb(229,215,31)" fg:x="5182" fg:w="16"/><text x="99.4840%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (16 samples, 0.31%)</title><rect x="99.2340%" y="373" width="0.3064%" height="15" fill="rgb(221,52,54)" fg:x="5182" fg:w="16"/><text x="99.4840%" y="383.50"></text></g><g><title>core::cell::BorrowRef::new (16 samples, 0.31%)</title><rect x="99.2340%" y="357" width="0.3064%" height="15" fill="rgb(252,129,43)" fg:x="5182" fg:w="16"/><text x="99.4840%" y="367.50"></text></g><g><title>core::cell::is_reading (15 samples, 0.29%)</title><rect x="99.2532%" y="341" width="0.2872%" height="15" fill="rgb(248,183,27)" fg:x="5183" fg:w="15"/><text x="99.5032%" y="351.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (2 samples, 0.04%)</title><rect x="99.5404%" y="277" width="0.0383%" height="15" fill="rgb(250,0,22)" fg:x="5198" fg:w="2"/><text x="99.7904%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.08%)</title><rect x="99.5404%" y="357" width="0.0766%" height="15" fill="rgb(213,166,10)" fg:x="5198" fg:w="4"/><text x="99.7904%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.08%)</title><rect x="99.5404%" y="341" width="0.0766%" height="15" fill="rgb(207,163,36)" fg:x="5198" fg:w="4"/><text x="99.7904%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.08%)</title><rect x="99.5404%" y="325" width="0.0766%" height="15" fill="rgb(208,122,22)" fg:x="5198" fg:w="4"/><text x="99.7904%" y="335.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (4 samples, 0.08%)</title><rect x="99.5404%" y="309" width="0.0766%" height="15" fill="rgb(207,104,49)" fg:x="5198" fg:w="4"/><text x="99.7904%" y="319.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.08%)</title><rect x="99.5404%" y="293" width="0.0766%" height="15" fill="rgb(248,211,50)" fg:x="5198" fg:w="4"/><text x="99.7904%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (2 samples, 0.04%)</title><rect x="99.5787%" y="277" width="0.0383%" height="15" fill="rgb(217,13,45)" fg:x="5200" fg:w="2"/><text x="99.8287%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.08%)</title><rect x="99.6936%" y="309" width="0.0766%" height="15" fill="rgb(211,216,49)" fg:x="5206" fg:w="4"/><text x="99.9436%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.02%)</title><rect x="99.7702%" y="309" width="0.0191%" height="15" fill="rgb(221,58,53)" fg:x="5210" fg:w="1"/><text x="100.0202%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="99.7702%" y="293" width="0.0191%" height="15" fill="rgb(220,112,41)" fg:x="5210" fg:w="1"/><text x="100.0202%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.02%)</title><rect x="99.7702%" y="277" width="0.0191%" height="15" fill="rgb(236,38,28)" fg:x="5210" fg:w="1"/><text x="100.0202%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.02%)</title><rect x="99.7702%" y="261" width="0.0191%" height="15" fill="rgb(227,195,22)" fg:x="5210" fg:w="1"/><text x="100.0202%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="99.7702%" y="245" width="0.0191%" height="15" fill="rgb(214,55,33)" fg:x="5210" fg:w="1"/><text x="100.0202%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.06%)</title><rect x="99.7894%" y="309" width="0.0574%" height="15" fill="rgb(248,80,13)" fg:x="5211" fg:w="3"/><text x="100.0394%" y="319.50"></text></g><g><title>_start (5,212 samples, 99.81%)</title><rect x="0.1532%" y="709" width="99.8085%" height="15" fill="rgb(238,52,6)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="719.50">_start</text></g><g><title>__libc_start_main (5,212 samples, 99.81%)</title><rect x="0.1532%" y="693" width="99.8085%" height="15" fill="rgb(224,198,47)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="703.50">__libc_start_main</text></g><g><title>[libc.so.6] (5,212 samples, 99.81%)</title><rect x="0.1532%" y="677" width="99.8085%" height="15" fill="rgb(233,171,20)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="687.50">[libc.so.6]</text></g><g><title>main (5,212 samples, 99.81%)</title><rect x="0.1532%" y="661" width="99.8085%" height="15" fill="rgb(241,30,25)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="671.50">main</text></g><g><title>std::rt::lang_start_internal (5,212 samples, 99.81%)</title><rect x="0.1532%" y="645" width="99.8085%" height="15" fill="rgb(207,171,38)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="655.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (5,212 samples, 99.81%)</title><rect x="0.1532%" y="629" width="99.8085%" height="15" fill="rgb(234,70,1)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,212 samples, 99.81%)</title><rect x="0.1532%" y="613" width="99.8085%" height="15" fill="rgb(232,178,18)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,212 samples, 99.81%)</title><rect x="0.1532%" y="597" width="99.8085%" height="15" fill="rgb(241,78,40)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="607.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (5,212 samples, 99.81%)</title><rect x="0.1532%" y="581" width="99.8085%" height="15" fill="rgb(222,35,25)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="591.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (5,212 samples, 99.81%)</title><rect x="0.1532%" y="565" width="99.8085%" height="15" fill="rgb(207,92,16)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,212 samples, 99.81%)</title><rect x="0.1532%" y="549" width="99.8085%" height="15" fill="rgb(216,59,51)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,212 samples, 99.81%)</title><rect x="0.1532%" y="533" width="99.8085%" height="15" fill="rgb(213,80,28)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="543.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (5,212 samples, 99.81%)</title><rect x="0.1532%" y="517" width="99.8085%" height="15" fill="rgb(220,93,7)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="527.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (5,212 samples, 99.81%)</title><rect x="0.1532%" y="501" width="99.8085%" height="15" fill="rgb(225,24,44)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="511.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,212 samples, 99.81%)</title><rect x="0.1532%" y="485" width="99.8085%" height="15" fill="rgb(243,74,40)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (5,212 samples, 99.81%)</title><rect x="0.1532%" y="469" width="99.8085%" height="15" fill="rgb(228,39,7)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="479.50">core::ops::function::FnOnce::call_once</text></g><g><title>simple_lisp::main (5,212 samples, 99.81%)</title><rect x="0.1532%" y="453" width="99.8085%" height="15" fill="rgb(227,79,8)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="463.50">simple_lisp::main</text></g><g><title>simple_lisp::run (5,212 samples, 99.81%)</title><rect x="0.1532%" y="437" width="99.8085%" height="15" fill="rgb(236,58,11)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="447.50">simple_lisp::run</text></g><g><title>simple_lisp::interpreter::Interpreter::run (5,212 samples, 99.81%)</title><rect x="0.1532%" y="421" width="99.8085%" height="15" fill="rgb(249,63,35)" fg:x="8" fg:w="5212"/><text x="0.4032%" y="431.50">simple_lisp::interpreter::Interpreter::run</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (22 samples, 0.42%)</title><rect x="99.5404%" y="405" width="0.4213%" height="15" fill="rgb(252,114,16)" fg:x="5198" fg:w="22"/><text x="99.7904%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (22 samples, 0.42%)</title><rect x="99.5404%" y="389" width="0.4213%" height="15" fill="rgb(254,151,24)" fg:x="5198" fg:w="22"/><text x="99.7904%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (22 samples, 0.42%)</title><rect x="99.5404%" y="373" width="0.4213%" height="15" fill="rgb(253,54,39)" fg:x="5198" fg:w="22"/><text x="99.7904%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (18 samples, 0.34%)</title><rect x="99.6170%" y="357" width="0.3447%" height="15" fill="rgb(243,25,45)" fg:x="5202" fg:w="18"/><text x="99.8670%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (18 samples, 0.34%)</title><rect x="99.6170%" y="341" width="0.3447%" height="15" fill="rgb(234,134,9)" fg:x="5202" fg:w="18"/><text x="99.8670%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (18 samples, 0.34%)</title><rect x="99.6170%" y="325" width="0.3447%" height="15" fill="rgb(227,166,31)" fg:x="5202" fg:w="18"/><text x="99.8670%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (6 samples, 0.11%)</title><rect x="99.8468%" y="309" width="0.1149%" height="15" fill="rgb(245,143,41)" fg:x="5214" fg:w="6"/><text x="100.0968%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.11%)</title><rect x="99.8468%" y="293" width="0.1149%" height="15" fill="rgb(238,181,32)" fg:x="5214" fg:w="6"/><text x="100.0968%" y="303.50"></text></g><g><title>all (5,222 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(224,113,18)" fg:x="0" fg:w="5222"/><text x="0.2500%" y="751.50"></text></g><g><title>simple_lisp (5,222 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(240,229,28)" fg:x="0" fg:w="5222"/><text x="0.2500%" y="735.50">simple_lisp</text></g><g><title>cfree (2 samples, 0.04%)</title><rect x="99.9617%" y="709" width="0.0383%" height="15" fill="rgb(250,185,3)" fg:x="5220" fg:w="2"/><text x="100.2117%" y="719.50"></text></g><g><title>[libc.so.6] (2 samples, 0.04%)</title><rect x="99.9617%" y="693" width="0.0383%" height="15" fill="rgb(212,59,25)" fg:x="5220" fg:w="2"/><text x="100.2117%" y="703.50"></text></g></svg></svg>