<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="3746"><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.1068%" y="597" width="0.0267%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="1"/><text x="0.3568%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.1068%" y="581" width="0.0267%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="1"/><text x="0.3568%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.1068%" y="565" width="0.0267%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.3568%" y="575.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.03%)</title><rect x="0.1068%" y="549" width="0.0267%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.3568%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.1068%" y="533" width="0.0267%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1"/><text x="0.3568%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.1068%" y="517" width="0.0267%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="0.3568%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.1068%" y="501" width="0.0267%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="1"/><text x="0.3568%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.1068%" y="485" width="0.0267%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="1"/><text x="0.3568%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.1068%" y="469" width="0.0267%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="0.3568%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.13%)</title><rect x="0.0267%" y="613" width="0.1335%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="5"/><text x="0.2767%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1335%" y="597" width="0.0267%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="1"/><text x="0.3835%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.19%)</title><rect x="0.0000%" y="629" width="0.1869%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="7"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1602%" y="613" width="0.0267%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="1"/><text x="0.4102%" y="623.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="0.1869%" y="613" width="0.0267%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="1"/><text x="0.4369%" y="623.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="0.1869%" y="629" width="0.0534%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="2"/><text x="0.4369%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.2136%" y="613" width="0.0267%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="1"/><text x="0.4636%" y="623.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="5.1789%" y="149" width="0.0267%" height="15" fill="rgb(225,20,46)" fg:x="194" fg:w="1"/><text x="5.4289%" y="159.50"></text></g><g><title>[libc.so.6] (38 samples, 1.01%)</title><rect x="6.4602%" y="117" width="1.0144%" height="15" fill="rgb(210,31,41)" fg:x="242" fg:w="38"/><text x="6.7102%" y="127.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="7.4479%" y="101" width="0.0267%" height="15" fill="rgb(221,200,47)" fg:x="279" fg:w="1"/><text x="7.6979%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (88 samples, 2.35%)</title><rect x="5.1522%" y="245" width="2.3492%" height="15" fill="rgb(226,26,5)" fg:x="193" fg:w="88"/><text x="5.4022%" y="255.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (88 samples, 2.35%)</title><rect x="5.1522%" y="229" width="2.3492%" height="15" fill="rgb(249,33,26)" fg:x="193" fg:w="88"/><text x="5.4022%" y="239.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (88 samples, 2.35%)</title><rect x="5.1522%" y="213" width="2.3492%" height="15" fill="rgb(235,183,28)" fg:x="193" fg:w="88"/><text x="5.4022%" y="223.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (87 samples, 2.32%)</title><rect x="5.1789%" y="197" width="2.3225%" height="15" fill="rgb(221,5,38)" fg:x="194" fg:w="87"/><text x="5.4289%" y="207.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (87 samples, 2.32%)</title><rect x="5.1789%" y="181" width="2.3225%" height="15" fill="rgb(247,18,42)" fg:x="194" fg:w="87"/><text x="5.4289%" y="191.50">a..</text></g><g><title>alloc::alloc::alloc (87 samples, 2.32%)</title><rect x="5.1789%" y="165" width="2.3225%" height="15" fill="rgb(241,131,45)" fg:x="194" fg:w="87"/><text x="5.4289%" y="175.50">a..</text></g><g><title>malloc (86 samples, 2.30%)</title><rect x="5.2056%" y="149" width="2.2958%" height="15" fill="rgb(249,31,29)" fg:x="195" fg:w="86"/><text x="5.4556%" y="159.50">m..</text></g><g><title>[libc.so.6] (82 samples, 2.19%)</title><rect x="5.3123%" y="133" width="2.1890%" height="15" fill="rgb(225,111,53)" fg:x="199" fg:w="82"/><text x="5.5623%" y="143.50">[..</text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="7.4746%" y="117" width="0.0267%" height="15" fill="rgb(238,160,17)" fg:x="280" fg:w="1"/><text x="7.7246%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="7.4746%" y="101" width="0.0267%" height="15" fill="rgb(214,148,48)" fg:x="280" fg:w="1"/><text x="7.7246%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (93 samples, 2.48%)</title><rect x="5.1255%" y="325" width="2.4826%" height="15" fill="rgb(232,36,49)" fg:x="192" fg:w="93"/><text x="5.3755%" y="335.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (92 samples, 2.46%)</title><rect x="5.1522%" y="309" width="2.4560%" height="15" fill="rgb(209,103,24)" fg:x="193" fg:w="92"/><text x="5.4022%" y="319.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (92 samples, 2.46%)</title><rect x="5.1522%" y="293" width="2.4560%" height="15" fill="rgb(229,88,8)" fg:x="193" fg:w="92"/><text x="5.4022%" y="303.50">al..</text></g><g><title>alloc::slice::hack::to_vec (92 samples, 2.46%)</title><rect x="5.1522%" y="277" width="2.4560%" height="15" fill="rgb(213,181,19)" fg:x="193" fg:w="92"/><text x="5.4022%" y="287.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (92 samples, 2.46%)</title><rect x="5.1522%" y="261" width="2.4560%" height="15" fill="rgb(254,191,54)" fg:x="193" fg:w="92"/><text x="5.4022%" y="271.50">&lt;T..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.11%)</title><rect x="7.5013%" y="245" width="0.1068%" height="15" fill="rgb(241,83,37)" fg:x="281" fg:w="4"/><text x="7.7513%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.11%)</title><rect x="7.5013%" y="229" width="0.1068%" height="15" fill="rgb(233,36,39)" fg:x="281" fg:w="4"/><text x="7.7513%" y="239.50"></text></g><g><title>[libc.so.6] (4 samples, 0.11%)</title><rect x="7.5013%" y="213" width="0.1068%" height="15" fill="rgb(226,3,54)" fg:x="281" fg:w="4"/><text x="7.7513%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.05%)</title><rect x="7.6081%" y="325" width="0.0534%" height="15" fill="rgb(245,192,40)" fg:x="285" fg:w="2"/><text x="7.8581%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.05%)</title><rect x="7.6081%" y="309" width="0.0534%" height="15" fill="rgb(238,167,29)" fg:x="285" fg:w="2"/><text x="7.8581%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.05%)</title><rect x="7.6081%" y="293" width="0.0534%" height="15" fill="rgb(232,182,51)" fg:x="285" fg:w="2"/><text x="7.8581%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="7.6615%" y="325" width="0.0267%" height="15" fill="rgb(231,60,39)" fg:x="287" fg:w="1"/><text x="7.9115%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="7.6615%" y="309" width="0.0267%" height="15" fill="rgb(208,69,12)" fg:x="287" fg:w="1"/><text x="7.9115%" y="319.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="7.6615%" y="293" width="0.0267%" height="15" fill="rgb(235,93,37)" fg:x="287" fg:w="1"/><text x="7.9115%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.16%)</title><rect x="7.6882%" y="325" width="0.1602%" height="15" fill="rgb(213,116,39)" fg:x="288" fg:w="6"/><text x="7.9382%" y="335.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="7.8484%" y="325" width="0.0267%" height="15" fill="rgb(222,207,29)" fg:x="294" fg:w="1"/><text x="8.0984%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="7.8484%" y="309" width="0.0267%" height="15" fill="rgb(206,96,30)" fg:x="294" fg:w="1"/><text x="8.0984%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="7.8484%" y="293" width="0.0267%" height="15" fill="rgb(218,138,4)" fg:x="294" fg:w="1"/><text x="8.0984%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="7.8484%" y="277" width="0.0267%" height="15" fill="rgb(250,191,14)" fg:x="294" fg:w="1"/><text x="8.0984%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (31 samples, 0.83%)</title><rect x="7.9018%" y="309" width="0.8275%" height="15" fill="rgb(239,60,40)" fg:x="296" fg:w="31"/><text x="8.1518%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (31 samples, 0.83%)</title><rect x="7.9018%" y="293" width="0.8275%" height="15" fill="rgb(206,27,48)" fg:x="296" fg:w="31"/><text x="8.1518%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (31 samples, 0.83%)</title><rect x="7.9018%" y="277" width="0.8275%" height="15" fill="rgb(225,35,8)" fg:x="296" fg:w="31"/><text x="8.1518%" y="287.50"></text></g><g><title>&lt;indexmap::set::IndexSet&lt;T,S&gt; as indexmap::Entries&gt;::as_entries (5 samples, 0.13%)</title><rect x="8.7293%" y="293" width="0.1335%" height="15" fill="rgb(250,213,24)" fg:x="327" fg:w="5"/><text x="8.9793%" y="303.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as indexmap::Entries&gt;::as_entries (5 samples, 0.13%)</title><rect x="8.7293%" y="277" width="0.1335%" height="15" fill="rgb(247,123,22)" fg:x="327" fg:w="5"/><text x="8.9793%" y="287.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as indexmap::Entries&gt;::as_entries (5 samples, 0.13%)</title><rect x="8.7293%" y="261" width="0.1335%" height="15" fill="rgb(231,138,38)" fg:x="327" fg:w="5"/><text x="8.9793%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.13%)</title><rect x="8.7293%" y="245" width="0.1335%" height="15" fill="rgb(231,145,46)" fg:x="327" fg:w="5"/><text x="8.9793%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (14 samples, 0.37%)</title><rect x="8.8628%" y="293" width="0.3737%" height="15" fill="rgb(251,118,11)" fg:x="332" fg:w="14"/><text x="9.1128%" y="303.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::InstructionIter as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 1.44%)</title><rect x="7.8751%" y="325" width="1.4415%" height="15" fill="rgb(217,147,25)" fg:x="295" fg:w="54"/><text x="8.1251%" y="335.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::get_index (22 samples, 0.59%)</title><rect x="8.7293%" y="309" width="0.5873%" height="15" fill="rgb(247,81,37)" fg:x="327" fg:w="22"/><text x="8.9793%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3 samples, 0.08%)</title><rect x="9.2365%" y="293" width="0.0801%" height="15" fill="rgb(209,12,38)" fg:x="346" fg:w="3"/><text x="9.4865%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.08%)</title><rect x="9.2365%" y="277" width="0.0801%" height="15" fill="rgb(227,1,9)" fg:x="346" fg:w="3"/><text x="9.4865%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (189 samples, 5.05%)</title><rect x="9.3166%" y="325" width="5.0454%" height="15" fill="rgb(248,47,43)" fg:x="349" fg:w="189"/><text x="9.5666%" y="335.50">alloc:..</text></g><g><title>core::intrinsics::copy (187 samples, 4.99%)</title><rect x="9.3700%" y="309" width="4.9920%" height="15" fill="rgb(221,10,30)" fg:x="351" fg:w="187"/><text x="9.6200%" y="319.50">core::..</text></g><g><title>[libc.so.6] (187 samples, 4.99%)</title><rect x="9.3700%" y="293" width="4.9920%" height="15" fill="rgb(210,229,1)" fg:x="351" fg:w="187"/><text x="9.6200%" y="303.50">[libc...</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.11%)</title><rect x="14.3620%" y="325" width="0.1068%" height="15" fill="rgb(222,148,37)" fg:x="538" fg:w="4"/><text x="14.6120%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.11%)</title><rect x="14.3620%" y="309" width="0.1068%" height="15" fill="rgb(234,67,33)" fg:x="538" fg:w="4"/><text x="14.6120%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.11%)</title><rect x="14.3620%" y="293" width="0.1068%" height="15" fill="rgb(247,98,35)" fg:x="538" fg:w="4"/><text x="14.6120%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.11%)</title><rect x="14.3620%" y="277" width="0.1068%" height="15" fill="rgb(247,138,52)" fg:x="538" fg:w="4"/><text x="14.6120%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (4 samples, 0.11%)</title><rect x="14.3620%" y="261" width="0.1068%" height="15" fill="rgb(213,79,30)" fg:x="538" fg:w="4"/><text x="14.6120%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.11%)</title><rect x="14.3620%" y="245" width="0.1068%" height="15" fill="rgb(246,177,23)" fg:x="538" fg:w="4"/><text x="14.6120%" y="255.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::run::_{{closure}} (4 samples, 0.11%)</title><rect x="14.3620%" y="229" width="0.1068%" height="15" fill="rgb(230,62,27)" fg:x="538" fg:w="4"/><text x="14.6120%" y="239.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_dr_to_scope (4 samples, 0.11%)</title><rect x="14.3620%" y="213" width="0.1068%" height="15" fill="rgb(216,154,8)" fg:x="538" fg:w="4"/><text x="14.6120%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.05%)</title><rect x="14.4154%" y="197" width="0.0534%" height="15" fill="rgb(244,35,45)" fg:x="540" fg:w="2"/><text x="14.6654%" y="207.50"></text></g><g><title>core::mem::replace (2 samples, 0.05%)</title><rect x="14.4688%" y="325" width="0.0534%" height="15" fill="rgb(251,115,12)" fg:x="542" fg:w="2"/><text x="14.7188%" y="335.50"></text></g><g><title>core::ptr::write (2 samples, 0.05%)</title><rect x="14.4688%" y="309" width="0.0534%" height="15" fill="rgb(240,54,50)" fg:x="542" fg:w="2"/><text x="14.7188%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (3 samples, 0.08%)</title><rect x="14.5222%" y="325" width="0.0801%" height="15" fill="rgb(233,84,52)" fg:x="544" fg:w="3"/><text x="14.7722%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (1 samples, 0.03%)</title><rect x="14.6022%" y="325" width="0.0267%" height="15" fill="rgb(207,117,47)" fg:x="547" fg:w="1"/><text x="14.8522%" y="335.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::run::_{{closure}} (1 samples, 0.03%)</title><rect x="14.6022%" y="309" width="0.0267%" height="15" fill="rgb(249,43,39)" fg:x="547" fg:w="1"/><text x="14.8522%" y="319.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (1 samples, 0.03%)</title><rect x="14.6022%" y="293" width="0.0267%" height="15" fill="rgb(209,38,44)" fg:x="547" fg:w="1"/><text x="14.8522%" y="303.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (1 samples, 0.03%)</title><rect x="14.6022%" y="277" width="0.0267%" height="15" fill="rgb(236,212,23)" fg:x="547" fg:w="1"/><text x="14.8522%" y="287.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (1 samples, 0.03%)</title><rect x="14.6022%" y="261" width="0.0267%" height="15" fill="rgb(242,79,21)" fg:x="547" fg:w="1"/><text x="14.8522%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="14.6022%" y="245" width="0.0267%" height="15" fill="rgb(211,96,35)" fg:x="547" fg:w="1"/><text x="14.8522%" y="255.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="14.6022%" y="229" width="0.0267%" height="15" fill="rgb(253,215,40)" fg:x="547" fg:w="1"/><text x="14.8522%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="14.6022%" y="213" width="0.0267%" height="15" fill="rgb(211,81,21)" fg:x="547" fg:w="1"/><text x="14.8522%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;simple_lisp::interpreter::data::Data&gt;&gt; (8 samples, 0.21%)</title><rect x="14.6289%" y="325" width="0.2136%" height="15" fill="rgb(208,190,38)" fg:x="548" fg:w="8"/><text x="14.8789%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (8 samples, 0.21%)</title><rect x="14.6289%" y="309" width="0.2136%" height="15" fill="rgb(235,213,38)" fg:x="548" fg:w="8"/><text x="14.8789%" y="319.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (8 samples, 0.21%)</title><rect x="14.6289%" y="293" width="0.2136%" height="15" fill="rgb(237,122,38)" fg:x="548" fg:w="8"/><text x="14.8789%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (8 samples, 0.21%)</title><rect x="14.6289%" y="277" width="0.2136%" height="15" fill="rgb(244,218,35)" fg:x="548" fg:w="8"/><text x="14.8789%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (8 samples, 0.21%)</title><rect x="14.6289%" y="261" width="0.2136%" height="15" fill="rgb(240,68,47)" fg:x="548" fg:w="8"/><text x="14.8789%" y="271.50"></text></g><g><title>core::mem::replace (8 samples, 0.21%)</title><rect x="14.6289%" y="245" width="0.2136%" height="15" fill="rgb(210,16,53)" fg:x="548" fg:w="8"/><text x="14.8789%" y="255.50"></text></g><g><title>core::ptr::write (8 samples, 0.21%)</title><rect x="14.6289%" y="229" width="0.2136%" height="15" fill="rgb(235,124,12)" fg:x="548" fg:w="8"/><text x="14.8789%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.29%)</title><rect x="14.8425%" y="293" width="0.2936%" height="15" fill="rgb(224,169,11)" fg:x="556" fg:w="11"/><text x="15.0925%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[simple_lisp::interpreter::ScopeItem]&gt; (11 samples, 0.29%)</title><rect x="14.8425%" y="277" width="0.2936%" height="15" fill="rgb(250,166,2)" fg:x="556" fg:w="11"/><text x="15.0925%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::ScopeItem&gt; (11 samples, 0.29%)</title><rect x="14.8425%" y="261" width="0.2936%" height="15" fill="rgb(242,216,29)" fg:x="556" fg:w="11"/><text x="15.0925%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (10 samples, 0.27%)</title><rect x="14.8692%" y="245" width="0.2670%" height="15" fill="rgb(230,116,27)" fg:x="557" fg:w="10"/><text x="15.1192%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (10 samples, 0.27%)</title><rect x="14.8692%" y="229" width="0.2670%" height="15" fill="rgb(228,99,48)" fg:x="557" fg:w="10"/><text x="15.1192%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.27%)</title><rect x="14.8692%" y="213" width="0.2670%" height="15" fill="rgb(253,11,6)" fg:x="557" fg:w="10"/><text x="15.1192%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.27%)</title><rect x="14.8692%" y="197" width="0.2670%" height="15" fill="rgb(247,143,39)" fg:x="557" fg:w="10"/><text x="15.1192%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.27%)</title><rect x="14.8692%" y="181" width="0.2670%" height="15" fill="rgb(236,97,10)" fg:x="557" fg:w="10"/><text x="15.1192%" y="191.50"></text></g><g><title>cfree (10 samples, 0.27%)</title><rect x="14.8692%" y="165" width="0.2670%" height="15" fill="rgb(233,208,19)" fg:x="557" fg:w="10"/><text x="15.1192%" y="175.50"></text></g><g><title>[libc.so.6] (5 samples, 0.13%)</title><rect x="15.0027%" y="149" width="0.1335%" height="15" fill="rgb(216,164,2)" fg:x="562" fg:w="5"/><text x="15.2527%" y="159.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="15.1895%" y="229" width="0.0267%" height="15" fill="rgb(220,129,5)" fg:x="569" fg:w="1"/><text x="15.4395%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="15.1895%" y="213" width="0.0267%" height="15" fill="rgb(242,17,10)" fg:x="569" fg:w="1"/><text x="15.4395%" y="223.50"></text></g><g><title>__rust_dealloc (1 samples, 0.03%)</title><rect x="15.2162%" y="229" width="0.0267%" height="15" fill="rgb(242,107,0)" fg:x="570" fg:w="1"/><text x="15.4662%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;misc_utils::stack::Stack&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (183 samples, 4.89%)</title><rect x="14.8425%" y="325" width="4.8852%" height="15" fill="rgb(251,28,31)" fg:x="556" fg:w="183"/><text x="15.0925%" y="335.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (183 samples, 4.89%)</title><rect x="14.8425%" y="309" width="4.8852%" height="15" fill="rgb(233,223,10)" fg:x="556" fg:w="183"/><text x="15.0925%" y="319.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (172 samples, 4.59%)</title><rect x="15.1361%" y="293" width="4.5916%" height="15" fill="rgb(215,21,27)" fg:x="567" fg:w="172"/><text x="15.3861%" y="303.50">core:..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (172 samples, 4.59%)</title><rect x="15.1361%" y="277" width="4.5916%" height="15" fill="rgb(232,23,21)" fg:x="567" fg:w="172"/><text x="15.3861%" y="287.50">&lt;allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (172 samples, 4.59%)</title><rect x="15.1361%" y="261" width="4.5916%" height="15" fill="rgb(244,5,23)" fg:x="567" fg:w="172"/><text x="15.3861%" y="271.50">&lt;allo..</text></g><g><title>alloc::alloc::dealloc (172 samples, 4.59%)</title><rect x="15.1361%" y="245" width="4.5916%" height="15" fill="rgb(226,81,46)" fg:x="567" fg:w="172"/><text x="15.3861%" y="255.50">alloc..</text></g><g><title>cfree (168 samples, 4.48%)</title><rect x="15.2429%" y="229" width="4.4848%" height="15" fill="rgb(247,70,30)" fg:x="571" fg:w="168"/><text x="15.4929%" y="239.50">cfree</text></g><g><title>[libc.so.6] (163 samples, 4.35%)</title><rect x="15.3764%" y="213" width="4.3513%" height="15" fill="rgb(212,68,19)" fg:x="576" fg:w="163"/><text x="15.6264%" y="223.50">[libc..</text></g><g><title>[libc.so.6] (141 samples, 3.76%)</title><rect x="15.9637%" y="197" width="3.7640%" height="15" fill="rgb(240,187,13)" fg:x="598" fg:w="141"/><text x="16.2137%" y="207.50">[lib..</text></g><g><title>[libc.so.6] (29 samples, 0.77%)</title><rect x="18.9536%" y="181" width="0.7742%" height="15" fill="rgb(223,113,26)" fg:x="710" fg:w="29"/><text x="19.2036%" y="191.50"></text></g><g><title>misc_utils::slotmap::SlotMap&lt;K,T&gt;::get (5 samples, 0.13%)</title><rect x="19.7277%" y="325" width="0.1335%" height="15" fill="rgb(206,192,2)" fg:x="739" fg:w="5"/><text x="19.9777%" y="335.50"></text></g><g><title>misc_utils::slotmap::SlotMap&lt;K,T&gt;::is_key_valid (5 samples, 0.13%)</title><rect x="19.7277%" y="309" width="0.1335%" height="15" fill="rgb(241,108,4)" fg:x="739" fg:w="5"/><text x="19.9777%" y="319.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (3 samples, 0.08%)</title><rect x="19.8612%" y="325" width="0.0801%" height="15" fill="rgb(247,173,49)" fg:x="744" fg:w="3"/><text x="20.1112%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.08%)</title><rect x="19.8612%" y="309" width="0.0801%" height="15" fill="rgb(224,114,35)" fg:x="744" fg:w="3"/><text x="20.1112%" y="319.50"></text></g><g><title>__rdl_alloc (2 samples, 0.05%)</title><rect x="19.9413%" y="197" width="0.0534%" height="15" fill="rgb(245,159,27)" fg:x="747" fg:w="2"/><text x="20.1913%" y="207.50"></text></g><g><title>__rust_alloc (3 samples, 0.08%)</title><rect x="19.9947%" y="197" width="0.0801%" height="15" fill="rgb(245,172,44)" fg:x="749" fg:w="3"/><text x="20.2447%" y="207.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::new (15 samples, 0.40%)</title><rect x="19.9413%" y="325" width="0.4004%" height="15" fill="rgb(236,23,11)" fg:x="747" fg:w="15"/><text x="20.1913%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (15 samples, 0.40%)</title><rect x="19.9413%" y="309" width="0.4004%" height="15" fill="rgb(205,117,38)" fg:x="747" fg:w="15"/><text x="20.1913%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 0.40%)</title><rect x="19.9413%" y="293" width="0.4004%" height="15" fill="rgb(237,72,25)" fg:x="747" fg:w="15"/><text x="20.1913%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.40%)</title><rect x="19.9413%" y="277" width="0.4004%" height="15" fill="rgb(244,70,9)" fg:x="747" fg:w="15"/><text x="20.1913%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.40%)</title><rect x="19.9413%" y="261" width="0.4004%" height="15" fill="rgb(217,125,39)" fg:x="747" fg:w="15"/><text x="20.1913%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.40%)</title><rect x="19.9413%" y="245" width="0.4004%" height="15" fill="rgb(235,36,10)" fg:x="747" fg:w="15"/><text x="20.1913%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.40%)</title><rect x="19.9413%" y="229" width="0.4004%" height="15" fill="rgb(251,123,47)" fg:x="747" fg:w="15"/><text x="20.1913%" y="239.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.40%)</title><rect x="19.9413%" y="213" width="0.4004%" height="15" fill="rgb(221,13,13)" fg:x="747" fg:w="15"/><text x="20.1913%" y="223.50"></text></g><g><title>malloc (10 samples, 0.27%)</title><rect x="20.0747%" y="197" width="0.2670%" height="15" fill="rgb(238,131,9)" fg:x="752" fg:w="10"/><text x="20.3247%" y="207.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::pop (3 samples, 0.08%)</title><rect x="20.3417%" y="325" width="0.0801%" height="15" fill="rgb(211,50,8)" fg:x="762" fg:w="3"/><text x="20.5917%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.08%)</title><rect x="20.3417%" y="309" width="0.0801%" height="15" fill="rgb(245,182,24)" fg:x="762" fg:w="3"/><text x="20.5917%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="20.3951%" y="293" width="0.0267%" height="15" fill="rgb(242,14,37)" fg:x="764" fg:w="1"/><text x="20.6451%" y="303.50"></text></g><g><title>__rdl_realloc (2 samples, 0.05%)</title><rect x="20.8489%" y="197" width="0.0534%" height="15" fill="rgb(246,228,12)" fg:x="781" fg:w="2"/><text x="21.0989%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.05%)</title><rect x="20.8489%" y="181" width="0.0534%" height="15" fill="rgb(213,55,15)" fg:x="781" fg:w="2"/><text x="21.0989%" y="191.50"></text></g><g><title>__rust_realloc (1 samples, 0.03%)</title><rect x="20.9023%" y="197" width="0.0267%" height="15" fill="rgb(209,9,3)" fg:x="783" fg:w="1"/><text x="21.1523%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (101 samples, 2.70%)</title><rect x="20.8222%" y="245" width="2.6962%" height="15" fill="rgb(230,59,30)" fg:x="780" fg:w="101"/><text x="21.0722%" y="255.50">&lt;a..</text></g><g><title>alloc::alloc::Global::grow_impl (101 samples, 2.70%)</title><rect x="20.8222%" y="229" width="2.6962%" height="15" fill="rgb(209,121,21)" fg:x="780" fg:w="101"/><text x="21.0722%" y="239.50">al..</text></g><g><title>alloc::alloc::realloc (101 samples, 2.70%)</title><rect x="20.8222%" y="213" width="2.6962%" height="15" fill="rgb(220,109,13)" fg:x="780" fg:w="101"/><text x="21.0722%" y="223.50">al..</text></g><g><title>realloc (97 samples, 2.59%)</title><rect x="20.9290%" y="197" width="2.5894%" height="15" fill="rgb(232,18,1)" fg:x="784" fg:w="97"/><text x="21.1790%" y="207.50">re..</text></g><g><title>[libc.so.6] (90 samples, 2.40%)</title><rect x="21.1159%" y="181" width="2.4026%" height="15" fill="rgb(215,41,42)" fg:x="791" fg:w="90"/><text x="21.3659%" y="191.50">[l..</text></g><g><title>[libc.so.6] (83 samples, 2.22%)</title><rect x="21.3027%" y="165" width="2.2157%" height="15" fill="rgb(224,123,36)" fg:x="798" fg:w="83"/><text x="21.5527%" y="175.50">[..</text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="23.4383%" y="149" width="0.0801%" height="15" fill="rgb(240,125,3)" fg:x="878" fg:w="3"/><text x="23.6883%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (109 samples, 2.91%)</title><rect x="20.6353%" y="261" width="2.9098%" height="15" fill="rgb(205,98,50)" fg:x="773" fg:w="109"/><text x="20.8853%" y="271.50">al..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.03%)</title><rect x="23.5184%" y="245" width="0.0267%" height="15" fill="rgb(205,185,37)" fg:x="881" fg:w="1"/><text x="23.7684%" y="255.50"></text></g><g><title>core::cmp::max (1 samples, 0.03%)</title><rect x="23.5451%" y="261" width="0.0267%" height="15" fill="rgb(238,207,15)" fg:x="882" fg:w="1"/><text x="23.7951%" y="271.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.03%)</title><rect x="23.5451%" y="245" width="0.0267%" height="15" fill="rgb(213,199,42)" fg:x="882" fg:w="1"/><text x="23.7951%" y="255.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.03%)</title><rect x="23.5451%" y="229" width="0.0267%" height="15" fill="rgb(235,201,11)" fg:x="882" fg:w="1"/><text x="23.7951%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (113 samples, 3.02%)</title><rect x="20.6086%" y="293" width="3.0166%" height="15" fill="rgb(207,46,11)" fg:x="772" fg:w="113"/><text x="20.8586%" y="303.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (112 samples, 2.99%)</title><rect x="20.6353%" y="277" width="2.9899%" height="15" fill="rgb(241,35,35)" fg:x="773" fg:w="112"/><text x="20.8853%" y="287.50">all..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.05%)</title><rect x="23.5718%" y="261" width="0.0534%" height="15" fill="rgb(243,32,47)" fg:x="883" fg:w="2"/><text x="23.8218%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.05%)</title><rect x="23.5718%" y="245" width="0.0534%" height="15" fill="rgb(247,202,23)" fg:x="883" fg:w="2"/><text x="23.8218%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.11%)</title><rect x="23.6252%" y="293" width="0.1068%" height="15" fill="rgb(219,102,11)" fg:x="885" fg:w="4"/><text x="23.8752%" y="303.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (158 samples, 4.22%)</title><rect x="20.4218%" y="325" width="4.2178%" height="15" fill="rgb(243,110,44)" fg:x="765" fg:w="158"/><text x="20.6718%" y="335.50">misc_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (158 samples, 4.22%)</title><rect x="20.4218%" y="309" width="4.2178%" height="15" fill="rgb(222,74,54)" fg:x="765" fg:w="158"/><text x="20.6718%" y="319.50">alloc..</text></g><g><title>core::ptr::write (34 samples, 0.91%)</title><rect x="23.7320%" y="293" width="0.9076%" height="15" fill="rgb(216,99,12)" fg:x="889" fg:w="34"/><text x="23.9820%" y="303.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="24.6396%" y="309" width="0.0267%" height="15" fill="rgb(226,22,26)" fg:x="923" fg:w="1"/><text x="24.8896%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="24.6396%" y="293" width="0.0267%" height="15" fill="rgb(217,163,10)" fg:x="923" fg:w="1"/><text x="24.8896%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="24.6396%" y="277" width="0.0267%" height="15" fill="rgb(213,25,53)" fg:x="923" fg:w="1"/><text x="24.8896%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="24.6396%" y="261" width="0.0267%" height="15" fill="rgb(252,105,26)" fg:x="923" fg:w="1"/><text x="24.8896%" y="271.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (4 samples, 0.11%)</title><rect x="24.6663%" y="309" width="0.1068%" height="15" fill="rgb(220,39,43)" fg:x="924" fg:w="4"/><text x="24.9163%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.11%)</title><rect x="24.6663%" y="293" width="0.1068%" height="15" fill="rgb(229,68,48)" fg:x="924" fg:w="4"/><text x="24.9163%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="24.9867%" y="293" width="0.0534%" height="15" fill="rgb(252,8,32)" fg:x="936" fg:w="2"/><text x="25.2367%" y="303.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="24.9867%" y="277" width="0.0534%" height="15" fill="rgb(223,20,43)" fg:x="936" fg:w="2"/><text x="25.2367%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="24.9867%" y="261" width="0.0534%" height="15" fill="rgb(229,81,49)" fg:x="936" fg:w="2"/><text x="25.2367%" y="271.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.03%)</title><rect x="25.0133%" y="245" width="0.0267%" height="15" fill="rgb(236,28,36)" fg:x="937" fg:w="1"/><text x="25.2633%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (1 samples, 0.03%)</title><rect x="25.0133%" y="229" width="0.0267%" height="15" fill="rgb(249,185,26)" fg:x="937" fg:w="1"/><text x="25.2633%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="25.0133%" y="213" width="0.0267%" height="15" fill="rgb(249,174,33)" fg:x="937" fg:w="1"/><text x="25.2633%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="25.0133%" y="197" width="0.0267%" height="15" fill="rgb(233,201,37)" fg:x="937" fg:w="1"/><text x="25.2633%" y="207.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.21%)</title><rect x="25.3070%" y="261" width="0.2136%" height="15" fill="rgb(221,78,26)" fg:x="948" fg:w="8"/><text x="25.5570%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.21%)</title><rect x="25.3070%" y="245" width="0.2136%" height="15" fill="rgb(250,127,30)" fg:x="948" fg:w="8"/><text x="25.5570%" y="255.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (7 samples, 0.19%)</title><rect x="25.3337%" y="229" width="0.1869%" height="15" fill="rgb(230,49,44)" fg:x="949" fg:w="7"/><text x="25.5837%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (14 samples, 0.37%)</title><rect x="25.5473%" y="165" width="0.3737%" height="15" fill="rgb(229,67,23)" fg:x="957" fg:w="14"/><text x="25.7973%" y="175.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (14 samples, 0.37%)</title><rect x="25.5473%" y="149" width="0.3737%" height="15" fill="rgb(249,83,47)" fg:x="957" fg:w="14"/><text x="25.7973%" y="159.50"></text></g><g><title>core::cell::BorrowRefMut::new (14 samples, 0.37%)</title><rect x="25.5473%" y="133" width="0.3737%" height="15" fill="rgb(215,43,3)" fg:x="957" fg:w="14"/><text x="25.7973%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (17 samples, 0.45%)</title><rect x="25.5206%" y="261" width="0.4538%" height="15" fill="rgb(238,154,13)" fg:x="956" fg:w="17"/><text x="25.7706%" y="271.50"></text></g><g><title>core::ops::function::FnMut::call_mut (17 samples, 0.45%)</title><rect x="25.5206%" y="245" width="0.4538%" height="15" fill="rgb(219,56,2)" fg:x="956" fg:w="17"/><text x="25.7706%" y="255.50"></text></g><g><title>core::mem::drop (17 samples, 0.45%)</title><rect x="25.5206%" y="229" width="0.4538%" height="15" fill="rgb(233,0,4)" fg:x="956" fg:w="17"/><text x="25.7706%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::ExternalData&gt; (17 samples, 0.45%)</title><rect x="25.5206%" y="213" width="0.4538%" height="15" fill="rgb(235,30,7)" fg:x="956" fg:w="17"/><text x="25.7706%" y="223.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::ExternalData as core::ops::drop::Drop&gt;::drop (17 samples, 0.45%)</title><rect x="25.5206%" y="197" width="0.4538%" height="15" fill="rgb(250,79,13)" fg:x="956" fg:w="17"/><text x="25.7706%" y="207.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::unset_external (17 samples, 0.45%)</title><rect x="25.5206%" y="181" width="0.4538%" height="15" fill="rgb(211,146,34)" fg:x="956" fg:w="17"/><text x="25.7706%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;usize&gt;&gt; (2 samples, 0.05%)</title><rect x="25.9210%" y="165" width="0.0534%" height="15" fill="rgb(228,22,38)" fg:x="971" fg:w="2"/><text x="26.1710%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (2 samples, 0.05%)</title><rect x="25.9210%" y="149" width="0.0534%" height="15" fill="rgb(235,168,5)" fg:x="971" fg:w="2"/><text x="26.1710%" y="159.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="25.9210%" y="133" width="0.0534%" height="15" fill="rgb(221,155,16)" fg:x="971" fg:w="2"/><text x="26.1710%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.05%)</title><rect x="25.9210%" y="117" width="0.0534%" height="15" fill="rgb(215,215,53)" fg:x="971" fg:w="2"/><text x="26.1710%" y="127.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.05%)</title><rect x="25.9210%" y="101" width="0.0534%" height="15" fill="rgb(223,4,10)" fg:x="971" fg:w="2"/><text x="26.1710%" y="111.50"></text></g><g><title>core::mem::replace (2 samples, 0.05%)</title><rect x="25.9210%" y="85" width="0.0534%" height="15" fill="rgb(234,103,6)" fg:x="971" fg:w="2"/><text x="26.1710%" y="95.50"></text></g><g><title>core::ptr::write (2 samples, 0.05%)</title><rect x="25.9210%" y="69" width="0.0534%" height="15" fill="rgb(227,97,0)" fg:x="971" fg:w="2"/><text x="26.1710%" y="79.50"></text></g><g><title>core::ptr::read (3 samples, 0.08%)</title><rect x="26.5617%" y="197" width="0.0801%" height="15" fill="rgb(234,150,53)" fg:x="995" fg:w="3"/><text x="26.8117%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (61 samples, 1.63%)</title><rect x="25.0400%" y="293" width="1.6284%" height="15" fill="rgb(228,201,54)" fg:x="938" fg:w="61"/><text x="25.2900%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (51 samples, 1.36%)</title><rect x="25.3070%" y="277" width="1.3615%" height="15" fill="rgb(222,22,37)" fg:x="948" fg:w="51"/><text x="25.5570%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (26 samples, 0.69%)</title><rect x="25.9744%" y="261" width="0.6941%" height="15" fill="rgb(237,53,32)" fg:x="973" fg:w="26"/><text x="26.2244%" y="271.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.67%)</title><rect x="26.0011%" y="245" width="0.6674%" height="15" fill="rgb(233,25,53)" fg:x="974" fg:w="25"/><text x="26.2511%" y="255.50"></text></g><g><title>core::mem::take (4 samples, 0.11%)</title><rect x="26.5617%" y="229" width="0.1068%" height="15" fill="rgb(210,40,34)" fg:x="995" fg:w="4"/><text x="26.8117%" y="239.50"></text></g><g><title>core::mem::replace (4 samples, 0.11%)</title><rect x="26.5617%" y="213" width="0.1068%" height="15" fill="rgb(241,220,44)" fg:x="995" fg:w="4"/><text x="26.8117%" y="223.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="26.6418%" y="197" width="0.0267%" height="15" fill="rgb(235,28,35)" fg:x="998" fg:w="1"/><text x="26.8918%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (33 samples, 0.88%)</title><rect x="26.9888%" y="133" width="0.8809%" height="15" fill="rgb(210,56,17)" fg:x="1011" fg:w="33"/><text x="27.2388%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (33 samples, 0.88%)</title><rect x="26.9888%" y="117" width="0.8809%" height="15" fill="rgb(224,130,29)" fg:x="1011" fg:w="33"/><text x="27.2388%" y="127.50"></text></g><g><title>cfree (30 samples, 0.80%)</title><rect x="27.0689%" y="101" width="0.8009%" height="15" fill="rgb(235,212,8)" fg:x="1014" fg:w="30"/><text x="27.3189%" y="111.50"></text></g><g><title>[libc.so.6] (25 samples, 0.67%)</title><rect x="27.2023%" y="85" width="0.6674%" height="15" fill="rgb(223,33,50)" fg:x="1019" fg:w="25"/><text x="27.4523%" y="95.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::clear (46 samples, 1.23%)</title><rect x="26.6684%" y="293" width="1.2280%" height="15" fill="rgb(219,149,13)" fg:x="999" fg:w="46"/><text x="26.9184%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (46 samples, 1.23%)</title><rect x="26.6684%" y="277" width="1.2280%" height="15" fill="rgb(250,156,29)" fg:x="999" fg:w="46"/><text x="26.9184%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;]&gt; (45 samples, 1.20%)</title><rect x="26.6951%" y="261" width="1.2013%" height="15" fill="rgb(216,193,19)" fg:x="1000" fg:w="45"/><text x="26.9451%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (43 samples, 1.15%)</title><rect x="26.7485%" y="245" width="1.1479%" height="15" fill="rgb(216,135,14)" fg:x="1002" fg:w="43"/><text x="26.9985%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (43 samples, 1.15%)</title><rect x="26.7485%" y="229" width="1.1479%" height="15" fill="rgb(241,47,5)" fg:x="1002" fg:w="43"/><text x="26.9985%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;simple_lisp::interpreter::ast::Ident,(),rustc_hash::FxBuildHasher&gt;&gt; (43 samples, 1.15%)</title><rect x="26.7485%" y="213" width="1.1479%" height="15" fill="rgb(233,42,35)" fg:x="1002" fg:w="43"/><text x="26.9985%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(simple_lisp::interpreter::ast::Ident,())&gt;&gt; (43 samples, 1.15%)</title><rect x="26.7485%" y="197" width="1.1479%" height="15" fill="rgb(231,13,6)" fg:x="1002" fg:w="43"/><text x="26.9985%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 1.15%)</title><rect x="26.7485%" y="181" width="1.1479%" height="15" fill="rgb(207,181,40)" fg:x="1002" fg:w="43"/><text x="26.9985%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (43 samples, 1.15%)</title><rect x="26.7485%" y="165" width="1.1479%" height="15" fill="rgb(254,173,49)" fg:x="1002" fg:w="43"/><text x="26.9985%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (34 samples, 0.91%)</title><rect x="26.9888%" y="149" width="0.9076%" height="15" fill="rgb(221,1,38)" fg:x="1011" fg:w="34"/><text x="27.2388%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::allocation_info (1 samples, 0.03%)</title><rect x="27.8697%" y="133" width="0.0267%" height="15" fill="rgb(206,124,46)" fg:x="1044" fg:w="1"/><text x="28.1197%" y="143.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.03%)</title><rect x="27.8697%" y="117" width="0.0267%" height="15" fill="rgb(249,21,11)" fg:x="1044" fg:w="1"/><text x="28.1197%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="27.8964%" y="261" width="0.0267%" height="15" fill="rgb(222,201,40)" fg:x="1045" fg:w="1"/><text x="28.1464%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="27.8964%" y="245" width="0.0267%" height="15" fill="rgb(235,61,29)" fg:x="1045" fg:w="1"/><text x="28.1464%" y="255.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::drain (5 samples, 0.13%)</title><rect x="27.8964%" y="293" width="0.1335%" height="15" fill="rgb(219,207,3)" fg:x="1045" fg:w="5"/><text x="28.1464%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (5 samples, 0.13%)</title><rect x="27.8964%" y="277" width="0.1335%" height="15" fill="rgb(222,56,46)" fg:x="1045" fg:w="5"/><text x="28.1464%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (4 samples, 0.11%)</title><rect x="27.9231%" y="261" width="0.1068%" height="15" fill="rgb(239,76,54)" fg:x="1046" fg:w="4"/><text x="28.1731%" y="271.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (4 samples, 0.11%)</title><rect x="27.9231%" y="245" width="0.1068%" height="15" fill="rgb(231,124,27)" fg:x="1046" fg:w="4"/><text x="28.1731%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.11%)</title><rect x="27.9231%" y="229" width="0.1068%" height="15" fill="rgb(249,195,6)" fg:x="1046" fg:w="4"/><text x="28.1731%" y="239.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (4 samples, 0.11%)</title><rect x="28.0299%" y="293" width="0.1068%" height="15" fill="rgb(237,174,47)" fg:x="1050" fg:w="4"/><text x="28.2799%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.11%)</title><rect x="28.0299%" y="277" width="0.1068%" height="15" fill="rgb(206,201,31)" fg:x="1050" fg:w="4"/><text x="28.2799%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (1 samples, 0.03%)</title><rect x="28.1367%" y="213" width="0.0267%" height="15" fill="rgb(231,57,52)" fg:x="1054" fg:w="1"/><text x="28.3867%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (1 samples, 0.03%)</title><rect x="28.1367%" y="197" width="0.0267%" height="15" fill="rgb(248,177,22)" fg:x="1054" fg:w="1"/><text x="28.3867%" y="207.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clear_env (137 samples, 3.66%)</title><rect x="24.6396%" y="325" width="3.6572%" height="15" fill="rgb(215,211,37)" fg:x="923" fg:w="137"/><text x="24.8896%" y="335.50">simp..</text></g><g><title>simple_lisp::interpreter::Env::clear (132 samples, 3.52%)</title><rect x="24.7731%" y="309" width="3.5238%" height="15" fill="rgb(241,128,51)" fg:x="928" fg:w="132"/><text x="25.0231%" y="319.50">sim..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter_mut (6 samples, 0.16%)</title><rect x="28.1367%" y="293" width="0.1602%" height="15" fill="rgb(227,165,31)" fg:x="1054" fg:w="6"/><text x="28.3867%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter_mut (6 samples, 0.16%)</title><rect x="28.1367%" y="277" width="0.1602%" height="15" fill="rgb(228,167,24)" fg:x="1054" fg:w="6"/><text x="28.3867%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (6 samples, 0.16%)</title><rect x="28.1367%" y="261" width="0.1602%" height="15" fill="rgb(228,143,12)" fg:x="1054" fg:w="6"/><text x="28.3867%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (6 samples, 0.16%)</title><rect x="28.1367%" y="245" width="0.1602%" height="15" fill="rgb(249,149,8)" fg:x="1054" fg:w="6"/><text x="28.3867%" y="255.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (6 samples, 0.16%)</title><rect x="28.1367%" y="229" width="0.1602%" height="15" fill="rgb(243,35,44)" fg:x="1054" fg:w="6"/><text x="28.3867%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (5 samples, 0.13%)</title><rect x="28.1634%" y="213" width="0.1335%" height="15" fill="rgb(246,89,9)" fg:x="1055" fg:w="5"/><text x="28.4134%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (5 samples, 0.13%)</title><rect x="28.1634%" y="197" width="0.1335%" height="15" fill="rgb(233,213,13)" fg:x="1055" fg:w="5"/><text x="28.4134%" y="207.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="28.4036%" y="293" width="0.0267%" height="15" fill="rgb(233,141,41)" fg:x="1064" fg:w="1"/><text x="28.6536%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="28.4036%" y="277" width="0.0267%" height="15" fill="rgb(239,167,4)" fg:x="1064" fg:w="1"/><text x="28.6536%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="28.4036%" y="261" width="0.0267%" height="15" fill="rgb(209,217,16)" fg:x="1064" fg:w="1"/><text x="28.6536%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="28.4036%" y="245" width="0.0267%" height="15" fill="rgb(219,88,35)" fg:x="1064" fg:w="1"/><text x="28.6536%" y="255.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (7 samples, 0.19%)</title><rect x="28.4303%" y="293" width="0.1869%" height="15" fill="rgb(220,193,23)" fg:x="1065" fg:w="7"/><text x="28.6803%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7 samples, 0.19%)</title><rect x="28.4303%" y="277" width="0.1869%" height="15" fill="rgb(230,90,52)" fg:x="1065" fg:w="7"/><text x="28.6803%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (3 samples, 0.08%)</title><rect x="28.6172%" y="261" width="0.0801%" height="15" fill="rgb(252,106,19)" fg:x="1072" fg:w="3"/><text x="28.8672%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (3 samples, 0.08%)</title><rect x="28.6172%" y="245" width="0.0801%" height="15" fill="rgb(206,74,20)" fg:x="1072" fg:w="3"/><text x="28.8672%" y="255.50"></text></g><g><title>core::cell::BorrowRefMut::new (3 samples, 0.08%)</title><rect x="28.6172%" y="229" width="0.0801%" height="15" fill="rgb(230,138,44)" fg:x="1072" fg:w="3"/><text x="28.8672%" y="239.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::external (4 samples, 0.11%)</title><rect x="28.6172%" y="293" width="0.1068%" height="15" fill="rgb(235,182,43)" fg:x="1072" fg:w="4"/><text x="28.8672%" y="303.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::set_external (4 samples, 0.11%)</title><rect x="28.6172%" y="277" width="0.1068%" height="15" fill="rgb(242,16,51)" fg:x="1072" fg:w="4"/><text x="28.8672%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;usize&gt;&gt; (1 samples, 0.03%)</title><rect x="28.6973%" y="261" width="0.0267%" height="15" fill="rgb(248,9,4)" fg:x="1075" fg:w="1"/><text x="28.9473%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (1 samples, 0.03%)</title><rect x="28.6973%" y="245" width="0.0267%" height="15" fill="rgb(210,31,22)" fg:x="1075" fg:w="1"/><text x="28.9473%" y="255.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="28.6973%" y="229" width="0.0267%" height="15" fill="rgb(239,54,39)" fg:x="1075" fg:w="1"/><text x="28.9473%" y="239.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.03%)</title><rect x="28.6973%" y="213" width="0.0267%" height="15" fill="rgb(230,99,41)" fg:x="1075" fg:w="1"/><text x="28.9473%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.03%)</title><rect x="28.6973%" y="197" width="0.0267%" height="15" fill="rgb(253,106,12)" fg:x="1075" fg:w="1"/><text x="28.9473%" y="207.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="28.6973%" y="181" width="0.0267%" height="15" fill="rgb(213,46,41)" fg:x="1075" fg:w="1"/><text x="28.9473%" y="191.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="28.6973%" y="165" width="0.0267%" height="15" fill="rgb(215,133,35)" fg:x="1075" fg:w="1"/><text x="28.9473%" y="175.50"></text></g><g><title>[libc.so.6] (32 samples, 0.85%)</title><rect x="29.5515%" y="101" width="0.8542%" height="15" fill="rgb(213,28,5)" fg:x="1107" fg:w="32"/><text x="29.8015%" y="111.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="30.3257%" y="85" width="0.0801%" height="15" fill="rgb(215,77,49)" fg:x="1136" fg:w="3"/><text x="30.5757%" y="95.50"></text></g><g><title>core::ops::function::FnOnce::call_once (64 samples, 1.71%)</title><rect x="28.7240%" y="277" width="1.7085%" height="15" fill="rgb(248,100,22)" fg:x="1076" fg:w="64"/><text x="28.9740%" y="287.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::new (64 samples, 1.71%)</title><rect x="28.7240%" y="261" width="1.7085%" height="15" fill="rgb(208,67,9)" fg:x="1076" fg:w="64"/><text x="28.9740%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (64 samples, 1.71%)</title><rect x="28.7240%" y="245" width="1.7085%" height="15" fill="rgb(219,133,21)" fg:x="1076" fg:w="64"/><text x="28.9740%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (64 samples, 1.71%)</title><rect x="28.7240%" y="229" width="1.7085%" height="15" fill="rgb(246,46,29)" fg:x="1076" fg:w="64"/><text x="28.9740%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (64 samples, 1.71%)</title><rect x="28.7240%" y="213" width="1.7085%" height="15" fill="rgb(246,185,52)" fg:x="1076" fg:w="64"/><text x="28.9740%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (64 samples, 1.71%)</title><rect x="28.7240%" y="197" width="1.7085%" height="15" fill="rgb(252,136,11)" fg:x="1076" fg:w="64"/><text x="28.9740%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (64 samples, 1.71%)</title><rect x="28.7240%" y="181" width="1.7085%" height="15" fill="rgb(219,138,53)" fg:x="1076" fg:w="64"/><text x="28.9740%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (64 samples, 1.71%)</title><rect x="28.7240%" y="165" width="1.7085%" height="15" fill="rgb(211,51,23)" fg:x="1076" fg:w="64"/><text x="28.9740%" y="175.50"></text></g><g><title>alloc::alloc::alloc (64 samples, 1.71%)</title><rect x="28.7240%" y="149" width="1.7085%" height="15" fill="rgb(247,221,28)" fg:x="1076" fg:w="64"/><text x="28.9740%" y="159.50"></text></g><g><title>malloc (64 samples, 1.71%)</title><rect x="28.7240%" y="133" width="1.7085%" height="15" fill="rgb(251,222,45)" fg:x="1076" fg:w="64"/><text x="28.9740%" y="143.50"></text></g><g><title>[libc.so.6] (63 samples, 1.68%)</title><rect x="28.7507%" y="117" width="1.6818%" height="15" fill="rgb(217,162,53)" fg:x="1077" fg:w="63"/><text x="29.0007%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="30.4058%" y="101" width="0.0267%" height="15" fill="rgb(229,93,14)" fg:x="1139" fg:w="1"/><text x="30.6558%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="30.4058%" y="85" width="0.0267%" height="15" fill="rgb(209,67,49)" fg:x="1139" fg:w="1"/><text x="30.6558%" y="95.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket (1 samples, 0.03%)</title><rect x="30.4325%" y="229" width="0.0267%" height="15" fill="rgb(213,87,29)" fg:x="1140" fg:w="1"/><text x="30.6825%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.03%)</title><rect x="30.4325%" y="213" width="0.0267%" height="15" fill="rgb(205,151,52)" fg:x="1140" fg:w="1"/><text x="30.6825%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="30.4325%" y="197" width="0.0267%" height="15" fill="rgb(253,215,39)" fg:x="1140" fg:w="1"/><text x="30.6825%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="30.4325%" y="181" width="0.0267%" height="15" fill="rgb(221,220,41)" fg:x="1140" fg:w="1"/><text x="30.6825%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.03%)</title><rect x="30.4592%" y="197" width="0.0267%" height="15" fill="rgb(218,133,21)" fg:x="1141" fg:w="1"/><text x="30.7092%" y="207.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (68 samples, 1.82%)</title><rect x="28.7240%" y="293" width="1.8153%" height="15" fill="rgb(221,193,43)" fg:x="1076" fg:w="68"/><text x="28.9740%" y="303.50">s..</text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (4 samples, 0.11%)</title><rect x="30.4325%" y="277" width="0.1068%" height="15" fill="rgb(240,128,52)" fg:x="1140" fg:w="4"/><text x="30.6825%" y="287.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (4 samples, 0.11%)</title><rect x="30.4325%" y="261" width="0.1068%" height="15" fill="rgb(253,114,12)" fg:x="1140" fg:w="4"/><text x="30.6825%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (4 samples, 0.11%)</title><rect x="30.4325%" y="245" width="0.1068%" height="15" fill="rgb(215,223,47)" fg:x="1140" fg:w="4"/><text x="30.6825%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (3 samples, 0.08%)</title><rect x="30.4592%" y="229" width="0.0801%" height="15" fill="rgb(248,225,23)" fg:x="1141" fg:w="3"/><text x="30.7092%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (3 samples, 0.08%)</title><rect x="30.4592%" y="213" width="0.0801%" height="15" fill="rgb(250,108,0)" fg:x="1141" fg:w="3"/><text x="30.7092%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (2 samples, 0.05%)</title><rect x="30.4859%" y="197" width="0.0534%" height="15" fill="rgb(228,208,7)" fg:x="1142" fg:w="2"/><text x="30.7359%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (2 samples, 0.05%)</title><rect x="30.4859%" y="181" width="0.0534%" height="15" fill="rgb(244,45,10)" fg:x="1142" fg:w="2"/><text x="30.7359%" y="191.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.03%)</title><rect x="30.5125%" y="165" width="0.0267%" height="15" fill="rgb(207,125,25)" fg:x="1143" fg:w="1"/><text x="30.7625%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.03%)</title><rect x="30.5392%" y="149" width="0.0267%" height="15" fill="rgb(210,195,18)" fg:x="1144" fg:w="1"/><text x="30.7892%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.03%)</title><rect x="30.5392%" y="133" width="0.0267%" height="15" fill="rgb(249,80,12)" fg:x="1144" fg:w="1"/><text x="30.7892%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="30.5392%" y="117" width="0.0267%" height="15" fill="rgb(221,65,9)" fg:x="1144" fg:w="1"/><text x="30.7892%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (3 samples, 0.08%)</title><rect x="30.5392%" y="181" width="0.0801%" height="15" fill="rgb(235,49,36)" fg:x="1144" fg:w="3"/><text x="30.7892%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (3 samples, 0.08%)</title><rect x="30.5392%" y="165" width="0.0801%" height="15" fill="rgb(225,32,20)" fg:x="1144" fg:w="3"/><text x="30.7892%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (2 samples, 0.05%)</title><rect x="30.5659%" y="149" width="0.0534%" height="15" fill="rgb(215,141,46)" fg:x="1145" fg:w="2"/><text x="30.8159%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (4 samples, 0.11%)</title><rect x="30.5392%" y="261" width="0.1068%" height="15" fill="rgb(250,160,47)" fg:x="1144" fg:w="4"/><text x="30.7892%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (4 samples, 0.11%)</title><rect x="30.5392%" y="245" width="0.1068%" height="15" fill="rgb(216,222,40)" fg:x="1144" fg:w="4"/><text x="30.7892%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.11%)</title><rect x="30.5392%" y="229" width="0.1068%" height="15" fill="rgb(234,217,39)" fg:x="1144" fg:w="4"/><text x="30.7892%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (4 samples, 0.11%)</title><rect x="30.5392%" y="213" width="0.1068%" height="15" fill="rgb(207,178,40)" fg:x="1144" fg:w="4"/><text x="30.7892%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (4 samples, 0.11%)</title><rect x="30.5392%" y="197" width="0.1068%" height="15" fill="rgb(221,136,13)" fg:x="1144" fg:w="4"/><text x="30.7892%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1 samples, 0.03%)</title><rect x="30.6193%" y="181" width="0.0267%" height="15" fill="rgb(249,199,10)" fg:x="1147" fg:w="1"/><text x="30.8693%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.03%)</title><rect x="30.6193%" y="165" width="0.0267%" height="15" fill="rgb(249,222,13)" fg:x="1147" fg:w="1"/><text x="30.8693%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 0.03%)</title><rect x="30.6193%" y="149" width="0.0267%" height="15" fill="rgb(244,185,38)" fg:x="1147" fg:w="1"/><text x="30.8693%" y="159.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.03%)</title><rect x="30.6193%" y="133" width="0.0267%" height="15" fill="rgb(236,202,9)" fg:x="1147" fg:w="1"/><text x="30.8693%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="30.6193%" y="117" width="0.0267%" height="15" fill="rgb(250,229,37)" fg:x="1147" fg:w="1"/><text x="30.8693%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="30.6193%" y="101" width="0.0267%" height="15" fill="rgb(206,174,23)" fg:x="1147" fg:w="1"/><text x="30.8693%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="30.6193%" y="85" width="0.0267%" height="15" fill="rgb(211,33,43)" fg:x="1147" fg:w="1"/><text x="30.8693%" y="95.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="30.6193%" y="69" width="0.0267%" height="15" fill="rgb(245,58,50)" fg:x="1147" fg:w="1"/><text x="30.8693%" y="79.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.03%)</title><rect x="30.7261%" y="229" width="0.0267%" height="15" fill="rgb(244,68,36)" fg:x="1151" fg:w="1"/><text x="30.9761%" y="239.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (9 samples, 0.24%)</title><rect x="30.5392%" y="293" width="0.2403%" height="15" fill="rgb(232,229,15)" fg:x="1144" fg:w="9"/><text x="30.7892%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (9 samples, 0.24%)</title><rect x="30.5392%" y="277" width="0.2403%" height="15" fill="rgb(254,30,23)" fg:x="1144" fg:w="9"/><text x="30.7892%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.13%)</title><rect x="30.6460%" y="261" width="0.1335%" height="15" fill="rgb(235,160,14)" fg:x="1148" fg:w="5"/><text x="30.8960%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (5 samples, 0.13%)</title><rect x="30.6460%" y="245" width="0.1335%" height="15" fill="rgb(212,155,44)" fg:x="1148" fg:w="5"/><text x="30.8960%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.03%)</title><rect x="30.7528%" y="229" width="0.0267%" height="15" fill="rgb(226,2,50)" fg:x="1152" fg:w="1"/><text x="31.0028%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="30.7528%" y="213" width="0.0267%" height="15" fill="rgb(234,177,6)" fg:x="1152" fg:w="1"/><text x="31.0028%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="30.7528%" y="197" width="0.0267%" height="15" fill="rgb(217,24,9)" fg:x="1152" fg:w="1"/><text x="31.0028%" y="207.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (2 samples, 0.05%)</title><rect x="30.7795%" y="293" width="0.0534%" height="15" fill="rgb(220,13,46)" fg:x="1153" fg:w="2"/><text x="31.0295%" y="303.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (2 samples, 0.05%)</title><rect x="30.7795%" y="277" width="0.0534%" height="15" fill="rgb(239,221,27)" fg:x="1153" fg:w="2"/><text x="31.0295%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2 samples, 0.05%)</title><rect x="30.7795%" y="261" width="0.0534%" height="15" fill="rgb(222,198,25)" fg:x="1153" fg:w="2"/><text x="31.0295%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.05%)</title><rect x="30.7795%" y="245" width="0.0534%" height="15" fill="rgb(211,99,13)" fg:x="1153" fg:w="2"/><text x="31.0295%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.03%)</title><rect x="30.8062%" y="229" width="0.0267%" height="15" fill="rgb(232,111,31)" fg:x="1154" fg:w="1"/><text x="31.0562%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.03%)</title><rect x="30.8062%" y="213" width="0.0267%" height="15" fill="rgb(245,82,37)" fg:x="1154" fg:w="1"/><text x="31.0562%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.03%)</title><rect x="30.8062%" y="197" width="0.0267%" height="15" fill="rgb(227,149,46)" fg:x="1154" fg:w="1"/><text x="31.0562%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="30.8062%" y="181" width="0.0267%" height="15" fill="rgb(218,36,50)" fg:x="1154" fg:w="1"/><text x="31.0562%" y="191.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.03%)</title><rect x="30.9931%" y="181" width="0.0267%" height="15" fill="rgb(226,80,48)" fg:x="1161" fg:w="1"/><text x="31.2431%" y="191.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.03%)</title><rect x="30.9931%" y="165" width="0.0267%" height="15" fill="rgb(238,224,15)" fg:x="1161" fg:w="1"/><text x="31.2431%" y="175.50"></text></g><g><title>core::mem::swap (3 samples, 0.08%)</title><rect x="31.0198%" y="165" width="0.0801%" height="15" fill="rgb(241,136,10)" fg:x="1162" fg:w="3"/><text x="31.2698%" y="175.50"></text></g><g><title>core::mem::swap_simple (3 samples, 0.08%)</title><rect x="31.0198%" y="149" width="0.0801%" height="15" fill="rgb(208,32,45)" fg:x="1162" fg:w="3"/><text x="31.2698%" y="159.50"></text></g><g><title>core::ptr::read (3 samples, 0.08%)</title><rect x="31.0198%" y="133" width="0.0801%" height="15" fill="rgb(207,135,9)" fg:x="1162" fg:w="3"/><text x="31.2698%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (9 samples, 0.24%)</title><rect x="31.0998%" y="133" width="0.2403%" height="15" fill="rgb(206,86,44)" fg:x="1165" fg:w="9"/><text x="31.3498%" y="143.50"></text></g><g><title>core::intrinsics::write_bytes (9 samples, 0.24%)</title><rect x="31.0998%" y="117" width="0.2403%" height="15" fill="rgb(245,177,15)" fg:x="1165" fg:w="9"/><text x="31.3498%" y="127.50"></text></g><g><title>[libc.so.6] (8 samples, 0.21%)</title><rect x="31.1265%" y="101" width="0.2136%" height="15" fill="rgb(206,64,50)" fg:x="1166" fg:w="8"/><text x="31.3765%" y="111.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="31.3935%" y="53" width="0.0267%" height="15" fill="rgb(234,36,40)" fg:x="1176" fg:w="1"/><text x="31.6435%" y="63.50"></text></g><g><title>__rust_alloc (4 samples, 0.11%)</title><rect x="31.4202%" y="53" width="0.1068%" height="15" fill="rgb(213,64,8)" fg:x="1177" fg:w="4"/><text x="31.6702%" y="63.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (25 samples, 0.67%)</title><rect x="31.0198%" y="181" width="0.6674%" height="15" fill="rgb(210,75,36)" fg:x="1162" fg:w="25"/><text x="31.2698%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (22 samples, 0.59%)</title><rect x="31.0998%" y="165" width="0.5873%" height="15" fill="rgb(229,88,21)" fg:x="1165" fg:w="22"/><text x="31.3498%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (22 samples, 0.59%)</title><rect x="31.0998%" y="149" width="0.5873%" height="15" fill="rgb(252,204,47)" fg:x="1165" fg:w="22"/><text x="31.3498%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (13 samples, 0.35%)</title><rect x="31.3401%" y="133" width="0.3470%" height="15" fill="rgb(208,77,27)" fg:x="1174" fg:w="13"/><text x="31.5901%" y="143.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (13 samples, 0.35%)</title><rect x="31.3401%" y="117" width="0.3470%" height="15" fill="rgb(221,76,26)" fg:x="1174" fg:w="13"/><text x="31.5901%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.35%)</title><rect x="31.3401%" y="101" width="0.3470%" height="15" fill="rgb(225,139,18)" fg:x="1174" fg:w="13"/><text x="31.5901%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.35%)</title><rect x="31.3401%" y="85" width="0.3470%" height="15" fill="rgb(230,137,11)" fg:x="1174" fg:w="13"/><text x="31.5901%" y="95.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.32%)</title><rect x="31.3668%" y="69" width="0.3203%" height="15" fill="rgb(212,28,1)" fg:x="1175" fg:w="12"/><text x="31.6168%" y="79.50"></text></g><g><title>malloc (6 samples, 0.16%)</title><rect x="31.5270%" y="53" width="0.1602%" height="15" fill="rgb(248,164,17)" fg:x="1181" fg:w="6"/><text x="31.7770%" y="63.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (29 samples, 0.77%)</title><rect x="30.9397%" y="229" width="0.7742%" height="15" fill="rgb(222,171,42)" fg:x="1159" fg:w="29"/><text x="31.1897%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (28 samples, 0.75%)</title><rect x="30.9664%" y="213" width="0.7475%" height="15" fill="rgb(243,84,45)" fg:x="1160" fg:w="28"/><text x="31.2164%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (28 samples, 0.75%)</title><rect x="30.9664%" y="197" width="0.7475%" height="15" fill="rgb(252,49,23)" fg:x="1160" fg:w="28"/><text x="31.2164%" y="207.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.03%)</title><rect x="31.6871%" y="181" width="0.0267%" height="15" fill="rgb(215,19,7)" fg:x="1187" fg:w="1"/><text x="31.9371%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.13%)</title><rect x="31.7138%" y="213" width="0.1335%" height="15" fill="rgb(238,81,41)" fg:x="1188" fg:w="5"/><text x="31.9638%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (5 samples, 0.13%)</title><rect x="31.7138%" y="197" width="0.1335%" height="15" fill="rgb(210,199,37)" fg:x="1188" fg:w="5"/><text x="31.9638%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (1 samples, 0.03%)</title><rect x="31.8473%" y="213" width="0.0267%" height="15" fill="rgb(244,192,49)" fg:x="1193" fg:w="1"/><text x="32.0973%" y="223.50"></text></g><g><title>hashbrown::raw::h2 (7 samples, 0.19%)</title><rect x="31.8740%" y="213" width="0.1869%" height="15" fill="rgb(226,211,11)" fg:x="1194" fg:w="7"/><text x="32.1240%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (105 samples, 2.80%)</title><rect x="30.9397%" y="245" width="2.8030%" height="15" fill="rgb(236,162,54)" fg:x="1159" fg:w="105"/><text x="31.1897%" y="255.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (76 samples, 2.03%)</title><rect x="31.7138%" y="229" width="2.0288%" height="15" fill="rgb(220,229,9)" fg:x="1188" fg:w="76"/><text x="31.9638%" y="239.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (63 samples, 1.68%)</title><rect x="32.0609%" y="213" width="1.6818%" height="15" fill="rgb(250,87,22)" fg:x="1201" fg:w="63"/><text x="32.3109%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (63 samples, 1.68%)</title><rect x="32.0609%" y="197" width="1.6818%" height="15" fill="rgb(239,43,17)" fg:x="1201" fg:w="63"/><text x="32.3109%" y="207.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::define_var (205 samples, 5.47%)</title><rect x="28.2968%" y="325" width="5.4725%" height="15" fill="rgb(231,177,25)" fg:x="1060" fg:w="205"/><text x="28.5468%" y="335.50">simple_..</text></g><g><title>simple_lisp::interpreter::Env::insert (202 samples, 5.39%)</title><rect x="28.3769%" y="309" width="5.3924%" height="15" fill="rgb(219,179,1)" fg:x="1063" fg:w="202"/><text x="28.6269%" y="319.50">simple_..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (110 samples, 2.94%)</title><rect x="30.8329%" y="293" width="2.9365%" height="15" fill="rgb(238,219,53)" fg:x="1155" fg:w="110"/><text x="31.0829%" y="303.50">st..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (110 samples, 2.94%)</title><rect x="30.8329%" y="277" width="2.9365%" height="15" fill="rgb(232,167,36)" fg:x="1155" fg:w="110"/><text x="31.0829%" y="287.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (108 samples, 2.88%)</title><rect x="30.8863%" y="261" width="2.8831%" height="15" fill="rgb(244,19,51)" fg:x="1157" fg:w="108"/><text x="31.1363%" y="271.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.03%)</title><rect x="33.7427%" y="245" width="0.0267%" height="15" fill="rgb(224,6,22)" fg:x="1264" fg:w="1"/><text x="33.9927%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (1 samples, 0.03%)</title><rect x="33.7427%" y="229" width="0.0267%" height="15" fill="rgb(224,145,5)" fg:x="1264" fg:w="1"/><text x="33.9927%" y="239.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (7 samples, 0.19%)</title><rect x="33.9295%" y="309" width="0.1869%" height="15" fill="rgb(234,130,49)" fg:x="1271" fg:w="7"/><text x="34.1795%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (7 samples, 0.19%)</title><rect x="33.9295%" y="293" width="0.1869%" height="15" fill="rgb(254,6,2)" fg:x="1271" fg:w="7"/><text x="34.1795%" y="303.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (1 samples, 0.03%)</title><rect x="34.4367%" y="293" width="0.0267%" height="15" fill="rgb(208,96,46)" fg:x="1290" fg:w="1"/><text x="34.6867%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.03%)</title><rect x="34.4367%" y="277" width="0.0267%" height="15" fill="rgb(239,3,39)" fg:x="1290" fg:w="1"/><text x="34.6867%" y="287.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::DataRef as core::clone::Clone&gt;::clone (48 samples, 1.28%)</title><rect x="34.4634%" y="293" width="1.2814%" height="15" fill="rgb(233,210,1)" fg:x="1291" fg:w="48"/><text x="34.7134%" y="303.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::clone::Clone&gt;::clone (48 samples, 1.28%)</title><rect x="34.4634%" y="277" width="1.2814%" height="15" fill="rgb(244,137,37)" fg:x="1291" fg:w="48"/><text x="34.7134%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="35.8516%" y="245" width="0.0267%" height="15" fill="rgb(240,136,2)" fg:x="1343" fg:w="1"/><text x="36.1016%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="35.8516%" y="229" width="0.0267%" height="15" fill="rgb(239,18,37)" fg:x="1343" fg:w="1"/><text x="36.1016%" y="239.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="35.8516%" y="213" width="0.0267%" height="15" fill="rgb(218,185,22)" fg:x="1343" fg:w="1"/><text x="36.1016%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (1 samples, 0.03%)</title><rect x="35.8516%" y="197" width="0.0267%" height="15" fill="rgb(225,218,4)" fg:x="1343" fg:w="1"/><text x="36.1016%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (6 samples, 0.16%)</title><rect x="37.0796%" y="181" width="0.1602%" height="15" fill="rgb(230,182,32)" fg:x="1389" fg:w="6"/><text x="37.3296%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.77%)</title><rect x="36.4923%" y="197" width="0.7742%" height="15" fill="rgb(242,56,43)" fg:x="1367" fg:w="29"/><text x="36.7423%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.03%)</title><rect x="37.2397%" y="181" width="0.0267%" height="15" fill="rgb(233,99,24)" fg:x="1395" fg:w="1"/><text x="37.4897%" y="191.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (22 samples, 0.59%)</title><rect x="37.2664%" y="181" width="0.5873%" height="15" fill="rgb(234,209,42)" fg:x="1396" fg:w="22"/><text x="37.5164%" y="191.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (22 samples, 0.59%)</title><rect x="37.2664%" y="165" width="0.5873%" height="15" fill="rgb(227,7,12)" fg:x="1396" fg:w="22"/><text x="37.5164%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (22 samples, 0.59%)</title><rect x="37.2664%" y="149" width="0.5873%" height="15" fill="rgb(245,203,43)" fg:x="1396" fg:w="22"/><text x="37.5164%" y="159.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::cmp::PartialEq&gt;::eq (22 samples, 0.59%)</title><rect x="37.2664%" y="133" width="0.5873%" height="15" fill="rgb(238,205,33)" fg:x="1396" fg:w="22"/><text x="37.5164%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (31 samples, 0.83%)</title><rect x="37.2664%" y="197" width="0.8275%" height="15" fill="rgb(231,56,7)" fg:x="1396" fg:w="31"/><text x="37.5164%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (9 samples, 0.24%)</title><rect x="37.8537%" y="181" width="0.2403%" height="15" fill="rgb(244,186,29)" fg:x="1418" fg:w="9"/><text x="38.1037%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (9 samples, 0.24%)</title><rect x="37.8537%" y="165" width="0.2403%" height="15" fill="rgb(234,111,31)" fg:x="1418" fg:w="9"/><text x="38.1037%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (9 samples, 0.24%)</title><rect x="37.8537%" y="149" width="0.2403%" height="15" fill="rgb(241,149,10)" fg:x="1418" fg:w="9"/><text x="38.1037%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (9 samples, 0.24%)</title><rect x="37.8537%" y="133" width="0.2403%" height="15" fill="rgb(249,206,44)" fg:x="1418" fg:w="9"/><text x="38.1037%" y="143.50"></text></g><g><title>hashbrown::raw::h2 (16 samples, 0.43%)</title><rect x="38.0940%" y="197" width="0.4271%" height="15" fill="rgb(251,153,30)" fg:x="1427" fg:w="16"/><text x="38.3440%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (9 samples, 0.24%)</title><rect x="38.5211%" y="197" width="0.2403%" height="15" fill="rgb(239,152,38)" fg:x="1443" fg:w="9"/><text x="38.7711%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (9 samples, 0.24%)</title><rect x="38.5211%" y="181" width="0.2403%" height="15" fill="rgb(249,139,47)" fg:x="1443" fg:w="9"/><text x="38.7711%" y="191.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::get_var (189 samples, 5.05%)</title><rect x="33.7694%" y="325" width="5.0454%" height="15" fill="rgb(244,64,35)" fg:x="1265" fg:w="189"/><text x="34.0194%" y="335.50">simple..</text></g><g><title>simple_lisp::interpreter::Env::get (176 samples, 4.70%)</title><rect x="34.1164%" y="309" width="4.6983%" height="15" fill="rgb(216,46,15)" fg:x="1278" fg:w="176"/><text x="34.3664%" y="319.50">simpl..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (115 samples, 3.07%)</title><rect x="35.7448%" y="293" width="3.0699%" height="15" fill="rgb(250,74,19)" fg:x="1339" fg:w="115"/><text x="35.9948%" y="303.50">std..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (115 samples, 3.07%)</title><rect x="35.7448%" y="277" width="3.0699%" height="15" fill="rgb(249,42,33)" fg:x="1339" fg:w="115"/><text x="35.9948%" y="287.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (115 samples, 3.07%)</title><rect x="35.7448%" y="261" width="3.0699%" height="15" fill="rgb(242,149,17)" fg:x="1339" fg:w="115"/><text x="35.9948%" y="271.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (110 samples, 2.94%)</title><rect x="35.8783%" y="245" width="2.9365%" height="15" fill="rgb(244,29,21)" fg:x="1344" fg:w="110"/><text x="36.1283%" y="255.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (110 samples, 2.94%)</title><rect x="35.8783%" y="229" width="2.9365%" height="15" fill="rgb(220,130,37)" fg:x="1344" fg:w="110"/><text x="36.1283%" y="239.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (109 samples, 2.91%)</title><rect x="35.9050%" y="213" width="2.9098%" height="15" fill="rgb(211,67,2)" fg:x="1345" fg:w="109"/><text x="36.1550%" y="223.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2 samples, 0.05%)</title><rect x="38.7613%" y="197" width="0.0534%" height="15" fill="rgb(235,68,52)" fg:x="1452" fg:w="2"/><text x="39.0113%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.05%)</title><rect x="38.7613%" y="181" width="0.0534%" height="15" fill="rgb(246,142,3)" fg:x="1452" fg:w="2"/><text x="39.0113%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.05%)</title><rect x="38.7613%" y="165" width="0.0534%" height="15" fill="rgb(241,25,7)" fg:x="1452" fg:w="2"/><text x="39.0113%" y="175.50"></text></g><g><title>__rust_dealloc (1 samples, 0.03%)</title><rect x="38.8414%" y="309" width="0.0267%" height="15" fill="rgb(242,119,39)" fg:x="1455" fg:w="1"/><text x="39.0914%" y="319.50"></text></g><g><title>cfree (3 samples, 0.08%)</title><rect x="38.8681%" y="309" width="0.0801%" height="15" fill="rgb(241,98,45)" fg:x="1456" fg:w="3"/><text x="39.1181%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="38.9215%" y="293" width="0.0267%" height="15" fill="rgb(254,28,30)" fg:x="1458" fg:w="1"/><text x="39.1715%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (2 samples, 0.05%)</title><rect x="38.9482%" y="309" width="0.0534%" height="15" fill="rgb(241,142,54)" fg:x="1459" fg:w="2"/><text x="39.1982%" y="319.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="39.1885%" y="229" width="0.0267%" height="15" fill="rgb(222,85,15)" fg:x="1468" fg:w="1"/><text x="39.4385%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::Drain&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="39.1885%" y="277" width="0.0534%" height="15" fill="rgb(210,85,47)" fg:x="1468" fg:w="2"/><text x="39.4385%" y="287.50"></text></g><g><title>&lt;hashbrown::map::Drain&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="39.1885%" y="261" width="0.0534%" height="15" fill="rgb(224,206,25)" fg:x="1468" fg:w="2"/><text x="39.4385%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawDrain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="39.1885%" y="245" width="0.0534%" height="15" fill="rgb(243,201,19)" fg:x="1468" fg:w="2"/><text x="39.4385%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="39.2152%" y="229" width="0.0267%" height="15" fill="rgb(236,59,4)" fg:x="1469" fg:w="1"/><text x="39.4652%" y="239.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.03%)</title><rect x="39.2152%" y="213" width="0.0267%" height="15" fill="rgb(254,179,45)" fg:x="1469" fg:w="1"/><text x="39.4652%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="39.2152%" y="197" width="0.0267%" height="15" fill="rgb(226,14,10)" fg:x="1469" fg:w="1"/><text x="39.4652%" y="207.50"></text></g><g><title>core::mem::drop (17 samples, 0.45%)</title><rect x="39.2419%" y="277" width="0.4538%" height="15" fill="rgb(244,27,41)" fg:x="1470" fg:w="17"/><text x="39.4919%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::ExternalData&gt; (17 samples, 0.45%)</title><rect x="39.2419%" y="261" width="0.4538%" height="15" fill="rgb(235,35,32)" fg:x="1470" fg:w="17"/><text x="39.4919%" y="271.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::ExternalData as core::ops::drop::Drop&gt;::drop (17 samples, 0.45%)</title><rect x="39.2419%" y="245" width="0.4538%" height="15" fill="rgb(218,68,31)" fg:x="1470" fg:w="17"/><text x="39.4919%" y="255.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::unset_external (17 samples, 0.45%)</title><rect x="39.2419%" y="229" width="0.4538%" height="15" fill="rgb(207,120,37)" fg:x="1470" fg:w="17"/><text x="39.4919%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (17 samples, 0.45%)</title><rect x="39.2419%" y="213" width="0.4538%" height="15" fill="rgb(227,98,0)" fg:x="1470" fg:w="17"/><text x="39.4919%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (17 samples, 0.45%)</title><rect x="39.2419%" y="197" width="0.4538%" height="15" fill="rgb(207,7,3)" fg:x="1470" fg:w="17"/><text x="39.4919%" y="207.50"></text></g><g><title>core::cell::BorrowRefMut::new (17 samples, 0.45%)</title><rect x="39.2419%" y="181" width="0.4538%" height="15" fill="rgb(206,98,19)" fg:x="1470" fg:w="17"/><text x="39.4919%" y="191.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.08%)</title><rect x="39.6957%" y="181" width="0.0801%" height="15" fill="rgb(217,5,26)" fg:x="1487" fg:w="3"/><text x="39.9457%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.08%)</title><rect x="39.6957%" y="165" width="0.0801%" height="15" fill="rgb(235,190,38)" fg:x="1487" fg:w="3"/><text x="39.9457%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;misc_utils::stack::Stack&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (11 samples, 0.29%)</title><rect x="39.6957%" y="277" width="0.2936%" height="15" fill="rgb(247,86,24)" fg:x="1487" fg:w="11"/><text x="39.9457%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (11 samples, 0.29%)</title><rect x="39.6957%" y="261" width="0.2936%" height="15" fill="rgb(205,101,16)" fg:x="1487" fg:w="11"/><text x="39.9457%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (11 samples, 0.29%)</title><rect x="39.6957%" y="245" width="0.2936%" height="15" fill="rgb(246,168,33)" fg:x="1487" fg:w="11"/><text x="39.9457%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.29%)</title><rect x="39.6957%" y="229" width="0.2936%" height="15" fill="rgb(231,114,1)" fg:x="1487" fg:w="11"/><text x="39.9457%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.29%)</title><rect x="39.6957%" y="213" width="0.2936%" height="15" fill="rgb(207,184,53)" fg:x="1487" fg:w="11"/><text x="39.9457%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.29%)</title><rect x="39.6957%" y="197" width="0.2936%" height="15" fill="rgb(224,95,51)" fg:x="1487" fg:w="11"/><text x="39.9457%" y="207.50"></text></g><g><title>cfree (8 samples, 0.21%)</title><rect x="39.7758%" y="181" width="0.2136%" height="15" fill="rgb(212,188,45)" fg:x="1490" fg:w="8"/><text x="40.0258%" y="191.50"></text></g><g><title>[libc.so.6] (5 samples, 0.13%)</title><rect x="39.8558%" y="165" width="0.1335%" height="15" fill="rgb(223,154,38)" fg:x="1493" fg:w="5"/><text x="40.1058%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (42 samples, 1.12%)</title><rect x="40.0427%" y="213" width="1.1212%" height="15" fill="rgb(251,22,52)" fg:x="1500" fg:w="42"/><text x="40.2927%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (42 samples, 1.12%)</title><rect x="40.0427%" y="197" width="1.1212%" height="15" fill="rgb(229,209,22)" fg:x="1500" fg:w="42"/><text x="40.2927%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (4 samples, 0.11%)</title><rect x="41.2974%" y="197" width="0.1068%" height="15" fill="rgb(234,138,34)" fg:x="1547" fg:w="4"/><text x="41.5474%" y="207.50"></text></g><g><title>core::intrinsics::write_bytes (4 samples, 0.11%)</title><rect x="41.2974%" y="181" width="0.1068%" height="15" fill="rgb(212,95,11)" fg:x="1547" fg:w="4"/><text x="41.5474%" y="191.50"></text></g><g><title>[libc.so.6] (4 samples, 0.11%)</title><rect x="41.2974%" y="165" width="0.1068%" height="15" fill="rgb(240,179,47)" fg:x="1547" fg:w="4"/><text x="41.5474%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::Drain&lt;simple_lisp::interpreter::ast::Ident,misc_utils::stack::Stack&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt;&gt; (55 samples, 1.47%)</title><rect x="39.9893%" y="277" width="1.4682%" height="15" fill="rgb(240,163,11)" fg:x="1498" fg:w="55"/><text x="40.2393%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::Drain&lt;simple_lisp::interpreter::ast::Ident,misc_utils::stack::Stack&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt;&gt; (55 samples, 1.47%)</title><rect x="39.9893%" y="261" width="1.4682%" height="15" fill="rgb(236,37,12)" fg:x="1498" fg:w="55"/><text x="40.2393%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawDrain&lt;(simple_lisp::interpreter::ast::Ident,misc_utils::stack::Stack&lt;simple_lisp::interpreter::data::ExternalData&gt;)&gt;&gt; (55 samples, 1.47%)</title><rect x="39.9893%" y="245" width="1.4682%" height="15" fill="rgb(232,164,16)" fg:x="1498" fg:w="55"/><text x="40.2393%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawDrain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 1.47%)</title><rect x="39.9893%" y="229" width="1.4682%" height="15" fill="rgb(244,205,15)" fg:x="1498" fg:w="55"/><text x="40.2393%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::clear_no_drop (11 samples, 0.29%)</title><rect x="41.1639%" y="213" width="0.2936%" height="15" fill="rgb(223,117,47)" fg:x="1542" fg:w="11"/><text x="41.4139%" y="223.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (2 samples, 0.05%)</title><rect x="41.4042%" y="197" width="0.0534%" height="15" fill="rgb(244,107,35)" fg:x="1551" fg:w="2"/><text x="41.6542%" y="207.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::pop (12 samples, 0.32%)</title><rect x="41.4576%" y="277" width="0.3203%" height="15" fill="rgb(205,140,8)" fg:x="1553" fg:w="12"/><text x="41.7076%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (12 samples, 0.32%)</title><rect x="41.4576%" y="261" width="0.3203%" height="15" fill="rgb(228,84,46)" fg:x="1553" fg:w="12"/><text x="41.7076%" y="271.50"></text></g><g><title>&lt;simple_lisp::interpreter::Env as core::ops::drop::Drop&gt;::drop (105 samples, 2.80%)</title><rect x="39.0016%" y="293" width="2.8030%" height="15" fill="rgb(254,188,9)" fg:x="1461" fg:w="105"/><text x="39.2516%" y="303.50">&lt;s..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::drain (1 samples, 0.03%)</title><rect x="41.7779%" y="277" width="0.0267%" height="15" fill="rgb(206,112,54)" fg:x="1565" fg:w="1"/><text x="42.0279%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::drain (1 samples, 0.03%)</title><rect x="41.7779%" y="261" width="0.0267%" height="15" fill="rgb(216,84,49)" fg:x="1565" fg:w="1"/><text x="42.0279%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drain (1 samples, 0.03%)</title><rect x="41.7779%" y="245" width="0.0267%" height="15" fill="rgb(214,194,35)" fg:x="1565" fg:w="1"/><text x="42.0279%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drain_iter_from (1 samples, 0.03%)</title><rect x="41.7779%" y="229" width="0.0267%" height="15" fill="rgb(249,28,3)" fg:x="1565" fg:w="1"/><text x="42.0279%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::Env&gt; (106 samples, 2.83%)</title><rect x="39.0016%" y="309" width="2.8297%" height="15" fill="rgb(222,56,52)" fg:x="1461" fg:w="106"/><text x="39.2516%" y="319.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;misc_utils::stack::Stack&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="41.8046%" y="293" width="0.0267%" height="15" fill="rgb(245,217,50)" fg:x="1566" fg:w="1"/><text x="42.0546%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="41.8046%" y="277" width="0.0267%" height="15" fill="rgb(213,201,24)" fg:x="1566" fg:w="1"/><text x="42.0546%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt;&gt; (1 samples, 0.03%)</title><rect x="41.8046%" y="261" width="0.0267%" height="15" fill="rgb(248,116,28)" fg:x="1566" fg:w="1"/><text x="42.0546%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="41.8046%" y="245" width="0.0267%" height="15" fill="rgb(219,72,43)" fg:x="1566" fg:w="1"/><text x="42.0546%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="41.8046%" y="229" width="0.0267%" height="15" fill="rgb(209,138,14)" fg:x="1566" fg:w="1"/><text x="42.0546%" y="239.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="41.8046%" y="213" width="0.0267%" height="15" fill="rgb(222,18,33)" fg:x="1566" fg:w="1"/><text x="42.0546%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="41.8580%" y="293" width="0.0534%" height="15" fill="rgb(213,199,7)" fg:x="1568" fg:w="2"/><text x="42.1080%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="41.8580%" y="277" width="0.0534%" height="15" fill="rgb(250,110,10)" fg:x="1568" fg:w="2"/><text x="42.1080%" y="287.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="41.8580%" y="261" width="0.0534%" height="15" fill="rgb(248,123,6)" fg:x="1568" fg:w="2"/><text x="42.1080%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="41.8580%" y="245" width="0.0534%" height="15" fill="rgb(206,91,31)" fg:x="1568" fg:w="2"/><text x="42.1080%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="41.9381%" y="197" width="0.0267%" height="15" fill="rgb(211,154,13)" fg:x="1571" fg:w="1"/><text x="42.1881%" y="207.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::pop_env (119 samples, 3.18%)</title><rect x="38.8147%" y="325" width="3.1767%" height="15" fill="rgb(225,148,7)" fg:x="1454" fg:w="119"/><text x="39.0647%" y="335.50">sim..</text></g><g><title>simple_lisp::interpreter::Env::var_count (6 samples, 0.16%)</title><rect x="41.8313%" y="309" width="0.1602%" height="15" fill="rgb(220,160,43)" fg:x="1567" fg:w="6"/><text x="42.0813%" y="319.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::values (3 samples, 0.08%)</title><rect x="41.9114%" y="293" width="0.0801%" height="15" fill="rgb(213,52,39)" fg:x="1570" fg:w="3"/><text x="42.1614%" y="303.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (3 samples, 0.08%)</title><rect x="41.9114%" y="277" width="0.0801%" height="15" fill="rgb(243,137,7)" fg:x="1570" fg:w="3"/><text x="42.1614%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (3 samples, 0.08%)</title><rect x="41.9114%" y="261" width="0.0801%" height="15" fill="rgb(230,79,13)" fg:x="1570" fg:w="3"/><text x="42.1614%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (3 samples, 0.08%)</title><rect x="41.9114%" y="245" width="0.0801%" height="15" fill="rgb(247,105,23)" fg:x="1570" fg:w="3"/><text x="42.1614%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (3 samples, 0.08%)</title><rect x="41.9114%" y="229" width="0.0801%" height="15" fill="rgb(223,179,41)" fg:x="1570" fg:w="3"/><text x="42.1614%" y="239.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (2 samples, 0.05%)</title><rect x="41.9381%" y="213" width="0.0534%" height="15" fill="rgb(218,9,34)" fg:x="1571" fg:w="2"/><text x="42.1881%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (1 samples, 0.03%)</title><rect x="41.9648%" y="197" width="0.0267%" height="15" fill="rgb(222,106,8)" fg:x="1572" fg:w="1"/><text x="42.2148%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.03%)</title><rect x="41.9648%" y="181" width="0.0267%" height="15" fill="rgb(211,220,0)" fg:x="1572" fg:w="1"/><text x="42.2148%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="41.9648%" y="165" width="0.0267%" height="15" fill="rgb(229,52,16)" fg:x="1572" fg:w="1"/><text x="42.2148%" y="175.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="42.0982%" y="309" width="0.0267%" height="15" fill="rgb(212,155,18)" fg:x="1577" fg:w="1"/><text x="42.3482%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="42.0982%" y="293" width="0.0267%" height="15" fill="rgb(242,21,14)" fg:x="1577" fg:w="1"/><text x="42.3482%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="42.0982%" y="277" width="0.0267%" height="15" fill="rgb(222,19,48)" fg:x="1577" fg:w="1"/><text x="42.3482%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="42.0982%" y="261" width="0.0267%" height="15" fill="rgb(232,45,27)" fg:x="1577" fg:w="1"/><text x="42.3482%" y="271.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::pop_from_scope (6 samples, 0.16%)</title><rect x="41.9915%" y="325" width="0.1602%" height="15" fill="rgb(249,103,42)" fg:x="1573" fg:w="6"/><text x="42.2415%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.03%)</title><rect x="42.1249%" y="309" width="0.0267%" height="15" fill="rgb(246,81,33)" fg:x="1578" fg:w="1"/><text x="42.3749%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="42.1249%" y="293" width="0.0267%" height="15" fill="rgb(252,33,42)" fg:x="1578" fg:w="1"/><text x="42.3749%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="42.1249%" y="277" width="0.0267%" height="15" fill="rgb(209,212,41)" fg:x="1578" fg:w="1"/><text x="42.3749%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (5 samples, 0.13%)</title><rect x="42.4453%" y="293" width="0.1335%" height="15" fill="rgb(207,154,6)" fg:x="1590" fg:w="5"/><text x="42.6953%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5 samples, 0.13%)</title><rect x="42.4453%" y="277" width="0.1335%" height="15" fill="rgb(223,64,47)" fg:x="1590" fg:w="5"/><text x="42.6953%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.13%)</title><rect x="42.4453%" y="261" width="0.1335%" height="15" fill="rgb(211,161,38)" fg:x="1590" fg:w="5"/><text x="42.6953%" y="271.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (6 samples, 0.16%)</title><rect x="42.4453%" y="309" width="0.1602%" height="15" fill="rgb(219,138,40)" fg:x="1590" fg:w="6"/><text x="42.6953%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.03%)</title><rect x="42.5788%" y="293" width="0.0267%" height="15" fill="rgb(241,228,46)" fg:x="1595" fg:w="1"/><text x="42.8288%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.08%)</title><rect x="43.7533%" y="261" width="0.0801%" height="15" fill="rgb(223,209,38)" fg:x="1639" fg:w="3"/><text x="44.0033%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.03%)</title><rect x="43.8334%" y="261" width="0.0267%" height="15" fill="rgb(236,164,45)" fg:x="1642" fg:w="1"/><text x="44.0834%" y="271.50"></text></g><g><title>__rdl_alloc (2 samples, 0.05%)</title><rect x="44.1004%" y="245" width="0.0534%" height="15" fill="rgb(231,15,5)" fg:x="1652" fg:w="2"/><text x="44.3504%" y="255.50"></text></g><g><title>__rust_alloc (5 samples, 0.13%)</title><rect x="44.1538%" y="245" width="0.1335%" height="15" fill="rgb(252,35,15)" fg:x="1654" fg:w="5"/><text x="44.4038%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.05%)</title><rect x="44.2872%" y="245" width="0.0534%" height="15" fill="rgb(248,181,18)" fg:x="1659" fg:w="2"/><text x="44.5372%" y="255.50"></text></g><g><title>[libc.so.6] (32 samples, 0.85%)</title><rect x="45.7822%" y="213" width="0.8542%" height="15" fill="rgb(233,39,42)" fg:x="1715" fg:w="32"/><text x="46.0322%" y="223.50"></text></g><g><title>[libc.so.6] (9 samples, 0.24%)</title><rect x="46.3962%" y="197" width="0.2403%" height="15" fill="rgb(238,110,33)" fg:x="1738" fg:w="9"/><text x="46.6462%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (108 samples, 2.88%)</title><rect x="43.8601%" y="261" width="2.8831%" height="15" fill="rgb(233,195,10)" fg:x="1643" fg:w="108"/><text x="44.1101%" y="271.50">al..</text></g><g><title>malloc (90 samples, 2.40%)</title><rect x="44.3406%" y="245" width="2.4026%" height="15" fill="rgb(254,105,3)" fg:x="1661" fg:w="90"/><text x="44.5906%" y="255.50">ma..</text></g><g><title>[libc.so.6] (71 samples, 1.90%)</title><rect x="44.8478%" y="229" width="1.8954%" height="15" fill="rgb(221,225,9)" fg:x="1680" fg:w="71"/><text x="45.0978%" y="239.50">[..</text></g><g><title>[unknown] (4 samples, 0.11%)</title><rect x="46.6364%" y="213" width="0.1068%" height="15" fill="rgb(224,227,45)" fg:x="1747" fg:w="4"/><text x="46.8864%" y="223.50"></text></g><g><title>[unknown] (4 samples, 0.11%)</title><rect x="46.6364%" y="197" width="0.1068%" height="15" fill="rgb(229,198,43)" fg:x="1747" fg:w="4"/><text x="46.8864%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::array (3 samples, 0.08%)</title><rect x="46.7432%" y="261" width="0.0801%" height="15" fill="rgb(206,209,35)" fg:x="1751" fg:w="3"/><text x="46.9932%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (3 samples, 0.08%)</title><rect x="46.7432%" y="245" width="0.0801%" height="15" fill="rgb(245,195,53)" fg:x="1751" fg:w="3"/><text x="46.9932%" y="255.50"></text></g><g><title>core::cmp::max (3 samples, 0.08%)</title><rect x="46.8233%" y="261" width="0.0801%" height="15" fill="rgb(240,92,26)" fg:x="1754" fg:w="3"/><text x="47.0733%" y="271.50"></text></g><g><title>core::cmp::Ord::max (3 samples, 0.08%)</title><rect x="46.8233%" y="245" width="0.0801%" height="15" fill="rgb(207,40,23)" fg:x="1754" fg:w="3"/><text x="47.0733%" y="255.50"></text></g><g><title>core::cmp::max_by (3 samples, 0.08%)</title><rect x="46.8233%" y="229" width="0.0801%" height="15" fill="rgb(223,111,35)" fg:x="1754" fg:w="3"/><text x="47.0733%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (140 samples, 3.74%)</title><rect x="43.2461%" y="293" width="3.7373%" height="15" fill="rgb(229,147,28)" fg:x="1620" fg:w="140"/><text x="43.4961%" y="303.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (134 samples, 3.58%)</title><rect x="43.4063%" y="277" width="3.5771%" height="15" fill="rgb(211,29,28)" fg:x="1626" fg:w="134"/><text x="43.6563%" y="287.50">allo..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.08%)</title><rect x="46.9034%" y="261" width="0.0801%" height="15" fill="rgb(228,72,33)" fg:x="1757" fg:w="3"/><text x="47.1534%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.08%)</title><rect x="46.9034%" y="245" width="0.0801%" height="15" fill="rgb(205,214,31)" fg:x="1757" fg:w="3"/><text x="47.1534%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (6 samples, 0.16%)</title><rect x="46.9834%" y="293" width="0.1602%" height="15" fill="rgb(224,111,15)" fg:x="1760" fg:w="6"/><text x="47.2334%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.16%)</title><rect x="46.9834%" y="277" width="0.1602%" height="15" fill="rgb(253,21,26)" fg:x="1760" fg:w="6"/><text x="47.2334%" y="287.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_dr_to_scope (193 samples, 5.15%)</title><rect x="42.1516%" y="325" width="5.1522%" height="15" fill="rgb(245,139,43)" fg:x="1579" fg:w="193"/><text x="42.4016%" y="335.50">simple..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (176 samples, 4.70%)</title><rect x="42.6054%" y="309" width="4.6983%" height="15" fill="rgb(252,170,7)" fg:x="1596" fg:w="176"/><text x="42.8554%" y="319.50">alloc..</text></g><g><title>core::ptr::write (6 samples, 0.16%)</title><rect x="47.1436%" y="293" width="0.1602%" height="15" fill="rgb(231,118,14)" fg:x="1766" fg:w="6"/><text x="47.3936%" y="303.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_env (18 samples, 0.48%)</title><rect x="47.3038%" y="325" width="0.4805%" height="15" fill="rgb(238,83,0)" fg:x="1772" fg:w="18"/><text x="47.5538%" y="335.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (16 samples, 0.43%)</title><rect x="47.3572%" y="309" width="0.4271%" height="15" fill="rgb(221,39,39)" fg:x="1774" fg:w="16"/><text x="47.6072%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16 samples, 0.43%)</title><rect x="47.3572%" y="293" width="0.4271%" height="15" fill="rgb(222,119,46)" fg:x="1774" fg:w="16"/><text x="47.6072%" y="303.50"></text></g><g><title>core::ptr::write (9 samples, 0.24%)</title><rect x="47.5440%" y="277" width="0.2403%" height="15" fill="rgb(222,165,49)" fg:x="1781" fg:w="9"/><text x="47.7940%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="47.7843%" y="293" width="0.0267%" height="15" fill="rgb(219,113,52)" fg:x="1790" fg:w="1"/><text x="48.0343%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="47.7843%" y="277" width="0.0267%" height="15" fill="rgb(214,7,15)" fg:x="1790" fg:w="1"/><text x="48.0343%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="47.7843%" y="261" width="0.0267%" height="15" fill="rgb(235,32,4)" fg:x="1790" fg:w="1"/><text x="48.0343%" y="271.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (4 samples, 0.11%)</title><rect x="47.7843%" y="309" width="0.1068%" height="15" fill="rgb(238,90,54)" fg:x="1790" fg:w="4"/><text x="48.0343%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (3 samples, 0.08%)</title><rect x="47.8110%" y="293" width="0.0801%" height="15" fill="rgb(213,208,19)" fg:x="1791" fg:w="3"/><text x="48.0610%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.19%)</title><rect x="48.2381%" y="261" width="0.1869%" height="15" fill="rgb(233,156,4)" fg:x="1807" fg:w="7"/><text x="48.4881%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (7 samples, 0.19%)</title><rect x="48.2381%" y="245" width="0.1869%" height="15" fill="rgb(207,194,5)" fg:x="1807" fg:w="7"/><text x="48.4881%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.19%)</title><rect x="48.2381%" y="229" width="0.1869%" height="15" fill="rgb(206,111,30)" fg:x="1807" fg:w="7"/><text x="48.4881%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (7 samples, 0.19%)</title><rect x="48.2381%" y="213" width="0.1869%" height="15" fill="rgb(243,70,54)" fg:x="1807" fg:w="7"/><text x="48.4881%" y="223.50"></text></g><g><title>alloc::alloc::Global::grow_impl (7 samples, 0.19%)</title><rect x="48.2381%" y="197" width="0.1869%" height="15" fill="rgb(242,28,8)" fg:x="1807" fg:w="7"/><text x="48.4881%" y="207.50"></text></g><g><title>alloc::alloc::realloc (7 samples, 0.19%)</title><rect x="48.2381%" y="181" width="0.1869%" height="15" fill="rgb(219,106,18)" fg:x="1807" fg:w="7"/><text x="48.4881%" y="191.50"></text></g><g><title>realloc (7 samples, 0.19%)</title><rect x="48.2381%" y="165" width="0.1869%" height="15" fill="rgb(244,222,10)" fg:x="1807" fg:w="7"/><text x="48.4881%" y="175.50"></text></g><g><title>[libc.so.6] (7 samples, 0.19%)</title><rect x="48.2381%" y="149" width="0.1869%" height="15" fill="rgb(236,179,52)" fg:x="1807" fg:w="7"/><text x="48.4881%" y="159.50"></text></g><g><title>[libc.so.6] (7 samples, 0.19%)</title><rect x="48.2381%" y="133" width="0.1869%" height="15" fill="rgb(213,23,39)" fg:x="1807" fg:w="7"/><text x="48.4881%" y="143.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="48.3716%" y="117" width="0.0534%" height="15" fill="rgb(238,48,10)" fg:x="1812" fg:w="2"/><text x="48.6216%" y="127.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="48.3983%" y="101" width="0.0267%" height="15" fill="rgb(251,196,23)" fg:x="1813" fg:w="1"/><text x="48.6483%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="48.4250%" y="261" width="0.0267%" height="15" fill="rgb(250,152,24)" fg:x="1814" fg:w="1"/><text x="48.6750%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="48.4250%" y="245" width="0.0267%" height="15" fill="rgb(209,150,17)" fg:x="1814" fg:w="1"/><text x="48.6750%" y="255.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_env_scope (32 samples, 0.85%)</title><rect x="47.7843%" y="325" width="0.8542%" height="15" fill="rgb(234,202,34)" fg:x="1790" fg:w="32"/><text x="48.0343%" y="335.50"></text></g><g><title>simple_lisp::interpreter::Env::push_scope (28 samples, 0.75%)</title><rect x="47.8911%" y="309" width="0.7475%" height="15" fill="rgb(253,148,53)" fg:x="1794" fg:w="28"/><text x="48.1411%" y="319.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (28 samples, 0.75%)</title><rect x="47.8911%" y="293" width="0.7475%" height="15" fill="rgb(218,129,16)" fg:x="1794" fg:w="28"/><text x="48.1411%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (28 samples, 0.75%)</title><rect x="47.8911%" y="277" width="0.7475%" height="15" fill="rgb(216,85,19)" fg:x="1794" fg:w="28"/><text x="48.1411%" y="287.50"></text></g><g><title>core::ptr::write (7 samples, 0.19%)</title><rect x="48.4517%" y="261" width="0.1869%" height="15" fill="rgb(235,228,7)" fg:x="1815" fg:w="7"/><text x="48.7017%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.05%)</title><rect x="49.1991%" y="197" width="0.0534%" height="15" fill="rgb(245,175,0)" fg:x="1843" fg:w="2"/><text x="49.4491%" y="207.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (12 samples, 0.32%)</title><rect x="49.1991%" y="213" width="0.3203%" height="15" fill="rgb(208,168,36)" fg:x="1843" fg:w="12"/><text x="49.4491%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10 samples, 0.27%)</title><rect x="49.2525%" y="197" width="0.2670%" height="15" fill="rgb(246,171,24)" fg:x="1845" fg:w="10"/><text x="49.5025%" y="207.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="49.4928%" y="181" width="0.0267%" height="15" fill="rgb(215,142,24)" fg:x="1854" fg:w="1"/><text x="49.7428%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="49.5195%" y="197" width="0.0267%" height="15" fill="rgb(250,187,7)" fg:x="1855" fg:w="1"/><text x="49.7695%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (10 samples, 0.27%)</title><rect x="49.5462%" y="181" width="0.2670%" height="15" fill="rgb(228,66,33)" fg:x="1856" fg:w="10"/><text x="49.7962%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.03%)</title><rect x="49.7864%" y="165" width="0.0267%" height="15" fill="rgb(234,215,21)" fg:x="1865" fg:w="1"/><text x="50.0364%" y="175.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::reserve_rehash_inner (1 samples, 0.03%)</title><rect x="49.7864%" y="149" width="0.0267%" height="15" fill="rgb(222,191,20)" fg:x="1865" fg:w="1"/><text x="50.0364%" y="159.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::resize_inner (1 samples, 0.03%)</title><rect x="49.7864%" y="133" width="0.0267%" height="15" fill="rgb(245,79,54)" fg:x="1865" fg:w="1"/><text x="50.0364%" y="143.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::prepare_insert_slot (1 samples, 0.03%)</title><rect x="49.7864%" y="117" width="0.0267%" height="15" fill="rgb(240,10,37)" fg:x="1865" fg:w="1"/><text x="50.0364%" y="127.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot (1 samples, 0.03%)</title><rect x="49.7864%" y="101" width="0.0267%" height="15" fill="rgb(214,192,32)" fg:x="1865" fg:w="1"/><text x="50.0364%" y="111.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (1 samples, 0.03%)</title><rect x="49.7864%" y="85" width="0.0267%" height="15" fill="rgb(209,36,54)" fg:x="1865" fg:w="1"/><text x="50.0364%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="49.8131%" y="165" width="0.0534%" height="15" fill="rgb(220,10,11)" fg:x="1866" fg:w="2"/><text x="50.0631%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (2 samples, 0.05%)</title><rect x="49.8665%" y="165" width="0.0534%" height="15" fill="rgb(221,106,17)" fg:x="1868" fg:w="2"/><text x="50.1165%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.05%)</title><rect x="49.8665%" y="149" width="0.0534%" height="15" fill="rgb(251,142,44)" fg:x="1868" fg:w="2"/><text x="50.1165%" y="159.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (13 samples, 0.35%)</title><rect x="49.9199%" y="165" width="0.3470%" height="15" fill="rgb(238,13,15)" fg:x="1870" fg:w="13"/><text x="50.1699%" y="175.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (13 samples, 0.35%)</title><rect x="49.9199%" y="149" width="0.3470%" height="15" fill="rgb(208,107,27)" fg:x="1870" fg:w="13"/><text x="50.1699%" y="159.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (7 samples, 0.19%)</title><rect x="50.2670%" y="165" width="0.1869%" height="15" fill="rgb(205,136,37)" fg:x="1883" fg:w="7"/><text x="50.5170%" y="175.50"></text></g><g><title>hashbrown::raw::inner::h2 (6 samples, 0.16%)</title><rect x="50.4538%" y="165" width="0.1602%" height="15" fill="rgb(250,205,27)" fg:x="1890" fg:w="6"/><text x="50.7038%" y="175.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (9 samples, 0.24%)</title><rect x="50.6140%" y="165" width="0.2403%" height="15" fill="rgb(210,80,43)" fg:x="1896" fg:w="9"/><text x="50.8640%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (9 samples, 0.24%)</title><rect x="50.6140%" y="149" width="0.2403%" height="15" fill="rgb(247,160,36)" fg:x="1896" fg:w="9"/><text x="50.8640%" y="159.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (50 samples, 1.33%)</title><rect x="49.5462%" y="197" width="1.3348%" height="15" fill="rgb(234,13,49)" fg:x="1856" fg:w="50"/><text x="49.7962%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (40 samples, 1.07%)</title><rect x="49.8131%" y="181" width="1.0678%" height="15" fill="rgb(234,122,0)" fg:x="1866" fg:w="40"/><text x="50.0631%" y="191.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (1 samples, 0.03%)</title><rect x="50.8542%" y="165" width="0.0267%" height="15" fill="rgb(207,146,38)" fg:x="1905" fg:w="1"/><text x="51.1042%" y="175.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="50.8542%" y="149" width="0.0267%" height="15" fill="rgb(207,177,25)" fg:x="1905" fg:w="1"/><text x="51.1042%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="50.8542%" y="133" width="0.0267%" height="15" fill="rgb(211,178,42)" fg:x="1905" fg:w="1"/><text x="51.1042%" y="143.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (80 samples, 2.14%)</title><rect x="48.8788%" y="277" width="2.1356%" height="15" fill="rgb(230,69,54)" fg:x="1831" fg:w="80"/><text x="49.1288%" y="287.50">i..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (80 samples, 2.14%)</title><rect x="48.8788%" y="261" width="2.1356%" height="15" fill="rgb(214,135,41)" fg:x="1831" fg:w="80"/><text x="49.1288%" y="271.50">i..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (79 samples, 2.11%)</title><rect x="48.9055%" y="245" width="2.1089%" height="15" fill="rgb(237,67,25)" fg:x="1832" fg:w="79"/><text x="49.1555%" y="255.50">i..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (68 samples, 1.82%)</title><rect x="49.1991%" y="229" width="1.8153%" height="15" fill="rgb(222,189,50)" fg:x="1843" fg:w="68"/><text x="49.4491%" y="239.50">i..</text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (56 samples, 1.49%)</title><rect x="49.5195%" y="213" width="1.4949%" height="15" fill="rgb(245,148,34)" fg:x="1855" fg:w="56"/><text x="49.7695%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (5 samples, 0.13%)</title><rect x="50.8809%" y="197" width="0.1335%" height="15" fill="rgb(222,29,6)" fg:x="1906" fg:w="5"/><text x="51.1309%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (5 samples, 0.13%)</title><rect x="50.8809%" y="181" width="0.1335%" height="15" fill="rgb(221,189,43)" fg:x="1906" fg:w="5"/><text x="51.1309%" y="191.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (184 samples, 4.91%)</title><rect x="51.0144%" y="277" width="4.9119%" height="15" fill="rgb(207,36,27)" fg:x="1911" fg:w="184"/><text x="51.2644%" y="287.50">simple..</text></g><g><title>__rdl_alloc (3 samples, 0.08%)</title><rect x="57.1810%" y="245" width="0.0801%" height="15" fill="rgb(217,90,24)" fg:x="2142" fg:w="3"/><text x="57.4310%" y="255.50"></text></g><g><title>__rust_alloc (3 samples, 0.08%)</title><rect x="57.2611%" y="245" width="0.0801%" height="15" fill="rgb(224,66,35)" fg:x="2145" fg:w="3"/><text x="57.5111%" y="255.50"></text></g><g><title>alloc::alloc::alloc (95 samples, 2.54%)</title><rect x="57.0475%" y="261" width="2.5360%" height="15" fill="rgb(221,13,50)" fg:x="2137" fg:w="95"/><text x="57.2975%" y="271.50">al..</text></g><g><title>malloc (84 samples, 2.24%)</title><rect x="57.3412%" y="245" width="2.2424%" height="15" fill="rgb(236,68,49)" fg:x="2148" fg:w="84"/><text x="57.5912%" y="255.50">m..</text></g><g><title>[libc.so.6] (69 samples, 1.84%)</title><rect x="57.7416%" y="229" width="1.8420%" height="15" fill="rgb(229,146,28)" fg:x="2163" fg:w="69"/><text x="57.9916%" y="239.50">[..</text></g><g><title>[libc.so.6] (17 samples, 0.45%)</title><rect x="59.1297%" y="213" width="0.4538%" height="15" fill="rgb(225,31,38)" fg:x="2215" fg:w="17"/><text x="59.3797%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="59.5836%" y="261" width="0.0267%" height="15" fill="rgb(250,208,3)" fg:x="2232" fg:w="1"/><text x="59.8336%" y="271.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (413 samples, 11.03%)</title><rect x="48.6385%" y="309" width="11.0251%" height="15" fill="rgb(246,54,23)" fg:x="1822" fg:w="413"/><text x="48.8885%" y="319.50">simple_lisp::int..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (407 samples, 10.86%)</title><rect x="48.7987%" y="293" width="10.8649%" height="15" fill="rgb(243,76,11)" fg:x="1828" fg:w="407"/><text x="49.0487%" y="303.50">simple_lisp::int..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (140 samples, 3.74%)</title><rect x="55.9263%" y="277" width="3.7373%" height="15" fill="rgb(245,21,50)" fg:x="2095" fg:w="140"/><text x="56.1763%" y="287.50">simp..</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (2 samples, 0.05%)</title><rect x="59.6103%" y="261" width="0.0534%" height="15" fill="rgb(228,9,43)" fg:x="2233" fg:w="2"/><text x="59.8603%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="59.6103%" y="245" width="0.0534%" height="15" fill="rgb(208,100,47)" fg:x="2233" fg:w="2"/><text x="59.8603%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.05%)</title><rect x="59.6103%" y="229" width="0.0534%" height="15" fill="rgb(232,26,8)" fg:x="2233" fg:w="2"/><text x="59.8603%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (2 samples, 0.05%)</title><rect x="59.6103%" y="213" width="0.0534%" height="15" fill="rgb(216,166,38)" fg:x="2233" fg:w="2"/><text x="59.8603%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (2 samples, 0.05%)</title><rect x="59.6103%" y="197" width="0.0534%" height="15" fill="rgb(251,202,51)" fg:x="2233" fg:w="2"/><text x="59.8603%" y="207.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (2 samples, 0.05%)</title><rect x="59.6103%" y="181" width="0.0534%" height="15" fill="rgb(254,216,34)" fg:x="2233" fg:w="2"/><text x="59.8603%" y="191.50"></text></g><g><title>core::cell::BorrowRefMut::new (2 samples, 0.05%)</title><rect x="59.6103%" y="165" width="0.0534%" height="15" fill="rgb(251,32,27)" fg:x="2233" fg:w="2"/><text x="59.8603%" y="175.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_to_scope (414 samples, 11.05%)</title><rect x="48.6385%" y="325" width="11.0518%" height="15" fill="rgb(208,127,28)" fg:x="1822" fg:w="414"/><text x="48.8885%" y="335.50">simple_lisp::int..</text></g><g><title>simple_lisp::interpreter::Interpreter::push_dr_to_scope (1 samples, 0.03%)</title><rect x="59.6636%" y="309" width="0.0267%" height="15" fill="rgb(224,137,22)" fg:x="2235" fg:w="1"/><text x="59.9136%" y="319.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="59.6636%" y="293" width="0.0267%" height="15" fill="rgb(254,70,32)" fg:x="2235" fg:w="1"/><text x="59.9136%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.03%)</title><rect x="59.6636%" y="277" width="0.0267%" height="15" fill="rgb(229,75,37)" fg:x="2235" fg:w="1"/><text x="59.9136%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.05%)</title><rect x="59.8238%" y="309" width="0.0534%" height="15" fill="rgb(252,64,23)" fg:x="2241" fg:w="2"/><text x="60.0738%" y="319.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (2 samples, 0.05%)</title><rect x="59.8238%" y="293" width="0.0534%" height="15" fill="rgb(232,162,48)" fg:x="2241" fg:w="2"/><text x="60.0738%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="59.8772%" y="309" width="0.0267%" height="15" fill="rgb(246,160,12)" fg:x="2243" fg:w="1"/><text x="60.1272%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.03%)</title><rect x="59.8772%" y="293" width="0.0267%" height="15" fill="rgb(247,166,0)" fg:x="2243" fg:w="1"/><text x="60.1272%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="59.8772%" y="277" width="0.0267%" height="15" fill="rgb(249,219,21)" fg:x="2243" fg:w="1"/><text x="60.1272%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (4 samples, 0.11%)</title><rect x="59.9039%" y="309" width="0.1068%" height="15" fill="rgb(205,209,3)" fg:x="2244" fg:w="4"/><text x="60.1539%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.11%)</title><rect x="59.9039%" y="293" width="0.1068%" height="15" fill="rgb(243,44,1)" fg:x="2244" fg:w="4"/><text x="60.1539%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (4 samples, 0.11%)</title><rect x="59.9039%" y="277" width="0.1068%" height="15" fill="rgb(206,159,16)" fg:x="2244" fg:w="4"/><text x="60.1539%" y="287.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.11%)</title><rect x="59.9039%" y="261" width="0.1068%" height="15" fill="rgb(244,77,30)" fg:x="2244" fg:w="4"/><text x="60.1539%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (4 samples, 0.11%)</title><rect x="59.9039%" y="245" width="0.1068%" height="15" fill="rgb(218,69,12)" fg:x="2244" fg:w="4"/><text x="60.1539%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.11%)</title><rect x="59.9039%" y="229" width="0.1068%" height="15" fill="rgb(212,87,7)" fg:x="2244" fg:w="4"/><text x="60.1539%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.11%)</title><rect x="59.9039%" y="213" width="0.1068%" height="15" fill="rgb(245,114,25)" fg:x="2244" fg:w="4"/><text x="60.1539%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.11%)</title><rect x="59.9039%" y="197" width="0.1068%" height="15" fill="rgb(210,61,42)" fg:x="2244" fg:w="4"/><text x="60.1539%" y="207.50"></text></g><g><title>cfree (4 samples, 0.11%)</title><rect x="59.9039%" y="181" width="0.1068%" height="15" fill="rgb(211,52,33)" fg:x="2244" fg:w="4"/><text x="60.1539%" y="191.50"></text></g><g><title>[libc.so.6] (4 samples, 0.11%)</title><rect x="59.9039%" y="165" width="0.1068%" height="15" fill="rgb(234,58,33)" fg:x="2244" fg:w="4"/><text x="60.1539%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (6 samples, 0.16%)</title><rect x="60.2776%" y="197" width="0.1602%" height="15" fill="rgb(220,115,36)" fg:x="2258" fg:w="6"/><text x="60.5276%" y="207.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (13 samples, 0.35%)</title><rect x="60.2776%" y="213" width="0.3470%" height="15" fill="rgb(243,153,54)" fg:x="2258" fg:w="13"/><text x="60.5276%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7 samples, 0.19%)</title><rect x="60.4378%" y="197" width="0.1869%" height="15" fill="rgb(251,47,18)" fg:x="2264" fg:w="7"/><text x="60.6878%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (6 samples, 0.16%)</title><rect x="60.6247%" y="181" width="0.1602%" height="15" fill="rgb(242,102,42)" fg:x="2271" fg:w="6"/><text x="60.8747%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (3 samples, 0.08%)</title><rect x="60.7848%" y="165" width="0.0801%" height="15" fill="rgb(234,31,38)" fg:x="2277" fg:w="3"/><text x="61.0348%" y="175.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (3 samples, 0.08%)</title><rect x="60.7848%" y="149" width="0.0801%" height="15" fill="rgb(221,117,51)" fg:x="2277" fg:w="3"/><text x="61.0348%" y="159.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (10 samples, 0.27%)</title><rect x="60.8649%" y="165" width="0.2670%" height="15" fill="rgb(212,20,18)" fg:x="2280" fg:w="10"/><text x="61.1149%" y="175.50"></text></g><g><title>hashbrown::raw::inner::h2 (9 samples, 0.24%)</title><rect x="61.1319%" y="165" width="0.2403%" height="15" fill="rgb(245,133,36)" fg:x="2290" fg:w="9"/><text x="61.3819%" y="175.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (32 samples, 0.85%)</title><rect x="60.6247%" y="197" width="0.8542%" height="15" fill="rgb(212,6,19)" fg:x="2271" fg:w="32"/><text x="60.8747%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (26 samples, 0.69%)</title><rect x="60.7848%" y="181" width="0.6941%" height="15" fill="rgb(218,1,36)" fg:x="2277" fg:w="26"/><text x="61.0348%" y="191.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (4 samples, 0.11%)</title><rect x="61.3721%" y="165" width="0.1068%" height="15" fill="rgb(246,84,54)" fg:x="2299" fg:w="4"/><text x="61.6221%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.11%)</title><rect x="61.3721%" y="149" width="0.1068%" height="15" fill="rgb(242,110,6)" fg:x="2299" fg:w="4"/><text x="61.6221%" y="159.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (60 samples, 1.60%)</title><rect x="60.0908%" y="277" width="1.6017%" height="15" fill="rgb(214,47,5)" fg:x="2251" fg:w="60"/><text x="60.3408%" y="287.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (60 samples, 1.60%)</title><rect x="60.0908%" y="261" width="1.6017%" height="15" fill="rgb(218,159,25)" fg:x="2251" fg:w="60"/><text x="60.3408%" y="271.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (60 samples, 1.60%)</title><rect x="60.0908%" y="245" width="1.6017%" height="15" fill="rgb(215,211,28)" fg:x="2251" fg:w="60"/><text x="60.3408%" y="255.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (53 samples, 1.41%)</title><rect x="60.2776%" y="229" width="1.4148%" height="15" fill="rgb(238,59,32)" fg:x="2258" fg:w="53"/><text x="60.5276%" y="239.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (40 samples, 1.07%)</title><rect x="60.6247%" y="213" width="1.0678%" height="15" fill="rgb(226,82,3)" fg:x="2271" fg:w="40"/><text x="60.8747%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (8 samples, 0.21%)</title><rect x="61.4789%" y="197" width="0.2136%" height="15" fill="rgb(240,164,32)" fg:x="2303" fg:w="8"/><text x="61.7289%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (8 samples, 0.21%)</title><rect x="61.4789%" y="181" width="0.2136%" height="15" fill="rgb(232,46,7)" fg:x="2303" fg:w="8"/><text x="61.7289%" y="191.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (85 samples, 2.27%)</title><rect x="61.6925%" y="277" width="2.2691%" height="15" fill="rgb(229,129,53)" fg:x="2311" fg:w="85"/><text x="61.9425%" y="287.50">s..</text></g><g><title>__rdl_alloc (3 samples, 0.08%)</title><rect x="65.1361%" y="245" width="0.0801%" height="15" fill="rgb(234,188,29)" fg:x="2440" fg:w="3"/><text x="65.3861%" y="255.50"></text></g><g><title>__rust_alloc (6 samples, 0.16%)</title><rect x="65.2162%" y="245" width="0.1602%" height="15" fill="rgb(246,141,4)" fg:x="2443" fg:w="6"/><text x="65.4662%" y="255.50"></text></g><g><title>[libc.so.6] (13 samples, 0.35%)</title><rect x="66.3107%" y="213" width="0.3470%" height="15" fill="rgb(229,23,39)" fg:x="2484" fg:w="13"/><text x="66.5607%" y="223.50"></text></g><g><title>alloc::alloc::alloc (66 samples, 1.76%)</title><rect x="64.9226%" y="261" width="1.7619%" height="15" fill="rgb(206,12,3)" fg:x="2432" fg:w="66"/><text x="65.1726%" y="271.50"></text></g><g><title>malloc (49 samples, 1.31%)</title><rect x="65.3764%" y="245" width="1.3081%" height="15" fill="rgb(252,226,20)" fg:x="2449" fg:w="49"/><text x="65.6264%" y="255.50"></text></g><g><title>[libc.so.6] (40 samples, 1.07%)</title><rect x="65.6167%" y="229" width="1.0678%" height="15" fill="rgb(216,123,35)" fg:x="2458" fg:w="40"/><text x="65.8667%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="66.6578%" y="213" width="0.0267%" height="15" fill="rgb(212,68,40)" fg:x="2497" fg:w="1"/><text x="66.9078%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="66.6578%" y="197" width="0.0267%" height="15" fill="rgb(254,125,32)" fg:x="2497" fg:w="1"/><text x="66.9078%" y="207.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (251 samples, 6.70%)</title><rect x="60.0107%" y="309" width="6.7005%" height="15" fill="rgb(253,97,22)" fg:x="2248" fg:w="251"/><text x="60.2607%" y="319.50">simple_li..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (249 samples, 6.65%)</title><rect x="60.0641%" y="293" width="6.6471%" height="15" fill="rgb(241,101,14)" fg:x="2250" fg:w="249"/><text x="60.3141%" y="303.50">simple_li..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (103 samples, 2.75%)</title><rect x="63.9616%" y="277" width="2.7496%" height="15" fill="rgb(238,103,29)" fg:x="2396" fg:w="103"/><text x="64.2116%" y="287.50">si..</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (1 samples, 0.03%)</title><rect x="66.6845%" y="261" width="0.0267%" height="15" fill="rgb(233,195,47)" fg:x="2498" fg:w="1"/><text x="66.9345%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.03%)</title><rect x="66.6845%" y="245" width="0.0267%" height="15" fill="rgb(246,218,30)" fg:x="2498" fg:w="1"/><text x="66.9345%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.03%)</title><rect x="66.6845%" y="229" width="0.0267%" height="15" fill="rgb(219,145,47)" fg:x="2498" fg:w="1"/><text x="66.9345%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (1 samples, 0.03%)</title><rect x="66.6845%" y="213" width="0.0267%" height="15" fill="rgb(243,12,26)" fg:x="2498" fg:w="1"/><text x="66.9345%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.03%)</title><rect x="66.6845%" y="197" width="0.0267%" height="15" fill="rgb(214,87,16)" fg:x="2498" fg:w="1"/><text x="66.9345%" y="207.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.03%)</title><rect x="66.6845%" y="181" width="0.0267%" height="15" fill="rgb(208,99,42)" fg:x="2498" fg:w="1"/><text x="66.9345%" y="191.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.03%)</title><rect x="66.6845%" y="165" width="0.0267%" height="15" fill="rgb(253,99,2)" fg:x="2498" fg:w="1"/><text x="66.9345%" y="175.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="66.7645%" y="277" width="0.0267%" height="15" fill="rgb(220,168,23)" fg:x="2501" fg:w="1"/><text x="67.0145%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="66.7645%" y="261" width="0.0267%" height="15" fill="rgb(242,38,24)" fg:x="2501" fg:w="1"/><text x="67.0145%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="66.7645%" y="245" width="0.0267%" height="15" fill="rgb(225,182,9)" fg:x="2501" fg:w="1"/><text x="67.0145%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="66.7645%" y="229" width="0.0267%" height="15" fill="rgb(243,178,37)" fg:x="2501" fg:w="1"/><text x="67.0145%" y="239.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (2 samples, 0.05%)</title><rect x="66.7912%" y="277" width="0.0534%" height="15" fill="rgb(232,139,19)" fg:x="2502" fg:w="2"/><text x="67.0412%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.05%)</title><rect x="66.7912%" y="261" width="0.0534%" height="15" fill="rgb(225,201,24)" fg:x="2502" fg:w="2"/><text x="67.0412%" y="271.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::external (1 samples, 0.03%)</title><rect x="66.8446%" y="277" width="0.0267%" height="15" fill="rgb(221,47,46)" fg:x="2504" fg:w="1"/><text x="67.0946%" y="287.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::set_external (1 samples, 0.03%)</title><rect x="66.8446%" y="261" width="0.0267%" height="15" fill="rgb(249,23,13)" fg:x="2504" fg:w="1"/><text x="67.0946%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.03%)</title><rect x="66.8446%" y="245" width="0.0267%" height="15" fill="rgb(219,9,5)" fg:x="2504" fg:w="1"/><text x="67.0946%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.03%)</title><rect x="66.8446%" y="229" width="0.0267%" height="15" fill="rgb(254,171,16)" fg:x="2504" fg:w="1"/><text x="67.0946%" y="239.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.03%)</title><rect x="66.8446%" y="213" width="0.0267%" height="15" fill="rgb(230,171,20)" fg:x="2504" fg:w="1"/><text x="67.0946%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once (18 samples, 0.48%)</title><rect x="66.8713%" y="261" width="0.4805%" height="15" fill="rgb(210,71,41)" fg:x="2505" fg:w="18"/><text x="67.1213%" y="271.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::new (18 samples, 0.48%)</title><rect x="66.8713%" y="245" width="0.4805%" height="15" fill="rgb(206,173,20)" fg:x="2505" fg:w="18"/><text x="67.1213%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (18 samples, 0.48%)</title><rect x="66.8713%" y="229" width="0.4805%" height="15" fill="rgb(233,88,34)" fg:x="2505" fg:w="18"/><text x="67.1213%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18 samples, 0.48%)</title><rect x="66.8713%" y="213" width="0.4805%" height="15" fill="rgb(223,209,46)" fg:x="2505" fg:w="18"/><text x="67.1213%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18 samples, 0.48%)</title><rect x="66.8713%" y="197" width="0.4805%" height="15" fill="rgb(250,43,18)" fg:x="2505" fg:w="18"/><text x="67.1213%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (18 samples, 0.48%)</title><rect x="66.8713%" y="181" width="0.4805%" height="15" fill="rgb(208,13,10)" fg:x="2505" fg:w="18"/><text x="67.1213%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.48%)</title><rect x="66.8713%" y="165" width="0.4805%" height="15" fill="rgb(212,200,36)" fg:x="2505" fg:w="18"/><text x="67.1213%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.48%)</title><rect x="66.8713%" y="149" width="0.4805%" height="15" fill="rgb(225,90,30)" fg:x="2505" fg:w="18"/><text x="67.1213%" y="159.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.48%)</title><rect x="66.8713%" y="133" width="0.4805%" height="15" fill="rgb(236,182,39)" fg:x="2505" fg:w="18"/><text x="67.1213%" y="143.50"></text></g><g><title>malloc (18 samples, 0.48%)</title><rect x="66.8713%" y="117" width="0.4805%" height="15" fill="rgb(212,144,35)" fg:x="2505" fg:w="18"/><text x="67.1213%" y="127.50"></text></g><g><title>[libc.so.6] (12 samples, 0.32%)</title><rect x="67.0315%" y="101" width="0.3203%" height="15" fill="rgb(228,63,44)" fg:x="2511" fg:w="12"/><text x="67.2815%" y="111.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="67.2985%" y="85" width="0.0534%" height="15" fill="rgb(228,109,6)" fg:x="2521" fg:w="2"/><text x="67.5485%" y="95.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="67.3251%" y="69" width="0.0267%" height="15" fill="rgb(238,117,24)" fg:x="2522" fg:w="1"/><text x="67.5751%" y="79.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (6 samples, 0.16%)</title><rect x="67.3518%" y="261" width="0.1602%" height="15" fill="rgb(242,26,26)" fg:x="2523" fg:w="6"/><text x="67.6018%" y="271.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (6 samples, 0.16%)</title><rect x="67.3518%" y="245" width="0.1602%" height="15" fill="rgb(221,92,48)" fg:x="2523" fg:w="6"/><text x="67.6018%" y="255.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (41 samples, 1.09%)</title><rect x="66.8713%" y="277" width="1.0945%" height="15" fill="rgb(209,209,32)" fg:x="2505" fg:w="41"/><text x="67.1213%" y="287.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (17 samples, 0.45%)</title><rect x="67.5120%" y="261" width="0.4538%" height="15" fill="rgb(221,70,22)" fg:x="2529" fg:w="17"/><text x="67.7620%" y="271.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (17 samples, 0.45%)</title><rect x="67.5120%" y="245" width="0.4538%" height="15" fill="rgb(248,145,5)" fg:x="2529" fg:w="17"/><text x="67.7620%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (17 samples, 0.45%)</title><rect x="67.5120%" y="229" width="0.4538%" height="15" fill="rgb(226,116,26)" fg:x="2529" fg:w="17"/><text x="67.7620%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (17 samples, 0.45%)</title><rect x="67.5120%" y="213" width="0.4538%" height="15" fill="rgb(244,5,17)" fg:x="2529" fg:w="17"/><text x="67.7620%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (17 samples, 0.45%)</title><rect x="67.5120%" y="197" width="0.4538%" height="15" fill="rgb(252,159,33)" fg:x="2529" fg:w="17"/><text x="67.7620%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (17 samples, 0.45%)</title><rect x="67.5120%" y="181" width="0.4538%" height="15" fill="rgb(206,71,0)" fg:x="2529" fg:w="17"/><text x="67.7620%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (17 samples, 0.45%)</title><rect x="67.5120%" y="165" width="0.4538%" height="15" fill="rgb(233,118,54)" fg:x="2529" fg:w="17"/><text x="67.7620%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (17 samples, 0.45%)</title><rect x="67.5120%" y="149" width="0.4538%" height="15" fill="rgb(234,83,48)" fg:x="2529" fg:w="17"/><text x="67.7620%" y="159.50"></text></g><g><title>core::mem::swap (2 samples, 0.05%)</title><rect x="67.9925%" y="165" width="0.0534%" height="15" fill="rgb(228,3,54)" fg:x="2547" fg:w="2"/><text x="68.2425%" y="175.50"></text></g><g><title>core::mem::swap_simple (2 samples, 0.05%)</title><rect x="67.9925%" y="149" width="0.0534%" height="15" fill="rgb(226,155,13)" fg:x="2547" fg:w="2"/><text x="68.2425%" y="159.50"></text></g><g><title>core::ptr::read (2 samples, 0.05%)</title><rect x="67.9925%" y="133" width="0.0534%" height="15" fill="rgb(241,28,37)" fg:x="2547" fg:w="2"/><text x="68.2425%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (1 samples, 0.03%)</title><rect x="68.0459%" y="165" width="0.0267%" height="15" fill="rgb(233,93,10)" fg:x="2549" fg:w="1"/><text x="68.2959%" y="175.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="68.0459%" y="149" width="0.0267%" height="15" fill="rgb(225,113,19)" fg:x="2549" fg:w="1"/><text x="68.2959%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (1 samples, 0.03%)</title><rect x="68.0459%" y="133" width="0.0267%" height="15" fill="rgb(241,2,18)" fg:x="2549" fg:w="1"/><text x="68.2959%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (2 samples, 0.05%)</title><rect x="68.0726%" y="133" width="0.0534%" height="15" fill="rgb(228,207,21)" fg:x="2550" fg:w="2"/><text x="68.3226%" y="143.50"></text></g><g><title>core::intrinsics::write_bytes (2 samples, 0.05%)</title><rect x="68.0726%" y="117" width="0.0534%" height="15" fill="rgb(213,211,35)" fg:x="2550" fg:w="2"/><text x="68.3226%" y="127.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="68.0726%" y="101" width="0.0534%" height="15" fill="rgb(209,83,10)" fg:x="2550" fg:w="2"/><text x="68.3226%" y="111.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="68.1260%" y="53" width="0.0267%" height="15" fill="rgb(209,164,1)" fg:x="2552" fg:w="1"/><text x="68.3760%" y="63.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (2 samples, 0.05%)</title><rect x="68.1260%" y="133" width="0.0534%" height="15" fill="rgb(213,184,43)" fg:x="2552" fg:w="2"/><text x="68.3760%" y="143.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 0.05%)</title><rect x="68.1260%" y="117" width="0.0534%" height="15" fill="rgb(231,61,34)" fg:x="2552" fg:w="2"/><text x="68.3760%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.05%)</title><rect x="68.1260%" y="101" width="0.0534%" height="15" fill="rgb(235,75,3)" fg:x="2552" fg:w="2"/><text x="68.3760%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.05%)</title><rect x="68.1260%" y="85" width="0.0534%" height="15" fill="rgb(220,106,47)" fg:x="2552" fg:w="2"/><text x="68.3760%" y="95.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.05%)</title><rect x="68.1260%" y="69" width="0.0534%" height="15" fill="rgb(210,196,33)" fg:x="2552" fg:w="2"/><text x="68.3760%" y="79.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="68.1527%" y="53" width="0.0267%" height="15" fill="rgb(229,154,42)" fg:x="2553" fg:w="1"/><text x="68.4027%" y="63.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (9 samples, 0.24%)</title><rect x="67.9658%" y="245" width="0.2403%" height="15" fill="rgb(228,114,26)" fg:x="2546" fg:w="9"/><text x="68.2158%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (9 samples, 0.24%)</title><rect x="67.9658%" y="229" width="0.2403%" height="15" fill="rgb(208,144,1)" fg:x="2546" fg:w="9"/><text x="68.2158%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (9 samples, 0.24%)</title><rect x="67.9658%" y="213" width="0.2403%" height="15" fill="rgb(239,112,37)" fg:x="2546" fg:w="9"/><text x="68.2158%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (9 samples, 0.24%)</title><rect x="67.9658%" y="197" width="0.2403%" height="15" fill="rgb(210,96,50)" fg:x="2546" fg:w="9"/><text x="68.2158%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (8 samples, 0.21%)</title><rect x="67.9925%" y="181" width="0.2136%" height="15" fill="rgb(222,178,2)" fg:x="2547" fg:w="8"/><text x="68.2425%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (5 samples, 0.13%)</title><rect x="68.0726%" y="165" width="0.1335%" height="15" fill="rgb(226,74,18)" fg:x="2550" fg:w="5"/><text x="68.3226%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (5 samples, 0.13%)</title><rect x="68.0726%" y="149" width="0.1335%" height="15" fill="rgb(225,67,54)" fg:x="2550" fg:w="5"/><text x="68.3226%" y="159.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (1 samples, 0.03%)</title><rect x="68.1794%" y="133" width="0.0267%" height="15" fill="rgb(251,92,32)" fg:x="2554" fg:w="1"/><text x="68.4294%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="68.2595%" y="213" width="0.0267%" height="15" fill="rgb(228,149,22)" fg:x="2557" fg:w="1"/><text x="68.5095%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (3 samples, 0.08%)</title><rect x="68.2862%" y="213" width="0.0801%" height="15" fill="rgb(243,54,13)" fg:x="2558" fg:w="3"/><text x="68.5362%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.08%)</title><rect x="68.2862%" y="197" width="0.0801%" height="15" fill="rgb(243,180,28)" fg:x="2558" fg:w="3"/><text x="68.5362%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3 samples, 0.08%)</title><rect x="68.2862%" y="181" width="0.0801%" height="15" fill="rgb(208,167,24)" fg:x="2558" fg:w="3"/><text x="68.5362%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.08%)</title><rect x="68.2862%" y="165" width="0.0801%" height="15" fill="rgb(245,73,45)" fg:x="2558" fg:w="3"/><text x="68.5362%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.08%)</title><rect x="68.2862%" y="149" width="0.0801%" height="15" fill="rgb(237,203,48)" fg:x="2558" fg:w="3"/><text x="68.5362%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 0.21%)</title><rect x="68.3663%" y="213" width="0.2136%" height="15" fill="rgb(211,197,16)" fg:x="2561" fg:w="8"/><text x="68.6163%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.21%)</title><rect x="68.3663%" y="197" width="0.2136%" height="15" fill="rgb(243,99,51)" fg:x="2561" fg:w="8"/><text x="68.6163%" y="207.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (24 samples, 0.64%)</title><rect x="67.9658%" y="277" width="0.6407%" height="15" fill="rgb(215,123,29)" fg:x="2546" fg:w="24"/><text x="68.2158%" y="287.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (24 samples, 0.64%)</title><rect x="67.9658%" y="261" width="0.6407%" height="15" fill="rgb(239,186,37)" fg:x="2546" fg:w="24"/><text x="68.2158%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (15 samples, 0.40%)</title><rect x="68.2061%" y="245" width="0.4004%" height="15" fill="rgb(252,136,39)" fg:x="2555" fg:w="15"/><text x="68.4561%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (15 samples, 0.40%)</title><rect x="68.2061%" y="229" width="0.4004%" height="15" fill="rgb(223,213,32)" fg:x="2555" fg:w="15"/><text x="68.4561%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.03%)</title><rect x="68.5798%" y="213" width="0.0267%" height="15" fill="rgb(233,115,5)" fg:x="2569" fg:w="1"/><text x="68.8298%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="68.5798%" y="197" width="0.0267%" height="15" fill="rgb(207,226,44)" fg:x="2569" fg:w="1"/><text x="68.8298%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="68.5798%" y="181" width="0.0267%" height="15" fill="rgb(208,126,0)" fg:x="2569" fg:w="1"/><text x="68.8298%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.53%)</title><rect x="68.9536%" y="165" width="0.5339%" height="15" fill="rgb(244,66,21)" fg:x="2583" fg:w="20"/><text x="69.2036%" y="175.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (59 samples, 1.58%)</title><rect x="68.6065%" y="277" width="1.5750%" height="15" fill="rgb(222,97,12)" fg:x="2570" fg:w="59"/><text x="68.8565%" y="287.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (59 samples, 1.58%)</title><rect x="68.6065%" y="261" width="1.5750%" height="15" fill="rgb(219,213,19)" fg:x="2570" fg:w="59"/><text x="68.8565%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (59 samples, 1.58%)</title><rect x="68.6065%" y="245" width="1.5750%" height="15" fill="rgb(252,169,30)" fg:x="2570" fg:w="59"/><text x="68.8565%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (59 samples, 1.58%)</title><rect x="68.6065%" y="229" width="1.5750%" height="15" fill="rgb(206,32,51)" fg:x="2570" fg:w="59"/><text x="68.8565%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (58 samples, 1.55%)</title><rect x="68.6332%" y="213" width="1.5483%" height="15" fill="rgb(250,172,42)" fg:x="2571" fg:w="58"/><text x="68.8832%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (58 samples, 1.55%)</title><rect x="68.6332%" y="197" width="1.5483%" height="15" fill="rgb(209,34,43)" fg:x="2571" fg:w="58"/><text x="68.8832%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (58 samples, 1.55%)</title><rect x="68.6332%" y="181" width="1.5483%" height="15" fill="rgb(223,11,35)" fg:x="2571" fg:w="58"/><text x="68.8832%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (26 samples, 0.69%)</title><rect x="69.4875%" y="165" width="0.6941%" height="15" fill="rgb(251,219,26)" fg:x="2603" fg:w="26"/><text x="69.7375%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (26 samples, 0.69%)</title><rect x="69.4875%" y="149" width="0.6941%" height="15" fill="rgb(231,119,3)" fg:x="2603" fg:w="26"/><text x="69.7375%" y="159.50"></text></g><g><title>core::mem::swap (1 samples, 0.03%)</title><rect x="70.3684%" y="149" width="0.0267%" height="15" fill="rgb(216,97,11)" fg:x="2636" fg:w="1"/><text x="70.6184%" y="159.50"></text></g><g><title>core::mem::swap_simple (1 samples, 0.03%)</title><rect x="70.3684%" y="133" width="0.0267%" height="15" fill="rgb(223,59,9)" fg:x="2636" fg:w="1"/><text x="70.6184%" y="143.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="70.3684%" y="117" width="0.0267%" height="15" fill="rgb(233,93,31)" fg:x="2636" fg:w="1"/><text x="70.6184%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (2 samples, 0.05%)</title><rect x="70.3951%" y="117" width="0.0534%" height="15" fill="rgb(239,81,33)" fg:x="2637" fg:w="2"/><text x="70.6451%" y="127.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="70.4218%" y="101" width="0.0267%" height="15" fill="rgb(213,120,34)" fg:x="2638" fg:w="1"/><text x="70.6718%" y="111.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (1 samples, 0.03%)</title><rect x="70.4218%" y="85" width="0.0267%" height="15" fill="rgb(243,49,53)" fg:x="2638" fg:w="1"/><text x="70.6718%" y="95.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (4 samples, 0.11%)</title><rect x="70.3951%" y="149" width="0.1068%" height="15" fill="rgb(247,216,33)" fg:x="2637" fg:w="4"/><text x="70.6451%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (4 samples, 0.11%)</title><rect x="70.3951%" y="133" width="0.1068%" height="15" fill="rgb(226,26,14)" fg:x="2637" fg:w="4"/><text x="70.6451%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (2 samples, 0.05%)</title><rect x="70.4485%" y="117" width="0.0534%" height="15" fill="rgb(215,49,53)" fg:x="2639" fg:w="2"/><text x="70.6985%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (5 samples, 0.13%)</title><rect x="70.5019%" y="117" width="0.1335%" height="15" fill="rgb(245,162,40)" fg:x="2641" fg:w="5"/><text x="70.7519%" y="127.50"></text></g><g><title>core::intrinsics::write_bytes (5 samples, 0.13%)</title><rect x="70.5019%" y="101" width="0.1335%" height="15" fill="rgb(229,68,17)" fg:x="2641" fg:w="5"/><text x="70.7519%" y="111.50"></text></g><g><title>[libc.so.6] (4 samples, 0.11%)</title><rect x="70.5286%" y="85" width="0.1068%" height="15" fill="rgb(213,182,10)" fg:x="2642" fg:w="4"/><text x="70.7786%" y="95.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.03%)</title><rect x="70.6353%" y="101" width="0.0267%" height="15" fill="rgb(245,125,30)" fg:x="2646" fg:w="1"/><text x="70.8853%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.03%)</title><rect x="70.6353%" y="85" width="0.0267%" height="15" fill="rgb(232,202,2)" fg:x="2646" fg:w="1"/><text x="70.8853%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.03%)</title><rect x="70.6353%" y="69" width="0.0267%" height="15" fill="rgb(237,140,51)" fg:x="2646" fg:w="1"/><text x="70.8853%" y="79.50"></text></g><g><title>__rust_alloc (2 samples, 0.05%)</title><rect x="70.6887%" y="37" width="0.0534%" height="15" fill="rgb(236,157,25)" fg:x="2648" fg:w="2"/><text x="70.9387%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (15 samples, 0.40%)</title><rect x="70.6353%" y="117" width="0.4004%" height="15" fill="rgb(219,209,0)" fg:x="2646" fg:w="15"/><text x="70.8853%" y="127.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (14 samples, 0.37%)</title><rect x="70.6620%" y="101" width="0.3737%" height="15" fill="rgb(240,116,54)" fg:x="2647" fg:w="14"/><text x="70.9120%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.37%)</title><rect x="70.6620%" y="85" width="0.3737%" height="15" fill="rgb(216,10,36)" fg:x="2647" fg:w="14"/><text x="70.9120%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.37%)</title><rect x="70.6620%" y="69" width="0.3737%" height="15" fill="rgb(222,72,44)" fg:x="2647" fg:w="14"/><text x="70.9120%" y="79.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.37%)</title><rect x="70.6620%" y="53" width="0.3737%" height="15" fill="rgb(232,159,9)" fg:x="2647" fg:w="14"/><text x="70.9120%" y="63.50"></text></g><g><title>malloc (11 samples, 0.29%)</title><rect x="70.7421%" y="37" width="0.2936%" height="15" fill="rgb(210,39,32)" fg:x="2650" fg:w="11"/><text x="70.9921%" y="47.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (26 samples, 0.69%)</title><rect x="70.3684%" y="165" width="0.6941%" height="15" fill="rgb(216,194,45)" fg:x="2636" fg:w="26"/><text x="70.6184%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (21 samples, 0.56%)</title><rect x="70.5019%" y="149" width="0.5606%" height="15" fill="rgb(218,18,35)" fg:x="2641" fg:w="21"/><text x="70.7519%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (21 samples, 0.56%)</title><rect x="70.5019%" y="133" width="0.5606%" height="15" fill="rgb(207,83,51)" fg:x="2641" fg:w="21"/><text x="70.7519%" y="143.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (1 samples, 0.03%)</title><rect x="71.0358%" y="117" width="0.0267%" height="15" fill="rgb(225,63,43)" fg:x="2661" fg:w="1"/><text x="71.2858%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (29 samples, 0.77%)</title><rect x="70.3150%" y="213" width="0.7742%" height="15" fill="rgb(207,57,36)" fg:x="2634" fg:w="29"/><text x="70.5650%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (28 samples, 0.75%)</title><rect x="70.3417%" y="197" width="0.7475%" height="15" fill="rgb(216,99,33)" fg:x="2635" fg:w="28"/><text x="70.5917%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (28 samples, 0.75%)</title><rect x="70.3417%" y="181" width="0.7475%" height="15" fill="rgb(225,42,16)" fg:x="2635" fg:w="28"/><text x="70.5917%" y="191.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.03%)</title><rect x="71.0625%" y="165" width="0.0267%" height="15" fill="rgb(220,201,45)" fg:x="2662" fg:w="1"/><text x="71.3125%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="71.0892%" y="197" width="0.0534%" height="15" fill="rgb(225,33,4)" fg:x="2663" fg:w="2"/><text x="71.3392%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.05%)</title><rect x="71.0892%" y="181" width="0.0534%" height="15" fill="rgb(224,33,50)" fg:x="2663" fg:w="2"/><text x="71.3392%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.03%)</title><rect x="71.1426%" y="197" width="0.0267%" height="15" fill="rgb(246,198,51)" fg:x="2665" fg:w="1"/><text x="71.3926%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.08%)</title><rect x="71.1692%" y="197" width="0.0801%" height="15" fill="rgb(205,22,4)" fg:x="2666" fg:w="3"/><text x="71.4192%" y="207.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::set_func_args (522 samples, 13.93%)</title><rect x="59.6903%" y="325" width="13.9349%" height="15" fill="rgb(206,3,8)" fg:x="2236" fg:w="522"/><text x="59.9403%" y="335.50">simple_lisp::interpre..</text></g><g><title>simple_lisp::interpreter::Interpreter::define_var (259 samples, 6.91%)</title><rect x="66.7112%" y="309" width="6.9140%" height="15" fill="rgb(251,23,15)" fg:x="2499" fg:w="259"/><text x="66.9612%" y="319.50">simple_li..</text></g><g><title>simple_lisp::interpreter::Env::insert (258 samples, 6.89%)</title><rect x="66.7379%" y="293" width="6.8873%" height="15" fill="rgb(252,88,28)" fg:x="2500" fg:w="258"/><text x="66.9879%" y="303.50">simple_li..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (129 samples, 3.44%)</title><rect x="70.1815%" y="277" width="3.4437%" height="15" fill="rgb(212,127,14)" fg:x="2629" fg:w="129"/><text x="70.4315%" y="287.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (129 samples, 3.44%)</title><rect x="70.1815%" y="261" width="3.4437%" height="15" fill="rgb(247,145,37)" fg:x="2629" fg:w="129"/><text x="70.4315%" y="271.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (129 samples, 3.44%)</title><rect x="70.1815%" y="245" width="3.4437%" height="15" fill="rgb(209,117,53)" fg:x="2629" fg:w="129"/><text x="70.4315%" y="255.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (125 samples, 3.34%)</title><rect x="70.2883%" y="229" width="3.3369%" height="15" fill="rgb(212,90,42)" fg:x="2633" fg:w="125"/><text x="70.5383%" y="239.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (95 samples, 2.54%)</title><rect x="71.0892%" y="213" width="2.5360%" height="15" fill="rgb(218,164,37)" fg:x="2663" fg:w="95"/><text x="71.3392%" y="223.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (89 samples, 2.38%)</title><rect x="71.2493%" y="197" width="2.3759%" height="15" fill="rgb(246,65,34)" fg:x="2669" fg:w="89"/><text x="71.4993%" y="207.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (89 samples, 2.38%)</title><rect x="71.2493%" y="181" width="2.3759%" height="15" fill="rgb(231,100,33)" fg:x="2669" fg:w="89"/><text x="71.4993%" y="191.50">co..</text></g><g><title>simple_lisp::interpreter::ScopeItem::last (1 samples, 0.03%)</title><rect x="73.6252%" y="325" width="0.0267%" height="15" fill="rgb(228,126,14)" fg:x="2758" fg:w="1"/><text x="73.8752%" y="335.50"></text></g><g><title>simple_lisp::interpreter::ast::FnSignature::match_arg_count (3 samples, 0.08%)</title><rect x="73.6519%" y="325" width="0.0801%" height="15" fill="rgb(215,173,21)" fg:x="2759" fg:w="3"/><text x="73.9019%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (5 samples, 0.13%)</title><rect x="73.7320%" y="309" width="0.1335%" height="15" fill="rgb(210,6,40)" fg:x="2762" fg:w="5"/><text x="73.9820%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="73.9455%" y="261" width="0.0267%" height="15" fill="rgb(212,48,18)" fg:x="2770" fg:w="1"/><text x="74.1955%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="73.9455%" y="245" width="0.0267%" height="15" fill="rgb(230,214,11)" fg:x="2770" fg:w="1"/><text x="74.1955%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="73.9455%" y="229" width="0.0267%" height="15" fill="rgb(254,105,39)" fg:x="2770" fg:w="1"/><text x="74.1955%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="74.4261%" y="213" width="0.0534%" height="15" fill="rgb(245,158,5)" fg:x="2788" fg:w="2"/><text x="74.6761%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::_{{closure}} (16 samples, 0.43%)</title><rect x="74.4794%" y="213" width="0.4271%" height="15" fill="rgb(249,208,11)" fg:x="2790" fg:w="16"/><text x="74.7294%" y="223.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (15 samples, 0.40%)</title><rect x="74.5061%" y="197" width="0.4004%" height="15" fill="rgb(210,39,28)" fg:x="2791" fg:w="15"/><text x="74.7561%" y="207.50"></text></g><g><title>hashbrown::raw::inner::h2 (8 samples, 0.21%)</title><rect x="74.9066%" y="213" width="0.2136%" height="15" fill="rgb(211,56,53)" fg:x="2806" fg:w="8"/><text x="75.1566%" y="223.50"></text></g><g><title>simple_lisp::interpreter::ast::InstructionIter::jump (53 samples, 1.41%)</title><rect x="73.7320%" y="325" width="1.4148%" height="15" fill="rgb(226,201,30)" fg:x="2762" fg:w="53"/><text x="73.9820%" y="335.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::get_index_of (48 samples, 1.28%)</title><rect x="73.8655%" y="309" width="1.2814%" height="15" fill="rgb(239,101,34)" fg:x="2767" fg:w="48"/><text x="74.1155%" y="319.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (46 samples, 1.23%)</title><rect x="73.9188%" y="293" width="1.2280%" height="15" fill="rgb(226,209,5)" fg:x="2769" fg:w="46"/><text x="74.1688%" y="303.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (45 samples, 1.20%)</title><rect x="73.9455%" y="277" width="1.2013%" height="15" fill="rgb(250,105,47)" fg:x="2770" fg:w="45"/><text x="74.1955%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (44 samples, 1.17%)</title><rect x="73.9722%" y="261" width="1.1746%" height="15" fill="rgb(230,72,3)" fg:x="2771" fg:w="44"/><text x="74.2222%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (44 samples, 1.17%)</title><rect x="73.9722%" y="245" width="1.1746%" height="15" fill="rgb(232,218,39)" fg:x="2771" fg:w="44"/><text x="74.2222%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (44 samples, 1.17%)</title><rect x="73.9722%" y="229" width="1.1746%" height="15" fill="rgb(248,166,6)" fg:x="2771" fg:w="44"/><text x="74.2222%" y="239.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="75.1201%" y="213" width="0.0267%" height="15" fill="rgb(247,89,20)" fg:x="2814" fg:w="1"/><text x="75.3701%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="75.1201%" y="197" width="0.0267%" height="15" fill="rgb(248,130,54)" fg:x="2814" fg:w="1"/><text x="75.3701%" y="207.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="75.1735%" y="309" width="0.0267%" height="15" fill="rgb(234,196,4)" fg:x="2816" fg:w="1"/><text x="75.4235%" y="319.50"></text></g><g><title>__rust_dealloc (1 samples, 0.03%)</title><rect x="75.2002%" y="181" width="0.0267%" height="15" fill="rgb(250,143,31)" fg:x="2817" fg:w="1"/><text x="75.4502%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (4 samples, 0.11%)</title><rect x="75.2002%" y="309" width="0.1068%" height="15" fill="rgb(211,110,34)" fg:x="2817" fg:w="4"/><text x="75.4502%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.11%)</title><rect x="75.2002%" y="293" width="0.1068%" height="15" fill="rgb(215,124,48)" fg:x="2817" fg:w="4"/><text x="75.4502%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (4 samples, 0.11%)</title><rect x="75.2002%" y="277" width="0.1068%" height="15" fill="rgb(216,46,13)" fg:x="2817" fg:w="4"/><text x="75.4502%" y="287.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.11%)</title><rect x="75.2002%" y="261" width="0.1068%" height="15" fill="rgb(205,184,25)" fg:x="2817" fg:w="4"/><text x="75.4502%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (4 samples, 0.11%)</title><rect x="75.2002%" y="245" width="0.1068%" height="15" fill="rgb(228,1,10)" fg:x="2817" fg:w="4"/><text x="75.4502%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.11%)</title><rect x="75.2002%" y="229" width="0.1068%" height="15" fill="rgb(213,116,27)" fg:x="2817" fg:w="4"/><text x="75.4502%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.11%)</title><rect x="75.2002%" y="213" width="0.1068%" height="15" fill="rgb(241,95,50)" fg:x="2817" fg:w="4"/><text x="75.4502%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.11%)</title><rect x="75.2002%" y="197" width="0.1068%" height="15" fill="rgb(238,48,32)" fg:x="2817" fg:w="4"/><text x="75.4502%" y="207.50"></text></g><g><title>cfree (3 samples, 0.08%)</title><rect x="75.2269%" y="181" width="0.0801%" height="15" fill="rgb(235,113,49)" fg:x="2818" fg:w="3"/><text x="75.4769%" y="191.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="75.2536%" y="165" width="0.0534%" height="15" fill="rgb(205,127,43)" fg:x="2819" fg:w="2"/><text x="75.5036%" y="175.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::Data as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="75.3070%" y="293" width="0.0534%" height="15" fill="rgb(250,162,2)" fg:x="2821" fg:w="2"/><text x="75.5570%" y="303.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (1 samples, 0.03%)</title><rect x="75.4672%" y="197" width="0.0267%" height="15" fill="rgb(220,13,41)" fg:x="2827" fg:w="1"/><text x="75.7172%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="75.4672%" y="181" width="0.0267%" height="15" fill="rgb(249,221,25)" fg:x="2827" fg:w="1"/><text x="75.7172%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (2 samples, 0.05%)</title><rect x="75.4939%" y="165" width="0.0534%" height="15" fill="rgb(215,208,19)" fg:x="2828" fg:w="2"/><text x="75.7439%" y="175.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (1 samples, 0.03%)</title><rect x="75.5473%" y="149" width="0.0267%" height="15" fill="rgb(236,175,2)" fg:x="2830" fg:w="1"/><text x="75.7973%" y="159.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="75.5473%" y="133" width="0.0267%" height="15" fill="rgb(241,52,2)" fg:x="2830" fg:w="1"/><text x="75.7973%" y="143.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (1 samples, 0.03%)</title><rect x="75.5739%" y="149" width="0.0267%" height="15" fill="rgb(248,140,14)" fg:x="2831" fg:w="1"/><text x="75.8239%" y="159.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (6 samples, 0.16%)</title><rect x="75.4939%" y="181" width="0.1602%" height="15" fill="rgb(253,22,42)" fg:x="2828" fg:w="6"/><text x="75.7439%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (4 samples, 0.11%)</title><rect x="75.5473%" y="165" width="0.1068%" height="15" fill="rgb(234,61,47)" fg:x="2830" fg:w="4"/><text x="75.7973%" y="175.50"></text></g><g><title>hashbrown::raw::inner::h2 (2 samples, 0.05%)</title><rect x="75.6006%" y="149" width="0.0534%" height="15" fill="rgb(208,226,15)" fg:x="2832" fg:w="2"/><text x="75.8506%" y="159.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (11 samples, 0.29%)</title><rect x="75.3871%" y="261" width="0.2936%" height="15" fill="rgb(217,221,4)" fg:x="2824" fg:w="11"/><text x="75.6371%" y="271.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (11 samples, 0.29%)</title><rect x="75.3871%" y="245" width="0.2936%" height="15" fill="rgb(212,174,34)" fg:x="2824" fg:w="11"/><text x="75.6371%" y="255.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (11 samples, 0.29%)</title><rect x="75.3871%" y="229" width="0.2936%" height="15" fill="rgb(253,83,4)" fg:x="2824" fg:w="11"/><text x="75.6371%" y="239.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (8 samples, 0.21%)</title><rect x="75.4672%" y="213" width="0.2136%" height="15" fill="rgb(250,195,49)" fg:x="2827" fg:w="8"/><text x="75.7172%" y="223.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (7 samples, 0.19%)</title><rect x="75.4939%" y="197" width="0.1869%" height="15" fill="rgb(241,192,25)" fg:x="2828" fg:w="7"/><text x="75.7439%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.03%)</title><rect x="75.6540%" y="181" width="0.0267%" height="15" fill="rgb(208,124,10)" fg:x="2834" fg:w="1"/><text x="75.9040%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (1 samples, 0.03%)</title><rect x="75.6540%" y="165" width="0.0267%" height="15" fill="rgb(222,33,0)" fg:x="2834" fg:w="1"/><text x="75.9040%" y="175.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (14 samples, 0.37%)</title><rect x="75.6807%" y="261" width="0.3737%" height="15" fill="rgb(234,209,28)" fg:x="2835" fg:w="14"/><text x="75.9307%" y="271.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (34 samples, 0.91%)</title><rect x="75.3604%" y="293" width="0.9076%" height="15" fill="rgb(224,11,23)" fg:x="2823" fg:w="34"/><text x="75.6104%" y="303.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (33 samples, 0.88%)</title><rect x="75.3871%" y="277" width="0.8809%" height="15" fill="rgb(232,99,1)" fg:x="2824" fg:w="33"/><text x="75.6371%" y="287.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (8 samples, 0.21%)</title><rect x="76.0545%" y="261" width="0.2136%" height="15" fill="rgb(237,95,45)" fg:x="2849" fg:w="8"/><text x="76.3045%" y="271.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.13%)</title><rect x="76.1345%" y="245" width="0.1335%" height="15" fill="rgb(208,109,11)" fg:x="2852" fg:w="5"/><text x="76.3845%" y="255.50"></text></g><g><title>malloc (5 samples, 0.13%)</title><rect x="76.1345%" y="229" width="0.1335%" height="15" fill="rgb(216,190,48)" fg:x="2852" fg:w="5"/><text x="76.3845%" y="239.50"></text></g><g><title>[libc.so.6] (5 samples, 0.13%)</title><rect x="76.1345%" y="213" width="0.1335%" height="15" fill="rgb(251,171,36)" fg:x="2852" fg:w="5"/><text x="76.3845%" y="223.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="76.2146%" y="197" width="0.0534%" height="15" fill="rgb(230,62,22)" fg:x="2855" fg:w="2"/><text x="76.4646%" y="207.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::add (50 samples, 1.33%)</title><rect x="75.1468%" y="325" width="1.3348%" height="15" fill="rgb(225,114,35)" fg:x="2815" fg:w="50"/><text x="75.3968%" y="335.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clone_data (44 samples, 1.17%)</title><rect x="75.3070%" y="309" width="1.1746%" height="15" fill="rgb(215,118,42)" fg:x="2821" fg:w="44"/><text x="75.5570%" y="319.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (8 samples, 0.21%)</title><rect x="76.2680%" y="293" width="0.2136%" height="15" fill="rgb(243,119,21)" fg:x="2857" fg:w="8"/><text x="76.5180%" y="303.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (8 samples, 0.21%)</title><rect x="76.2680%" y="277" width="0.2136%" height="15" fill="rgb(252,177,53)" fg:x="2857" fg:w="8"/><text x="76.5180%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (8 samples, 0.21%)</title><rect x="76.2680%" y="261" width="0.2136%" height="15" fill="rgb(237,209,29)" fg:x="2857" fg:w="8"/><text x="76.5180%" y="271.50"></text></g><g><title>core::cell::BorrowRef::new (8 samples, 0.21%)</title><rect x="76.2680%" y="245" width="0.2136%" height="15" fill="rgb(212,65,23)" fg:x="2857" fg:w="8"/><text x="76.5180%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (6 samples, 0.16%)</title><rect x="76.3214%" y="229" width="0.1602%" height="15" fill="rgb(230,222,46)" fg:x="2859" fg:w="6"/><text x="76.5714%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="76.6418%" y="309" width="0.0267%" height="15" fill="rgb(215,135,32)" fg:x="2871" fg:w="1"/><text x="76.8918%" y="319.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="76.6684%" y="309" width="0.0267%" height="15" fill="rgb(246,101,22)" fg:x="2872" fg:w="1"/><text x="76.9184%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="76.6684%" y="293" width="0.0267%" height="15" fill="rgb(206,107,13)" fg:x="2872" fg:w="1"/><text x="76.9184%" y="303.50"></text></g><g><title>cfree (1 samples, 0.03%)</title><rect x="76.6951%" y="309" width="0.0267%" height="15" fill="rgb(250,100,44)" fg:x="2873" fg:w="1"/><text x="76.9451%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="76.6951%" y="293" width="0.0267%" height="15" fill="rgb(231,147,38)" fg:x="2873" fg:w="1"/><text x="76.9451%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (2 samples, 0.05%)</title><rect x="76.7218%" y="309" width="0.0534%" height="15" fill="rgb(229,8,40)" fg:x="2874" fg:w="2"/><text x="76.9718%" y="319.50"></text></g><g><title>core::cmp::PartialEq::ne (2 samples, 0.05%)</title><rect x="76.7218%" y="293" width="0.0534%" height="15" fill="rgb(221,135,30)" fg:x="2874" fg:w="2"/><text x="76.9718%" y="303.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::Data as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="76.7485%" y="277" width="0.0267%" height="15" fill="rgb(249,193,18)" fg:x="2875" fg:w="1"/><text x="76.9985%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (3 samples, 0.08%)</title><rect x="76.7752%" y="309" width="0.0801%" height="15" fill="rgb(209,133,39)" fg:x="2876" fg:w="3"/><text x="77.0252%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.08%)</title><rect x="76.7752%" y="293" width="0.0801%" height="15" fill="rgb(232,100,14)" fg:x="2876" fg:w="3"/><text x="77.0252%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (3 samples, 0.08%)</title><rect x="76.7752%" y="277" width="0.0801%" height="15" fill="rgb(224,185,1)" fg:x="2876" fg:w="3"/><text x="77.0252%" y="287.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.08%)</title><rect x="76.7752%" y="261" width="0.0801%" height="15" fill="rgb(223,139,8)" fg:x="2876" fg:w="3"/><text x="77.0252%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (3 samples, 0.08%)</title><rect x="76.7752%" y="245" width="0.0801%" height="15" fill="rgb(232,213,38)" fg:x="2876" fg:w="3"/><text x="77.0252%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.08%)</title><rect x="76.7752%" y="229" width="0.0801%" height="15" fill="rgb(207,94,22)" fg:x="2876" fg:w="3"/><text x="77.0252%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.08%)</title><rect x="76.7752%" y="213" width="0.0801%" height="15" fill="rgb(219,183,54)" fg:x="2876" fg:w="3"/><text x="77.0252%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.08%)</title><rect x="76.7752%" y="197" width="0.0801%" height="15" fill="rgb(216,185,54)" fg:x="2876" fg:w="3"/><text x="77.0252%" y="207.50"></text></g><g><title>cfree (3 samples, 0.08%)</title><rect x="76.7752%" y="181" width="0.0801%" height="15" fill="rgb(254,217,39)" fg:x="2876" fg:w="3"/><text x="77.0252%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="76.8286%" y="165" width="0.0267%" height="15" fill="rgb(240,178,23)" fg:x="2878" fg:w="1"/><text x="77.0786%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.08%)</title><rect x="76.9087%" y="197" width="0.0801%" height="15" fill="rgb(218,11,47)" fg:x="2881" fg:w="3"/><text x="77.1587%" y="207.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (6 samples, 0.16%)</title><rect x="76.9087%" y="213" width="0.1602%" height="15" fill="rgb(218,51,51)" fg:x="2881" fg:w="6"/><text x="77.1587%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.08%)</title><rect x="76.9888%" y="197" width="0.0801%" height="15" fill="rgb(238,126,27)" fg:x="2884" fg:w="3"/><text x="77.2388%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (5 samples, 0.13%)</title><rect x="77.0689%" y="181" width="0.1335%" height="15" fill="rgb(249,202,22)" fg:x="2887" fg:w="5"/><text x="77.3189%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (2 samples, 0.05%)</title><rect x="77.2290%" y="165" width="0.0534%" height="15" fill="rgb(254,195,49)" fg:x="2893" fg:w="2"/><text x="77.4790%" y="175.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (2 samples, 0.05%)</title><rect x="77.2290%" y="149" width="0.0534%" height="15" fill="rgb(208,123,14)" fg:x="2893" fg:w="2"/><text x="77.4790%" y="159.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (4 samples, 0.11%)</title><rect x="77.2824%" y="165" width="0.1068%" height="15" fill="rgb(224,200,8)" fg:x="2895" fg:w="4"/><text x="77.5324%" y="175.50"></text></g><g><title>hashbrown::raw::inner::h2 (1 samples, 0.03%)</title><rect x="77.3892%" y="165" width="0.0267%" height="15" fill="rgb(217,61,36)" fg:x="2899" fg:w="1"/><text x="77.6392%" y="175.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (14 samples, 0.37%)</title><rect x="77.0689%" y="197" width="0.3737%" height="15" fill="rgb(206,35,45)" fg:x="2887" fg:w="14"/><text x="77.3189%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (9 samples, 0.24%)</title><rect x="77.2023%" y="181" width="0.2403%" height="15" fill="rgb(217,65,33)" fg:x="2892" fg:w="9"/><text x="77.4523%" y="191.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="77.4159%" y="165" width="0.0267%" height="15" fill="rgb(222,158,48)" fg:x="2900" fg:w="1"/><text x="77.6659%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="77.4159%" y="149" width="0.0267%" height="15" fill="rgb(254,2,54)" fg:x="2900" fg:w="1"/><text x="77.6659%" y="159.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (26 samples, 0.69%)</title><rect x="76.8553%" y="277" width="0.6941%" height="15" fill="rgb(250,143,38)" fg:x="2879" fg:w="26"/><text x="77.1053%" y="287.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (26 samples, 0.69%)</title><rect x="76.8553%" y="261" width="0.6941%" height="15" fill="rgb(248,25,0)" fg:x="2879" fg:w="26"/><text x="77.1053%" y="271.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (25 samples, 0.67%)</title><rect x="76.8820%" y="245" width="0.6674%" height="15" fill="rgb(206,152,27)" fg:x="2880" fg:w="25"/><text x="77.1320%" y="255.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (24 samples, 0.64%)</title><rect x="76.9087%" y="229" width="0.6407%" height="15" fill="rgb(240,77,30)" fg:x="2881" fg:w="24"/><text x="77.1587%" y="239.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (18 samples, 0.48%)</title><rect x="77.0689%" y="213" width="0.4805%" height="15" fill="rgb(231,5,3)" fg:x="2887" fg:w="18"/><text x="77.3189%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (4 samples, 0.11%)</title><rect x="77.4426%" y="197" width="0.1068%" height="15" fill="rgb(207,226,32)" fg:x="2901" fg:w="4"/><text x="77.6926%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (4 samples, 0.11%)</title><rect x="77.4426%" y="181" width="0.1068%" height="15" fill="rgb(222,207,47)" fg:x="2901" fg:w="4"/><text x="77.6926%" y="191.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (46 samples, 1.23%)</title><rect x="77.5494%" y="277" width="1.2280%" height="15" fill="rgb(229,115,45)" fg:x="2905" fg:w="46"/><text x="77.7994%" y="287.50"></text></g><g><title>__rust_alloc (3 samples, 0.08%)</title><rect x="78.9108%" y="245" width="0.0801%" height="15" fill="rgb(224,191,6)" fg:x="2956" fg:w="3"/><text x="79.1608%" y="255.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (120 samples, 3.20%)</title><rect x="76.8553%" y="309" width="3.2034%" height="15" fill="rgb(230,227,24)" fg:x="2879" fg:w="120"/><text x="77.1053%" y="319.50">sim..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (120 samples, 3.20%)</title><rect x="76.8553%" y="293" width="3.2034%" height="15" fill="rgb(228,80,19)" fg:x="2879" fg:w="120"/><text x="77.1053%" y="303.50">sim..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (48 samples, 1.28%)</title><rect x="78.7774%" y="277" width="1.2814%" height="15" fill="rgb(247,229,0)" fg:x="2951" fg:w="48"/><text x="79.0274%" y="287.50"></text></g><g><title>alloc::alloc::alloc (44 samples, 1.17%)</title><rect x="78.8841%" y="261" width="1.1746%" height="15" fill="rgb(237,194,15)" fg:x="2955" fg:w="44"/><text x="79.1341%" y="271.50"></text></g><g><title>malloc (40 samples, 1.07%)</title><rect x="78.9909%" y="245" width="1.0678%" height="15" fill="rgb(219,203,20)" fg:x="2959" fg:w="40"/><text x="79.2409%" y="255.50"></text></g><g><title>[libc.so.6] (25 samples, 0.67%)</title><rect x="79.3914%" y="229" width="0.6674%" height="15" fill="rgb(234,128,8)" fg:x="2974" fg:w="25"/><text x="79.6414%" y="239.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="79.9786%" y="213" width="0.0801%" height="15" fill="rgb(248,202,8)" fg:x="2996" fg:w="3"/><text x="80.2286%" y="223.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::equal (135 samples, 3.60%)</title><rect x="76.4816%" y="325" width="3.6038%" height="15" fill="rgb(206,104,37)" fg:x="2865" fg:w="135"/><text x="76.7316%" y="335.50">simp..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (1 samples, 0.03%)</title><rect x="80.0587%" y="309" width="0.0267%" height="15" fill="rgb(223,8,27)" fg:x="2999" fg:w="1"/><text x="80.3087%" y="319.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (1 samples, 0.03%)</title><rect x="80.0587%" y="293" width="0.0267%" height="15" fill="rgb(216,217,28)" fg:x="2999" fg:w="1"/><text x="80.3087%" y="303.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (1 samples, 0.03%)</title><rect x="80.0587%" y="277" width="0.0267%" height="15" fill="rgb(249,199,1)" fg:x="2999" fg:w="1"/><text x="80.3087%" y="287.50"></text></g><g><title>core::cell::BorrowRef::new (1 samples, 0.03%)</title><rect x="80.0587%" y="261" width="0.0267%" height="15" fill="rgb(240,85,17)" fg:x="2999" fg:w="1"/><text x="80.3087%" y="271.50"></text></g><g><title>core::cell::is_reading (1 samples, 0.03%)</title><rect x="80.0587%" y="245" width="0.0267%" height="15" fill="rgb(206,108,45)" fg:x="2999" fg:w="1"/><text x="80.3087%" y="255.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::less (3 samples, 0.08%)</title><rect x="80.0854%" y="325" width="0.0801%" height="15" fill="rgb(245,210,41)" fg:x="3000" fg:w="3"/><text x="80.3354%" y="335.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (3 samples, 0.08%)</title><rect x="80.0854%" y="309" width="0.0801%" height="15" fill="rgb(206,13,37)" fg:x="3000" fg:w="3"/><text x="80.3354%" y="319.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (3 samples, 0.08%)</title><rect x="80.0854%" y="293" width="0.0801%" height="15" fill="rgb(250,61,18)" fg:x="3000" fg:w="3"/><text x="80.3354%" y="303.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (2 samples, 0.05%)</title><rect x="80.1121%" y="277" width="0.0534%" height="15" fill="rgb(235,172,48)" fg:x="3001" fg:w="2"/><text x="80.3621%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.11%)</title><rect x="80.3257%" y="309" width="0.1068%" height="15" fill="rgb(249,201,17)" fg:x="3009" fg:w="4"/><text x="80.5757%" y="319.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.05%)</title><rect x="80.4325%" y="181" width="0.0534%" height="15" fill="rgb(219,208,6)" fg:x="3013" fg:w="2"/><text x="80.6825%" y="191.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.05%)</title><rect x="80.4325%" y="165" width="0.0534%" height="15" fill="rgb(248,31,23)" fg:x="3013" fg:w="2"/><text x="80.6825%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (4 samples, 0.11%)</title><rect x="80.4325%" y="309" width="0.1068%" height="15" fill="rgb(245,15,42)" fg:x="3013" fg:w="4"/><text x="80.6825%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.11%)</title><rect x="80.4325%" y="293" width="0.1068%" height="15" fill="rgb(222,217,39)" fg:x="3013" fg:w="4"/><text x="80.6825%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (4 samples, 0.11%)</title><rect x="80.4325%" y="277" width="0.1068%" height="15" fill="rgb(210,219,27)" fg:x="3013" fg:w="4"/><text x="80.6825%" y="287.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.11%)</title><rect x="80.4325%" y="261" width="0.1068%" height="15" fill="rgb(252,166,36)" fg:x="3013" fg:w="4"/><text x="80.6825%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (4 samples, 0.11%)</title><rect x="80.4325%" y="245" width="0.1068%" height="15" fill="rgb(245,132,34)" fg:x="3013" fg:w="4"/><text x="80.6825%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.11%)</title><rect x="80.4325%" y="229" width="0.1068%" height="15" fill="rgb(236,54,3)" fg:x="3013" fg:w="4"/><text x="80.6825%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.11%)</title><rect x="80.4325%" y="213" width="0.1068%" height="15" fill="rgb(241,173,43)" fg:x="3013" fg:w="4"/><text x="80.6825%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.11%)</title><rect x="80.4325%" y="197" width="0.1068%" height="15" fill="rgb(215,190,9)" fg:x="3013" fg:w="4"/><text x="80.6825%" y="207.50"></text></g><g><title>cfree (2 samples, 0.05%)</title><rect x="80.4859%" y="181" width="0.0534%" height="15" fill="rgb(242,101,16)" fg:x="3015" fg:w="2"/><text x="80.7359%" y="191.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (2 samples, 0.05%)</title><rect x="80.5659%" y="213" width="0.0534%" height="15" fill="rgb(223,190,21)" fg:x="3018" fg:w="2"/><text x="80.8159%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.05%)</title><rect x="80.5659%" y="197" width="0.0534%" height="15" fill="rgb(215,228,25)" fg:x="3018" fg:w="2"/><text x="80.8159%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (2 samples, 0.05%)</title><rect x="80.6193%" y="181" width="0.0534%" height="15" fill="rgb(225,36,22)" fg:x="3020" fg:w="2"/><text x="80.8693%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.03%)</title><rect x="80.6727%" y="165" width="0.0267%" height="15" fill="rgb(251,106,46)" fg:x="3022" fg:w="1"/><text x="80.9227%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.03%)</title><rect x="80.6727%" y="149" width="0.0267%" height="15" fill="rgb(208,90,1)" fg:x="3022" fg:w="1"/><text x="80.9227%" y="159.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (2 samples, 0.05%)</title><rect x="80.6994%" y="165" width="0.0534%" height="15" fill="rgb(243,10,4)" fg:x="3023" fg:w="2"/><text x="80.9494%" y="175.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (7 samples, 0.19%)</title><rect x="80.6193%" y="197" width="0.1869%" height="15" fill="rgb(212,137,27)" fg:x="3020" fg:w="7"/><text x="80.8693%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (5 samples, 0.13%)</title><rect x="80.6727%" y="181" width="0.1335%" height="15" fill="rgb(231,220,49)" fg:x="3022" fg:w="5"/><text x="80.9227%" y="191.50"></text></g><g><title>hashbrown::raw::inner::h2 (2 samples, 0.05%)</title><rect x="80.7528%" y="165" width="0.0534%" height="15" fill="rgb(237,96,20)" fg:x="3025" fg:w="2"/><text x="81.0028%" y="175.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (11 samples, 0.29%)</title><rect x="80.5392%" y="277" width="0.2936%" height="15" fill="rgb(239,229,30)" fg:x="3017" fg:w="11"/><text x="80.7892%" y="287.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (11 samples, 0.29%)</title><rect x="80.5392%" y="261" width="0.2936%" height="15" fill="rgb(219,65,33)" fg:x="3017" fg:w="11"/><text x="80.7892%" y="271.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (11 samples, 0.29%)</title><rect x="80.5392%" y="245" width="0.2936%" height="15" fill="rgb(243,134,7)" fg:x="3017" fg:w="11"/><text x="80.7892%" y="255.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (10 samples, 0.27%)</title><rect x="80.5659%" y="229" width="0.2670%" height="15" fill="rgb(216,177,54)" fg:x="3018" fg:w="10"/><text x="80.8159%" y="239.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (8 samples, 0.21%)</title><rect x="80.6193%" y="213" width="0.2136%" height="15" fill="rgb(211,160,20)" fg:x="3020" fg:w="8"/><text x="80.8693%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.03%)</title><rect x="80.8062%" y="197" width="0.0267%" height="15" fill="rgb(239,85,39)" fg:x="3027" fg:w="1"/><text x="81.0562%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (1 samples, 0.03%)</title><rect x="80.8062%" y="181" width="0.0267%" height="15" fill="rgb(232,125,22)" fg:x="3027" fg:w="1"/><text x="81.0562%" y="191.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (28 samples, 0.75%)</title><rect x="80.8329%" y="277" width="0.7475%" height="15" fill="rgb(244,57,34)" fg:x="3028" fg:w="28"/><text x="81.0829%" y="287.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="81.6337%" y="245" width="0.0267%" height="15" fill="rgb(214,203,32)" fg:x="3058" fg:w="1"/><text x="81.8837%" y="255.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (52 samples, 1.39%)</title><rect x="80.5392%" y="309" width="1.3881%" height="15" fill="rgb(207,58,43)" fg:x="3017" fg:w="52"/><text x="80.7892%" y="319.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (52 samples, 1.39%)</title><rect x="80.5392%" y="293" width="1.3881%" height="15" fill="rgb(215,193,15)" fg:x="3017" fg:w="52"/><text x="80.7892%" y="303.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (13 samples, 0.35%)</title><rect x="81.5804%" y="277" width="0.3470%" height="15" fill="rgb(232,15,44)" fg:x="3056" fg:w="13"/><text x="81.8304%" y="287.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.35%)</title><rect x="81.5804%" y="261" width="0.3470%" height="15" fill="rgb(212,3,48)" fg:x="3056" fg:w="13"/><text x="81.8304%" y="271.50"></text></g><g><title>malloc (10 samples, 0.27%)</title><rect x="81.6604%" y="245" width="0.2670%" height="15" fill="rgb(218,128,7)" fg:x="3059" fg:w="10"/><text x="81.9104%" y="255.50"></text></g><g><title>[libc.so.6] (7 samples, 0.19%)</title><rect x="81.7405%" y="229" width="0.1869%" height="15" fill="rgb(226,216,39)" fg:x="3062" fg:w="7"/><text x="81.9905%" y="239.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="81.8473%" y="213" width="0.0801%" height="15" fill="rgb(243,47,51)" fg:x="3066" fg:w="3"/><text x="82.0973%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (3 samples, 0.08%)</title><rect x="81.9274%" y="245" width="0.0801%" height="15" fill="rgb(241,183,40)" fg:x="3069" fg:w="3"/><text x="82.1774%" y="255.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::less_equal (73 samples, 1.95%)</title><rect x="80.1655%" y="325" width="1.9487%" height="15" fill="rgb(231,217,32)" fg:x="3003" fg:w="73"/><text x="80.4155%" y="335.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (7 samples, 0.19%)</title><rect x="81.9274%" y="309" width="0.1869%" height="15" fill="rgb(229,61,38)" fg:x="3069" fg:w="7"/><text x="82.1774%" y="319.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (7 samples, 0.19%)</title><rect x="81.9274%" y="293" width="0.1869%" height="15" fill="rgb(225,210,5)" fg:x="3069" fg:w="7"/><text x="82.1774%" y="303.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (7 samples, 0.19%)</title><rect x="81.9274%" y="277" width="0.1869%" height="15" fill="rgb(231,79,45)" fg:x="3069" fg:w="7"/><text x="82.1774%" y="287.50"></text></g><g><title>core::cell::BorrowRef::new (7 samples, 0.19%)</title><rect x="81.9274%" y="261" width="0.1869%" height="15" fill="rgb(224,100,7)" fg:x="3069" fg:w="7"/><text x="82.1774%" y="271.50"></text></g><g><title>core::cell::is_reading (4 samples, 0.11%)</title><rect x="82.0075%" y="245" width="0.1068%" height="15" fill="rgb(241,198,18)" fg:x="3072" fg:w="4"/><text x="82.2575%" y="255.50"></text></g><g><title>__rust_dealloc (2 samples, 0.05%)</title><rect x="82.3278%" y="309" width="0.0534%" height="15" fill="rgb(252,97,53)" fg:x="3084" fg:w="2"/><text x="82.5778%" y="319.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (6 samples, 0.16%)</title><rect x="82.4880%" y="197" width="0.1602%" height="15" fill="rgb(220,88,7)" fg:x="3090" fg:w="6"/><text x="82.7380%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.16%)</title><rect x="82.4880%" y="181" width="0.1602%" height="15" fill="rgb(213,176,14)" fg:x="3090" fg:w="6"/><text x="82.7380%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (5 samples, 0.13%)</title><rect x="82.6482%" y="165" width="0.1335%" height="15" fill="rgb(246,73,7)" fg:x="3096" fg:w="5"/><text x="82.8982%" y="175.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (3 samples, 0.08%)</title><rect x="82.7816%" y="149" width="0.0801%" height="15" fill="rgb(245,64,36)" fg:x="3101" fg:w="3"/><text x="83.0316%" y="159.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (3 samples, 0.08%)</title><rect x="82.7816%" y="133" width="0.0801%" height="15" fill="rgb(245,80,10)" fg:x="3101" fg:w="3"/><text x="83.0316%" y="143.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (1 samples, 0.03%)</title><rect x="82.8617%" y="149" width="0.0267%" height="15" fill="rgb(232,107,50)" fg:x="3104" fg:w="1"/><text x="83.1117%" y="159.50"></text></g><g><title>hashbrown::raw::inner::h2 (1 samples, 0.03%)</title><rect x="82.8884%" y="149" width="0.0267%" height="15" fill="rgb(253,3,0)" fg:x="3105" fg:w="1"/><text x="83.1384%" y="159.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (6 samples, 0.16%)</title><rect x="82.9151%" y="149" width="0.1602%" height="15" fill="rgb(212,99,53)" fg:x="3106" fg:w="6"/><text x="83.1651%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.16%)</title><rect x="82.9151%" y="133" width="0.1602%" height="15" fill="rgb(249,111,54)" fg:x="3106" fg:w="6"/><text x="83.1651%" y="143.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (17 samples, 0.45%)</title><rect x="82.6482%" y="181" width="0.4538%" height="15" fill="rgb(249,55,30)" fg:x="3096" fg:w="17"/><text x="82.8982%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (12 samples, 0.32%)</title><rect x="82.7816%" y="165" width="0.3203%" height="15" fill="rgb(237,47,42)" fg:x="3101" fg:w="12"/><text x="83.0316%" y="175.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (1 samples, 0.03%)</title><rect x="83.0753%" y="149" width="0.0267%" height="15" fill="rgb(211,20,18)" fg:x="3112" fg:w="1"/><text x="83.3253%" y="159.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="83.0753%" y="133" width="0.0267%" height="15" fill="rgb(231,203,46)" fg:x="3112" fg:w="1"/><text x="83.3253%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="83.0753%" y="117" width="0.0267%" height="15" fill="rgb(237,142,3)" fg:x="3112" fg:w="1"/><text x="83.3253%" y="127.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (29 samples, 0.77%)</title><rect x="82.3812%" y="261" width="0.7742%" height="15" fill="rgb(241,107,1)" fg:x="3086" fg:w="29"/><text x="82.6312%" y="271.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (29 samples, 0.77%)</title><rect x="82.3812%" y="245" width="0.7742%" height="15" fill="rgb(229,83,13)" fg:x="3086" fg:w="29"/><text x="82.6312%" y="255.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (29 samples, 0.77%)</title><rect x="82.3812%" y="229" width="0.7742%" height="15" fill="rgb(241,91,40)" fg:x="3086" fg:w="29"/><text x="82.6312%" y="239.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (25 samples, 0.67%)</title><rect x="82.4880%" y="213" width="0.6674%" height="15" fill="rgb(225,3,45)" fg:x="3090" fg:w="25"/><text x="82.7380%" y="223.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (19 samples, 0.51%)</title><rect x="82.6482%" y="197" width="0.5072%" height="15" fill="rgb(244,223,14)" fg:x="3096" fg:w="19"/><text x="82.8982%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (2 samples, 0.05%)</title><rect x="83.1020%" y="181" width="0.0534%" height="15" fill="rgb(224,124,37)" fg:x="3113" fg:w="2"/><text x="83.3520%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (2 samples, 0.05%)</title><rect x="83.1020%" y="165" width="0.0534%" height="15" fill="rgb(251,171,30)" fg:x="3113" fg:w="2"/><text x="83.3520%" y="175.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (37 samples, 0.99%)</title><rect x="83.1554%" y="261" width="0.9877%" height="15" fill="rgb(236,46,54)" fg:x="3115" fg:w="37"/><text x="83.4054%" y="271.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.80%)</title><rect x="84.3566%" y="245" width="0.8009%" height="15" fill="rgb(245,213,5)" fg:x="3160" fg:w="30"/><text x="84.6066%" y="255.50"></text></g><g><title>malloc (30 samples, 0.80%)</title><rect x="84.3566%" y="229" width="0.8009%" height="15" fill="rgb(230,144,27)" fg:x="3160" fg:w="30"/><text x="84.6066%" y="239.50"></text></g><g><title>[libc.so.6] (26 samples, 0.69%)</title><rect x="84.4634%" y="213" width="0.6941%" height="15" fill="rgb(220,86,6)" fg:x="3164" fg:w="26"/><text x="84.7134%" y="223.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="85.0774%" y="197" width="0.0801%" height="15" fill="rgb(240,20,13)" fg:x="3187" fg:w="3"/><text x="85.3274%" y="207.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (108 samples, 2.88%)</title><rect x="82.3812%" y="293" width="2.8831%" height="15" fill="rgb(217,89,34)" fg:x="3086" fg:w="108"/><text x="82.6312%" y="303.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (108 samples, 2.88%)</title><rect x="82.3812%" y="277" width="2.8831%" height="15" fill="rgb(229,13,5)" fg:x="3086" fg:w="108"/><text x="82.6312%" y="287.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (42 samples, 1.12%)</title><rect x="84.1431%" y="261" width="1.1212%" height="15" fill="rgb(244,67,35)" fg:x="3152" fg:w="42"/><text x="84.3931%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (4 samples, 0.11%)</title><rect x="85.1575%" y="245" width="0.1068%" height="15" fill="rgb(221,40,2)" fg:x="3190" fg:w="4"/><text x="85.4075%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.11%)</title><rect x="85.1575%" y="229" width="0.1068%" height="15" fill="rgb(237,157,21)" fg:x="3190" fg:w="4"/><text x="85.4075%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.11%)</title><rect x="85.1575%" y="213" width="0.1068%" height="15" fill="rgb(222,94,11)" fg:x="3190" fg:w="4"/><text x="85.4075%" y="223.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (4 samples, 0.11%)</title><rect x="85.1575%" y="197" width="0.1068%" height="15" fill="rgb(249,113,6)" fg:x="3190" fg:w="4"/><text x="85.4075%" y="207.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (4 samples, 0.11%)</title><rect x="85.1575%" y="181" width="0.1068%" height="15" fill="rgb(238,137,36)" fg:x="3190" fg:w="4"/><text x="85.4075%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (4 samples, 0.11%)</title><rect x="85.1575%" y="165" width="0.1068%" height="15" fill="rgb(210,102,26)" fg:x="3190" fg:w="4"/><text x="85.4075%" y="175.50"></text></g><g><title>core::cell::BorrowRefMut::new (4 samples, 0.11%)</title><rect x="85.1575%" y="149" width="0.1068%" height="15" fill="rgb(218,30,30)" fg:x="3190" fg:w="4"/><text x="85.4075%" y="159.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clone_data (110 samples, 2.94%)</title><rect x="82.3812%" y="309" width="2.9365%" height="15" fill="rgb(214,67,26)" fg:x="3086" fg:w="110"/><text x="82.6312%" y="319.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (2 samples, 0.05%)</title><rect x="85.2643%" y="293" width="0.0534%" height="15" fill="rgb(251,9,53)" fg:x="3194" fg:w="2"/><text x="85.5143%" y="303.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (2 samples, 0.05%)</title><rect x="85.2643%" y="277" width="0.0534%" height="15" fill="rgb(228,204,25)" fg:x="3194" fg:w="2"/><text x="85.5143%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (2 samples, 0.05%)</title><rect x="85.2643%" y="261" width="0.0534%" height="15" fill="rgb(207,153,8)" fg:x="3194" fg:w="2"/><text x="85.5143%" y="271.50"></text></g><g><title>core::cell::BorrowRef::new (2 samples, 0.05%)</title><rect x="85.2643%" y="245" width="0.0534%" height="15" fill="rgb(242,9,16)" fg:x="3194" fg:w="2"/><text x="85.5143%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.05%)</title><rect x="85.2643%" y="229" width="0.0534%" height="15" fill="rgb(217,211,10)" fg:x="3194" fg:w="2"/><text x="85.5143%" y="239.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::modulo (127 samples, 3.39%)</title><rect x="82.1143%" y="325" width="3.3903%" height="15" fill="rgb(219,228,52)" fg:x="3076" fg:w="127"/><text x="82.3643%" y="335.50">sim..</text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::modulo::do_the_thing (7 samples, 0.19%)</title><rect x="85.3177%" y="309" width="0.1869%" height="15" fill="rgb(231,92,29)" fg:x="3196" fg:w="7"/><text x="85.5677%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.03%)</title><rect x="85.5045%" y="309" width="0.0267%" height="15" fill="rgb(232,8,23)" fg:x="3203" fg:w="1"/><text x="85.7545%" y="319.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="85.5045%" y="293" width="0.0267%" height="15" fill="rgb(216,211,34)" fg:x="3203" fg:w="1"/><text x="85.7545%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.03%)</title><rect x="85.5312%" y="309" width="0.0267%" height="15" fill="rgb(236,151,0)" fg:x="3204" fg:w="1"/><text x="85.7812%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="85.5312%" y="293" width="0.0267%" height="15" fill="rgb(209,168,3)" fg:x="3204" fg:w="1"/><text x="85.7812%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (1 samples, 0.03%)</title><rect x="85.5312%" y="277" width="0.0267%" height="15" fill="rgb(208,129,28)" fg:x="3204" fg:w="1"/><text x="85.7812%" y="287.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="85.5312%" y="261" width="0.0267%" height="15" fill="rgb(229,78,22)" fg:x="3204" fg:w="1"/><text x="85.7812%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.03%)</title><rect x="85.5312%" y="245" width="0.0267%" height="15" fill="rgb(228,187,13)" fg:x="3204" fg:w="1"/><text x="85.7812%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="85.5312%" y="229" width="0.0267%" height="15" fill="rgb(240,119,24)" fg:x="3204" fg:w="1"/><text x="85.7812%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="85.5312%" y="213" width="0.0267%" height="15" fill="rgb(209,194,42)" fg:x="3204" fg:w="1"/><text x="85.7812%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="85.5312%" y="197" width="0.0267%" height="15" fill="rgb(247,200,46)" fg:x="3204" fg:w="1"/><text x="85.7812%" y="207.50"></text></g><g><title>cfree (1 samples, 0.03%)</title><rect x="85.5312%" y="181" width="0.0267%" height="15" fill="rgb(218,76,16)" fg:x="3204" fg:w="1"/><text x="85.7812%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="85.5312%" y="165" width="0.0267%" height="15" fill="rgb(225,21,48)" fg:x="3204" fg:w="1"/><text x="85.7812%" y="175.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (2 samples, 0.05%)</title><rect x="85.5579%" y="181" width="0.0534%" height="15" fill="rgb(239,223,50)" fg:x="3205" fg:w="2"/><text x="85.8079%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (2 samples, 0.05%)</title><rect x="85.6647%" y="165" width="0.0534%" height="15" fill="rgb(244,45,21)" fg:x="3209" fg:w="2"/><text x="85.9147%" y="175.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (2 samples, 0.05%)</title><rect x="85.6647%" y="149" width="0.0534%" height="15" fill="rgb(232,33,43)" fg:x="3209" fg:w="2"/><text x="85.9147%" y="159.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (1 samples, 0.03%)</title><rect x="85.6914%" y="133" width="0.0267%" height="15" fill="rgb(209,8,3)" fg:x="3210" fg:w="1"/><text x="85.9414%" y="143.50"></text></g><g><title>hashbrown::raw::inner::h2 (1 samples, 0.03%)</title><rect x="85.7181%" y="165" width="0.0267%" height="15" fill="rgb(214,25,53)" fg:x="3211" fg:w="1"/><text x="85.9681%" y="175.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (8 samples, 0.21%)</title><rect x="85.5579%" y="197" width="0.2136%" height="15" fill="rgb(254,186,54)" fg:x="3205" fg:w="8"/><text x="85.8079%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (6 samples, 0.16%)</title><rect x="85.6113%" y="181" width="0.1602%" height="15" fill="rgb(208,174,49)" fg:x="3207" fg:w="6"/><text x="85.8613%" y="191.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="85.7448%" y="165" width="0.0267%" height="15" fill="rgb(233,191,51)" fg:x="3212" fg:w="1"/><text x="85.9948%" y="175.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="85.7448%" y="149" width="0.0267%" height="15" fill="rgb(222,134,10)" fg:x="3212" fg:w="1"/><text x="85.9948%" y="159.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (9 samples, 0.24%)</title><rect x="85.5579%" y="277" width="0.2403%" height="15" fill="rgb(230,226,20)" fg:x="3205" fg:w="9"/><text x="85.8079%" y="287.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (9 samples, 0.24%)</title><rect x="85.5579%" y="261" width="0.2403%" height="15" fill="rgb(251,111,25)" fg:x="3205" fg:w="9"/><text x="85.8079%" y="271.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (9 samples, 0.24%)</title><rect x="85.5579%" y="245" width="0.2403%" height="15" fill="rgb(224,40,46)" fg:x="3205" fg:w="9"/><text x="85.8079%" y="255.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (9 samples, 0.24%)</title><rect x="85.5579%" y="229" width="0.2403%" height="15" fill="rgb(236,108,47)" fg:x="3205" fg:w="9"/><text x="85.8079%" y="239.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (9 samples, 0.24%)</title><rect x="85.5579%" y="213" width="0.2403%" height="15" fill="rgb(234,93,0)" fg:x="3205" fg:w="9"/><text x="85.8079%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.03%)</title><rect x="85.7715%" y="197" width="0.0267%" height="15" fill="rgb(224,213,32)" fg:x="3213" fg:w="1"/><text x="86.0215%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (1 samples, 0.03%)</title><rect x="85.7715%" y="181" width="0.0267%" height="15" fill="rgb(251,11,48)" fg:x="3213" fg:w="1"/><text x="86.0215%" y="191.50"></text></g><g><title>hashbrown::raw::inner::special_is_empty (1 samples, 0.03%)</title><rect x="85.7715%" y="165" width="0.0267%" height="15" fill="rgb(236,173,5)" fg:x="3213" fg:w="1"/><text x="86.0215%" y="175.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (10 samples, 0.27%)</title><rect x="85.7982%" y="277" width="0.2670%" height="15" fill="rgb(230,95,12)" fg:x="3214" fg:w="10"/><text x="86.0482%" y="287.50"></text></g><g><title>__rdl_alloc (2 samples, 0.05%)</title><rect x="86.0918%" y="245" width="0.0534%" height="15" fill="rgb(232,209,1)" fg:x="3225" fg:w="2"/><text x="86.3418%" y="255.50"></text></g><g><title>__rust_alloc (2 samples, 0.05%)</title><rect x="86.1452%" y="245" width="0.0534%" height="15" fill="rgb(232,6,1)" fg:x="3227" fg:w="2"/><text x="86.3952%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="86.7058%" y="213" width="0.0267%" height="15" fill="rgb(210,224,50)" fg:x="3248" fg:w="1"/><text x="86.9558%" y="223.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (45 samples, 1.20%)</title><rect x="85.5579%" y="309" width="1.2013%" height="15" fill="rgb(228,127,35)" fg:x="3205" fg:w="45"/><text x="85.8079%" y="319.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (45 samples, 1.20%)</title><rect x="85.5579%" y="293" width="1.2013%" height="15" fill="rgb(245,102,45)" fg:x="3205" fg:w="45"/><text x="85.8079%" y="303.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (26 samples, 0.69%)</title><rect x="86.0651%" y="277" width="0.6941%" height="15" fill="rgb(214,1,49)" fg:x="3224" fg:w="26"/><text x="86.3151%" y="287.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.67%)</title><rect x="86.0918%" y="261" width="0.6674%" height="15" fill="rgb(226,163,40)" fg:x="3225" fg:w="25"/><text x="86.3418%" y="271.50"></text></g><g><title>malloc (21 samples, 0.56%)</title><rect x="86.1986%" y="245" width="0.5606%" height="15" fill="rgb(239,212,28)" fg:x="3229" fg:w="21"/><text x="86.4486%" y="255.50"></text></g><g><title>[libc.so.6] (12 samples, 0.32%)</title><rect x="86.4389%" y="229" width="0.3203%" height="15" fill="rgb(220,20,13)" fg:x="3238" fg:w="12"/><text x="86.6889%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="86.7325%" y="213" width="0.0267%" height="15" fill="rgb(210,164,35)" fg:x="3249" fg:w="1"/><text x="86.9825%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="86.7325%" y="197" width="0.0267%" height="15" fill="rgb(248,109,41)" fg:x="3249" fg:w="1"/><text x="86.9825%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (3 samples, 0.08%)</title><rect x="86.7859%" y="245" width="0.0801%" height="15" fill="rgb(238,23,50)" fg:x="3251" fg:w="3"/><text x="87.0359%" y="255.50"></text></g><g><title>simple_lisp::interpreter::builtins::core::and (54 samples, 1.44%)</title><rect x="85.5045%" y="325" width="1.4415%" height="15" fill="rgb(211,48,49)" fg:x="3203" fg:w="54"/><text x="85.7545%" y="335.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (7 samples, 0.19%)</title><rect x="86.7592%" y="309" width="0.1869%" height="15" fill="rgb(223,36,21)" fg:x="3250" fg:w="7"/><text x="87.0092%" y="319.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (7 samples, 0.19%)</title><rect x="86.7592%" y="293" width="0.1869%" height="15" fill="rgb(207,123,46)" fg:x="3250" fg:w="7"/><text x="87.0092%" y="303.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (7 samples, 0.19%)</title><rect x="86.7592%" y="277" width="0.1869%" height="15" fill="rgb(240,218,32)" fg:x="3250" fg:w="7"/><text x="87.0092%" y="287.50"></text></g><g><title>core::cell::BorrowRef::new (7 samples, 0.19%)</title><rect x="86.7592%" y="261" width="0.1869%" height="15" fill="rgb(252,5,43)" fg:x="3250" fg:w="7"/><text x="87.0092%" y="271.50"></text></g><g><title>core::cell::is_reading (3 samples, 0.08%)</title><rect x="86.8660%" y="245" width="0.0801%" height="15" fill="rgb(252,84,19)" fg:x="3254" fg:w="3"/><text x="87.1160%" y="255.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (1 samples, 0.03%)</title><rect x="86.9461%" y="309" width="0.0267%" height="15" fill="rgb(243,152,39)" fg:x="3257" fg:w="1"/><text x="87.1961%" y="319.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (1 samples, 0.03%)</title><rect x="86.9461%" y="293" width="0.0267%" height="15" fill="rgb(234,160,15)" fg:x="3257" fg:w="1"/><text x="87.1961%" y="303.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (1 samples, 0.03%)</title><rect x="86.9461%" y="277" width="0.0267%" height="15" fill="rgb(237,34,20)" fg:x="3257" fg:w="1"/><text x="87.1961%" y="287.50"></text></g><g><title>&lt;indexmap::set::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="86.9995%" y="229" width="0.0267%" height="15" fill="rgb(229,97,13)" fg:x="3259" fg:w="1"/><text x="87.2495%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="86.9995%" y="213" width="0.0267%" height="15" fill="rgb(234,71,50)" fg:x="3259" fg:w="1"/><text x="87.2495%" y="223.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="86.9995%" y="197" width="0.0267%" height="15" fill="rgb(253,155,4)" fg:x="3259" fg:w="1"/><text x="87.2495%" y="207.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::is_external (3 samples, 0.08%)</title><rect x="88.0673%" y="197" width="0.0801%" height="15" fill="rgb(222,185,37)" fg:x="3299" fg:w="3"/><text x="88.3173%" y="207.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (1 samples, 0.03%)</title><rect x="88.1207%" y="181" width="0.0267%" height="15" fill="rgb(251,177,13)" fg:x="3301" fg:w="1"/><text x="88.3707%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (1 samples, 0.03%)</title><rect x="88.1207%" y="165" width="0.0267%" height="15" fill="rgb(250,179,40)" fg:x="3301" fg:w="1"/><text x="88.3707%" y="175.50"></text></g><g><title>core::cell::BorrowRef::new (1 samples, 0.03%)</title><rect x="88.1207%" y="149" width="0.0267%" height="15" fill="rgb(242,44,2)" fg:x="3301" fg:w="1"/><text x="88.3707%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (46 samples, 1.23%)</title><rect x="86.9995%" y="277" width="1.2280%" height="15" fill="rgb(216,177,13)" fg:x="3259" fg:w="46"/><text x="87.2495%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (46 samples, 1.23%)</title><rect x="86.9995%" y="261" width="1.2280%" height="15" fill="rgb(216,106,43)" fg:x="3259" fg:w="46"/><text x="87.2495%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (46 samples, 1.23%)</title><rect x="86.9995%" y="245" width="1.2280%" height="15" fill="rgb(216,183,2)" fg:x="3259" fg:w="46"/><text x="87.2495%" y="255.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (45 samples, 1.20%)</title><rect x="87.0262%" y="229" width="1.2013%" height="15" fill="rgb(249,75,3)" fg:x="3260" fg:w="45"/><text x="87.2762%" y="239.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::collect::_{{closure}} (12 samples, 0.32%)</title><rect x="87.9071%" y="213" width="0.3203%" height="15" fill="rgb(219,67,39)" fg:x="3293" fg:w="12"/><text x="88.1571%" y="223.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::is_pinned (3 samples, 0.08%)</title><rect x="88.1474%" y="197" width="0.0801%" height="15" fill="rgb(253,228,2)" fg:x="3302" fg:w="3"/><text x="88.3974%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (3 samples, 0.08%)</title><rect x="88.1474%" y="181" width="0.0801%" height="15" fill="rgb(235,138,27)" fg:x="3302" fg:w="3"/><text x="88.3974%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (28 samples, 0.75%)</title><rect x="91.5910%" y="101" width="0.7475%" height="15" fill="rgb(236,97,51)" fg:x="3431" fg:w="28"/><text x="91.8410%" y="111.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (28 samples, 0.75%)</title><rect x="91.5910%" y="85" width="0.7475%" height="15" fill="rgb(240,80,30)" fg:x="3431" fg:w="28"/><text x="91.8410%" y="95.50"></text></g><g><title>core::cell::BorrowRef::new (28 samples, 0.75%)</title><rect x="91.5910%" y="69" width="0.7475%" height="15" fill="rgb(230,178,19)" fg:x="3431" fg:w="28"/><text x="91.8410%" y="79.50"></text></g><g><title>core::cell::is_reading (3 samples, 0.08%)</title><rect x="92.2584%" y="53" width="0.0801%" height="15" fill="rgb(210,190,27)" fg:x="3456" fg:w="3"/><text x="92.5084%" y="63.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::allocation_size (103 samples, 2.75%)</title><rect x="91.5910%" y="133" width="2.7496%" height="15" fill="rgb(222,107,31)" fg:x="3431" fg:w="103"/><text x="91.8410%" y="143.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataBox::allocation_size (103 samples, 2.75%)</title><rect x="91.5910%" y="117" width="2.7496%" height="15" fill="rgb(216,127,34)" fg:x="3431" fg:w="103"/><text x="91.8410%" y="127.50">si..</text></g><g><title>simple_lisp::interpreter::data::Data::allocation_size (75 samples, 2.00%)</title><rect x="92.3385%" y="101" width="2.0021%" height="15" fill="rgb(234,116,52)" fg:x="3459" fg:w="75"/><text x="92.5885%" y="111.50">s..</text></g><g><title>__rdl_dealloc (8 samples, 0.21%)</title><rect x="94.7944%" y="101" width="0.2136%" height="15" fill="rgb(222,124,15)" fg:x="3551" fg:w="8"/><text x="95.0444%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.21%)</title><rect x="94.7944%" y="85" width="0.2136%" height="15" fill="rgb(231,179,28)" fg:x="3551" fg:w="8"/><text x="95.0444%" y="95.50"></text></g><g><title>__rust_dealloc (12 samples, 0.32%)</title><rect x="95.0080%" y="101" width="0.3203%" height="15" fill="rgb(226,93,45)" fg:x="3559" fg:w="12"/><text x="95.2580%" y="111.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::dealloc (172 samples, 4.59%)</title><rect x="94.3406%" y="133" width="4.5916%" height="15" fill="rgb(215,8,51)" fg:x="3534" fg:w="172"/><text x="94.5906%" y="143.50">simpl..</text></g><g><title>alloc::alloc::dealloc (172 samples, 4.59%)</title><rect x="94.3406%" y="117" width="4.5916%" height="15" fill="rgb(223,106,5)" fg:x="3534" fg:w="172"/><text x="94.5906%" y="127.50">alloc..</text></g><g><title>cfree (135 samples, 3.60%)</title><rect x="95.3284%" y="101" width="3.6038%" height="15" fill="rgb(250,191,5)" fg:x="3571" fg:w="135"/><text x="95.5784%" y="111.50">cfree</text></g><g><title>[libc.so.6] (83 samples, 2.22%)</title><rect x="96.7165%" y="85" width="2.2157%" height="15" fill="rgb(242,132,44)" fg:x="3623" fg:w="83"/><text x="96.9665%" y="95.50">[..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_generation (1 samples, 0.03%)</title><rect x="98.9322%" y="133" width="0.0267%" height="15" fill="rgb(251,152,29)" fg:x="3706" fg:w="1"/><text x="99.1822%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.03%)</title><rect x="98.9322%" y="117" width="0.0267%" height="15" fill="rgb(218,179,5)" fg:x="3706" fg:w="1"/><text x="99.1822%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (411 samples, 10.97%)</title><rect x="88.2274%" y="229" width="10.9717%" height="15" fill="rgb(227,67,19)" fg:x="3305" fg:w="411"/><text x="88.4774%" y="239.50">alloc::vec::Vec&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (411 samples, 10.97%)</title><rect x="88.2274%" y="213" width="10.9717%" height="15" fill="rgb(233,119,31)" fg:x="3305" fg:w="411"/><text x="88.4774%" y="223.50">alloc::vec::Vec&lt;..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::retain_in_order::_{{closure}} (403 samples, 10.76%)</title><rect x="88.4410%" y="197" width="10.7581%" height="15" fill="rgb(241,120,22)" fg:x="3313" fg:w="403"/><text x="88.6910%" y="207.50">indexmap::map::c..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::retain::_{{closure}} (403 samples, 10.76%)</title><rect x="88.4410%" y="181" width="10.7581%" height="15" fill="rgb(224,102,30)" fg:x="3313" fg:w="403"/><text x="88.6910%" y="191.50">indexmap::map::I..</text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::retain::_{{closure}} (403 samples, 10.76%)</title><rect x="88.4410%" y="165" width="10.7581%" height="15" fill="rgb(210,164,37)" fg:x="3313" fg:w="403"/><text x="88.6910%" y="175.50">indexmap::set::I..</text></g><g><title>simple_lisp::interpreter::data::DataStore::collect::_{{closure}} (403 samples, 10.76%)</title><rect x="88.4410%" y="149" width="10.7581%" height="15" fill="rgb(226,191,16)" fg:x="3313" fg:w="403"/><text x="88.6910%" y="159.50">simple_lisp::int..</text></g><g><title>simple_lisp::interpreter::data::DataRef::is_external (9 samples, 0.24%)</title><rect x="98.9589%" y="133" width="0.2403%" height="15" fill="rgb(214,40,45)" fg:x="3707" fg:w="9"/><text x="99.2089%" y="143.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (9 samples, 0.24%)</title><rect x="98.9589%" y="117" width="0.2403%" height="15" fill="rgb(244,29,26)" fg:x="3707" fg:w="9"/><text x="99.2089%" y="127.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (9 samples, 0.24%)</title><rect x="98.9589%" y="101" width="0.2403%" height="15" fill="rgb(216,16,5)" fg:x="3707" fg:w="9"/><text x="99.2089%" y="111.50"></text></g><g><title>core::cell::BorrowRef::new (9 samples, 0.24%)</title><rect x="98.9589%" y="85" width="0.2403%" height="15" fill="rgb(249,76,35)" fg:x="3707" fg:w="9"/><text x="99.2089%" y="95.50"></text></g><g><title>core::cell::is_reading (2 samples, 0.05%)</title><rect x="99.1458%" y="69" width="0.0534%" height="15" fill="rgb(207,11,44)" fg:x="3714" fg:w="2"/><text x="99.3958%" y="79.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot (1 samples, 0.03%)</title><rect x="99.1991%" y="165" width="0.0267%" height="15" fill="rgb(228,190,49)" fg:x="3716" fg:w="1"/><text x="99.4491%" y="175.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (1 samples, 0.03%)</title><rect x="99.1991%" y="149" width="0.0267%" height="15" fill="rgb(214,173,12)" fg:x="3716" fg:w="1"/><text x="99.4491%" y="159.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (1 samples, 0.03%)</title><rect x="99.1991%" y="133" width="0.0267%" height="15" fill="rgb(218,26,35)" fg:x="3716" fg:w="1"/><text x="99.4491%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="99.1991%" y="117" width="0.0267%" height="15" fill="rgb(220,200,19)" fg:x="3716" fg:w="1"/><text x="99.4491%" y="127.50"></text></g><g><title>simple_lisp::interpreter::builtins::core::gc_collect (461 samples, 12.31%)</title><rect x="86.9461%" y="325" width="12.3065%" height="15" fill="rgb(239,95,49)" fg:x="3257" fg:w="461"/><text x="87.1961%" y="335.50">simple_lisp::inter..</text></g><g><title>simple_lisp::interpreter::Interpreter::gc_collect (460 samples, 12.28%)</title><rect x="86.9728%" y="309" width="12.2798%" height="15" fill="rgb(235,85,53)" fg:x="3258" fg:w="460"/><text x="87.2228%" y="319.50">simple_lisp::inter..</text></g><g><title>simple_lisp::interpreter::data::DataStore::collect (460 samples, 12.28%)</title><rect x="86.9728%" y="293" width="12.2798%" height="15" fill="rgb(233,133,31)" fg:x="3258" fg:w="460"/><text x="87.2228%" y="303.50">simple_lisp::inter..</text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::retain (413 samples, 11.03%)</title><rect x="88.2274%" y="277" width="11.0251%" height="15" fill="rgb(218,25,20)" fg:x="3305" fg:w="413"/><text x="88.4774%" y="287.50">indexmap::set::I..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::retain (413 samples, 11.03%)</title><rect x="88.2274%" y="261" width="11.0251%" height="15" fill="rgb(252,210,38)" fg:x="3305" fg:w="413"/><text x="88.4774%" y="271.50">indexmap::map::I..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::retain_in_order (413 samples, 11.03%)</title><rect x="88.2274%" y="245" width="11.0251%" height="15" fill="rgb(242,134,21)" fg:x="3305" fg:w="413"/><text x="88.4774%" y="255.50">indexmap::map::c..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::rebuild_hash_table (2 samples, 0.05%)</title><rect x="99.1991%" y="229" width="0.0534%" height="15" fill="rgb(213,28,48)" fg:x="3716" fg:w="2"/><text x="99.4491%" y="239.50"></text></g><g><title>indexmap::map::core::raw::insert_bulk_no_grow (2 samples, 0.05%)</title><rect x="99.1991%" y="213" width="0.0534%" height="15" fill="rgb(250,196,2)" fg:x="3716" fg:w="2"/><text x="99.4491%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_no_grow (2 samples, 0.05%)</title><rect x="99.1991%" y="197" width="0.0534%" height="15" fill="rgb(227,5,17)" fg:x="3716" fg:w="2"/><text x="99.4491%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::prepare_insert_slot (2 samples, 0.05%)</title><rect x="99.1991%" y="181" width="0.0534%" height="15" fill="rgb(221,226,24)" fg:x="3716" fg:w="2"/><text x="99.4491%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (1 samples, 0.03%)</title><rect x="99.2258%" y="165" width="0.0267%" height="15" fill="rgb(211,5,48)" fg:x="3717" fg:w="1"/><text x="99.4758%" y="175.50"></text></g><g><title>hashbrown::raw::inner::h2 (1 samples, 0.03%)</title><rect x="99.2258%" y="149" width="0.0267%" height="15" fill="rgb(219,150,6)" fg:x="3717" fg:w="1"/><text x="99.4758%" y="159.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.03%)</title><rect x="99.3059%" y="261" width="0.0267%" height="15" fill="rgb(251,46,16)" fg:x="3720" fg:w="1"/><text x="99.5559%" y="271.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.03%)</title><rect x="99.3326%" y="261" width="0.0267%" height="15" fill="rgb(220,204,40)" fg:x="3721" fg:w="1"/><text x="99.5826%" y="271.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.03%)</title><rect x="99.3326%" y="245" width="0.0267%" height="15" fill="rgb(211,85,2)" fg:x="3721" fg:w="1"/><text x="99.5826%" y="255.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="99.3326%" y="229" width="0.0267%" height="15" fill="rgb(229,17,7)" fg:x="3721" fg:w="1"/><text x="99.5826%" y="239.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="99.3326%" y="213" width="0.0267%" height="15" fill="rgb(239,72,28)" fg:x="3721" fg:w="1"/><text x="99.5826%" y="223.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (16 samples, 0.43%)</title><rect x="99.2525%" y="325" width="0.4271%" height="15" fill="rgb(230,47,54)" fg:x="3718" fg:w="16"/><text x="99.5025%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (16 samples, 0.43%)</title><rect x="99.2525%" y="309" width="0.4271%" height="15" fill="rgb(214,50,8)" fg:x="3718" fg:w="16"/><text x="99.5025%" y="319.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (16 samples, 0.43%)</title><rect x="99.2525%" y="293" width="0.4271%" height="15" fill="rgb(216,198,43)" fg:x="3718" fg:w="16"/><text x="99.5025%" y="303.50"></text></g><g><title>core::cell::BorrowRef::new (16 samples, 0.43%)</title><rect x="99.2525%" y="277" width="0.4271%" height="15" fill="rgb(234,20,35)" fg:x="3718" fg:w="16"/><text x="99.5025%" y="287.50"></text></g><g><title>core::cell::is_reading (12 samples, 0.32%)</title><rect x="99.3593%" y="261" width="0.3203%" height="15" fill="rgb(254,45,19)" fg:x="3722" fg:w="12"/><text x="99.6093%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.08%)</title><rect x="99.7597%" y="229" width="0.0801%" height="15" fill="rgb(219,14,44)" fg:x="3737" fg:w="3"/><text x="100.0097%" y="239.50"></text></g><g><title>std::panic::catch_unwind (3,735 samples, 99.71%)</title><rect x="0.2403%" y="485" width="99.7064%" height="15" fill="rgb(217,220,26)" fg:x="9" fg:w="3735"/><text x="0.4903%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,735 samples, 99.71%)</title><rect x="0.2403%" y="469" width="99.7064%" height="15" fill="rgb(213,158,28)" fg:x="9" fg:w="3735"/><text x="0.4903%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,735 samples, 99.71%)</title><rect x="0.2403%" y="453" width="99.7064%" height="15" fill="rgb(252,51,52)" fg:x="9" fg:w="3735"/><text x="0.4903%" y="463.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,735 samples, 99.71%)</title><rect x="0.2403%" y="437" width="99.7064%" height="15" fill="rgb(246,89,16)" fg:x="9" fg:w="3735"/><text x="0.4903%" y="447.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (3,735 samples, 99.71%)</title><rect x="0.2403%" y="421" width="99.7064%" height="15" fill="rgb(216,158,49)" fg:x="9" fg:w="3735"/><text x="0.4903%" y="431.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,735 samples, 99.71%)</title><rect x="0.2403%" y="405" width="99.7064%" height="15" fill="rgb(236,107,19)" fg:x="9" fg:w="3735"/><text x="0.4903%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (3,735 samples, 99.71%)</title><rect x="0.2403%" y="389" width="99.7064%" height="15" fill="rgb(228,185,30)" fg:x="9" fg:w="3735"/><text x="0.4903%" y="399.50">core::ops::function::FnOnce::call_once</text></g><g><title>simple_lisp::main (3,735 samples, 99.71%)</title><rect x="0.2403%" y="373" width="99.7064%" height="15" fill="rgb(246,134,8)" fg:x="9" fg:w="3735"/><text x="0.4903%" y="383.50">simple_lisp::main</text></g><g><title>simple_lisp::run (3,735 samples, 99.71%)</title><rect x="0.2403%" y="357" width="99.7064%" height="15" fill="rgb(214,143,50)" fg:x="9" fg:w="3735"/><text x="0.4903%" y="367.50">simple_lisp::run</text></g><g><title>simple_lisp::interpreter::Interpreter::run (3,735 samples, 99.71%)</title><rect x="0.2403%" y="341" width="99.7064%" height="15" fill="rgb(228,75,8)" fg:x="9" fg:w="3735"/><text x="0.4903%" y="351.50">simple_lisp::interpreter::Interpreter::run</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (10 samples, 0.27%)</title><rect x="99.6797%" y="325" width="0.2670%" height="15" fill="rgb(207,175,4)" fg:x="3734" fg:w="10"/><text x="99.9297%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (10 samples, 0.27%)</title><rect x="99.6797%" y="309" width="0.2670%" height="15" fill="rgb(205,108,24)" fg:x="3734" fg:w="10"/><text x="99.9297%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (10 samples, 0.27%)</title><rect x="99.6797%" y="293" width="0.2670%" height="15" fill="rgb(244,120,49)" fg:x="3734" fg:w="10"/><text x="99.9297%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9 samples, 0.24%)</title><rect x="99.7064%" y="277" width="0.2403%" height="15" fill="rgb(223,47,38)" fg:x="3735" fg:w="9"/><text x="99.9564%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.24%)</title><rect x="99.7064%" y="261" width="0.2403%" height="15" fill="rgb(229,179,11)" fg:x="3735" fg:w="9"/><text x="99.9564%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (9 samples, 0.24%)</title><rect x="99.7064%" y="245" width="0.2403%" height="15" fill="rgb(231,122,1)" fg:x="3735" fg:w="9"/><text x="99.9564%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.11%)</title><rect x="99.8398%" y="229" width="0.1068%" height="15" fill="rgb(245,119,9)" fg:x="3740" fg:w="4"/><text x="100.0898%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.11%)</title><rect x="99.8398%" y="213" width="0.1068%" height="15" fill="rgb(241,163,25)" fg:x="3740" fg:w="4"/><text x="100.0898%" y="223.50"></text></g><g><title>_start (3,736 samples, 99.73%)</title><rect x="0.2403%" y="629" width="99.7330%" height="15" fill="rgb(217,214,3)" fg:x="9" fg:w="3736"/><text x="0.4903%" y="639.50">_start</text></g><g><title>__libc_start_main (3,736 samples, 99.73%)</title><rect x="0.2403%" y="613" width="99.7330%" height="15" fill="rgb(240,86,28)" fg:x="9" fg:w="3736"/><text x="0.4903%" y="623.50">__libc_start_main</text></g><g><title>[libc.so.6] (3,736 samples, 99.73%)</title><rect x="0.2403%" y="597" width="99.7330%" height="15" fill="rgb(215,47,9)" fg:x="9" fg:w="3736"/><text x="0.4903%" y="607.50">[libc.so.6]</text></g><g><title>main (3,736 samples, 99.73%)</title><rect x="0.2403%" y="581" width="99.7330%" height="15" fill="rgb(252,25,45)" fg:x="9" fg:w="3736"/><text x="0.4903%" y="591.50">main</text></g><g><title>std::rt::lang_start_internal (3,736 samples, 99.73%)</title><rect x="0.2403%" y="565" width="99.7330%" height="15" fill="rgb(251,164,9)" fg:x="9" fg:w="3736"/><text x="0.4903%" y="575.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (3,736 samples, 99.73%)</title><rect x="0.2403%" y="549" width="99.7330%" height="15" fill="rgb(233,194,0)" fg:x="9" fg:w="3736"/><text x="0.4903%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,736 samples, 99.73%)</title><rect x="0.2403%" y="533" width="99.7330%" height="15" fill="rgb(249,111,24)" fg:x="9" fg:w="3736"/><text x="0.4903%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,736 samples, 99.73%)</title><rect x="0.2403%" y="517" width="99.7330%" height="15" fill="rgb(250,223,3)" fg:x="9" fg:w="3736"/><text x="0.4903%" y="527.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (3,736 samples, 99.73%)</title><rect x="0.2403%" y="501" width="99.7330%" height="15" fill="rgb(236,178,37)" fg:x="9" fg:w="3736"/><text x="0.4903%" y="511.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::rt::init (1 samples, 0.03%)</title><rect x="99.9466%" y="485" width="0.0267%" height="15" fill="rgb(241,158,50)" fg:x="3744" fg:w="1"/><text x="100.1966%" y="495.50"></text></g><g><title>std::sys::unix::thread::guard::init (1 samples, 0.03%)</title><rect x="99.9466%" y="469" width="0.0267%" height="15" fill="rgb(213,121,41)" fg:x="3744" fg:w="1"/><text x="100.1966%" y="479.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 0.03%)</title><rect x="99.9466%" y="453" width="0.0267%" height="15" fill="rgb(240,92,3)" fg:x="3744" fg:w="1"/><text x="100.1966%" y="463.50"></text></g><g><title>std::sys::unix::thread::guard::get_stack_start (1 samples, 0.03%)</title><rect x="99.9466%" y="437" width="0.0267%" height="15" fill="rgb(205,123,3)" fg:x="3744" fg:w="1"/><text x="100.1966%" y="447.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.03%)</title><rect x="99.9466%" y="421" width="0.0267%" height="15" fill="rgb(205,97,47)" fg:x="3744" fg:w="1"/><text x="100.1966%" y="431.50"></text></g><g><title>__isoc23_sscanf (1 samples, 0.03%)</title><rect x="99.9466%" y="405" width="0.0267%" height="15" fill="rgb(247,152,14)" fg:x="3744" fg:w="1"/><text x="100.1966%" y="415.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="99.9466%" y="389" width="0.0267%" height="15" fill="rgb(248,195,53)" fg:x="3744" fg:w="1"/><text x="100.1966%" y="399.50"></text></g><g><title>all (3,746 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(226,201,16)" fg:x="0" fg:w="3746"/><text x="0.2500%" y="671.50"></text></g><g><title>simple_lisp (3,746 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(205,98,0)" fg:x="0" fg:w="3746"/><text x="0.2500%" y="655.50">simple_lisp</text></g><g><title>cfree (1 samples, 0.03%)</title><rect x="99.9733%" y="629" width="0.0267%" height="15" fill="rgb(214,191,48)" fg:x="3745" fg:w="1"/><text x="100.2233%" y="639.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="99.9733%" y="613" width="0.0267%" height="15" fill="rgb(237,112,39)" fg:x="3745" fg:w="1"/><text x="100.2233%" y="623.50"></text></g></svg></svg>