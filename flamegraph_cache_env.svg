<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="3650"><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.05%)</title><rect x="0.0548%" y="709" width="0.0548%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="2"/><text x="0.3048%" y="719.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.05%)</title><rect x="0.0548%" y="693" width="0.0548%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="2"/><text x="0.3048%" y="703.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.0822%" y="677" width="0.0274%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.3322%" y="687.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.0822%" y="661" width="0.0274%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.3322%" y="671.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.0822%" y="645" width="0.0274%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.3322%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.0822%" y="629" width="0.0274%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.3322%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (4 samples, 0.11%)</title><rect x="0.0274%" y="725" width="0.1096%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="4"/><text x="0.2774%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1096%" y="709" width="0.0274%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="1"/><text x="0.3596%" y="719.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.19%)</title><rect x="0.0000%" y="741" width="0.1918%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="7"/><text x="0.2500%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="0.1370%" y="725" width="0.0548%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="2"/><text x="0.3870%" y="735.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="0.1918%" y="741" width="0.0548%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="2"/><text x="0.4418%" y="751.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="0.1918%" y="725" width="0.0548%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="2"/><text x="0.4418%" y="735.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="0.2192%" y="709" width="0.0274%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="1"/><text x="0.4692%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.2192%" y="693" width="0.0274%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="1"/><text x="0.4692%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.2192%" y="677" width="0.0274%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="1"/><text x="0.4692%" y="687.50"></text></g><g><title>exit (1 samples, 0.03%)</title><rect x="0.2466%" y="693" width="0.0274%" height="15" fill="rgb(231,73,38)" fg:x="9" fg:w="1"/><text x="0.4966%" y="703.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="0.2466%" y="677" width="0.0274%" height="15" fill="rgb(225,20,46)" fg:x="9" fg:w="1"/><text x="0.4966%" y="687.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.2466%" y="661" width="0.0274%" height="15" fill="rgb(210,31,41)" fg:x="9" fg:w="1"/><text x="0.4966%" y="671.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.03%)</title><rect x="0.2466%" y="645" width="0.0274%" height="15" fill="rgb(221,200,47)" fg:x="9" fg:w="1"/><text x="0.4966%" y="655.50"></text></g><g><title>[libc.so.6] (44 samples, 1.21%)</title><rect x="7.5616%" y="229" width="1.2055%" height="15" fill="rgb(226,26,5)" fg:x="276" fg:w="44"/><text x="7.8116%" y="239.50"></text></g><g><title>[libc.so.6] (4 samples, 0.11%)</title><rect x="8.6575%" y="213" width="0.1096%" height="15" fill="rgb(249,33,26)" fg:x="316" fg:w="4"/><text x="8.9075%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (90 samples, 2.47%)</title><rect x="6.3288%" y="357" width="2.4658%" height="15" fill="rgb(235,183,28)" fg:x="231" fg:w="90"/><text x="6.5788%" y="367.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (90 samples, 2.47%)</title><rect x="6.3288%" y="341" width="2.4658%" height="15" fill="rgb(221,5,38)" fg:x="231" fg:w="90"/><text x="6.5788%" y="351.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (90 samples, 2.47%)</title><rect x="6.3288%" y="325" width="2.4658%" height="15" fill="rgb(247,18,42)" fg:x="231" fg:w="90"/><text x="6.5788%" y="335.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (90 samples, 2.47%)</title><rect x="6.3288%" y="309" width="2.4658%" height="15" fill="rgb(241,131,45)" fg:x="231" fg:w="90"/><text x="6.5788%" y="319.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (90 samples, 2.47%)</title><rect x="6.3288%" y="293" width="2.4658%" height="15" fill="rgb(249,31,29)" fg:x="231" fg:w="90"/><text x="6.5788%" y="303.50">al..</text></g><g><title>alloc::alloc::alloc (90 samples, 2.47%)</title><rect x="6.3288%" y="277" width="2.4658%" height="15" fill="rgb(225,111,53)" fg:x="231" fg:w="90"/><text x="6.5788%" y="287.50">al..</text></g><g><title>malloc (90 samples, 2.47%)</title><rect x="6.3288%" y="261" width="2.4658%" height="15" fill="rgb(238,160,17)" fg:x="231" fg:w="90"/><text x="6.5788%" y="271.50">ma..</text></g><g><title>[libc.so.6] (90 samples, 2.47%)</title><rect x="6.3288%" y="245" width="2.4658%" height="15" fill="rgb(214,148,48)" fg:x="231" fg:w="90"/><text x="6.5788%" y="255.50">[l..</text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="8.7671%" y="229" width="0.0274%" height="15" fill="rgb(232,36,49)" fg:x="320" fg:w="1"/><text x="9.0171%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="8.7671%" y="213" width="0.0274%" height="15" fill="rgb(209,103,24)" fg:x="320" fg:w="1"/><text x="9.0171%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (95 samples, 2.60%)</title><rect x="6.2740%" y="437" width="2.6027%" height="15" fill="rgb(229,88,8)" fg:x="229" fg:w="95"/><text x="6.5240%" y="447.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (93 samples, 2.55%)</title><rect x="6.3288%" y="421" width="2.5479%" height="15" fill="rgb(213,181,19)" fg:x="231" fg:w="93"/><text x="6.5788%" y="431.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (93 samples, 2.55%)</title><rect x="6.3288%" y="405" width="2.5479%" height="15" fill="rgb(254,191,54)" fg:x="231" fg:w="93"/><text x="6.5788%" y="415.50">al..</text></g><g><title>alloc::slice::hack::to_vec (93 samples, 2.55%)</title><rect x="6.3288%" y="389" width="2.5479%" height="15" fill="rgb(241,83,37)" fg:x="231" fg:w="93"/><text x="6.5788%" y="399.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (93 samples, 2.55%)</title><rect x="6.3288%" y="373" width="2.5479%" height="15" fill="rgb(233,36,39)" fg:x="231" fg:w="93"/><text x="6.5788%" y="383.50">&lt;T..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.08%)</title><rect x="8.7945%" y="357" width="0.0822%" height="15" fill="rgb(226,3,54)" fg:x="321" fg:w="3"/><text x="9.0445%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.08%)</title><rect x="8.7945%" y="341" width="0.0822%" height="15" fill="rgb(245,192,40)" fg:x="321" fg:w="3"/><text x="9.0445%" y="351.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="8.7945%" y="325" width="0.0822%" height="15" fill="rgb(238,167,29)" fg:x="321" fg:w="3"/><text x="9.0445%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (10 samples, 0.27%)</title><rect x="8.8767%" y="437" width="0.2740%" height="15" fill="rgb(232,182,51)" fg:x="324" fg:w="10"/><text x="9.1267%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.19%)</title><rect x="9.2877%" y="421" width="0.1918%" height="15" fill="rgb(231,60,39)" fg:x="339" fg:w="7"/><text x="9.5377%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.19%)</title><rect x="9.2877%" y="405" width="0.1918%" height="15" fill="rgb(208,69,12)" fg:x="339" fg:w="7"/><text x="9.5377%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.19%)</title><rect x="9.2877%" y="389" width="0.1918%" height="15" fill="rgb(235,93,37)" fg:x="339" fg:w="7"/><text x="9.5377%" y="399.50"></text></g><g><title>&lt;indexmap::set::IndexSet&lt;T,S&gt; as indexmap::Entries&gt;::as_entries (2 samples, 0.05%)</title><rect x="9.4795%" y="405" width="0.0548%" height="15" fill="rgb(213,116,39)" fg:x="346" fg:w="2"/><text x="9.7295%" y="415.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as indexmap::Entries&gt;::as_entries (2 samples, 0.05%)</title><rect x="9.4795%" y="389" width="0.0548%" height="15" fill="rgb(222,207,29)" fg:x="346" fg:w="2"/><text x="9.7295%" y="399.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as indexmap::Entries&gt;::as_entries (2 samples, 0.05%)</title><rect x="9.4795%" y="373" width="0.0548%" height="15" fill="rgb(206,96,30)" fg:x="346" fg:w="2"/><text x="9.7295%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.05%)</title><rect x="9.4795%" y="357" width="0.0548%" height="15" fill="rgb(218,138,4)" fg:x="346" fg:w="2"/><text x="9.7295%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (10 samples, 0.27%)</title><rect x="9.5342%" y="405" width="0.2740%" height="15" fill="rgb(250,191,14)" fg:x="348" fg:w="10"/><text x="9.7842%" y="415.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::InstructionIter as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.71%)</title><rect x="9.1507%" y="437" width="0.7123%" height="15" fill="rgb(239,60,40)" fg:x="334" fg:w="26"/><text x="9.4007%" y="447.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::get_index (14 samples, 0.38%)</title><rect x="9.4795%" y="421" width="0.3836%" height="15" fill="rgb(206,27,48)" fg:x="346" fg:w="14"/><text x="9.7295%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2 samples, 0.05%)</title><rect x="9.8082%" y="405" width="0.0548%" height="15" fill="rgb(225,35,8)" fg:x="358" fg:w="2"/><text x="10.0582%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 0.05%)</title><rect x="9.8082%" y="389" width="0.0548%" height="15" fill="rgb(250,213,24)" fg:x="358" fg:w="2"/><text x="10.0582%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="9.8630%" y="437" width="0.0274%" height="15" fill="rgb(247,123,22)" fg:x="360" fg:w="1"/><text x="10.1130%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="9.8630%" y="421" width="0.0274%" height="15" fill="rgb(231,138,38)" fg:x="360" fg:w="1"/><text x="10.1130%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="9.8630%" y="405" width="0.0274%" height="15" fill="rgb(231,145,46)" fg:x="360" fg:w="1"/><text x="10.1130%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="9.8630%" y="389" width="0.0274%" height="15" fill="rgb(251,118,11)" fg:x="360" fg:w="1"/><text x="10.1130%" y="399.50"></text></g><g><title>malloc (1 samples, 0.03%)</title><rect x="9.8630%" y="373" width="0.0274%" height="15" fill="rgb(217,147,25)" fg:x="360" fg:w="1"/><text x="10.1130%" y="383.50"></text></g><g><title>core::intrinsics::copy (120 samples, 3.29%)</title><rect x="9.9726%" y="421" width="3.2877%" height="15" fill="rgb(247,81,37)" fg:x="364" fg:w="120"/><text x="10.2226%" y="431.50">cor..</text></g><g><title>[libc.so.6] (119 samples, 3.26%)</title><rect x="10.0000%" y="405" width="3.2603%" height="15" fill="rgb(209,12,38)" fg:x="365" fg:w="119"/><text x="10.2500%" y="415.50">[li..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (124 samples, 3.40%)</title><rect x="9.8904%" y="437" width="3.3973%" height="15" fill="rgb(227,1,9)" fg:x="361" fg:w="124"/><text x="10.1404%" y="447.50">all..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="13.2603%" y="421" width="0.0274%" height="15" fill="rgb(248,47,43)" fg:x="484" fg:w="1"/><text x="13.5103%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.05%)</title><rect x="13.2877%" y="437" width="0.0548%" height="15" fill="rgb(221,10,30)" fg:x="485" fg:w="2"/><text x="13.5377%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.05%)</title><rect x="13.2877%" y="421" width="0.0548%" height="15" fill="rgb(210,229,1)" fg:x="485" fg:w="2"/><text x="13.5377%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.05%)</title><rect x="13.2877%" y="405" width="0.0548%" height="15" fill="rgb(222,148,37)" fg:x="485" fg:w="2"/><text x="13.5377%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.05%)</title><rect x="13.2877%" y="389" width="0.0548%" height="15" fill="rgb(234,67,33)" fg:x="485" fg:w="2"/><text x="13.5377%" y="399.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.05%)</title><rect x="13.2877%" y="373" width="0.0548%" height="15" fill="rgb(247,98,35)" fg:x="485" fg:w="2"/><text x="13.5377%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.05%)</title><rect x="13.2877%" y="357" width="0.0548%" height="15" fill="rgb(247,138,52)" fg:x="485" fg:w="2"/><text x="13.5377%" y="367.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::run::_{{closure}} (2 samples, 0.05%)</title><rect x="13.2877%" y="341" width="0.0548%" height="15" fill="rgb(213,79,30)" fg:x="485" fg:w="2"/><text x="13.5377%" y="351.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_dr_to_scope (2 samples, 0.05%)</title><rect x="13.2877%" y="325" width="0.0548%" height="15" fill="rgb(246,177,23)" fg:x="485" fg:w="2"/><text x="13.5377%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="13.3151%" y="309" width="0.0274%" height="15" fill="rgb(230,62,27)" fg:x="486" fg:w="1"/><text x="13.5651%" y="319.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="13.3425%" y="437" width="0.0274%" height="15" fill="rgb(216,154,8)" fg:x="487" fg:w="1"/><text x="13.5925%" y="447.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="13.3425%" y="421" width="0.0274%" height="15" fill="rgb(244,35,45)" fg:x="487" fg:w="1"/><text x="13.5925%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (10 samples, 0.27%)</title><rect x="13.3699%" y="437" width="0.2740%" height="15" fill="rgb(251,115,12)" fg:x="488" fg:w="10"/><text x="13.6199%" y="447.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (1 samples, 0.03%)</title><rect x="13.6712%" y="373" width="0.0274%" height="15" fill="rgb(240,54,50)" fg:x="499" fg:w="1"/><text x="13.9212%" y="383.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (1 samples, 0.03%)</title><rect x="13.6712%" y="357" width="0.0274%" height="15" fill="rgb(233,84,52)" fg:x="499" fg:w="1"/><text x="13.9212%" y="367.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (1 samples, 0.03%)</title><rect x="13.6712%" y="341" width="0.0274%" height="15" fill="rgb(207,117,47)" fg:x="499" fg:w="1"/><text x="13.9212%" y="351.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (1 samples, 0.03%)</title><rect x="13.6712%" y="325" width="0.0274%" height="15" fill="rgb(249,43,39)" fg:x="499" fg:w="1"/><text x="13.9212%" y="335.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (1 samples, 0.03%)</title><rect x="13.6712%" y="309" width="0.0274%" height="15" fill="rgb(209,38,44)" fg:x="499" fg:w="1"/><text x="13.9212%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.03%)</title><rect x="13.6712%" y="293" width="0.0274%" height="15" fill="rgb(236,212,23)" fg:x="499" fg:w="1"/><text x="13.9212%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.03%)</title><rect x="13.6712%" y="277" width="0.0274%" height="15" fill="rgb(242,79,21)" fg:x="499" fg:w="1"/><text x="13.9212%" y="287.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="13.6712%" y="261" width="0.0274%" height="15" fill="rgb(211,96,35)" fg:x="499" fg:w="1"/><text x="13.9212%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="13.6712%" y="245" width="0.0274%" height="15" fill="rgb(253,215,40)" fg:x="499" fg:w="1"/><text x="13.9212%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (4 samples, 0.11%)</title><rect x="13.6438%" y="437" width="0.1096%" height="15" fill="rgb(211,81,21)" fg:x="498" fg:w="4"/><text x="13.8938%" y="447.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::run::_{{closure}} (3 samples, 0.08%)</title><rect x="13.6712%" y="421" width="0.0822%" height="15" fill="rgb(208,190,38)" fg:x="499" fg:w="3"/><text x="13.9212%" y="431.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (3 samples, 0.08%)</title><rect x="13.6712%" y="405" width="0.0822%" height="15" fill="rgb(235,213,38)" fg:x="499" fg:w="3"/><text x="13.9212%" y="415.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (3 samples, 0.08%)</title><rect x="13.6712%" y="389" width="0.0822%" height="15" fill="rgb(237,122,38)" fg:x="499" fg:w="3"/><text x="13.9212%" y="399.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (2 samples, 0.05%)</title><rect x="13.6986%" y="373" width="0.0548%" height="15" fill="rgb(244,218,35)" fg:x="500" fg:w="2"/><text x="13.9486%" y="383.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.05%)</title><rect x="13.6986%" y="357" width="0.0548%" height="15" fill="rgb(240,68,47)" fg:x="500" fg:w="2"/><text x="13.9486%" y="367.50"></text></g><g><title>malloc (2 samples, 0.05%)</title><rect x="13.6986%" y="341" width="0.0548%" height="15" fill="rgb(210,16,53)" fg:x="500" fg:w="2"/><text x="13.9486%" y="351.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="13.6986%" y="325" width="0.0548%" height="15" fill="rgb(235,124,12)" fg:x="500" fg:w="2"/><text x="13.9486%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;simple_lisp::interpreter::data::Data&gt;&gt; (10 samples, 0.27%)</title><rect x="13.7534%" y="437" width="0.2740%" height="15" fill="rgb(224,169,11)" fg:x="502" fg:w="10"/><text x="14.0034%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (10 samples, 0.27%)</title><rect x="13.7534%" y="421" width="0.2740%" height="15" fill="rgb(250,166,2)" fg:x="502" fg:w="10"/><text x="14.0034%" y="431.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (10 samples, 0.27%)</title><rect x="13.7534%" y="405" width="0.2740%" height="15" fill="rgb(242,216,29)" fg:x="502" fg:w="10"/><text x="14.0034%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (10 samples, 0.27%)</title><rect x="13.7534%" y="389" width="0.2740%" height="15" fill="rgb(230,116,27)" fg:x="502" fg:w="10"/><text x="14.0034%" y="399.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (10 samples, 0.27%)</title><rect x="13.7534%" y="373" width="0.2740%" height="15" fill="rgb(228,99,48)" fg:x="502" fg:w="10"/><text x="14.0034%" y="383.50"></text></g><g><title>core::mem::replace (10 samples, 0.27%)</title><rect x="13.7534%" y="357" width="0.2740%" height="15" fill="rgb(253,11,6)" fg:x="502" fg:w="10"/><text x="14.0034%" y="367.50"></text></g><g><title>core::ptr::write (10 samples, 0.27%)</title><rect x="13.7534%" y="341" width="0.2740%" height="15" fill="rgb(247,143,39)" fg:x="502" fg:w="10"/><text x="14.0034%" y="351.50"></text></g><g><title>__rust_dealloc (1 samples, 0.03%)</title><rect x="14.0822%" y="277" width="0.0274%" height="15" fill="rgb(236,97,10)" fg:x="514" fg:w="1"/><text x="14.3322%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.36%)</title><rect x="14.0822%" y="309" width="0.3562%" height="15" fill="rgb(233,208,19)" fg:x="514" fg:w="13"/><text x="14.3322%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.36%)</title><rect x="14.0822%" y="293" width="0.3562%" height="15" fill="rgb(216,164,2)" fg:x="514" fg:w="13"/><text x="14.3322%" y="303.50"></text></g><g><title>cfree (12 samples, 0.33%)</title><rect x="14.1096%" y="277" width="0.3288%" height="15" fill="rgb(220,129,5)" fg:x="515" fg:w="12"/><text x="14.3596%" y="287.50"></text></g><g><title>[libc.so.6] (4 samples, 0.11%)</title><rect x="14.3288%" y="261" width="0.1096%" height="15" fill="rgb(242,17,10)" fg:x="523" fg:w="4"/><text x="14.5788%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.44%)</title><rect x="14.0274%" y="405" width="0.4384%" height="15" fill="rgb(242,107,0)" fg:x="512" fg:w="16"/><text x="14.2774%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;[simple_lisp::interpreter::ScopeItem]&gt; (16 samples, 0.44%)</title><rect x="14.0274%" y="389" width="0.4384%" height="15" fill="rgb(251,28,31)" fg:x="512" fg:w="16"/><text x="14.2774%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::ScopeItem&gt; (15 samples, 0.41%)</title><rect x="14.0548%" y="373" width="0.4110%" height="15" fill="rgb(233,223,10)" fg:x="513" fg:w="15"/><text x="14.3048%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (14 samples, 0.38%)</title><rect x="14.0822%" y="357" width="0.3836%" height="15" fill="rgb(215,21,27)" fg:x="514" fg:w="14"/><text x="14.3322%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (14 samples, 0.38%)</title><rect x="14.0822%" y="341" width="0.3836%" height="15" fill="rgb(232,23,21)" fg:x="514" fg:w="14"/><text x="14.3322%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.38%)</title><rect x="14.0822%" y="325" width="0.3836%" height="15" fill="rgb(244,5,23)" fg:x="514" fg:w="14"/><text x="14.3322%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.03%)</title><rect x="14.4384%" y="309" width="0.0274%" height="15" fill="rgb(226,81,46)" fg:x="527" fg:w="1"/><text x="14.6884%" y="319.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="14.4658%" y="341" width="0.0274%" height="15" fill="rgb(247,70,30)" fg:x="528" fg:w="1"/><text x="14.7158%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="14.4658%" y="325" width="0.0274%" height="15" fill="rgb(212,68,19)" fg:x="528" fg:w="1"/><text x="14.7158%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;misc_utils::stack::Stack&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (207 samples, 5.67%)</title><rect x="14.0274%" y="437" width="5.6712%" height="15" fill="rgb(240,187,13)" fg:x="512" fg:w="207"/><text x="14.2774%" y="447.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (207 samples, 5.67%)</title><rect x="14.0274%" y="421" width="5.6712%" height="15" fill="rgb(223,113,26)" fg:x="512" fg:w="207"/><text x="14.2774%" y="431.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (191 samples, 5.23%)</title><rect x="14.4658%" y="405" width="5.2329%" height="15" fill="rgb(206,192,2)" fg:x="528" fg:w="191"/><text x="14.7158%" y="415.50">core::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (191 samples, 5.23%)</title><rect x="14.4658%" y="389" width="5.2329%" height="15" fill="rgb(241,108,4)" fg:x="528" fg:w="191"/><text x="14.7158%" y="399.50">&lt;alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (191 samples, 5.23%)</title><rect x="14.4658%" y="373" width="5.2329%" height="15" fill="rgb(247,173,49)" fg:x="528" fg:w="191"/><text x="14.7158%" y="383.50">&lt;alloc..</text></g><g><title>alloc::alloc::dealloc (191 samples, 5.23%)</title><rect x="14.4658%" y="357" width="5.2329%" height="15" fill="rgb(224,114,35)" fg:x="528" fg:w="191"/><text x="14.7158%" y="367.50">alloc:..</text></g><g><title>cfree (190 samples, 5.21%)</title><rect x="14.4932%" y="341" width="5.2055%" height="15" fill="rgb(245,159,27)" fg:x="529" fg:w="190"/><text x="14.7432%" y="351.50">cfree</text></g><g><title>[libc.so.6] (189 samples, 5.18%)</title><rect x="14.5205%" y="325" width="5.1781%" height="15" fill="rgb(245,172,44)" fg:x="530" fg:w="189"/><text x="14.7705%" y="335.50">[libc...</text></g><g><title>[libc.so.6] (170 samples, 4.66%)</title><rect x="15.0411%" y="309" width="4.6575%" height="15" fill="rgb(236,23,11)" fg:x="549" fg:w="170"/><text x="15.2911%" y="319.50">[libc..</text></g><g><title>[libc.so.6] (27 samples, 0.74%)</title><rect x="18.9589%" y="293" width="0.7397%" height="15" fill="rgb(205,117,38)" fg:x="692" fg:w="27"/><text x="19.2089%" y="303.50"></text></g><g><title>misc_utils::slotmap::Slot&lt;T&gt;::as_ref (2 samples, 0.05%)</title><rect x="19.7260%" y="421" width="0.0548%" height="15" fill="rgb(237,72,25)" fg:x="720" fg:w="2"/><text x="19.9760%" y="431.50"></text></g><g><title>misc_utils::slotmap::SlotMap&lt;K,T&gt;::get (6 samples, 0.16%)</title><rect x="19.6986%" y="437" width="0.1644%" height="15" fill="rgb(244,70,9)" fg:x="719" fg:w="6"/><text x="19.9486%" y="447.50"></text></g><g><title>misc_utils::slotmap::SlotMap&lt;K,T&gt;::is_key_valid (3 samples, 0.08%)</title><rect x="19.7808%" y="421" width="0.0822%" height="15" fill="rgb(217,125,39)" fg:x="722" fg:w="3"/><text x="20.0308%" y="431.50"></text></g><g><title>__rdl_alloc (2 samples, 0.05%)</title><rect x="19.8630%" y="309" width="0.0548%" height="15" fill="rgb(235,36,10)" fg:x="725" fg:w="2"/><text x="20.1130%" y="319.50"></text></g><g><title>__rust_alloc (5 samples, 0.14%)</title><rect x="19.9178%" y="309" width="0.1370%" height="15" fill="rgb(251,123,47)" fg:x="727" fg:w="5"/><text x="20.1678%" y="319.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::new (21 samples, 0.58%)</title><rect x="19.8630%" y="437" width="0.5753%" height="15" fill="rgb(221,13,13)" fg:x="725" fg:w="21"/><text x="20.1130%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (21 samples, 0.58%)</title><rect x="19.8630%" y="421" width="0.5753%" height="15" fill="rgb(238,131,9)" fg:x="725" fg:w="21"/><text x="20.1130%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (21 samples, 0.58%)</title><rect x="19.8630%" y="405" width="0.5753%" height="15" fill="rgb(211,50,8)" fg:x="725" fg:w="21"/><text x="20.1130%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (21 samples, 0.58%)</title><rect x="19.8630%" y="389" width="0.5753%" height="15" fill="rgb(245,182,24)" fg:x="725" fg:w="21"/><text x="20.1130%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (21 samples, 0.58%)</title><rect x="19.8630%" y="373" width="0.5753%" height="15" fill="rgb(242,14,37)" fg:x="725" fg:w="21"/><text x="20.1130%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (21 samples, 0.58%)</title><rect x="19.8630%" y="357" width="0.5753%" height="15" fill="rgb(246,228,12)" fg:x="725" fg:w="21"/><text x="20.1130%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.58%)</title><rect x="19.8630%" y="341" width="0.5753%" height="15" fill="rgb(213,55,15)" fg:x="725" fg:w="21"/><text x="20.1130%" y="351.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.58%)</title><rect x="19.8630%" y="325" width="0.5753%" height="15" fill="rgb(209,9,3)" fg:x="725" fg:w="21"/><text x="20.1130%" y="335.50"></text></g><g><title>malloc (14 samples, 0.38%)</title><rect x="20.0548%" y="309" width="0.3836%" height="15" fill="rgb(230,59,30)" fg:x="732" fg:w="14"/><text x="20.3048%" y="319.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::pop (6 samples, 0.16%)</title><rect x="20.4384%" y="437" width="0.1644%" height="15" fill="rgb(209,121,21)" fg:x="746" fg:w="6"/><text x="20.6884%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (6 samples, 0.16%)</title><rect x="20.4384%" y="421" width="0.1644%" height="15" fill="rgb(220,109,13)" fg:x="746" fg:w="6"/><text x="20.6884%" y="431.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="21.3699%" y="373" width="0.0274%" height="15" fill="rgb(232,18,1)" fg:x="780" fg:w="1"/><text x="21.6199%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.03%)</title><rect x="21.3973%" y="373" width="0.0274%" height="15" fill="rgb(215,41,42)" fg:x="781" fg:w="1"/><text x="21.6473%" y="383.50"></text></g><g><title>__rdl_realloc (2 samples, 0.05%)</title><rect x="21.4795%" y="309" width="0.0548%" height="15" fill="rgb(224,123,36)" fg:x="784" fg:w="2"/><text x="21.7295%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="21.5068%" y="293" width="0.0274%" height="15" fill="rgb(240,125,3)" fg:x="785" fg:w="1"/><text x="21.7568%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="25.2329%" y="261" width="0.0274%" height="15" fill="rgb(205,98,50)" fg:x="921" fg:w="1"/><text x="25.4829%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (139 samples, 3.81%)</title><rect x="21.4795%" y="357" width="3.8082%" height="15" fill="rgb(205,185,37)" fg:x="784" fg:w="139"/><text x="21.7295%" y="367.50">&lt;all..</text></g><g><title>alloc::alloc::Global::grow_impl (139 samples, 3.81%)</title><rect x="21.4795%" y="341" width="3.8082%" height="15" fill="rgb(238,207,15)" fg:x="784" fg:w="139"/><text x="21.7295%" y="351.50">allo..</text></g><g><title>alloc::alloc::realloc (139 samples, 3.81%)</title><rect x="21.4795%" y="325" width="3.8082%" height="15" fill="rgb(213,199,42)" fg:x="784" fg:w="139"/><text x="21.7295%" y="335.50">allo..</text></g><g><title>realloc (137 samples, 3.75%)</title><rect x="21.5342%" y="309" width="3.7534%" height="15" fill="rgb(235,201,11)" fg:x="786" fg:w="137"/><text x="21.7842%" y="319.50">real..</text></g><g><title>[libc.so.6] (132 samples, 3.62%)</title><rect x="21.6712%" y="293" width="3.6164%" height="15" fill="rgb(207,46,11)" fg:x="791" fg:w="132"/><text x="21.9212%" y="303.50">[lib..</text></g><g><title>[libc.so.6] (127 samples, 3.48%)</title><rect x="21.8082%" y="277" width="3.4795%" height="15" fill="rgb(241,35,35)" fg:x="796" fg:w="127"/><text x="22.0582%" y="287.50">[li..</text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="25.2603%" y="261" width="0.0274%" height="15" fill="rgb(243,32,47)" fg:x="922" fg:w="1"/><text x="25.5103%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="25.2603%" y="245" width="0.0274%" height="15" fill="rgb(247,202,23)" fg:x="922" fg:w="1"/><text x="25.5103%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (144 samples, 3.95%)</title><rect x="21.4247%" y="373" width="3.9452%" height="15" fill="rgb(219,102,11)" fg:x="782" fg:w="144"/><text x="21.6747%" y="383.50">allo..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.08%)</title><rect x="25.2877%" y="357" width="0.0822%" height="15" fill="rgb(243,110,44)" fg:x="923" fg:w="3"/><text x="25.5377%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (156 samples, 4.27%)</title><rect x="21.1233%" y="405" width="4.2740%" height="15" fill="rgb(222,74,54)" fg:x="771" fg:w="156"/><text x="21.3733%" y="415.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (147 samples, 4.03%)</title><rect x="21.3699%" y="389" width="4.0274%" height="15" fill="rgb(216,99,12)" fg:x="780" fg:w="147"/><text x="21.6199%" y="399.50">allo..</text></g><g><title>core::cmp::max (1 samples, 0.03%)</title><rect x="25.3699%" y="373" width="0.0274%" height="15" fill="rgb(226,22,26)" fg:x="926" fg:w="1"/><text x="25.6199%" y="383.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.03%)</title><rect x="25.3699%" y="357" width="0.0274%" height="15" fill="rgb(217,163,10)" fg:x="926" fg:w="1"/><text x="25.6199%" y="367.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.03%)</title><rect x="25.3699%" y="341" width="0.0274%" height="15" fill="rgb(213,25,53)" fg:x="926" fg:w="1"/><text x="25.6199%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.03%)</title><rect x="25.3973%" y="405" width="0.0274%" height="15" fill="rgb(252,105,26)" fg:x="927" fg:w="1"/><text x="25.6473%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="25.3973%" y="389" width="0.0274%" height="15" fill="rgb(220,39,43)" fg:x="927" fg:w="1"/><text x="25.6473%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="25.4247%" y="405" width="0.0274%" height="15" fill="rgb(229,68,48)" fg:x="928" fg:w="1"/><text x="25.6747%" y="415.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (207 samples, 5.67%)</title><rect x="20.6027%" y="437" width="5.6712%" height="15" fill="rgb(252,8,32)" fg:x="752" fg:w="207"/><text x="20.8527%" y="447.50">misc_ut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (207 samples, 5.67%)</title><rect x="20.6027%" y="421" width="5.6712%" height="15" fill="rgb(223,20,43)" fg:x="752" fg:w="207"/><text x="20.8527%" y="431.50">alloc::..</text></g><g><title>core::ptr::write (30 samples, 0.82%)</title><rect x="25.4521%" y="405" width="0.8219%" height="15" fill="rgb(229,81,49)" fg:x="929" fg:w="30"/><text x="25.7021%" y="415.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (1 samples, 0.03%)</title><rect x="26.2740%" y="421" width="0.0274%" height="15" fill="rgb(236,28,36)" fg:x="959" fg:w="1"/><text x="26.5240%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="26.2740%" y="405" width="0.0274%" height="15" fill="rgb(249,185,26)" fg:x="959" fg:w="1"/><text x="26.5240%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="26.4932%" y="341" width="0.0274%" height="15" fill="rgb(249,174,33)" fg:x="967" fg:w="1"/><text x="26.7432%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.19%)</title><rect x="26.4384%" y="405" width="0.1918%" height="15" fill="rgb(233,201,37)" fg:x="965" fg:w="7"/><text x="26.6884%" y="415.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.19%)</title><rect x="26.4384%" y="389" width="0.1918%" height="15" fill="rgb(221,78,26)" fg:x="965" fg:w="7"/><text x="26.6884%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.19%)</title><rect x="26.4384%" y="373" width="0.1918%" height="15" fill="rgb(250,127,30)" fg:x="965" fg:w="7"/><text x="26.6884%" y="383.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (5 samples, 0.14%)</title><rect x="26.4932%" y="357" width="0.1370%" height="15" fill="rgb(230,49,44)" fg:x="967" fg:w="5"/><text x="26.7432%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (4 samples, 0.11%)</title><rect x="26.5205%" y="341" width="0.1096%" height="15" fill="rgb(229,67,23)" fg:x="968" fg:w="4"/><text x="26.7705%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4 samples, 0.11%)</title><rect x="26.5205%" y="325" width="0.1096%" height="15" fill="rgb(249,83,47)" fg:x="968" fg:w="4"/><text x="26.7705%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.11%)</title><rect x="26.5205%" y="309" width="0.1096%" height="15" fill="rgb(215,43,3)" fg:x="968" fg:w="4"/><text x="26.7705%" y="319.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.19%)</title><rect x="26.7397%" y="373" width="0.1918%" height="15" fill="rgb(238,154,13)" fg:x="976" fg:w="7"/><text x="26.9897%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.19%)</title><rect x="26.7397%" y="357" width="0.1918%" height="15" fill="rgb(219,56,2)" fg:x="976" fg:w="7"/><text x="26.9897%" y="367.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.16%)</title><rect x="26.7671%" y="341" width="0.1644%" height="15" fill="rgb(233,0,4)" fg:x="977" fg:w="6"/><text x="27.0171%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (20 samples, 0.55%)</title><rect x="26.9315%" y="373" width="0.5479%" height="15" fill="rgb(235,30,7)" fg:x="983" fg:w="20"/><text x="27.1815%" y="383.50"></text></g><g><title>core::ops::function::FnMut::call_mut (20 samples, 0.55%)</title><rect x="26.9315%" y="357" width="0.5479%" height="15" fill="rgb(250,79,13)" fg:x="983" fg:w="20"/><text x="27.1815%" y="367.50"></text></g><g><title>core::mem::drop (20 samples, 0.55%)</title><rect x="26.9315%" y="341" width="0.5479%" height="15" fill="rgb(211,146,34)" fg:x="983" fg:w="20"/><text x="27.1815%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::ExternalData&gt; (20 samples, 0.55%)</title><rect x="26.9315%" y="325" width="0.5479%" height="15" fill="rgb(228,22,38)" fg:x="983" fg:w="20"/><text x="27.1815%" y="335.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::ExternalData as core::ops::drop::Drop&gt;::drop (20 samples, 0.55%)</title><rect x="26.9315%" y="309" width="0.5479%" height="15" fill="rgb(235,168,5)" fg:x="983" fg:w="20"/><text x="27.1815%" y="319.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::unset_external (20 samples, 0.55%)</title><rect x="26.9315%" y="293" width="0.5479%" height="15" fill="rgb(221,155,16)" fg:x="983" fg:w="20"/><text x="27.1815%" y="303.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (17 samples, 0.47%)</title><rect x="27.0137%" y="277" width="0.4658%" height="15" fill="rgb(215,215,53)" fg:x="986" fg:w="17"/><text x="27.2637%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (17 samples, 0.47%)</title><rect x="27.0137%" y="261" width="0.4658%" height="15" fill="rgb(223,4,10)" fg:x="986" fg:w="17"/><text x="27.2637%" y="271.50"></text></g><g><title>core::cell::BorrowRefMut::new (17 samples, 0.47%)</title><rect x="27.0137%" y="245" width="0.4658%" height="15" fill="rgb(234,103,6)" fg:x="986" fg:w="17"/><text x="27.2637%" y="255.50"></text></g><g><title>core::ptr::read (18 samples, 0.49%)</title><rect x="27.9726%" y="309" width="0.4932%" height="15" fill="rgb(227,97,0)" fg:x="1021" fg:w="18"/><text x="28.2226%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (69 samples, 1.89%)</title><rect x="26.6301%" y="405" width="1.8904%" height="15" fill="rgb(234,150,53)" fg:x="972" fg:w="69"/><text x="26.8801%" y="415.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (65 samples, 1.78%)</title><rect x="26.7397%" y="389" width="1.7808%" height="15" fill="rgb(228,201,54)" fg:x="976" fg:w="65"/><text x="26.9897%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (38 samples, 1.04%)</title><rect x="27.4795%" y="373" width="1.0411%" height="15" fill="rgb(222,22,37)" fg:x="1003" fg:w="38"/><text x="27.7295%" y="383.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 1.01%)</title><rect x="27.5068%" y="357" width="1.0137%" height="15" fill="rgb(237,53,32)" fg:x="1004" fg:w="37"/><text x="27.7568%" y="367.50"></text></g><g><title>core::mem::take (20 samples, 0.55%)</title><rect x="27.9726%" y="341" width="0.5479%" height="15" fill="rgb(233,25,53)" fg:x="1021" fg:w="20"/><text x="28.2226%" y="351.50"></text></g><g><title>core::mem::replace (20 samples, 0.55%)</title><rect x="27.9726%" y="325" width="0.5479%" height="15" fill="rgb(210,40,34)" fg:x="1021" fg:w="20"/><text x="28.2226%" y="335.50"></text></g><g><title>core::ptr::write (2 samples, 0.05%)</title><rect x="28.4658%" y="309" width="0.0548%" height="15" fill="rgb(241,220,44)" fg:x="1039" fg:w="2"/><text x="28.7158%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (1 samples, 0.03%)</title><rect x="28.5205%" y="373" width="0.0274%" height="15" fill="rgb(235,28,35)" fg:x="1041" fg:w="1"/><text x="28.7705%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.03%)</title><rect x="28.5205%" y="357" width="0.0274%" height="15" fill="rgb(210,56,17)" fg:x="1041" fg:w="1"/><text x="28.7705%" y="367.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::clear (48 samples, 1.32%)</title><rect x="28.5205%" y="405" width="1.3151%" height="15" fill="rgb(224,130,29)" fg:x="1041" fg:w="48"/><text x="28.7705%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (48 samples, 1.32%)</title><rect x="28.5205%" y="389" width="1.3151%" height="15" fill="rgb(235,212,8)" fg:x="1041" fg:w="48"/><text x="28.7705%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;]&gt; (47 samples, 1.29%)</title><rect x="28.5479%" y="373" width="1.2877%" height="15" fill="rgb(223,33,50)" fg:x="1042" fg:w="47"/><text x="28.7979%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (44 samples, 1.21%)</title><rect x="28.6301%" y="357" width="1.2055%" height="15" fill="rgb(219,149,13)" fg:x="1045" fg:w="44"/><text x="28.8801%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (44 samples, 1.21%)</title><rect x="28.6301%" y="341" width="1.2055%" height="15" fill="rgb(250,156,29)" fg:x="1045" fg:w="44"/><text x="28.8801%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;simple_lisp::interpreter::ast::Ident,(),rustc_hash::FxBuildHasher&gt;&gt; (44 samples, 1.21%)</title><rect x="28.6301%" y="325" width="1.2055%" height="15" fill="rgb(216,193,19)" fg:x="1045" fg:w="44"/><text x="28.8801%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(simple_lisp::interpreter::ast::Ident,())&gt;&gt; (44 samples, 1.21%)</title><rect x="28.6301%" y="309" width="1.2055%" height="15" fill="rgb(216,135,14)" fg:x="1045" fg:w="44"/><text x="28.8801%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 1.21%)</title><rect x="28.6301%" y="293" width="1.2055%" height="15" fill="rgb(241,47,5)" fg:x="1045" fg:w="44"/><text x="28.8801%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (44 samples, 1.21%)</title><rect x="28.6301%" y="277" width="1.2055%" height="15" fill="rgb(233,42,35)" fg:x="1045" fg:w="44"/><text x="28.8801%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (35 samples, 0.96%)</title><rect x="28.8767%" y="261" width="0.9589%" height="15" fill="rgb(231,13,6)" fg:x="1054" fg:w="35"/><text x="29.1267%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (35 samples, 0.96%)</title><rect x="28.8767%" y="245" width="0.9589%" height="15" fill="rgb(207,181,40)" fg:x="1054" fg:w="35"/><text x="29.1267%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (35 samples, 0.96%)</title><rect x="28.8767%" y="229" width="0.9589%" height="15" fill="rgb(254,173,49)" fg:x="1054" fg:w="35"/><text x="29.1267%" y="239.50"></text></g><g><title>cfree (34 samples, 0.93%)</title><rect x="28.9041%" y="213" width="0.9315%" height="15" fill="rgb(221,1,38)" fg:x="1055" fg:w="34"/><text x="29.1541%" y="223.50"></text></g><g><title>[libc.so.6] (27 samples, 0.74%)</title><rect x="29.0959%" y="197" width="0.7397%" height="15" fill="rgb(206,124,46)" fg:x="1062" fg:w="27"/><text x="29.3459%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.05%)</title><rect x="29.8356%" y="373" width="0.0548%" height="15" fill="rgb(249,21,11)" fg:x="1089" fg:w="2"/><text x="30.0856%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.05%)</title><rect x="29.8356%" y="357" width="0.0548%" height="15" fill="rgb(222,201,40)" fg:x="1089" fg:w="2"/><text x="30.0856%" y="367.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::drain (3 samples, 0.08%)</title><rect x="29.8356%" y="405" width="0.0822%" height="15" fill="rgb(235,61,29)" fg:x="1089" fg:w="3"/><text x="30.0856%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (3 samples, 0.08%)</title><rect x="29.8356%" y="389" width="0.0822%" height="15" fill="rgb(219,207,3)" fg:x="1089" fg:w="3"/><text x="30.0856%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.03%)</title><rect x="29.8904%" y="373" width="0.0274%" height="15" fill="rgb(222,56,46)" fg:x="1091" fg:w="1"/><text x="30.1404%" y="383.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (3 samples, 0.08%)</title><rect x="29.9178%" y="405" width="0.0822%" height="15" fill="rgb(239,76,54)" fg:x="1092" fg:w="3"/><text x="30.1678%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.08%)</title><rect x="29.9178%" y="389" width="0.0822%" height="15" fill="rgb(231,124,27)" fg:x="1092" fg:w="3"/><text x="30.1678%" y="399.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clear_env (140 samples, 3.84%)</title><rect x="26.2740%" y="437" width="3.8356%" height="15" fill="rgb(249,195,6)" fg:x="959" fg:w="140"/><text x="26.5240%" y="447.50">simp..</text></g><g><title>simple_lisp::interpreter::Env::clear (139 samples, 3.81%)</title><rect x="26.3014%" y="421" width="3.8082%" height="15" fill="rgb(237,174,47)" fg:x="960" fg:w="139"/><text x="26.5514%" y="431.50">simp..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter_mut (4 samples, 0.11%)</title><rect x="30.0000%" y="405" width="0.1096%" height="15" fill="rgb(206,201,31)" fg:x="1095" fg:w="4"/><text x="30.2500%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter_mut (4 samples, 0.11%)</title><rect x="30.0000%" y="389" width="0.1096%" height="15" fill="rgb(231,57,52)" fg:x="1095" fg:w="4"/><text x="30.2500%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (4 samples, 0.11%)</title><rect x="30.0000%" y="373" width="0.1096%" height="15" fill="rgb(248,177,22)" fg:x="1095" fg:w="4"/><text x="30.2500%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (4 samples, 0.11%)</title><rect x="30.0000%" y="357" width="0.1096%" height="15" fill="rgb(215,211,37)" fg:x="1095" fg:w="4"/><text x="30.2500%" y="367.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (4 samples, 0.11%)</title><rect x="30.0000%" y="341" width="0.1096%" height="15" fill="rgb(241,128,51)" fg:x="1095" fg:w="4"/><text x="30.2500%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (4 samples, 0.11%)</title><rect x="30.0000%" y="325" width="0.1096%" height="15" fill="rgb(227,165,31)" fg:x="1095" fg:w="4"/><text x="30.2500%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (4 samples, 0.11%)</title><rect x="30.0000%" y="309" width="0.1096%" height="15" fill="rgb(228,167,24)" fg:x="1095" fg:w="4"/><text x="30.2500%" y="319.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (2 samples, 0.05%)</title><rect x="30.1918%" y="421" width="0.0548%" height="15" fill="rgb(228,143,12)" fg:x="1102" fg:w="2"/><text x="30.4418%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.05%)</title><rect x="30.1918%" y="405" width="0.0548%" height="15" fill="rgb(249,149,8)" fg:x="1102" fg:w="2"/><text x="30.4418%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.05%)</title><rect x="30.1918%" y="389" width="0.0548%" height="15" fill="rgb(243,35,44)" fg:x="1102" fg:w="2"/><text x="30.4418%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.05%)</title><rect x="30.1918%" y="373" width="0.0548%" height="15" fill="rgb(246,89,9)" fg:x="1102" fg:w="2"/><text x="30.4418%" y="383.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="30.2740%" y="405" width="0.0274%" height="15" fill="rgb(233,213,13)" fg:x="1105" fg:w="1"/><text x="30.5240%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="30.2740%" y="389" width="0.0274%" height="15" fill="rgb(233,141,41)" fg:x="1105" fg:w="1"/><text x="30.5240%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="30.2740%" y="373" width="0.0274%" height="15" fill="rgb(239,167,4)" fg:x="1105" fg:w="1"/><text x="30.5240%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="30.2740%" y="357" width="0.0274%" height="15" fill="rgb(209,217,16)" fg:x="1105" fg:w="1"/><text x="30.5240%" y="367.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (9 samples, 0.25%)</title><rect x="30.3014%" y="405" width="0.2466%" height="15" fill="rgb(219,88,35)" fg:x="1106" fg:w="9"/><text x="30.5514%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.25%)</title><rect x="30.3014%" y="389" width="0.2466%" height="15" fill="rgb(220,193,23)" fg:x="1106" fg:w="9"/><text x="30.5514%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="30.6575%" y="341" width="0.0274%" height="15" fill="rgb(230,90,52)" fg:x="1119" fg:w="1"/><text x="30.9075%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="30.6575%" y="325" width="0.0274%" height="15" fill="rgb(252,106,19)" fg:x="1119" fg:w="1"/><text x="30.9075%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (3 samples, 0.08%)</title><rect x="30.6849%" y="341" width="0.0822%" height="15" fill="rgb(206,74,20)" fg:x="1120" fg:w="3"/><text x="30.9349%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.08%)</title><rect x="30.6849%" y="325" width="0.0822%" height="15" fill="rgb(230,138,44)" fg:x="1120" fg:w="3"/><text x="30.9349%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3 samples, 0.08%)</title><rect x="30.6849%" y="309" width="0.0822%" height="15" fill="rgb(235,182,43)" fg:x="1120" fg:w="3"/><text x="30.9349%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.08%)</title><rect x="30.6849%" y="293" width="0.0822%" height="15" fill="rgb(242,16,51)" fg:x="1120" fg:w="3"/><text x="30.9349%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.08%)</title><rect x="30.6849%" y="277" width="0.0822%" height="15" fill="rgb(248,9,4)" fg:x="1120" fg:w="3"/><text x="30.9349%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (10 samples, 0.27%)</title><rect x="30.5479%" y="405" width="0.2740%" height="15" fill="rgb(210,31,22)" fg:x="1115" fg:w="10"/><text x="30.7979%" y="415.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (10 samples, 0.27%)</title><rect x="30.5479%" y="389" width="0.2740%" height="15" fill="rgb(239,54,39)" fg:x="1115" fg:w="10"/><text x="30.7979%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (10 samples, 0.27%)</title><rect x="30.5479%" y="373" width="0.2740%" height="15" fill="rgb(230,99,41)" fg:x="1115" fg:w="10"/><text x="30.7979%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (10 samples, 0.27%)</title><rect x="30.5479%" y="357" width="0.2740%" height="15" fill="rgb(253,106,12)" fg:x="1115" fg:w="10"/><text x="30.7979%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.05%)</title><rect x="30.7671%" y="341" width="0.0548%" height="15" fill="rgb(213,46,41)" fg:x="1123" fg:w="2"/><text x="31.0171%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.05%)</title><rect x="30.7671%" y="325" width="0.0548%" height="15" fill="rgb(215,133,35)" fg:x="1123" fg:w="2"/><text x="31.0171%" y="335.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (4 samples, 0.11%)</title><rect x="30.8219%" y="405" width="0.1096%" height="15" fill="rgb(213,28,5)" fg:x="1125" fg:w="4"/><text x="31.0719%" y="415.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (4 samples, 0.11%)</title><rect x="30.8219%" y="389" width="0.1096%" height="15" fill="rgb(215,77,49)" fg:x="1125" fg:w="4"/><text x="31.0719%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (4 samples, 0.11%)</title><rect x="30.8219%" y="373" width="0.1096%" height="15" fill="rgb(248,100,22)" fg:x="1125" fg:w="4"/><text x="31.0719%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.11%)</title><rect x="30.8219%" y="357" width="0.1096%" height="15" fill="rgb(208,67,9)" fg:x="1125" fg:w="4"/><text x="31.0719%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3 samples, 0.08%)</title><rect x="30.8493%" y="341" width="0.0822%" height="15" fill="rgb(219,133,21)" fg:x="1126" fg:w="3"/><text x="31.0993%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.08%)</title><rect x="30.8493%" y="325" width="0.0822%" height="15" fill="rgb(246,46,29)" fg:x="1126" fg:w="3"/><text x="31.0993%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.08%)</title><rect x="30.8493%" y="309" width="0.0822%" height="15" fill="rgb(246,185,52)" fg:x="1126" fg:w="3"/><text x="31.0993%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="30.9041%" y="293" width="0.0274%" height="15" fill="rgb(252,136,11)" fg:x="1128" fg:w="1"/><text x="31.1541%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="30.9041%" y="277" width="0.0274%" height="15" fill="rgb(219,138,53)" fg:x="1128" fg:w="1"/><text x="31.1541%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (2 samples, 0.05%)</title><rect x="31.0685%" y="277" width="0.0548%" height="15" fill="rgb(211,51,23)" fg:x="1134" fg:w="2"/><text x="31.3185%" y="287.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="31.0685%" y="261" width="0.0548%" height="15" fill="rgb(247,221,28)" fg:x="1134" fg:w="2"/><text x="31.3185%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (2 samples, 0.05%)</title><rect x="31.0685%" y="245" width="0.0548%" height="15" fill="rgb(251,222,45)" fg:x="1134" fg:w="2"/><text x="31.3185%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (2 samples, 0.05%)</title><rect x="31.1233%" y="245" width="0.0548%" height="15" fill="rgb(217,162,53)" fg:x="1136" fg:w="2"/><text x="31.3733%" y="255.50"></text></g><g><title>core::intrinsics::write_bytes (2 samples, 0.05%)</title><rect x="31.1233%" y="229" width="0.0548%" height="15" fill="rgb(229,93,14)" fg:x="1136" fg:w="2"/><text x="31.3733%" y="239.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="31.1233%" y="213" width="0.0548%" height="15" fill="rgb(209,67,49)" fg:x="1136" fg:w="2"/><text x="31.3733%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="31.2603%" y="165" width="0.0274%" height="15" fill="rgb(213,87,29)" fg:x="1141" fg:w="1"/><text x="31.5103%" y="175.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="31.2877%" y="165" width="0.0274%" height="15" fill="rgb(205,151,52)" fg:x="1142" fg:w="1"/><text x="31.5377%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (20 samples, 0.55%)</title><rect x="31.0137%" y="341" width="0.5479%" height="15" fill="rgb(253,215,39)" fg:x="1132" fg:w="20"/><text x="31.2637%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (20 samples, 0.55%)</title><rect x="31.0137%" y="325" width="0.5479%" height="15" fill="rgb(221,220,41)" fg:x="1132" fg:w="20"/><text x="31.2637%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (19 samples, 0.52%)</title><rect x="31.0411%" y="309" width="0.5205%" height="15" fill="rgb(218,133,21)" fg:x="1133" fg:w="19"/><text x="31.2911%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (19 samples, 0.52%)</title><rect x="31.0411%" y="293" width="0.5205%" height="15" fill="rgb(221,193,43)" fg:x="1133" fg:w="19"/><text x="31.2911%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (16 samples, 0.44%)</title><rect x="31.1233%" y="277" width="0.4384%" height="15" fill="rgb(240,128,52)" fg:x="1136" fg:w="16"/><text x="31.3733%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (16 samples, 0.44%)</title><rect x="31.1233%" y="261" width="0.4384%" height="15" fill="rgb(253,114,12)" fg:x="1136" fg:w="16"/><text x="31.3733%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (14 samples, 0.38%)</title><rect x="31.1781%" y="245" width="0.3836%" height="15" fill="rgb(215,223,47)" fg:x="1138" fg:w="14"/><text x="31.4281%" y="255.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (14 samples, 0.38%)</title><rect x="31.1781%" y="229" width="0.3836%" height="15" fill="rgb(248,225,23)" fg:x="1138" fg:w="14"/><text x="31.4281%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.38%)</title><rect x="31.1781%" y="213" width="0.3836%" height="15" fill="rgb(250,108,0)" fg:x="1138" fg:w="14"/><text x="31.4281%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.38%)</title><rect x="31.1781%" y="197" width="0.3836%" height="15" fill="rgb(228,208,7)" fg:x="1138" fg:w="14"/><text x="31.4281%" y="207.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.36%)</title><rect x="31.2055%" y="181" width="0.3562%" height="15" fill="rgb(244,45,10)" fg:x="1139" fg:w="13"/><text x="31.4555%" y="191.50"></text></g><g><title>malloc (9 samples, 0.25%)</title><rect x="31.3151%" y="165" width="0.2466%" height="15" fill="rgb(207,125,25)" fg:x="1143" fg:w="9"/><text x="31.5651%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.14%)</title><rect x="31.6164%" y="325" width="0.1370%" height="15" fill="rgb(210,195,18)" fg:x="1154" fg:w="5"/><text x="31.8664%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.03%)</title><rect x="31.7534%" y="325" width="0.0274%" height="15" fill="rgb(249,80,12)" fg:x="1159" fg:w="1"/><text x="32.0034%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.03%)</title><rect x="31.7534%" y="309" width="0.0274%" height="15" fill="rgb(221,65,9)" fg:x="1159" fg:w="1"/><text x="32.0034%" y="319.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.03%)</title><rect x="31.7534%" y="293" width="0.0274%" height="15" fill="rgb(235,49,36)" fg:x="1159" fg:w="1"/><text x="32.0034%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (40 samples, 1.10%)</title><rect x="31.7808%" y="325" width="1.0959%" height="15" fill="rgb(225,32,20)" fg:x="1160" fg:w="40"/><text x="32.0308%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (40 samples, 1.10%)</title><rect x="31.7808%" y="309" width="1.0959%" height="15" fill="rgb(215,141,46)" fg:x="1160" fg:w="40"/><text x="32.0308%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (69 samples, 1.89%)</title><rect x="31.0137%" y="357" width="1.8904%" height="15" fill="rgb(250,160,47)" fg:x="1132" fg:w="69"/><text x="31.2637%" y="367.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (49 samples, 1.34%)</title><rect x="31.5616%" y="341" width="1.3425%" height="15" fill="rgb(216,222,40)" fg:x="1152" fg:w="49"/><text x="31.8116%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.03%)</title><rect x="32.8767%" y="325" width="0.0274%" height="15" fill="rgb(234,217,39)" fg:x="1200" fg:w="1"/><text x="33.1267%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="32.8767%" y="309" width="0.0274%" height="15" fill="rgb(207,178,40)" fg:x="1200" fg:w="1"/><text x="33.1267%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="32.8767%" y="293" width="0.0274%" height="15" fill="rgb(221,136,13)" fg:x="1200" fg:w="1"/><text x="33.1267%" y="303.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::define_var (103 samples, 2.82%)</title><rect x="30.1096%" y="437" width="2.8219%" height="15" fill="rgb(249,199,10)" fg:x="1099" fg:w="103"/><text x="30.3596%" y="447.50">si..</text></g><g><title>simple_lisp::interpreter::Env::insert (98 samples, 2.68%)</title><rect x="30.2466%" y="421" width="2.6849%" height="15" fill="rgb(249,222,13)" fg:x="1104" fg:w="98"/><text x="30.4966%" y="431.50">si..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (73 samples, 2.00%)</title><rect x="30.9315%" y="405" width="2.0000%" height="15" fill="rgb(244,185,38)" fg:x="1129" fg:w="73"/><text x="31.1815%" y="415.50">s..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (73 samples, 2.00%)</title><rect x="30.9315%" y="389" width="2.0000%" height="15" fill="rgb(236,202,9)" fg:x="1129" fg:w="73"/><text x="31.1815%" y="399.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (72 samples, 1.97%)</title><rect x="30.9589%" y="373" width="1.9726%" height="15" fill="rgb(250,229,37)" fg:x="1130" fg:w="72"/><text x="31.2089%" y="383.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.03%)</title><rect x="32.9041%" y="357" width="0.0274%" height="15" fill="rgb(206,174,23)" fg:x="1201" fg:w="1"/><text x="33.1541%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (1 samples, 0.03%)</title><rect x="32.9041%" y="341" width="0.0274%" height="15" fill="rgb(211,33,43)" fg:x="1201" fg:w="1"/><text x="33.1541%" y="351.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (1 samples, 0.03%)</title><rect x="32.9041%" y="325" width="0.0274%" height="15" fill="rgb(245,58,50)" fg:x="1201" fg:w="1"/><text x="33.1541%" y="335.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (8 samples, 0.22%)</title><rect x="32.9863%" y="421" width="0.2192%" height="15" fill="rgb(244,68,36)" fg:x="1204" fg:w="8"/><text x="33.2363%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (8 samples, 0.22%)</title><rect x="32.9863%" y="405" width="0.2192%" height="15" fill="rgb(232,229,15)" fg:x="1204" fg:w="8"/><text x="33.2363%" y="415.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (3 samples, 0.08%)</title><rect x="33.4521%" y="405" width="0.0822%" height="15" fill="rgb(254,30,23)" fg:x="1221" fg:w="3"/><text x="33.7021%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (3 samples, 0.08%)</title><rect x="33.4521%" y="389" width="0.0822%" height="15" fill="rgb(235,160,14)" fg:x="1221" fg:w="3"/><text x="33.7021%" y="399.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::DataRef as core::clone::Clone&gt;::clone (51 samples, 1.40%)</title><rect x="33.5342%" y="405" width="1.3973%" height="15" fill="rgb(212,155,44)" fg:x="1224" fg:w="51"/><text x="33.7842%" y="415.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::finish (2 samples, 0.05%)</title><rect x="35.3699%" y="325" width="0.0548%" height="15" fill="rgb(226,2,50)" fg:x="1291" fg:w="2"/><text x="35.6199%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (2 samples, 0.05%)</title><rect x="35.3699%" y="309" width="0.0548%" height="15" fill="rgb(234,177,6)" fg:x="1291" fg:w="2"/><text x="35.6199%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.11%)</title><rect x="35.3699%" y="357" width="0.1096%" height="15" fill="rgb(217,24,9)" fg:x="1291" fg:w="4"/><text x="35.6199%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.11%)</title><rect x="35.3699%" y="341" width="0.1096%" height="15" fill="rgb(220,13,46)" fg:x="1291" fg:w="4"/><text x="35.6199%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.05%)</title><rect x="35.4247%" y="325" width="0.0548%" height="15" fill="rgb(239,221,27)" fg:x="1293" fg:w="2"/><text x="35.6747%" y="335.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (2 samples, 0.05%)</title><rect x="35.4247%" y="309" width="0.0548%" height="15" fill="rgb(222,198,25)" fg:x="1293" fg:w="2"/><text x="35.6747%" y="319.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (2 samples, 0.05%)</title><rect x="35.4247%" y="293" width="0.0548%" height="15" fill="rgb(211,99,13)" fg:x="1293" fg:w="2"/><text x="35.6747%" y="303.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (2 samples, 0.05%)</title><rect x="35.4247%" y="277" width="0.0548%" height="15" fill="rgb(232,111,31)" fg:x="1293" fg:w="2"/><text x="35.6747%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (2 samples, 0.05%)</title><rect x="35.4247%" y="261" width="0.0548%" height="15" fill="rgb(245,82,37)" fg:x="1293" fg:w="2"/><text x="35.6747%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (5 samples, 0.14%)</title><rect x="36.9315%" y="293" width="0.1370%" height="15" fill="rgb(227,149,46)" fg:x="1348" fg:w="5"/><text x="37.1815%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.77%)</title><rect x="36.3288%" y="309" width="0.7671%" height="15" fill="rgb(218,36,50)" fg:x="1326" fg:w="28"/><text x="36.5788%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.03%)</title><rect x="37.0685%" y="293" width="0.0274%" height="15" fill="rgb(226,80,48)" fg:x="1353" fg:w="1"/><text x="37.3185%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (19 samples, 0.52%)</title><rect x="37.0959%" y="293" width="0.5205%" height="15" fill="rgb(238,224,15)" fg:x="1354" fg:w="19"/><text x="37.3459%" y="303.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (19 samples, 0.52%)</title><rect x="37.0959%" y="277" width="0.5205%" height="15" fill="rgb(241,136,10)" fg:x="1354" fg:w="19"/><text x="37.3459%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (19 samples, 0.52%)</title><rect x="37.0959%" y="261" width="0.5205%" height="15" fill="rgb(208,32,45)" fg:x="1354" fg:w="19"/><text x="37.3459%" y="271.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::cmp::PartialEq&gt;::eq (19 samples, 0.52%)</title><rect x="37.0959%" y="245" width="0.5205%" height="15" fill="rgb(207,135,9)" fg:x="1354" fg:w="19"/><text x="37.3459%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (33 samples, 0.90%)</title><rect x="37.0959%" y="309" width="0.9041%" height="15" fill="rgb(206,86,44)" fg:x="1354" fg:w="33"/><text x="37.3459%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (14 samples, 0.38%)</title><rect x="37.6164%" y="293" width="0.3836%" height="15" fill="rgb(245,177,15)" fg:x="1373" fg:w="14"/><text x="37.8664%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (14 samples, 0.38%)</title><rect x="37.6164%" y="277" width="0.3836%" height="15" fill="rgb(206,64,50)" fg:x="1373" fg:w="14"/><text x="37.8664%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (14 samples, 0.38%)</title><rect x="37.6164%" y="261" width="0.3836%" height="15" fill="rgb(234,36,40)" fg:x="1373" fg:w="14"/><text x="37.8664%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (14 samples, 0.38%)</title><rect x="37.6164%" y="245" width="0.3836%" height="15" fill="rgb(213,64,8)" fg:x="1373" fg:w="14"/><text x="37.8664%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (19 samples, 0.52%)</title><rect x="38.0000%" y="309" width="0.5205%" height="15" fill="rgb(210,75,36)" fg:x="1387" fg:w="19"/><text x="38.2500%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (14 samples, 0.38%)</title><rect x="38.5205%" y="309" width="0.3836%" height="15" fill="rgb(229,88,21)" fg:x="1406" fg:w="14"/><text x="38.7705%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14 samples, 0.38%)</title><rect x="38.5205%" y="293" width="0.3836%" height="15" fill="rgb(252,204,47)" fg:x="1406" fg:w="14"/><text x="38.7705%" y="303.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::get_var (220 samples, 6.03%)</title><rect x="32.9315%" y="437" width="6.0274%" height="15" fill="rgb(208,77,27)" fg:x="1202" fg:w="220"/><text x="33.1815%" y="447.50">simple_l..</text></g><g><title>simple_lisp::interpreter::Env::get (210 samples, 5.75%)</title><rect x="33.2055%" y="421" width="5.7534%" height="15" fill="rgb(221,76,26)" fg:x="1212" fg:w="210"/><text x="33.4555%" y="431.50">simple_..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (147 samples, 4.03%)</title><rect x="34.9315%" y="405" width="4.0274%" height="15" fill="rgb(225,139,18)" fg:x="1275" fg:w="147"/><text x="35.1815%" y="415.50">std:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (147 samples, 4.03%)</title><rect x="34.9315%" y="389" width="4.0274%" height="15" fill="rgb(230,137,11)" fg:x="1275" fg:w="147"/><text x="35.1815%" y="399.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (147 samples, 4.03%)</title><rect x="34.9315%" y="373" width="4.0274%" height="15" fill="rgb(212,28,1)" fg:x="1275" fg:w="147"/><text x="35.1815%" y="383.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (127 samples, 3.48%)</title><rect x="35.4795%" y="357" width="3.4795%" height="15" fill="rgb(248,164,17)" fg:x="1295" fg:w="127"/><text x="35.7295%" y="367.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (127 samples, 3.48%)</title><rect x="35.4795%" y="341" width="3.4795%" height="15" fill="rgb(222,171,42)" fg:x="1295" fg:w="127"/><text x="35.7295%" y="351.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (127 samples, 3.48%)</title><rect x="35.4795%" y="325" width="3.4795%" height="15" fill="rgb(243,84,45)" fg:x="1295" fg:w="127"/><text x="35.7295%" y="335.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2 samples, 0.05%)</title><rect x="38.9041%" y="309" width="0.0548%" height="15" fill="rgb(252,49,23)" fg:x="1420" fg:w="2"/><text x="39.1541%" y="319.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.05%)</title><rect x="38.9041%" y="293" width="0.0548%" height="15" fill="rgb(215,19,7)" fg:x="1420" fg:w="2"/><text x="39.1541%" y="303.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.05%)</title><rect x="38.9041%" y="277" width="0.0548%" height="15" fill="rgb(238,81,41)" fg:x="1420" fg:w="2"/><text x="39.1541%" y="287.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::pop (2 samples, 0.05%)</title><rect x="39.0411%" y="421" width="0.0548%" height="15" fill="rgb(210,199,37)" fg:x="1425" fg:w="2"/><text x="39.2911%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.05%)</title><rect x="39.0411%" y="405" width="0.0548%" height="15" fill="rgb(244,192,49)" fg:x="1425" fg:w="2"/><text x="39.2911%" y="415.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="39.0685%" y="389" width="0.0274%" height="15" fill="rgb(226,211,11)" fg:x="1426" fg:w="1"/><text x="39.3185%" y="399.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (3 samples, 0.08%)</title><rect x="39.0959%" y="421" width="0.0822%" height="15" fill="rgb(236,162,54)" fg:x="1427" fg:w="3"/><text x="39.3459%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.08%)</title><rect x="39.0959%" y="405" width="0.0822%" height="15" fill="rgb(220,229,9)" fg:x="1427" fg:w="3"/><text x="39.3459%" y="415.50"></text></g><g><title>core::ptr::write (3 samples, 0.08%)</title><rect x="39.0959%" y="389" width="0.0822%" height="15" fill="rgb(250,87,22)" fg:x="1427" fg:w="3"/><text x="39.3459%" y="399.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="39.2329%" y="373" width="0.0548%" height="15" fill="rgb(239,43,17)" fg:x="1432" fg:w="2"/><text x="39.4829%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="39.2329%" y="357" width="0.0548%" height="15" fill="rgb(231,177,25)" fg:x="1432" fg:w="2"/><text x="39.4829%" y="367.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect x="39.2329%" y="341" width="0.0548%" height="15" fill="rgb(219,179,1)" fg:x="1432" fg:w="2"/><text x="39.4829%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.05%)</title><rect x="39.2877%" y="373" width="0.0548%" height="15" fill="rgb(238,219,53)" fg:x="1434" fg:w="2"/><text x="39.5377%" y="383.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2 samples, 0.05%)</title><rect x="39.2877%" y="357" width="0.0548%" height="15" fill="rgb(232,167,36)" fg:x="1434" fg:w="2"/><text x="39.5377%" y="367.50"></text></g><g><title>core::mem::drop (2 samples, 0.05%)</title><rect x="39.2877%" y="341" width="0.0548%" height="15" fill="rgb(244,19,51)" fg:x="1434" fg:w="2"/><text x="39.5377%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::ExternalData&gt; (2 samples, 0.05%)</title><rect x="39.2877%" y="325" width="0.0548%" height="15" fill="rgb(224,6,22)" fg:x="1434" fg:w="2"/><text x="39.5377%" y="335.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::ExternalData as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="39.2877%" y="309" width="0.0548%" height="15" fill="rgb(224,145,5)" fg:x="1434" fg:w="2"/><text x="39.5377%" y="319.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::unset_external (2 samples, 0.05%)</title><rect x="39.2877%" y="293" width="0.0548%" height="15" fill="rgb(234,130,49)" fg:x="1434" fg:w="2"/><text x="39.5377%" y="303.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (2 samples, 0.05%)</title><rect x="39.2877%" y="277" width="0.0548%" height="15" fill="rgb(254,6,2)" fg:x="1434" fg:w="2"/><text x="39.5377%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (2 samples, 0.05%)</title><rect x="39.2877%" y="261" width="0.0548%" height="15" fill="rgb(208,96,46)" fg:x="1434" fg:w="2"/><text x="39.5377%" y="271.50"></text></g><g><title>core::cell::BorrowRefMut::new (2 samples, 0.05%)</title><rect x="39.2877%" y="245" width="0.0548%" height="15" fill="rgb(239,3,39)" fg:x="1434" fg:w="2"/><text x="39.5377%" y="255.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="39.4521%" y="309" width="0.0274%" height="15" fill="rgb(233,210,1)" fg:x="1440" fg:w="1"/><text x="39.7021%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (10 samples, 0.27%)</title><rect x="39.2329%" y="405" width="0.2740%" height="15" fill="rgb(244,137,37)" fg:x="1432" fg:w="10"/><text x="39.4829%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (10 samples, 0.27%)</title><rect x="39.2329%" y="389" width="0.2740%" height="15" fill="rgb(240,136,2)" fg:x="1432" fg:w="10"/><text x="39.4829%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (6 samples, 0.16%)</title><rect x="39.3425%" y="373" width="0.1644%" height="15" fill="rgb(239,18,37)" fg:x="1436" fg:w="6"/><text x="39.5925%" y="383.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.16%)</title><rect x="39.3425%" y="357" width="0.1644%" height="15" fill="rgb(218,185,22)" fg:x="1436" fg:w="6"/><text x="39.5925%" y="367.50"></text></g><g><title>core::mem::take (2 samples, 0.05%)</title><rect x="39.4521%" y="341" width="0.0548%" height="15" fill="rgb(225,218,4)" fg:x="1440" fg:w="2"/><text x="39.7021%" y="351.50"></text></g><g><title>core::mem::replace (2 samples, 0.05%)</title><rect x="39.4521%" y="325" width="0.0548%" height="15" fill="rgb(230,182,32)" fg:x="1440" fg:w="2"/><text x="39.7021%" y="335.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="39.4795%" y="309" width="0.0274%" height="15" fill="rgb(242,56,43)" fg:x="1441" fg:w="1"/><text x="39.7295%" y="319.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::clear (5 samples, 0.14%)</title><rect x="39.5068%" y="405" width="0.1370%" height="15" fill="rgb(233,99,24)" fg:x="1442" fg:w="5"/><text x="39.7568%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (5 samples, 0.14%)</title><rect x="39.5068%" y="389" width="0.1370%" height="15" fill="rgb(234,209,42)" fg:x="1442" fg:w="5"/><text x="39.7568%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;]&gt; (5 samples, 0.14%)</title><rect x="39.5068%" y="373" width="0.1370%" height="15" fill="rgb(227,7,12)" fg:x="1442" fg:w="5"/><text x="39.7568%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (5 samples, 0.14%)</title><rect x="39.5068%" y="357" width="0.1370%" height="15" fill="rgb(245,203,43)" fg:x="1442" fg:w="5"/><text x="39.7568%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (5 samples, 0.14%)</title><rect x="39.5068%" y="341" width="0.1370%" height="15" fill="rgb(238,205,33)" fg:x="1442" fg:w="5"/><text x="39.7568%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;simple_lisp::interpreter::ast::Ident,(),rustc_hash::FxBuildHasher&gt;&gt; (5 samples, 0.14%)</title><rect x="39.5068%" y="325" width="0.1370%" height="15" fill="rgb(231,56,7)" fg:x="1442" fg:w="5"/><text x="39.7568%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(simple_lisp::interpreter::ast::Ident,())&gt;&gt; (5 samples, 0.14%)</title><rect x="39.5068%" y="309" width="0.1370%" height="15" fill="rgb(244,186,29)" fg:x="1442" fg:w="5"/><text x="39.7568%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.14%)</title><rect x="39.5068%" y="293" width="0.1370%" height="15" fill="rgb(234,111,31)" fg:x="1442" fg:w="5"/><text x="39.7568%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (5 samples, 0.14%)</title><rect x="39.5068%" y="277" width="0.1370%" height="15" fill="rgb(241,149,10)" fg:x="1442" fg:w="5"/><text x="39.7568%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (4 samples, 0.11%)</title><rect x="39.5342%" y="261" width="0.1096%" height="15" fill="rgb(249,206,44)" fg:x="1443" fg:w="4"/><text x="39.7842%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.11%)</title><rect x="39.5342%" y="245" width="0.1096%" height="15" fill="rgb(251,153,30)" fg:x="1443" fg:w="4"/><text x="39.7842%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.11%)</title><rect x="39.5342%" y="229" width="0.1096%" height="15" fill="rgb(239,152,38)" fg:x="1443" fg:w="4"/><text x="39.7842%" y="239.50"></text></g><g><title>cfree (4 samples, 0.11%)</title><rect x="39.5342%" y="213" width="0.1096%" height="15" fill="rgb(249,139,47)" fg:x="1443" fg:w="4"/><text x="39.7842%" y="223.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="39.5890%" y="197" width="0.0548%" height="15" fill="rgb(244,64,35)" fg:x="1445" fg:w="2"/><text x="39.8390%" y="207.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::pop_env (27 samples, 0.74%)</title><rect x="38.9589%" y="437" width="0.7397%" height="15" fill="rgb(216,46,15)" fg:x="1422" fg:w="27"/><text x="39.2089%" y="447.50"></text></g><g><title>simple_lisp::interpreter::Env::clear (19 samples, 0.52%)</title><rect x="39.1781%" y="421" width="0.5205%" height="15" fill="rgb(250,74,19)" fg:x="1430" fg:w="19"/><text x="39.4281%" y="431.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::drain (2 samples, 0.05%)</title><rect x="39.6438%" y="405" width="0.0548%" height="15" fill="rgb(249,42,33)" fg:x="1447" fg:w="2"/><text x="39.8938%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (2 samples, 0.05%)</title><rect x="39.6438%" y="389" width="0.0548%" height="15" fill="rgb(242,149,17)" fg:x="1447" fg:w="2"/><text x="39.8938%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (2 samples, 0.05%)</title><rect x="39.6438%" y="373" width="0.0548%" height="15" fill="rgb(244,29,21)" fg:x="1447" fg:w="2"/><text x="39.8938%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="39.8082%" y="405" width="0.0274%" height="15" fill="rgb(220,130,37)" fg:x="1453" fg:w="1"/><text x="40.0582%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="39.8082%" y="389" width="0.0274%" height="15" fill="rgb(211,67,2)" fg:x="1453" fg:w="1"/><text x="40.0582%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="39.8082%" y="373" width="0.0274%" height="15" fill="rgb(235,68,52)" fg:x="1453" fg:w="1"/><text x="40.0582%" y="383.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (2 samples, 0.05%)</title><rect x="39.8082%" y="421" width="0.0548%" height="15" fill="rgb(246,142,3)" fg:x="1453" fg:w="2"/><text x="40.0582%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.03%)</title><rect x="39.8356%" y="405" width="0.0274%" height="15" fill="rgb(241,25,7)" fg:x="1454" fg:w="1"/><text x="40.0856%" y="415.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::pop_from_scope (8 samples, 0.22%)</title><rect x="39.6986%" y="437" width="0.2192%" height="15" fill="rgb(242,119,39)" fg:x="1449" fg:w="8"/><text x="39.9486%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.05%)</title><rect x="39.8630%" y="421" width="0.0548%" height="15" fill="rgb(241,98,45)" fg:x="1455" fg:w="2"/><text x="40.1130%" y="431.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (4 samples, 0.11%)</title><rect x="40.3288%" y="421" width="0.1096%" height="15" fill="rgb(254,28,30)" fg:x="1472" fg:w="4"/><text x="40.5788%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.11%)</title><rect x="40.3288%" y="405" width="0.1096%" height="15" fill="rgb(241,142,54)" fg:x="1472" fg:w="4"/><text x="40.5788%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.11%)</title><rect x="40.3288%" y="389" width="0.1096%" height="15" fill="rgb(222,85,15)" fg:x="1472" fg:w="4"/><text x="40.5788%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.11%)</title><rect x="40.3288%" y="373" width="0.1096%" height="15" fill="rgb(210,85,47)" fg:x="1472" fg:w="4"/><text x="40.5788%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.11%)</title><rect x="41.0959%" y="373" width="0.1096%" height="15" fill="rgb(224,206,25)" fg:x="1500" fg:w="4"/><text x="41.3459%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.03%)</title><rect x="41.2055%" y="373" width="0.0274%" height="15" fill="rgb(243,201,19)" fg:x="1504" fg:w="1"/><text x="41.4555%" y="383.50"></text></g><g><title>__rdl_alloc (3 samples, 0.08%)</title><rect x="41.6438%" y="357" width="0.0822%" height="15" fill="rgb(236,59,4)" fg:x="1520" fg:w="3"/><text x="41.8938%" y="367.50"></text></g><g><title>__rust_alloc (4 samples, 0.11%)</title><rect x="41.7260%" y="357" width="0.1096%" height="15" fill="rgb(254,179,45)" fg:x="1523" fg:w="4"/><text x="41.9760%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.08%)</title><rect x="41.8356%" y="357" width="0.0822%" height="15" fill="rgb(226,14,10)" fg:x="1527" fg:w="3"/><text x="42.0856%" y="367.50"></text></g><g><title>[libc.so.6] (87 samples, 2.38%)</title><rect x="45.3425%" y="325" width="2.3836%" height="15" fill="rgb(244,27,41)" fg:x="1655" fg:w="87"/><text x="45.5925%" y="335.50">[l..</text></g><g><title>[libc.so.6] (12 samples, 0.33%)</title><rect x="47.3973%" y="309" width="0.3288%" height="15" fill="rgb(235,35,32)" fg:x="1730" fg:w="12"/><text x="47.6473%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (238 samples, 6.52%)</title><rect x="41.2329%" y="373" width="6.5205%" height="15" fill="rgb(218,68,31)" fg:x="1505" fg:w="238"/><text x="41.4829%" y="383.50">alloc::ra..</text></g><g><title>malloc (213 samples, 5.84%)</title><rect x="41.9178%" y="357" width="5.8356%" height="15" fill="rgb(207,120,37)" fg:x="1530" fg:w="213"/><text x="42.1678%" y="367.50">malloc</text></g><g><title>[libc.so.6] (186 samples, 5.10%)</title><rect x="42.6575%" y="341" width="5.0959%" height="15" fill="rgb(227,98,0)" fg:x="1557" fg:w="186"/><text x="42.9075%" y="351.50">[libc...</text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.7260%" y="325" width="0.0274%" height="15" fill="rgb(207,7,3)" fg:x="1742" fg:w="1"/><text x="47.9760%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="47.7260%" y="309" width="0.0274%" height="15" fill="rgb(206,98,19)" fg:x="1742" fg:w="1"/><text x="47.9760%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.05%)</title><rect x="47.7534%" y="373" width="0.0548%" height="15" fill="rgb(217,5,26)" fg:x="1743" fg:w="2"/><text x="48.0034%" y="383.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.05%)</title><rect x="47.7534%" y="357" width="0.0548%" height="15" fill="rgb(235,190,38)" fg:x="1743" fg:w="2"/><text x="48.0034%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (251 samples, 6.88%)</title><rect x="40.9863%" y="405" width="6.8767%" height="15" fill="rgb(247,86,24)" fg:x="1496" fg:w="251"/><text x="41.2363%" y="415.50">alloc::ra..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (249 samples, 6.82%)</title><rect x="41.0411%" y="389" width="6.8219%" height="15" fill="rgb(205,101,16)" fg:x="1498" fg:w="249"/><text x="41.2911%" y="399.50">alloc::ra..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.05%)</title><rect x="47.8082%" y="373" width="0.0548%" height="15" fill="rgb(246,168,33)" fg:x="1745" fg:w="2"/><text x="48.0582%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.05%)</title><rect x="47.8082%" y="357" width="0.0548%" height="15" fill="rgb(231,114,1)" fg:x="1745" fg:w="2"/><text x="48.0582%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (6 samples, 0.16%)</title><rect x="47.8630%" y="405" width="0.1644%" height="15" fill="rgb(207,184,53)" fg:x="1747" fg:w="6"/><text x="48.1130%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.16%)</title><rect x="47.8630%" y="389" width="0.1644%" height="15" fill="rgb(224,95,51)" fg:x="1747" fg:w="6"/><text x="48.1130%" y="399.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_dr_to_scope (304 samples, 8.33%)</title><rect x="39.9178%" y="437" width="8.3288%" height="15" fill="rgb(212,188,45)" fg:x="1457" fg:w="304"/><text x="40.1678%" y="447.50">simple_lisp:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (285 samples, 7.81%)</title><rect x="40.4384%" y="421" width="7.8082%" height="15" fill="rgb(223,154,38)" fg:x="1476" fg:w="285"/><text x="40.6884%" y="431.50">alloc::vec:..</text></g><g><title>core::ptr::write (8 samples, 0.22%)</title><rect x="48.0274%" y="405" width="0.2192%" height="15" fill="rgb(251,22,52)" fg:x="1753" fg:w="8"/><text x="48.2774%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (2 samples, 0.05%)</title><rect x="48.2740%" y="421" width="0.0548%" height="15" fill="rgb(229,209,22)" fg:x="1762" fg:w="2"/><text x="48.5240%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="48.3288%" y="389" width="0.0274%" height="15" fill="rgb(234,138,34)" fg:x="1764" fg:w="1"/><text x="48.5788%" y="399.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_env (10 samples, 0.27%)</title><rect x="48.2466%" y="437" width="0.2740%" height="15" fill="rgb(212,95,11)" fg:x="1761" fg:w="10"/><text x="48.4966%" y="447.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (7 samples, 0.19%)</title><rect x="48.3288%" y="421" width="0.1918%" height="15" fill="rgb(240,179,47)" fg:x="1764" fg:w="7"/><text x="48.5788%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (7 samples, 0.19%)</title><rect x="48.3288%" y="405" width="0.1918%" height="15" fill="rgb(240,163,11)" fg:x="1764" fg:w="7"/><text x="48.5788%" y="415.50"></text></g><g><title>core::ptr::write (6 samples, 0.16%)</title><rect x="48.3562%" y="389" width="0.1644%" height="15" fill="rgb(236,37,12)" fg:x="1765" fg:w="6"/><text x="48.6062%" y="399.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="48.5205%" y="421" width="0.0274%" height="15" fill="rgb(232,164,16)" fg:x="1771" fg:w="1"/><text x="48.7705%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="48.5205%" y="405" width="0.0274%" height="15" fill="rgb(244,205,15)" fg:x="1771" fg:w="1"/><text x="48.7705%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="48.5205%" y="389" width="0.0274%" height="15" fill="rgb(223,117,47)" fg:x="1771" fg:w="1"/><text x="48.7705%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="48.5205%" y="373" width="0.0274%" height="15" fill="rgb(244,107,35)" fg:x="1771" fg:w="1"/><text x="48.7705%" y="383.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_env_scope (20 samples, 0.55%)</title><rect x="48.5205%" y="437" width="0.5479%" height="15" fill="rgb(205,140,8)" fg:x="1771" fg:w="20"/><text x="48.7705%" y="447.50"></text></g><g><title>simple_lisp::interpreter::Env::push_scope (19 samples, 0.52%)</title><rect x="48.5479%" y="421" width="0.5205%" height="15" fill="rgb(228,84,46)" fg:x="1772" fg:w="19"/><text x="48.7979%" y="431.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (19 samples, 0.52%)</title><rect x="48.5479%" y="405" width="0.5205%" height="15" fill="rgb(254,188,9)" fg:x="1772" fg:w="19"/><text x="48.7979%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (19 samples, 0.52%)</title><rect x="48.5479%" y="389" width="0.5205%" height="15" fill="rgb(206,112,54)" fg:x="1772" fg:w="19"/><text x="48.7979%" y="399.50"></text></g><g><title>core::ptr::write (10 samples, 0.27%)</title><rect x="48.7945%" y="373" width="0.2740%" height="15" fill="rgb(216,84,49)" fg:x="1781" fg:w="10"/><text x="49.0445%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (14 samples, 0.38%)</title><rect x="49.9178%" y="309" width="0.3836%" height="15" fill="rgb(214,194,35)" fg:x="1822" fg:w="14"/><text x="50.1678%" y="319.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (30 samples, 0.82%)</title><rect x="49.9178%" y="325" width="0.8219%" height="15" fill="rgb(249,28,3)" fg:x="1822" fg:w="30"/><text x="50.1678%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16 samples, 0.44%)</title><rect x="50.3014%" y="309" width="0.4384%" height="15" fill="rgb(222,56,52)" fg:x="1836" fg:w="16"/><text x="50.5514%" y="319.50"></text></g><g><title>core::ptr::write (1 samples, 0.03%)</title><rect x="50.7123%" y="293" width="0.0274%" height="15" fill="rgb(245,217,50)" fg:x="1851" fg:w="1"/><text x="50.9623%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (5 samples, 0.14%)</title><rect x="50.7397%" y="293" width="0.1370%" height="15" fill="rgb(213,201,24)" fg:x="1852" fg:w="5"/><text x="50.9897%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="50.8767%" y="277" width="0.0274%" height="15" fill="rgb(248,116,28)" fg:x="1857" fg:w="1"/><text x="51.1267%" y="287.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="50.8767%" y="261" width="0.0274%" height="15" fill="rgb(219,72,43)" fg:x="1857" fg:w="1"/><text x="51.1267%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1 samples, 0.03%)</title><rect x="50.9041%" y="277" width="0.0274%" height="15" fill="rgb(209,138,14)" fg:x="1858" fg:w="1"/><text x="51.1541%" y="287.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (1 samples, 0.03%)</title><rect x="50.9041%" y="261" width="0.0274%" height="15" fill="rgb(222,18,33)" fg:x="1858" fg:w="1"/><text x="51.1541%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (7 samples, 0.19%)</title><rect x="50.9315%" y="277" width="0.1918%" height="15" fill="rgb(213,199,7)" fg:x="1859" fg:w="7"/><text x="51.1815%" y="287.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (7 samples, 0.19%)</title><rect x="50.9315%" y="261" width="0.1918%" height="15" fill="rgb(250,110,10)" fg:x="1859" fg:w="7"/><text x="51.1815%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (7 samples, 0.19%)</title><rect x="51.1233%" y="277" width="0.1918%" height="15" fill="rgb(248,123,6)" fg:x="1866" fg:w="7"/><text x="51.3733%" y="287.50"></text></g><g><title>hashbrown::raw::inner::h2 (7 samples, 0.19%)</title><rect x="51.3151%" y="277" width="0.1918%" height="15" fill="rgb(206,91,31)" fg:x="1873" fg:w="7"/><text x="51.5651%" y="287.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (8 samples, 0.22%)</title><rect x="51.5068%" y="277" width="0.2192%" height="15" fill="rgb(211,154,13)" fg:x="1880" fg:w="8"/><text x="51.7568%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.22%)</title><rect x="51.5068%" y="261" width="0.2192%" height="15" fill="rgb(225,148,7)" fg:x="1880" fg:w="8"/><text x="51.7568%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (37 samples, 1.01%)</title><rect x="50.7397%" y="309" width="1.0137%" height="15" fill="rgb(220,160,43)" fg:x="1852" fg:w="37"/><text x="50.9897%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (32 samples, 0.88%)</title><rect x="50.8767%" y="293" width="0.8767%" height="15" fill="rgb(213,52,39)" fg:x="1857" fg:w="32"/><text x="51.1267%" y="303.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (1 samples, 0.03%)</title><rect x="51.7260%" y="277" width="0.0274%" height="15" fill="rgb(243,137,7)" fg:x="1888" fg:w="1"/><text x="51.9760%" y="287.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="51.7260%" y="261" width="0.0274%" height="15" fill="rgb(230,79,13)" fg:x="1888" fg:w="1"/><text x="51.9760%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="51.7260%" y="245" width="0.0274%" height="15" fill="rgb(247,105,23)" fg:x="1888" fg:w="1"/><text x="51.9760%" y="255.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (1 samples, 0.03%)</title><rect x="51.7534%" y="293" width="0.0274%" height="15" fill="rgb(223,179,41)" fg:x="1889" fg:w="1"/><text x="52.0034%" y="303.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="51.7534%" y="277" width="0.0274%" height="15" fill="rgb(218,9,34)" fg:x="1889" fg:w="1"/><text x="52.0034%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.03%)</title><rect x="51.7534%" y="261" width="0.0274%" height="15" fill="rgb(222,106,8)" fg:x="1889" fg:w="1"/><text x="52.0034%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="51.7534%" y="245" width="0.0274%" height="15" fill="rgb(211,220,0)" fg:x="1889" fg:w="1"/><text x="52.0034%" y="255.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (97 samples, 2.66%)</title><rect x="49.4247%" y="389" width="2.6575%" height="15" fill="rgb(229,52,16)" fg:x="1804" fg:w="97"/><text x="49.6747%" y="399.50">in..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (97 samples, 2.66%)</title><rect x="49.4247%" y="373" width="2.6575%" height="15" fill="rgb(212,155,18)" fg:x="1804" fg:w="97"/><text x="49.6747%" y="383.50">in..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (94 samples, 2.58%)</title><rect x="49.5068%" y="357" width="2.5753%" height="15" fill="rgb(242,21,14)" fg:x="1807" fg:w="94"/><text x="49.7568%" y="367.50">in..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (79 samples, 2.16%)</title><rect x="49.9178%" y="341" width="2.1644%" height="15" fill="rgb(222,19,48)" fg:x="1822" fg:w="79"/><text x="50.1678%" y="351.50">i..</text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (49 samples, 1.34%)</title><rect x="50.7397%" y="325" width="1.3425%" height="15" fill="rgb(232,45,27)" fg:x="1852" fg:w="49"/><text x="50.9897%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (12 samples, 0.33%)</title><rect x="51.7534%" y="309" width="0.3288%" height="15" fill="rgb(249,103,42)" fg:x="1889" fg:w="12"/><text x="52.0034%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (11 samples, 0.30%)</title><rect x="51.7808%" y="293" width="0.3014%" height="15" fill="rgb(246,81,33)" fg:x="1890" fg:w="11"/><text x="52.0308%" y="303.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (124 samples, 3.40%)</title><rect x="52.0822%" y="389" width="3.3973%" height="15" fill="rgb(252,33,42)" fg:x="1901" fg:w="124"/><text x="52.3322%" y="399.50">sim..</text></g><g><title>__rdl_alloc (5 samples, 0.14%)</title><rect x="56.4932%" y="357" width="0.1370%" height="15" fill="rgb(209,212,41)" fg:x="2062" fg:w="5"/><text x="56.7432%" y="367.50"></text></g><g><title>__rust_alloc (10 samples, 0.27%)</title><rect x="56.6301%" y="357" width="0.2740%" height="15" fill="rgb(207,154,6)" fg:x="2067" fg:w="10"/><text x="56.8801%" y="367.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.03%)</title><rect x="56.9041%" y="357" width="0.0274%" height="15" fill="rgb(223,64,47)" fg:x="2077" fg:w="1"/><text x="57.1541%" y="367.50"></text></g><g><title>[libc.so.6] (13 samples, 0.36%)</title><rect x="59.4521%" y="325" width="0.3562%" height="15" fill="rgb(211,161,38)" fg:x="2170" fg:w="13"/><text x="59.7021%" y="335.50"></text></g><g><title>alloc::alloc::alloc (129 samples, 3.53%)</title><rect x="56.3014%" y="373" width="3.5342%" height="15" fill="rgb(219,138,40)" fg:x="2055" fg:w="129"/><text x="56.5514%" y="383.50">all..</text></g><g><title>malloc (106 samples, 2.90%)</title><rect x="56.9315%" y="357" width="2.9041%" height="15" fill="rgb(241,228,46)" fg:x="2078" fg:w="106"/><text x="57.1815%" y="367.50">ma..</text></g><g><title>[libc.so.6] (83 samples, 2.27%)</title><rect x="57.5616%" y="341" width="2.2740%" height="15" fill="rgb(223,209,38)" fg:x="2101" fg:w="83"/><text x="57.8116%" y="351.50">[..</text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="59.8082%" y="325" width="0.0274%" height="15" fill="rgb(236,164,45)" fg:x="2183" fg:w="1"/><text x="60.0582%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="59.8082%" y="309" width="0.0274%" height="15" fill="rgb(231,15,5)" fg:x="2183" fg:w="1"/><text x="60.0582%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="59.8356%" y="373" width="0.0274%" height="15" fill="rgb(252,35,15)" fg:x="2184" fg:w="1"/><text x="60.0856%" y="383.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_to_scope (398 samples, 10.90%)</title><rect x="49.0685%" y="437" width="10.9041%" height="15" fill="rgb(248,181,18)" fg:x="1791" fg:w="398"/><text x="49.3185%" y="447.50">simple_lisp::int..</text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (397 samples, 10.88%)</title><rect x="49.0959%" y="421" width="10.8767%" height="15" fill="rgb(233,39,42)" fg:x="1792" fg:w="397"/><text x="49.3459%" y="431.50">simple_lisp::int..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (395 samples, 10.82%)</title><rect x="49.1507%" y="405" width="10.8219%" height="15" fill="rgb(238,110,33)" fg:x="1794" fg:w="395"/><text x="49.4007%" y="415.50">simple_lisp::int..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (164 samples, 4.49%)</title><rect x="55.4795%" y="389" width="4.4932%" height="15" fill="rgb(233,195,10)" fg:x="2025" fg:w="164"/><text x="55.7295%" y="399.50">simpl..</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (4 samples, 0.11%)</title><rect x="59.8630%" y="373" width="0.1096%" height="15" fill="rgb(254,105,3)" fg:x="2185" fg:w="4"/><text x="60.1130%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.11%)</title><rect x="59.8630%" y="357" width="0.1096%" height="15" fill="rgb(221,225,9)" fg:x="2185" fg:w="4"/><text x="60.1130%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.11%)</title><rect x="59.8630%" y="341" width="0.1096%" height="15" fill="rgb(224,227,45)" fg:x="2185" fg:w="4"/><text x="60.1130%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (4 samples, 0.11%)</title><rect x="59.8630%" y="325" width="0.1096%" height="15" fill="rgb(229,198,43)" fg:x="2185" fg:w="4"/><text x="60.1130%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (4 samples, 0.11%)</title><rect x="59.8630%" y="309" width="0.1096%" height="15" fill="rgb(206,209,35)" fg:x="2185" fg:w="4"/><text x="60.1130%" y="319.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (4 samples, 0.11%)</title><rect x="59.8630%" y="293" width="0.1096%" height="15" fill="rgb(245,195,53)" fg:x="2185" fg:w="4"/><text x="60.1130%" y="303.50"></text></g><g><title>core::cell::BorrowRefMut::new (4 samples, 0.11%)</title><rect x="59.8630%" y="277" width="0.1096%" height="15" fill="rgb(240,92,26)" fg:x="2185" fg:w="4"/><text x="60.1130%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.03%)</title><rect x="60.1644%" y="421" width="0.0274%" height="15" fill="rgb(207,40,23)" fg:x="2196" fg:w="1"/><text x="60.4144%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="60.1644%" y="405" width="0.0274%" height="15" fill="rgb(223,111,35)" fg:x="2196" fg:w="1"/><text x="60.4144%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="60.1644%" y="389" width="0.0274%" height="15" fill="rgb(229,147,28)" fg:x="2196" fg:w="1"/><text x="60.4144%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (2 samples, 0.05%)</title><rect x="60.1918%" y="421" width="0.0548%" height="15" fill="rgb(211,29,28)" fg:x="2197" fg:w="2"/><text x="60.4418%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="60.1918%" y="405" width="0.0548%" height="15" fill="rgb(228,72,33)" fg:x="2197" fg:w="2"/><text x="60.4418%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (2 samples, 0.05%)</title><rect x="60.1918%" y="389" width="0.0548%" height="15" fill="rgb(205,214,31)" fg:x="2197" fg:w="2"/><text x="60.4418%" y="399.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="60.1918%" y="373" width="0.0548%" height="15" fill="rgb(224,111,15)" fg:x="2197" fg:w="2"/><text x="60.4418%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (2 samples, 0.05%)</title><rect x="60.1918%" y="357" width="0.0548%" height="15" fill="rgb(253,21,26)" fg:x="2197" fg:w="2"/><text x="60.4418%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.05%)</title><rect x="60.1918%" y="341" width="0.0548%" height="15" fill="rgb(245,139,43)" fg:x="2197" fg:w="2"/><text x="60.4418%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.05%)</title><rect x="60.1918%" y="325" width="0.0548%" height="15" fill="rgb(252,170,7)" fg:x="2197" fg:w="2"/><text x="60.4418%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.05%)</title><rect x="60.1918%" y="309" width="0.0548%" height="15" fill="rgb(231,118,14)" fg:x="2197" fg:w="2"/><text x="60.4418%" y="319.50"></text></g><g><title>cfree (2 samples, 0.05%)</title><rect x="60.1918%" y="293" width="0.0548%" height="15" fill="rgb(238,83,0)" fg:x="2197" fg:w="2"/><text x="60.4418%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (6 samples, 0.16%)</title><rect x="60.5205%" y="309" width="0.1644%" height="15" fill="rgb(221,39,39)" fg:x="2209" fg:w="6"/><text x="60.7705%" y="319.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (10 samples, 0.27%)</title><rect x="60.5205%" y="325" width="0.2740%" height="15" fill="rgb(222,119,46)" fg:x="2209" fg:w="10"/><text x="60.7705%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.11%)</title><rect x="60.6849%" y="309" width="0.1096%" height="15" fill="rgb(222,165,49)" fg:x="2215" fg:w="4"/><text x="60.9349%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="60.8493%" y="277" width="0.0274%" height="15" fill="rgb(219,113,52)" fg:x="2221" fg:w="1"/><text x="61.0993%" y="287.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="60.8493%" y="261" width="0.0274%" height="15" fill="rgb(214,7,15)" fg:x="2221" fg:w="1"/><text x="61.0993%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (1 samples, 0.03%)</title><rect x="60.8767%" y="277" width="0.0274%" height="15" fill="rgb(235,32,4)" fg:x="2222" fg:w="1"/><text x="61.1267%" y="287.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="60.8767%" y="261" width="0.0274%" height="15" fill="rgb(238,90,54)" fg:x="2222" fg:w="1"/><text x="61.1267%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (14 samples, 0.38%)</title><rect x="60.9041%" y="277" width="0.3836%" height="15" fill="rgb(213,208,19)" fg:x="2223" fg:w="14"/><text x="61.1541%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (20 samples, 0.55%)</title><rect x="60.7945%" y="309" width="0.5479%" height="15" fill="rgb(233,156,4)" fg:x="2219" fg:w="20"/><text x="61.0445%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (20 samples, 0.55%)</title><rect x="60.7945%" y="293" width="0.5479%" height="15" fill="rgb(207,194,5)" fg:x="2219" fg:w="20"/><text x="61.0445%" y="303.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (2 samples, 0.05%)</title><rect x="61.2877%" y="277" width="0.0548%" height="15" fill="rgb(206,111,30)" fg:x="2237" fg:w="2"/><text x="61.5377%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.05%)</title><rect x="61.2877%" y="261" width="0.0548%" height="15" fill="rgb(243,70,54)" fg:x="2237" fg:w="2"/><text x="61.5377%" y="271.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (42 samples, 1.15%)</title><rect x="60.4110%" y="389" width="1.1507%" height="15" fill="rgb(242,28,8)" fg:x="2205" fg:w="42"/><text x="60.6610%" y="399.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (42 samples, 1.15%)</title><rect x="60.4110%" y="373" width="1.1507%" height="15" fill="rgb(219,106,18)" fg:x="2205" fg:w="42"/><text x="60.6610%" y="383.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (42 samples, 1.15%)</title><rect x="60.4110%" y="357" width="1.1507%" height="15" fill="rgb(244,222,10)" fg:x="2205" fg:w="42"/><text x="60.6610%" y="367.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (38 samples, 1.04%)</title><rect x="60.5205%" y="341" width="1.0411%" height="15" fill="rgb(236,179,52)" fg:x="2209" fg:w="38"/><text x="60.7705%" y="351.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (28 samples, 0.77%)</title><rect x="60.7945%" y="325" width="0.7671%" height="15" fill="rgb(213,23,39)" fg:x="2219" fg:w="28"/><text x="61.0445%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (8 samples, 0.22%)</title><rect x="61.3425%" y="309" width="0.2192%" height="15" fill="rgb(238,48,10)" fg:x="2239" fg:w="8"/><text x="61.5925%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (8 samples, 0.22%)</title><rect x="61.3425%" y="293" width="0.2192%" height="15" fill="rgb(251,196,23)" fg:x="2239" fg:w="8"/><text x="61.5925%" y="303.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (83 samples, 2.27%)</title><rect x="61.5616%" y="389" width="2.2740%" height="15" fill="rgb(250,152,24)" fg:x="2247" fg:w="83"/><text x="61.8116%" y="399.50">s..</text></g><g><title>__rdl_alloc (11 samples, 0.30%)</title><rect x="64.4658%" y="357" width="0.3014%" height="15" fill="rgb(209,150,17)" fg:x="2353" fg:w="11"/><text x="64.7158%" y="367.50"></text></g><g><title>__rust_alloc (5 samples, 0.14%)</title><rect x="64.7671%" y="357" width="0.1370%" height="15" fill="rgb(234,202,34)" fg:x="2364" fg:w="5"/><text x="65.0171%" y="367.50"></text></g><g><title>[libc.so.6] (12 samples, 0.33%)</title><rect x="66.6849%" y="325" width="0.3288%" height="15" fill="rgb(253,148,53)" fg:x="2434" fg:w="12"/><text x="66.9349%" y="335.50"></text></g><g><title>alloc::alloc::alloc (100 samples, 2.74%)</title><rect x="64.3288%" y="373" width="2.7397%" height="15" fill="rgb(218,129,16)" fg:x="2348" fg:w="100"/><text x="64.5788%" y="383.50">al..</text></g><g><title>malloc (79 samples, 2.16%)</title><rect x="64.9041%" y="357" width="2.1644%" height="15" fill="rgb(216,85,19)" fg:x="2369" fg:w="79"/><text x="65.1541%" y="367.50">m..</text></g><g><title>[libc.so.6] (57 samples, 1.56%)</title><rect x="65.5068%" y="341" width="1.5616%" height="15" fill="rgb(235,228,7)" fg:x="2391" fg:w="57"/><text x="65.7568%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="67.0137%" y="325" width="0.0548%" height="15" fill="rgb(245,175,0)" fg:x="2446" fg:w="2"/><text x="67.2637%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="67.0411%" y="309" width="0.0274%" height="15" fill="rgb(208,168,36)" fg:x="2447" fg:w="1"/><text x="67.2911%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="67.0685%" y="373" width="0.0274%" height="15" fill="rgb(246,171,24)" fg:x="2448" fg:w="1"/><text x="67.3185%" y="383.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (251 samples, 6.88%)</title><rect x="60.2466%" y="421" width="6.8767%" height="15" fill="rgb(215,142,24)" fg:x="2199" fg:w="251"/><text x="60.4966%" y="431.50">simple_li..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (251 samples, 6.88%)</title><rect x="60.2466%" y="405" width="6.8767%" height="15" fill="rgb(250,187,7)" fg:x="2199" fg:w="251"/><text x="60.4966%" y="415.50">simple_li..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (120 samples, 3.29%)</title><rect x="63.8356%" y="389" width="3.2877%" height="15" fill="rgb(228,66,33)" fg:x="2330" fg:w="120"/><text x="64.0856%" y="399.50">sim..</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (1 samples, 0.03%)</title><rect x="67.0959%" y="373" width="0.0274%" height="15" fill="rgb(234,215,21)" fg:x="2449" fg:w="1"/><text x="67.3459%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.03%)</title><rect x="67.0959%" y="357" width="0.0274%" height="15" fill="rgb(222,191,20)" fg:x="2449" fg:w="1"/><text x="67.3459%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.03%)</title><rect x="67.0959%" y="341" width="0.0274%" height="15" fill="rgb(245,79,54)" fg:x="2449" fg:w="1"/><text x="67.3459%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (1 samples, 0.03%)</title><rect x="67.0959%" y="325" width="0.0274%" height="15" fill="rgb(240,10,37)" fg:x="2449" fg:w="1"/><text x="67.3459%" y="335.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new::_{{closure}} (1 samples, 0.03%)</title><rect x="67.0959%" y="309" width="0.0274%" height="15" fill="rgb(214,192,32)" fg:x="2449" fg:w="1"/><text x="67.3459%" y="319.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (1 samples, 0.03%)</title><rect x="67.2877%" y="389" width="0.0274%" height="15" fill="rgb(209,36,54)" fg:x="2456" fg:w="1"/><text x="67.5377%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.03%)</title><rect x="67.2877%" y="373" width="0.0274%" height="15" fill="rgb(220,10,11)" fg:x="2456" fg:w="1"/><text x="67.5377%" y="383.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (5 samples, 0.14%)</title><rect x="67.3151%" y="389" width="0.1370%" height="15" fill="rgb(221,106,17)" fg:x="2457" fg:w="5"/><text x="67.5651%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (5 samples, 0.14%)</title><rect x="67.3151%" y="373" width="0.1370%" height="15" fill="rgb(251,142,44)" fg:x="2457" fg:w="5"/><text x="67.5651%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5 samples, 0.14%)</title><rect x="67.3151%" y="357" width="0.1370%" height="15" fill="rgb(238,13,15)" fg:x="2457" fg:w="5"/><text x="67.5651%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.14%)</title><rect x="67.3151%" y="341" width="0.1370%" height="15" fill="rgb(208,107,27)" fg:x="2457" fg:w="5"/><text x="67.5651%" y="351.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (3 samples, 0.08%)</title><rect x="67.4521%" y="389" width="0.0822%" height="15" fill="rgb(205,136,37)" fg:x="2462" fg:w="3"/><text x="67.7021%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.08%)</title><rect x="67.4521%" y="373" width="0.0822%" height="15" fill="rgb(250,205,27)" fg:x="2462" fg:w="3"/><text x="67.7021%" y="383.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (8 samples, 0.22%)</title><rect x="67.5342%" y="389" width="0.2192%" height="15" fill="rgb(210,80,43)" fg:x="2465" fg:w="8"/><text x="67.7842%" y="399.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (8 samples, 0.22%)</title><rect x="67.5342%" y="373" width="0.2192%" height="15" fill="rgb(247,160,36)" fg:x="2465" fg:w="8"/><text x="67.7842%" y="383.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (8 samples, 0.22%)</title><rect x="67.5342%" y="357" width="0.2192%" height="15" fill="rgb(234,13,49)" fg:x="2465" fg:w="8"/><text x="67.7842%" y="367.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (18 samples, 0.49%)</title><rect x="67.7534%" y="389" width="0.4932%" height="15" fill="rgb(234,122,0)" fg:x="2473" fg:w="18"/><text x="68.0034%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (18 samples, 0.49%)</title><rect x="67.7534%" y="373" width="0.4932%" height="15" fill="rgb(207,146,38)" fg:x="2473" fg:w="18"/><text x="68.0034%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (18 samples, 0.49%)</title><rect x="67.7534%" y="357" width="0.4932%" height="15" fill="rgb(207,177,25)" fg:x="2473" fg:w="18"/><text x="68.0034%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (17 samples, 0.47%)</title><rect x="67.7808%" y="341" width="0.4658%" height="15" fill="rgb(211,178,42)" fg:x="2474" fg:w="17"/><text x="68.0308%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 0.19%)</title><rect x="68.0548%" y="325" width="0.1918%" height="15" fill="rgb(230,69,54)" fg:x="2484" fg:w="7"/><text x="68.3048%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.19%)</title><rect x="68.0548%" y="309" width="0.1918%" height="15" fill="rgb(214,135,41)" fg:x="2484" fg:w="7"/><text x="68.3048%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.33%)</title><rect x="68.4384%" y="277" width="0.3288%" height="15" fill="rgb(237,67,25)" fg:x="2498" fg:w="12"/><text x="68.6884%" y="287.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.05%)</title><rect x="68.7671%" y="277" width="0.0548%" height="15" fill="rgb(222,189,50)" fg:x="2510" fg:w="2"/><text x="69.0171%" y="287.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (28 samples, 0.77%)</title><rect x="68.2466%" y="389" width="0.7671%" height="15" fill="rgb(245,148,34)" fg:x="2491" fg:w="28"/><text x="68.4966%" y="399.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (28 samples, 0.77%)</title><rect x="68.2466%" y="373" width="0.7671%" height="15" fill="rgb(222,29,6)" fg:x="2491" fg:w="28"/><text x="68.4966%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (28 samples, 0.77%)</title><rect x="68.2466%" y="357" width="0.7671%" height="15" fill="rgb(221,189,43)" fg:x="2491" fg:w="28"/><text x="68.4966%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (28 samples, 0.77%)</title><rect x="68.2466%" y="341" width="0.7671%" height="15" fill="rgb(207,36,27)" fg:x="2491" fg:w="28"/><text x="68.4966%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (28 samples, 0.77%)</title><rect x="68.2466%" y="325" width="0.7671%" height="15" fill="rgb(217,90,24)" fg:x="2491" fg:w="28"/><text x="68.4966%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (28 samples, 0.77%)</title><rect x="68.2466%" y="309" width="0.7671%" height="15" fill="rgb(224,66,35)" fg:x="2491" fg:w="28"/><text x="68.4966%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (28 samples, 0.77%)</title><rect x="68.2466%" y="293" width="0.7671%" height="15" fill="rgb(221,13,50)" fg:x="2491" fg:w="28"/><text x="68.4966%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 0.19%)</title><rect x="68.8219%" y="277" width="0.1918%" height="15" fill="rgb(236,68,49)" fg:x="2512" fg:w="7"/><text x="69.0719%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.19%)</title><rect x="68.8219%" y="261" width="0.1918%" height="15" fill="rgb(229,146,28)" fg:x="2512" fg:w="7"/><text x="69.0719%" y="271.50"></text></g><g><title>core::mem::swap (1 samples, 0.03%)</title><rect x="69.2603%" y="261" width="0.0274%" height="15" fill="rgb(225,31,38)" fg:x="2528" fg:w="1"/><text x="69.5103%" y="271.50"></text></g><g><title>core::mem::swap_simple (1 samples, 0.03%)</title><rect x="69.2603%" y="245" width="0.0274%" height="15" fill="rgb(250,208,3)" fg:x="2528" fg:w="1"/><text x="69.5103%" y="255.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="69.2603%" y="229" width="0.0274%" height="15" fill="rgb(246,54,23)" fg:x="2528" fg:w="1"/><text x="69.5103%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.03%)</title><rect x="69.2877%" y="261" width="0.0274%" height="15" fill="rgb(243,76,11)" fg:x="2529" fg:w="1"/><text x="69.5377%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 0.03%)</title><rect x="69.2877%" y="245" width="0.0274%" height="15" fill="rgb(245,21,50)" fg:x="2529" fg:w="1"/><text x="69.5377%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.03%)</title><rect x="69.2877%" y="229" width="0.0274%" height="15" fill="rgb(228,9,43)" fg:x="2529" fg:w="1"/><text x="69.5377%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (6 samples, 0.16%)</title><rect x="69.3151%" y="229" width="0.1644%" height="15" fill="rgb(208,100,47)" fg:x="2530" fg:w="6"/><text x="69.5651%" y="239.50"></text></g><g><title>core::intrinsics::write_bytes (6 samples, 0.16%)</title><rect x="69.3151%" y="213" width="0.1644%" height="15" fill="rgb(232,26,8)" fg:x="2530" fg:w="6"/><text x="69.5651%" y="223.50"></text></g><g><title>[libc.so.6] (5 samples, 0.14%)</title><rect x="69.3425%" y="197" width="0.1370%" height="15" fill="rgb(216,166,38)" fg:x="2531" fg:w="5"/><text x="69.5925%" y="207.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="69.5616%" y="149" width="0.0274%" height="15" fill="rgb(251,202,51)" fg:x="2539" fg:w="1"/><text x="69.8116%" y="159.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="69.5890%" y="149" width="0.0274%" height="15" fill="rgb(254,216,34)" fg:x="2540" fg:w="1"/><text x="69.8390%" y="159.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (18 samples, 0.49%)</title><rect x="69.4795%" y="213" width="0.4932%" height="15" fill="rgb(251,32,27)" fg:x="2536" fg:w="18"/><text x="69.7295%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.49%)</title><rect x="69.4795%" y="197" width="0.4932%" height="15" fill="rgb(208,127,28)" fg:x="2536" fg:w="18"/><text x="69.7295%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.49%)</title><rect x="69.4795%" y="181" width="0.4932%" height="15" fill="rgb(224,137,22)" fg:x="2536" fg:w="18"/><text x="69.7295%" y="191.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.41%)</title><rect x="69.5616%" y="165" width="0.4110%" height="15" fill="rgb(254,70,32)" fg:x="2539" fg:w="15"/><text x="69.8116%" y="175.50"></text></g><g><title>malloc (13 samples, 0.36%)</title><rect x="69.6164%" y="149" width="0.3562%" height="15" fill="rgb(229,75,37)" fg:x="2541" fg:w="13"/><text x="69.8664%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="69.9452%" y="133" width="0.0274%" height="15" fill="rgb(252,64,23)" fg:x="2553" fg:w="1"/><text x="70.1952%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="69.9452%" y="117" width="0.0274%" height="15" fill="rgb(232,162,48)" fg:x="2553" fg:w="1"/><text x="70.1952%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (27 samples, 0.74%)</title><rect x="69.2603%" y="277" width="0.7397%" height="15" fill="rgb(246,160,12)" fg:x="2528" fg:w="27"/><text x="69.5103%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (25 samples, 0.68%)</title><rect x="69.3151%" y="261" width="0.6849%" height="15" fill="rgb(247,166,0)" fg:x="2530" fg:w="25"/><text x="69.5651%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (25 samples, 0.68%)</title><rect x="69.3151%" y="245" width="0.6849%" height="15" fill="rgb(249,219,21)" fg:x="2530" fg:w="25"/><text x="69.5651%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (19 samples, 0.52%)</title><rect x="69.4795%" y="229" width="0.5205%" height="15" fill="rgb(205,209,3)" fg:x="2536" fg:w="19"/><text x="69.7295%" y="239.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.03%)</title><rect x="69.9726%" y="213" width="0.0274%" height="15" fill="rgb(243,44,1)" fg:x="2554" fg:w="1"/><text x="70.2226%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (32 samples, 0.88%)</title><rect x="69.1781%" y="325" width="0.8767%" height="15" fill="rgb(206,159,16)" fg:x="2525" fg:w="32"/><text x="69.4281%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (32 samples, 0.88%)</title><rect x="69.1781%" y="309" width="0.8767%" height="15" fill="rgb(244,77,30)" fg:x="2525" fg:w="32"/><text x="69.4281%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (31 samples, 0.85%)</title><rect x="69.2055%" y="293" width="0.8493%" height="15" fill="rgb(218,69,12)" fg:x="2526" fg:w="31"/><text x="69.4555%" y="303.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (2 samples, 0.05%)</title><rect x="70.0000%" y="277" width="0.0548%" height="15" fill="rgb(212,87,7)" fg:x="2555" fg:w="2"/><text x="70.2500%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.19%)</title><rect x="70.0548%" y="309" width="0.1918%" height="15" fill="rgb(245,114,25)" fg:x="2557" fg:w="7"/><text x="70.3048%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (2 samples, 0.05%)</title><rect x="70.2466%" y="309" width="0.0548%" height="15" fill="rgb(210,61,42)" fg:x="2564" fg:w="2"/><text x="70.4966%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (2 samples, 0.05%)</title><rect x="70.2466%" y="293" width="0.0548%" height="15" fill="rgb(211,52,33)" fg:x="2564" fg:w="2"/><text x="70.4966%" y="303.50"></text></g><g><title>hashbrown::raw::is_full (2 samples, 0.05%)</title><rect x="70.2466%" y="277" width="0.0548%" height="15" fill="rgb(234,58,33)" fg:x="2564" fg:w="2"/><text x="70.4966%" y="287.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.08%)</title><rect x="70.3014%" y="309" width="0.0822%" height="15" fill="rgb(220,115,36)" fg:x="2566" fg:w="3"/><text x="70.5514%" y="319.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::set_func_args (443 samples, 12.14%)</title><rect x="59.9726%" y="437" width="12.1370%" height="15" fill="rgb(243,153,54)" fg:x="2189" fg:w="443"/><text x="60.2226%" y="447.50">simple_lisp::inter..</text></g><g><title>simple_lisp::interpreter::Interpreter::define_var (182 samples, 4.99%)</title><rect x="67.1233%" y="421" width="4.9863%" height="15" fill="rgb(251,47,18)" fg:x="2450" fg:w="182"/><text x="67.3733%" y="431.50">simple..</text></g><g><title>simple_lisp::interpreter::Env::insert (177 samples, 4.85%)</title><rect x="67.2603%" y="405" width="4.8493%" height="15" fill="rgb(242,102,42)" fg:x="2455" fg:w="177"/><text x="67.5103%" y="415.50">simple..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (113 samples, 3.10%)</title><rect x="69.0137%" y="389" width="3.0959%" height="15" fill="rgb(234,31,38)" fg:x="2519" fg:w="113"/><text x="69.2637%" y="399.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (113 samples, 3.10%)</title><rect x="69.0137%" y="373" width="3.0959%" height="15" fill="rgb(221,117,51)" fg:x="2519" fg:w="113"/><text x="69.2637%" y="383.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (112 samples, 3.07%)</title><rect x="69.0411%" y="357" width="3.0685%" height="15" fill="rgb(212,20,18)" fg:x="2520" fg:w="112"/><text x="69.2911%" y="367.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (111 samples, 3.04%)</title><rect x="69.0685%" y="341" width="3.0411%" height="15" fill="rgb(245,133,36)" fg:x="2521" fg:w="111"/><text x="69.3185%" y="351.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (75 samples, 2.05%)</title><rect x="70.0548%" y="325" width="2.0548%" height="15" fill="rgb(212,6,19)" fg:x="2557" fg:w="75"/><text x="70.3048%" y="335.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (63 samples, 1.73%)</title><rect x="70.3836%" y="309" width="1.7260%" height="15" fill="rgb(218,1,36)" fg:x="2569" fg:w="63"/><text x="70.6336%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (63 samples, 1.73%)</title><rect x="70.3836%" y="293" width="1.7260%" height="15" fill="rgb(246,84,54)" fg:x="2569" fg:w="63"/><text x="70.6336%" y="303.50"></text></g><g><title>simple_lisp::interpreter::ast::FnSignature::match_arg_count (13 samples, 0.36%)</title><rect x="72.1096%" y="437" width="0.3562%" height="15" fill="rgb(242,110,6)" fg:x="2632" fg:w="13"/><text x="72.3596%" y="447.50"></text></g><g><title>&lt;indexmap::map::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="72.4384%" y="421" width="0.0274%" height="15" fill="rgb(214,47,5)" fg:x="2644" fg:w="1"/><text x="72.6884%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="72.4384%" y="405" width="0.0274%" height="15" fill="rgb(218,159,25)" fg:x="2644" fg:w="1"/><text x="72.6884%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (5 samples, 0.14%)</title><rect x="72.4658%" y="421" width="0.1370%" height="15" fill="rgb(215,211,28)" fg:x="2645" fg:w="5"/><text x="72.7158%" y="431.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as indexmap::Entries&gt;::as_entries (3 samples, 0.08%)</title><rect x="72.7123%" y="389" width="0.0822%" height="15" fill="rgb(238,59,32)" fg:x="2654" fg:w="3"/><text x="72.9623%" y="399.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as indexmap::Entries&gt;::as_entries (3 samples, 0.08%)</title><rect x="72.7123%" y="373" width="0.0822%" height="15" fill="rgb(226,82,3)" fg:x="2654" fg:w="3"/><text x="72.9623%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.08%)</title><rect x="72.7123%" y="357" width="0.0822%" height="15" fill="rgb(240,164,32)" fg:x="2654" fg:w="3"/><text x="72.9623%" y="367.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (3 samples, 0.08%)</title><rect x="72.7945%" y="389" width="0.0822%" height="15" fill="rgb(232,46,7)" fg:x="2657" fg:w="3"/><text x="73.0445%" y="399.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::InstructionId as core::hash::Hash&gt;::hash (3 samples, 0.08%)</title><rect x="72.7945%" y="373" width="0.0822%" height="15" fill="rgb(229,129,53)" fg:x="2657" fg:w="3"/><text x="73.0445%" y="383.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (1 samples, 0.03%)</title><rect x="72.8493%" y="357" width="0.0274%" height="15" fill="rgb(234,188,29)" fg:x="2659" fg:w="1"/><text x="73.0993%" y="367.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (1 samples, 0.03%)</title><rect x="72.8493%" y="341" width="0.0274%" height="15" fill="rgb(246,141,4)" fg:x="2659" fg:w="1"/><text x="73.0993%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (1 samples, 0.03%)</title><rect x="72.8493%" y="325" width="0.0274%" height="15" fill="rgb(229,23,39)" fg:x="2659" fg:w="1"/><text x="73.0993%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.08%)</title><rect x="72.8767%" y="373" width="0.0822%" height="15" fill="rgb(206,12,3)" fg:x="2660" fg:w="3"/><text x="73.1267%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.08%)</title><rect x="72.8767%" y="357" width="0.0822%" height="15" fill="rgb(252,226,20)" fg:x="2660" fg:w="3"/><text x="73.1267%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.08%)</title><rect x="72.8767%" y="341" width="0.0822%" height="15" fill="rgb(216,123,35)" fg:x="2660" fg:w="3"/><text x="73.1267%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.16%)</title><rect x="73.2603%" y="325" width="0.1644%" height="15" fill="rgb(212,68,40)" fg:x="2674" fg:w="6"/><text x="73.5103%" y="335.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (2 samples, 0.05%)</title><rect x="73.3699%" y="309" width="0.0548%" height="15" fill="rgb(254,125,32)" fg:x="2678" fg:w="2"/><text x="73.6199%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::_{{closure}} (21 samples, 0.58%)</title><rect x="73.4247%" y="325" width="0.5753%" height="15" fill="rgb(253,97,22)" fg:x="2680" fg:w="21"/><text x="73.6747%" y="335.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (17 samples, 0.47%)</title><rect x="73.5342%" y="309" width="0.4658%" height="15" fill="rgb(241,101,14)" fg:x="2684" fg:w="17"/><text x="73.7842%" y="319.50"></text></g><g><title>hashbrown::raw::inner::h2 (11 samples, 0.30%)</title><rect x="74.0000%" y="325" width="0.3014%" height="15" fill="rgb(238,103,29)" fg:x="2701" fg:w="11"/><text x="74.2500%" y="335.50"></text></g><g><title>simple_lisp::interpreter::ast::InstructionIter::jump (69 samples, 1.89%)</title><rect x="72.4658%" y="437" width="1.8904%" height="15" fill="rgb(233,195,47)" fg:x="2645" fg:w="69"/><text x="72.7158%" y="447.50">s..</text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::get_index_of (64 samples, 1.75%)</title><rect x="72.6027%" y="421" width="1.7534%" height="15" fill="rgb(246,218,30)" fg:x="2650" fg:w="64"/><text x="72.8527%" y="431.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (63 samples, 1.73%)</title><rect x="72.6301%" y="405" width="1.7260%" height="15" fill="rgb(219,145,47)" fg:x="2651" fg:w="63"/><text x="72.8801%" y="415.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (54 samples, 1.48%)</title><rect x="72.8767%" y="389" width="1.4795%" height="15" fill="rgb(243,12,26)" fg:x="2660" fg:w="54"/><text x="73.1267%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (51 samples, 1.40%)</title><rect x="72.9589%" y="373" width="1.3973%" height="15" fill="rgb(214,87,16)" fg:x="2663" fg:w="51"/><text x="73.2089%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (51 samples, 1.40%)</title><rect x="72.9589%" y="357" width="1.3973%" height="15" fill="rgb(208,99,42)" fg:x="2663" fg:w="51"/><text x="73.2089%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (51 samples, 1.40%)</title><rect x="72.9589%" y="341" width="1.3973%" height="15" fill="rgb(253,99,2)" fg:x="2663" fg:w="51"/><text x="73.2089%" y="351.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (2 samples, 0.05%)</title><rect x="74.3014%" y="325" width="0.0548%" height="15" fill="rgb(220,168,23)" fg:x="2712" fg:w="2"/><text x="74.5514%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.05%)</title><rect x="74.3014%" y="309" width="0.0548%" height="15" fill="rgb(242,38,24)" fg:x="2712" fg:w="2"/><text x="74.5514%" y="319.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="74.4384%" y="421" width="0.0274%" height="15" fill="rgb(225,182,9)" fg:x="2717" fg:w="1"/><text x="74.6884%" y="431.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="74.4384%" y="405" width="0.0274%" height="15" fill="rgb(243,178,37)" fg:x="2717" fg:w="1"/><text x="74.6884%" y="415.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::Data as core::clone::Clone&gt;::clone (5 samples, 0.14%)</title><rect x="74.4658%" y="405" width="0.1370%" height="15" fill="rgb(232,139,19)" fg:x="2718" fg:w="5"/><text x="74.7158%" y="415.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (2 samples, 0.05%)</title><rect x="74.7945%" y="309" width="0.0548%" height="15" fill="rgb(225,201,24)" fg:x="2730" fg:w="2"/><text x="75.0445%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.05%)</title><rect x="74.7945%" y="293" width="0.0548%" height="15" fill="rgb(221,47,46)" fg:x="2730" fg:w="2"/><text x="75.0445%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (2 samples, 0.05%)</title><rect x="74.8493%" y="277" width="0.0548%" height="15" fill="rgb(249,23,13)" fg:x="2732" fg:w="2"/><text x="75.0993%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="74.9041%" y="261" width="0.0274%" height="15" fill="rgb(219,9,5)" fg:x="2734" fg:w="1"/><text x="75.1541%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (1 samples, 0.03%)</title><rect x="74.9315%" y="261" width="0.0274%" height="15" fill="rgb(254,171,16)" fg:x="2735" fg:w="1"/><text x="75.1815%" y="271.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.03%)</title><rect x="74.9315%" y="245" width="0.0274%" height="15" fill="rgb(230,171,20)" fg:x="2735" fg:w="1"/><text x="75.1815%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (2 samples, 0.05%)</title><rect x="74.9589%" y="261" width="0.0548%" height="15" fill="rgb(210,71,41)" fg:x="2736" fg:w="2"/><text x="75.2089%" y="271.50"></text></g><g><title>hashbrown::raw::inner::h2 (2 samples, 0.05%)</title><rect x="75.0137%" y="261" width="0.0548%" height="15" fill="rgb(206,173,20)" fg:x="2738" fg:w="2"/><text x="75.2637%" y="271.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (19 samples, 0.52%)</title><rect x="74.6027%" y="373" width="0.5205%" height="15" fill="rgb(233,88,34)" fg:x="2723" fg:w="19"/><text x="74.8527%" y="383.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (19 samples, 0.52%)</title><rect x="74.6027%" y="357" width="0.5205%" height="15" fill="rgb(223,209,46)" fg:x="2723" fg:w="19"/><text x="74.8527%" y="367.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (19 samples, 0.52%)</title><rect x="74.6027%" y="341" width="0.5205%" height="15" fill="rgb(250,43,18)" fg:x="2723" fg:w="19"/><text x="74.8527%" y="351.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (12 samples, 0.33%)</title><rect x="74.7945%" y="325" width="0.3288%" height="15" fill="rgb(208,13,10)" fg:x="2730" fg:w="12"/><text x="75.0445%" y="335.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (10 samples, 0.27%)</title><rect x="74.8493%" y="309" width="0.2740%" height="15" fill="rgb(212,200,36)" fg:x="2732" fg:w="10"/><text x="75.0993%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (10 samples, 0.27%)</title><rect x="74.8493%" y="293" width="0.2740%" height="15" fill="rgb(225,90,30)" fg:x="2732" fg:w="10"/><text x="75.0993%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (8 samples, 0.22%)</title><rect x="74.9041%" y="277" width="0.2192%" height="15" fill="rgb(236,182,39)" fg:x="2734" fg:w="8"/><text x="75.1541%" y="287.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (2 samples, 0.05%)</title><rect x="75.0685%" y="261" width="0.0548%" height="15" fill="rgb(212,144,35)" fg:x="2740" fg:w="2"/><text x="75.3185%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.05%)</title><rect x="75.0685%" y="245" width="0.0548%" height="15" fill="rgb(228,63,44)" fg:x="2740" fg:w="2"/><text x="75.3185%" y="255.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (11 samples, 0.30%)</title><rect x="75.1233%" y="373" width="0.3014%" height="15" fill="rgb(228,109,6)" fg:x="2742" fg:w="11"/><text x="75.3733%" y="383.50"></text></g><g><title>__rust_alloc (4 samples, 0.11%)</title><rect x="75.4795%" y="341" width="0.1096%" height="15" fill="rgb(238,117,24)" fg:x="2755" fg:w="4"/><text x="75.7295%" y="351.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (47 samples, 1.29%)</title><rect x="74.6027%" y="405" width="1.2877%" height="15" fill="rgb(242,26,26)" fg:x="2723" fg:w="47"/><text x="74.8527%" y="415.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (47 samples, 1.29%)</title><rect x="74.6027%" y="389" width="1.2877%" height="15" fill="rgb(221,92,48)" fg:x="2723" fg:w="47"/><text x="74.8527%" y="399.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (17 samples, 0.47%)</title><rect x="75.4247%" y="373" width="0.4658%" height="15" fill="rgb(209,209,32)" fg:x="2753" fg:w="17"/><text x="75.6747%" y="383.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.41%)</title><rect x="75.4795%" y="357" width="0.4110%" height="15" fill="rgb(221,70,22)" fg:x="2755" fg:w="15"/><text x="75.7295%" y="367.50"></text></g><g><title>malloc (11 samples, 0.30%)</title><rect x="75.5890%" y="341" width="0.3014%" height="15" fill="rgb(248,145,5)" fg:x="2759" fg:w="11"/><text x="75.8390%" y="351.50"></text></g><g><title>[libc.so.6] (10 samples, 0.27%)</title><rect x="75.6164%" y="325" width="0.2740%" height="15" fill="rgb(226,116,26)" fg:x="2760" fg:w="10"/><text x="75.8664%" y="335.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="75.8356%" y="309" width="0.0548%" height="15" fill="rgb(244,5,17)" fg:x="2768" fg:w="2"/><text x="76.0856%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="75.8630%" y="293" width="0.0274%" height="15" fill="rgb(252,159,33)" fg:x="2769" fg:w="1"/><text x="76.1130%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="75.8630%" y="277" width="0.0274%" height="15" fill="rgb(206,71,0)" fg:x="2769" fg:w="1"/><text x="76.1130%" y="287.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clone_data (55 samples, 1.51%)</title><rect x="74.4658%" y="421" width="1.5068%" height="15" fill="rgb(233,118,54)" fg:x="2718" fg:w="55"/><text x="74.7158%" y="431.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (3 samples, 0.08%)</title><rect x="75.8904%" y="405" width="0.0822%" height="15" fill="rgb(234,83,48)" fg:x="2770" fg:w="3"/><text x="76.1404%" y="415.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (3 samples, 0.08%)</title><rect x="75.8904%" y="389" width="0.0822%" height="15" fill="rgb(228,3,54)" fg:x="2770" fg:w="3"/><text x="76.1404%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (3 samples, 0.08%)</title><rect x="75.8904%" y="373" width="0.0822%" height="15" fill="rgb(226,155,13)" fg:x="2770" fg:w="3"/><text x="76.1404%" y="383.50"></text></g><g><title>core::cell::BorrowRef::new (3 samples, 0.08%)</title><rect x="75.8904%" y="357" width="0.0822%" height="15" fill="rgb(241,28,37)" fg:x="2770" fg:w="3"/><text x="76.1404%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.05%)</title><rect x="75.9178%" y="341" width="0.0548%" height="15" fill="rgb(233,93,10)" fg:x="2771" fg:w="2"/><text x="76.1678%" y="351.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::add (60 samples, 1.64%)</title><rect x="74.3562%" y="437" width="1.6438%" height="15" fill="rgb(225,113,19)" fg:x="2714" fg:w="60"/><text x="74.6062%" y="447.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::do_the_thing_add (1 samples, 0.03%)</title><rect x="75.9726%" y="421" width="0.0274%" height="15" fill="rgb(241,2,18)" fg:x="2773" fg:w="1"/><text x="76.2226%" y="431.50"></text></g><g><title>&lt;i64 as core::ops::arith::AddAssign&lt;&amp;i64&gt;&gt;::add_assign (1 samples, 0.03%)</title><rect x="75.9726%" y="405" width="0.0274%" height="15" fill="rgb(228,207,21)" fg:x="2773" fg:w="1"/><text x="76.2226%" y="415.50"></text></g><g><title>&lt;i64 as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.03%)</title><rect x="75.9726%" y="389" width="0.0274%" height="15" fill="rgb(213,211,35)" fg:x="2773" fg:w="1"/><text x="76.2226%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.19%)</title><rect x="76.1370%" y="421" width="0.1918%" height="15" fill="rgb(209,83,10)" fg:x="2779" fg:w="7"/><text x="76.3870%" y="431.50"></text></g><g><title>__rust_dealloc (1 samples, 0.03%)</title><rect x="76.3288%" y="421" width="0.0274%" height="15" fill="rgb(209,164,1)" fg:x="2786" fg:w="1"/><text x="76.5788%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.05%)</title><rect x="76.3562%" y="421" width="0.0548%" height="15" fill="rgb(213,184,43)" fg:x="2787" fg:w="2"/><text x="76.6062%" y="431.50"></text></g><g><title>cfree (1 samples, 0.03%)</title><rect x="76.4110%" y="421" width="0.0274%" height="15" fill="rgb(231,61,34)" fg:x="2789" fg:w="1"/><text x="76.6610%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (3 samples, 0.08%)</title><rect x="76.4384%" y="421" width="0.0822%" height="15" fill="rgb(235,75,3)" fg:x="2790" fg:w="3"/><text x="76.6884%" y="431.50"></text></g><g><title>core::cmp::PartialEq::ne (3 samples, 0.08%)</title><rect x="76.4384%" y="405" width="0.0822%" height="15" fill="rgb(220,106,47)" fg:x="2790" fg:w="3"/><text x="76.6884%" y="415.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::Data as core::cmp::PartialEq&gt;::eq (2 samples, 0.05%)</title><rect x="76.4658%" y="389" width="0.0548%" height="15" fill="rgb(210,196,33)" fg:x="2791" fg:w="2"/><text x="76.7158%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.05%)</title><rect x="76.5205%" y="325" width="0.0548%" height="15" fill="rgb(229,154,42)" fg:x="2793" fg:w="2"/><text x="76.7705%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.05%)</title><rect x="76.5205%" y="309" width="0.0548%" height="15" fill="rgb(228,114,26)" fg:x="2793" fg:w="2"/><text x="76.7705%" y="319.50"></text></g><g><title>cfree (2 samples, 0.05%)</title><rect x="76.5205%" y="293" width="0.0548%" height="15" fill="rgb(208,144,1)" fg:x="2793" fg:w="2"/><text x="76.7705%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (3 samples, 0.08%)</title><rect x="76.5205%" y="421" width="0.0822%" height="15" fill="rgb(239,112,37)" fg:x="2793" fg:w="3"/><text x="76.7705%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.08%)</title><rect x="76.5205%" y="405" width="0.0822%" height="15" fill="rgb(210,96,50)" fg:x="2793" fg:w="3"/><text x="76.7705%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (3 samples, 0.08%)</title><rect x="76.5205%" y="389" width="0.0822%" height="15" fill="rgb(222,178,2)" fg:x="2793" fg:w="3"/><text x="76.7705%" y="399.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.08%)</title><rect x="76.5205%" y="373" width="0.0822%" height="15" fill="rgb(226,74,18)" fg:x="2793" fg:w="3"/><text x="76.7705%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (3 samples, 0.08%)</title><rect x="76.5205%" y="357" width="0.0822%" height="15" fill="rgb(225,67,54)" fg:x="2793" fg:w="3"/><text x="76.7705%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.08%)</title><rect x="76.5205%" y="341" width="0.0822%" height="15" fill="rgb(251,92,32)" fg:x="2793" fg:w="3"/><text x="76.7705%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.03%)</title><rect x="76.5753%" y="325" width="0.0274%" height="15" fill="rgb(228,149,22)" fg:x="2795" fg:w="1"/><text x="76.8253%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (1 samples, 0.03%)</title><rect x="76.5753%" y="309" width="0.0274%" height="15" fill="rgb(243,54,13)" fg:x="2795" fg:w="1"/><text x="76.8253%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (5 samples, 0.14%)</title><rect x="76.6849%" y="309" width="0.1370%" height="15" fill="rgb(243,180,28)" fg:x="2799" fg:w="5"/><text x="76.9349%" y="319.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (7 samples, 0.19%)</title><rect x="76.6849%" y="325" width="0.1918%" height="15" fill="rgb(208,167,24)" fg:x="2799" fg:w="7"/><text x="76.9349%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.05%)</title><rect x="76.8219%" y="309" width="0.0548%" height="15" fill="rgb(245,73,45)" fg:x="2804" fg:w="2"/><text x="77.0719%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="76.8767%" y="277" width="0.0548%" height="15" fill="rgb(237,203,48)" fg:x="2806" fg:w="2"/><text x="77.1267%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (3 samples, 0.08%)</title><rect x="76.9315%" y="277" width="0.0822%" height="15" fill="rgb(211,197,16)" fg:x="2808" fg:w="3"/><text x="77.1815%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (6 samples, 0.16%)</title><rect x="76.8767%" y="309" width="0.1644%" height="15" fill="rgb(243,99,51)" fg:x="2806" fg:w="6"/><text x="77.1267%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (6 samples, 0.16%)</title><rect x="76.8767%" y="293" width="0.1644%" height="15" fill="rgb(215,123,29)" fg:x="2806" fg:w="6"/><text x="77.1267%" y="303.50"></text></g><g><title>hashbrown::raw::inner::h2 (1 samples, 0.03%)</title><rect x="77.0137%" y="277" width="0.0274%" height="15" fill="rgb(239,186,37)" fg:x="2811" fg:w="1"/><text x="77.2637%" y="287.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (17 samples, 0.47%)</title><rect x="76.6301%" y="389" width="0.4658%" height="15" fill="rgb(252,136,39)" fg:x="2797" fg:w="17"/><text x="76.8801%" y="399.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (17 samples, 0.47%)</title><rect x="76.6301%" y="373" width="0.4658%" height="15" fill="rgb(223,213,32)" fg:x="2797" fg:w="17"/><text x="76.8801%" y="383.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (17 samples, 0.47%)</title><rect x="76.6301%" y="357" width="0.4658%" height="15" fill="rgb(233,115,5)" fg:x="2797" fg:w="17"/><text x="76.8801%" y="367.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (15 samples, 0.41%)</title><rect x="76.6849%" y="341" width="0.4110%" height="15" fill="rgb(207,226,44)" fg:x="2799" fg:w="15"/><text x="76.9349%" y="351.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (8 samples, 0.22%)</title><rect x="76.8767%" y="325" width="0.2192%" height="15" fill="rgb(208,126,0)" fg:x="2806" fg:w="8"/><text x="77.1267%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (2 samples, 0.05%)</title><rect x="77.0411%" y="309" width="0.0548%" height="15" fill="rgb(244,66,21)" fg:x="2812" fg:w="2"/><text x="77.2911%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (2 samples, 0.05%)</title><rect x="77.0411%" y="293" width="0.0548%" height="15" fill="rgb(222,97,12)" fg:x="2812" fg:w="2"/><text x="77.2911%" y="303.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (29 samples, 0.79%)</title><rect x="77.0959%" y="389" width="0.7945%" height="15" fill="rgb(219,213,19)" fg:x="2814" fg:w="29"/><text x="77.3459%" y="399.50"></text></g><g><title>__rdl_alloc (3 samples, 0.08%)</title><rect x="78.0000%" y="357" width="0.0822%" height="15" fill="rgb(252,169,30)" fg:x="2847" fg:w="3"/><text x="78.2500%" y="367.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (92 samples, 2.52%)</title><rect x="76.6027%" y="421" width="2.5205%" height="15" fill="rgb(206,32,51)" fg:x="2796" fg:w="92"/><text x="76.8527%" y="431.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (92 samples, 2.52%)</title><rect x="76.6027%" y="405" width="2.5205%" height="15" fill="rgb(250,172,42)" fg:x="2796" fg:w="92"/><text x="76.8527%" y="415.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (45 samples, 1.23%)</title><rect x="77.8904%" y="389" width="1.2329%" height="15" fill="rgb(209,34,43)" fg:x="2843" fg:w="45"/><text x="78.1404%" y="399.50"></text></g><g><title>alloc::alloc::alloc (41 samples, 1.12%)</title><rect x="78.0000%" y="373" width="1.1233%" height="15" fill="rgb(223,11,35)" fg:x="2847" fg:w="41"/><text x="78.2500%" y="383.50"></text></g><g><title>malloc (38 samples, 1.04%)</title><rect x="78.0822%" y="357" width="1.0411%" height="15" fill="rgb(251,219,26)" fg:x="2850" fg:w="38"/><text x="78.3322%" y="367.50"></text></g><g><title>[libc.so.6] (21 samples, 0.58%)</title><rect x="78.5479%" y="341" width="0.5753%" height="15" fill="rgb(231,119,3)" fg:x="2867" fg:w="21"/><text x="78.7979%" y="351.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="79.0411%" y="325" width="0.0822%" height="15" fill="rgb(216,97,11)" fg:x="2885" fg:w="3"/><text x="79.2911%" y="335.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::equal (118 samples, 3.23%)</title><rect x="76.0000%" y="437" width="3.2329%" height="15" fill="rgb(223,59,9)" fg:x="2774" fg:w="118"/><text x="76.2500%" y="447.50">sim..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (4 samples, 0.11%)</title><rect x="79.1233%" y="421" width="0.1096%" height="15" fill="rgb(233,93,31)" fg:x="2888" fg:w="4"/><text x="79.3733%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (4 samples, 0.11%)</title><rect x="79.1233%" y="405" width="0.1096%" height="15" fill="rgb(239,81,33)" fg:x="2888" fg:w="4"/><text x="79.3733%" y="415.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (4 samples, 0.11%)</title><rect x="79.1233%" y="389" width="0.1096%" height="15" fill="rgb(213,120,34)" fg:x="2888" fg:w="4"/><text x="79.3733%" y="399.50"></text></g><g><title>core::cell::BorrowRef::new (4 samples, 0.11%)</title><rect x="79.1233%" y="373" width="0.1096%" height="15" fill="rgb(243,49,53)" fg:x="2888" fg:w="4"/><text x="79.3733%" y="383.50"></text></g><g><title>core::cell::is_reading (4 samples, 0.11%)</title><rect x="79.1233%" y="357" width="0.1096%" height="15" fill="rgb(247,216,33)" fg:x="2888" fg:w="4"/><text x="79.3733%" y="367.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::less (1 samples, 0.03%)</title><rect x="79.2329%" y="437" width="0.0274%" height="15" fill="rgb(226,26,14)" fg:x="2892" fg:w="1"/><text x="79.4829%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.11%)</title><rect x="79.3425%" y="421" width="0.1096%" height="15" fill="rgb(215,49,53)" fg:x="2896" fg:w="4"/><text x="79.5925%" y="431.50"></text></g><g><title>__rust_dealloc (1 samples, 0.03%)</title><rect x="79.4521%" y="293" width="0.0274%" height="15" fill="rgb(245,162,40)" fg:x="2900" fg:w="1"/><text x="79.7021%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (5 samples, 0.14%)</title><rect x="79.4521%" y="421" width="0.1370%" height="15" fill="rgb(229,68,17)" fg:x="2900" fg:w="5"/><text x="79.7021%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.14%)</title><rect x="79.4521%" y="405" width="0.1370%" height="15" fill="rgb(213,182,10)" fg:x="2900" fg:w="5"/><text x="79.7021%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (5 samples, 0.14%)</title><rect x="79.4521%" y="389" width="0.1370%" height="15" fill="rgb(245,125,30)" fg:x="2900" fg:w="5"/><text x="79.7021%" y="399.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.14%)</title><rect x="79.4521%" y="373" width="0.1370%" height="15" fill="rgb(232,202,2)" fg:x="2900" fg:w="5"/><text x="79.7021%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (5 samples, 0.14%)</title><rect x="79.4521%" y="357" width="0.1370%" height="15" fill="rgb(237,140,51)" fg:x="2900" fg:w="5"/><text x="79.7021%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.14%)</title><rect x="79.4521%" y="341" width="0.1370%" height="15" fill="rgb(236,157,25)" fg:x="2900" fg:w="5"/><text x="79.7021%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.14%)</title><rect x="79.4521%" y="325" width="0.1370%" height="15" fill="rgb(219,209,0)" fg:x="2900" fg:w="5"/><text x="79.7021%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.14%)</title><rect x="79.4521%" y="309" width="0.1370%" height="15" fill="rgb(240,116,54)" fg:x="2900" fg:w="5"/><text x="79.7021%" y="319.50"></text></g><g><title>cfree (4 samples, 0.11%)</title><rect x="79.4795%" y="293" width="0.1096%" height="15" fill="rgb(216,10,36)" fg:x="2901" fg:w="4"/><text x="79.7295%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="79.5616%" y="277" width="0.0274%" height="15" fill="rgb(222,72,44)" fg:x="2904" fg:w="1"/><text x="79.8116%" y="287.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (6 samples, 0.16%)</title><rect x="79.8082%" y="325" width="0.1644%" height="15" fill="rgb(232,159,9)" fg:x="2913" fg:w="6"/><text x="80.0582%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.16%)</title><rect x="79.8082%" y="309" width="0.1644%" height="15" fill="rgb(210,39,32)" fg:x="2913" fg:w="6"/><text x="80.0582%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="79.9726%" y="293" width="0.0274%" height="15" fill="rgb(216,194,45)" fg:x="2919" fg:w="1"/><text x="80.2226%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (3 samples, 0.08%)</title><rect x="80.0000%" y="277" width="0.0822%" height="15" fill="rgb(218,18,35)" fg:x="2920" fg:w="3"/><text x="80.2500%" y="287.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (3 samples, 0.08%)</title><rect x="80.0000%" y="261" width="0.0822%" height="15" fill="rgb(207,83,51)" fg:x="2920" fg:w="3"/><text x="80.2500%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (2 samples, 0.05%)</title><rect x="80.0822%" y="277" width="0.0548%" height="15" fill="rgb(225,63,43)" fg:x="2923" fg:w="2"/><text x="80.3322%" y="287.50"></text></g><g><title>hashbrown::raw::inner::h2 (2 samples, 0.05%)</title><rect x="80.1370%" y="277" width="0.0548%" height="15" fill="rgb(207,57,36)" fg:x="2925" fg:w="2"/><text x="80.3870%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (9 samples, 0.25%)</title><rect x="79.9726%" y="309" width="0.2466%" height="15" fill="rgb(216,99,33)" fg:x="2919" fg:w="9"/><text x="80.2226%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (8 samples, 0.22%)</title><rect x="80.0000%" y="293" width="0.2192%" height="15" fill="rgb(225,42,16)" fg:x="2920" fg:w="8"/><text x="80.2500%" y="303.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="80.1918%" y="277" width="0.0274%" height="15" fill="rgb(220,201,45)" fg:x="2927" fg:w="1"/><text x="80.4418%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="80.1918%" y="261" width="0.0274%" height="15" fill="rgb(225,33,4)" fg:x="2927" fg:w="1"/><text x="80.4418%" y="271.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (24 samples, 0.66%)</title><rect x="79.5890%" y="389" width="0.6575%" height="15" fill="rgb(224,33,50)" fg:x="2905" fg:w="24"/><text x="79.8390%" y="399.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (24 samples, 0.66%)</title><rect x="79.5890%" y="373" width="0.6575%" height="15" fill="rgb(246,198,51)" fg:x="2905" fg:w="24"/><text x="79.8390%" y="383.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (24 samples, 0.66%)</title><rect x="79.5890%" y="357" width="0.6575%" height="15" fill="rgb(205,22,4)" fg:x="2905" fg:w="24"/><text x="79.8390%" y="367.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (16 samples, 0.44%)</title><rect x="79.8082%" y="341" width="0.4384%" height="15" fill="rgb(206,3,8)" fg:x="2913" fg:w="16"/><text x="80.0582%" y="351.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (10 samples, 0.27%)</title><rect x="79.9726%" y="325" width="0.2740%" height="15" fill="rgb(251,23,15)" fg:x="2919" fg:w="10"/><text x="80.2226%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.03%)</title><rect x="80.2192%" y="309" width="0.0274%" height="15" fill="rgb(252,88,28)" fg:x="2928" fg:w="1"/><text x="80.4692%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (1 samples, 0.03%)</title><rect x="80.2192%" y="293" width="0.0274%" height="15" fill="rgb(212,127,14)" fg:x="2928" fg:w="1"/><text x="80.4692%" y="303.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (15 samples, 0.41%)</title><rect x="80.2466%" y="389" width="0.4110%" height="15" fill="rgb(247,145,37)" fg:x="2929" fg:w="15"/><text x="80.4966%" y="399.50"></text></g><g><title>__rust_alloc (3 samples, 0.08%)</title><rect x="80.7397%" y="357" width="0.0822%" height="15" fill="rgb(209,117,53)" fg:x="2947" fg:w="3"/><text x="80.9897%" y="367.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (66 samples, 1.81%)</title><rect x="79.5890%" y="421" width="1.8082%" height="15" fill="rgb(212,90,42)" fg:x="2905" fg:w="66"/><text x="79.8390%" y="431.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (66 samples, 1.81%)</title><rect x="79.5890%" y="405" width="1.8082%" height="15" fill="rgb(218,164,37)" fg:x="2905" fg:w="66"/><text x="79.8390%" y="415.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (27 samples, 0.74%)</title><rect x="80.6575%" y="389" width="0.7397%" height="15" fill="rgb(246,65,34)" fg:x="2944" fg:w="27"/><text x="80.9075%" y="399.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.68%)</title><rect x="80.7123%" y="373" width="0.6849%" height="15" fill="rgb(231,100,33)" fg:x="2946" fg:w="25"/><text x="80.9623%" y="383.50"></text></g><g><title>malloc (21 samples, 0.58%)</title><rect x="80.8219%" y="357" width="0.5753%" height="15" fill="rgb(228,126,14)" fg:x="2950" fg:w="21"/><text x="81.0719%" y="367.50"></text></g><g><title>[libc.so.6] (13 samples, 0.36%)</title><rect x="81.0411%" y="341" width="0.3562%" height="15" fill="rgb(215,173,21)" fg:x="2958" fg:w="13"/><text x="81.2911%" y="351.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="81.3425%" y="325" width="0.0548%" height="15" fill="rgb(210,6,40)" fg:x="2969" fg:w="2"/><text x="81.5925%" y="335.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::less_equal (83 samples, 2.27%)</title><rect x="79.2603%" y="437" width="2.2740%" height="15" fill="rgb(212,48,18)" fg:x="2893" fg:w="83"/><text x="79.5103%" y="447.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (5 samples, 0.14%)</title><rect x="81.3973%" y="421" width="0.1370%" height="15" fill="rgb(230,214,11)" fg:x="2971" fg:w="5"/><text x="81.6473%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (5 samples, 0.14%)</title><rect x="81.3973%" y="405" width="0.1370%" height="15" fill="rgb(254,105,39)" fg:x="2971" fg:w="5"/><text x="81.6473%" y="415.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (5 samples, 0.14%)</title><rect x="81.3973%" y="389" width="0.1370%" height="15" fill="rgb(245,158,5)" fg:x="2971" fg:w="5"/><text x="81.6473%" y="399.50"></text></g><g><title>core::cell::BorrowRef::new (5 samples, 0.14%)</title><rect x="81.3973%" y="373" width="0.1370%" height="15" fill="rgb(249,208,11)" fg:x="2971" fg:w="5"/><text x="81.6473%" y="383.50"></text></g><g><title>core::cell::is_reading (5 samples, 0.14%)</title><rect x="81.3973%" y="357" width="0.1370%" height="15" fill="rgb(210,39,28)" fg:x="2971" fg:w="5"/><text x="81.6473%" y="367.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="81.8082%" y="421" width="0.0274%" height="15" fill="rgb(211,56,53)" fg:x="2986" fg:w="1"/><text x="82.0582%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="81.8082%" y="405" width="0.0274%" height="15" fill="rgb(226,201,30)" fg:x="2986" fg:w="1"/><text x="82.0582%" y="415.50"></text></g><g><title>cfree (3 samples, 0.08%)</title><rect x="81.8356%" y="421" width="0.0822%" height="15" fill="rgb(239,101,34)" fg:x="2987" fg:w="3"/><text x="82.0856%" y="431.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="81.8356%" y="405" width="0.0822%" height="15" fill="rgb(226,209,5)" fg:x="2987" fg:w="3"/><text x="82.0856%" y="415.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::Data as core::clone::Clone&gt;::clone (3 samples, 0.08%)</title><rect x="81.9178%" y="405" width="0.0822%" height="15" fill="rgb(250,105,47)" fg:x="2990" fg:w="3"/><text x="82.1678%" y="415.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (1 samples, 0.03%)</title><rect x="82.2192%" y="325" width="0.0274%" height="15" fill="rgb(230,72,3)" fg:x="3001" fg:w="1"/><text x="82.4692%" y="335.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::HashableDataRef as core::hash::Hash&gt;::hash (1 samples, 0.03%)</title><rect x="82.2192%" y="309" width="0.0274%" height="15" fill="rgb(232,218,39)" fg:x="3001" fg:w="1"/><text x="82.4692%" y="319.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (1 samples, 0.03%)</title><rect x="82.2192%" y="293" width="0.0274%" height="15" fill="rgb(248,166,6)" fg:x="3001" fg:w="1"/><text x="82.4692%" y="303.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (1 samples, 0.03%)</title><rect x="82.2192%" y="277" width="0.0274%" height="15" fill="rgb(247,89,20)" fg:x="3001" fg:w="1"/><text x="82.4692%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (1 samples, 0.03%)</title><rect x="82.2192%" y="261" width="0.0274%" height="15" fill="rgb(248,130,54)" fg:x="3001" fg:w="1"/><text x="82.4692%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.05%)</title><rect x="82.2466%" y="293" width="0.0548%" height="15" fill="rgb(234,196,4)" fg:x="3002" fg:w="2"/><text x="82.4966%" y="303.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (4 samples, 0.11%)</title><rect x="82.2466%" y="309" width="0.1096%" height="15" fill="rgb(250,143,31)" fg:x="3002" fg:w="4"/><text x="82.4966%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.05%)</title><rect x="82.3014%" y="293" width="0.0548%" height="15" fill="rgb(211,110,34)" fg:x="3004" fg:w="2"/><text x="82.5514%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (2 samples, 0.05%)</title><rect x="82.3562%" y="277" width="0.0548%" height="15" fill="rgb(215,124,48)" fg:x="3006" fg:w="2"/><text x="82.6062%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="82.4110%" y="261" width="0.0274%" height="15" fill="rgb(216,46,13)" fg:x="3008" fg:w="1"/><text x="82.6610%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (2 samples, 0.05%)</title><rect x="82.4384%" y="261" width="0.0548%" height="15" fill="rgb(205,184,25)" fg:x="3009" fg:w="2"/><text x="82.6884%" y="271.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (2 samples, 0.05%)</title><rect x="82.4384%" y="245" width="0.0548%" height="15" fill="rgb(228,1,10)" fg:x="3009" fg:w="2"/><text x="82.6884%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (4 samples, 0.11%)</title><rect x="82.4932%" y="261" width="0.1096%" height="15" fill="rgb(213,116,27)" fg:x="3011" fg:w="4"/><text x="82.7432%" y="271.50"></text></g><g><title>hashbrown::raw::inner::h2 (3 samples, 0.08%)</title><rect x="82.6027%" y="261" width="0.0822%" height="15" fill="rgb(241,95,50)" fg:x="3015" fg:w="3"/><text x="82.8527%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (14 samples, 0.38%)</title><rect x="82.3562%" y="293" width="0.3836%" height="15" fill="rgb(238,48,32)" fg:x="3006" fg:w="14"/><text x="82.6062%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (12 samples, 0.33%)</title><rect x="82.4110%" y="277" width="0.3288%" height="15" fill="rgb(235,113,49)" fg:x="3008" fg:w="12"/><text x="82.6610%" y="287.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (2 samples, 0.05%)</title><rect x="82.6849%" y="261" width="0.0548%" height="15" fill="rgb(205,127,43)" fg:x="3018" fg:w="2"/><text x="82.9349%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.05%)</title><rect x="82.6849%" y="245" width="0.0548%" height="15" fill="rgb(250,162,2)" fg:x="3018" fg:w="2"/><text x="82.9349%" y="255.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (27 samples, 0.74%)</title><rect x="82.0548%" y="373" width="0.7397%" height="15" fill="rgb(220,13,41)" fg:x="2995" fg:w="27"/><text x="82.3048%" y="383.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (27 samples, 0.74%)</title><rect x="82.0548%" y="357" width="0.7397%" height="15" fill="rgb(249,221,25)" fg:x="2995" fg:w="27"/><text x="82.3048%" y="367.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (26 samples, 0.71%)</title><rect x="82.0822%" y="341" width="0.7123%" height="15" fill="rgb(215,208,19)" fg:x="2996" fg:w="26"/><text x="82.3322%" y="351.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (20 samples, 0.55%)</title><rect x="82.2466%" y="325" width="0.5479%" height="15" fill="rgb(236,175,2)" fg:x="3002" fg:w="20"/><text x="82.4966%" y="335.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (16 samples, 0.44%)</title><rect x="82.3562%" y="309" width="0.4384%" height="15" fill="rgb(241,52,2)" fg:x="3006" fg:w="16"/><text x="82.6062%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (2 samples, 0.05%)</title><rect x="82.7397%" y="293" width="0.0548%" height="15" fill="rgb(248,140,14)" fg:x="3020" fg:w="2"/><text x="82.9897%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (2 samples, 0.05%)</title><rect x="82.7397%" y="277" width="0.0548%" height="15" fill="rgb(253,22,42)" fg:x="3020" fg:w="2"/><text x="82.9897%" y="287.50"></text></g><g><title>hashbrown::raw::inner::special_is_empty (1 samples, 0.03%)</title><rect x="82.7671%" y="261" width="0.0274%" height="15" fill="rgb(234,61,47)" fg:x="3021" fg:w="1"/><text x="83.0171%" y="271.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (27 samples, 0.74%)</title><rect x="82.7945%" y="373" width="0.7397%" height="15" fill="rgb(208,226,15)" fg:x="3022" fg:w="27"/><text x="83.0445%" y="383.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="83.6438%" y="341" width="0.0274%" height="15" fill="rgb(217,221,4)" fg:x="3053" fg:w="1"/><text x="83.8938%" y="351.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.49%)</title><rect x="83.6438%" y="357" width="0.4932%" height="15" fill="rgb(212,174,34)" fg:x="3053" fg:w="18"/><text x="83.8938%" y="367.50"></text></g><g><title>malloc (17 samples, 0.47%)</title><rect x="83.6712%" y="341" width="0.4658%" height="15" fill="rgb(253,83,4)" fg:x="3054" fg:w="17"/><text x="83.9212%" y="351.50"></text></g><g><title>[libc.so.6] (17 samples, 0.47%)</title><rect x="83.6712%" y="325" width="0.4658%" height="15" fill="rgb(250,195,49)" fg:x="3054" fg:w="17"/><text x="83.9212%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="84.1096%" y="309" width="0.0274%" height="15" fill="rgb(241,192,25)" fg:x="3070" fg:w="1"/><text x="84.3596%" y="319.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (79 samples, 2.16%)</title><rect x="82.0000%" y="405" width="2.1644%" height="15" fill="rgb(208,124,10)" fg:x="2993" fg:w="79"/><text x="82.2500%" y="415.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (79 samples, 2.16%)</title><rect x="82.0000%" y="389" width="2.1644%" height="15" fill="rgb(222,33,0)" fg:x="2993" fg:w="79"/><text x="82.2500%" y="399.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (23 samples, 0.63%)</title><rect x="83.5342%" y="373" width="0.6301%" height="15" fill="rgb(234,209,28)" fg:x="3049" fg:w="23"/><text x="83.7842%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (1 samples, 0.03%)</title><rect x="84.1370%" y="357" width="0.0274%" height="15" fill="rgb(224,11,23)" fg:x="3071" fg:w="1"/><text x="84.3870%" y="367.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.03%)</title><rect x="84.1370%" y="341" width="0.0274%" height="15" fill="rgb(232,99,1)" fg:x="3071" fg:w="1"/><text x="84.3870%" y="351.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.03%)</title><rect x="84.1370%" y="325" width="0.0274%" height="15" fill="rgb(237,95,45)" fg:x="3071" fg:w="1"/><text x="84.3870%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (1 samples, 0.03%)</title><rect x="84.1370%" y="309" width="0.0274%" height="15" fill="rgb(208,109,11)" fg:x="3071" fg:w="1"/><text x="84.3870%" y="319.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.03%)</title><rect x="84.1370%" y="293" width="0.0274%" height="15" fill="rgb(216,190,48)" fg:x="3071" fg:w="1"/><text x="84.3870%" y="303.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.03%)</title><rect x="84.1370%" y="277" width="0.0274%" height="15" fill="rgb(251,171,36)" fg:x="3071" fg:w="1"/><text x="84.3870%" y="287.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.03%)</title><rect x="84.1370%" y="261" width="0.0274%" height="15" fill="rgb(230,62,22)" fg:x="3071" fg:w="1"/><text x="84.3870%" y="271.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clone_data (87 samples, 2.38%)</title><rect x="81.9178%" y="421" width="2.3836%" height="15" fill="rgb(225,114,35)" fg:x="2990" fg:w="87"/><text x="82.1678%" y="431.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (5 samples, 0.14%)</title><rect x="84.1644%" y="405" width="0.1370%" height="15" fill="rgb(215,118,42)" fg:x="3072" fg:w="5"/><text x="84.4144%" y="415.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (5 samples, 0.14%)</title><rect x="84.1644%" y="389" width="0.1370%" height="15" fill="rgb(243,119,21)" fg:x="3072" fg:w="5"/><text x="84.4144%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (5 samples, 0.14%)</title><rect x="84.1644%" y="373" width="0.1370%" height="15" fill="rgb(252,177,53)" fg:x="3072" fg:w="5"/><text x="84.4144%" y="383.50"></text></g><g><title>core::cell::BorrowRef::new (5 samples, 0.14%)</title><rect x="84.1644%" y="357" width="0.1370%" height="15" fill="rgb(237,209,29)" fg:x="3072" fg:w="5"/><text x="84.4144%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (5 samples, 0.14%)</title><rect x="84.1644%" y="341" width="0.1370%" height="15" fill="rgb(212,65,23)" fg:x="3072" fg:w="5"/><text x="84.4144%" y="351.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::modulo::do_the_thing (3 samples, 0.08%)</title><rect x="84.3014%" y="421" width="0.0822%" height="15" fill="rgb(230,222,46)" fg:x="3077" fg:w="3"/><text x="84.5514%" y="431.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::modulo (105 samples, 2.88%)</title><rect x="81.5342%" y="437" width="2.8767%" height="15" fill="rgb(215,135,32)" fg:x="2976" fg:w="105"/><text x="81.7842%" y="447.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (1 samples, 0.03%)</title><rect x="84.3836%" y="421" width="0.0274%" height="15" fill="rgb(246,101,22)" fg:x="3080" fg:w="1"/><text x="84.6336%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (1 samples, 0.03%)</title><rect x="84.3836%" y="405" width="0.0274%" height="15" fill="rgb(206,107,13)" fg:x="3080" fg:w="1"/><text x="84.6336%" y="415.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (1 samples, 0.03%)</title><rect x="84.3836%" y="389" width="0.0274%" height="15" fill="rgb(250,100,44)" fg:x="3080" fg:w="1"/><text x="84.6336%" y="399.50"></text></g><g><title>core::cell::BorrowRef::new (1 samples, 0.03%)</title><rect x="84.3836%" y="373" width="0.0274%" height="15" fill="rgb(231,147,38)" fg:x="3080" fg:w="1"/><text x="84.6336%" y="383.50"></text></g><g><title>core::cell::is_reading (1 samples, 0.03%)</title><rect x="84.3836%" y="357" width="0.0274%" height="15" fill="rgb(229,8,40)" fg:x="3080" fg:w="1"/><text x="84.6336%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.03%)</title><rect x="84.5205%" y="421" width="0.0274%" height="15" fill="rgb(221,135,30)" fg:x="3085" fg:w="1"/><text x="84.7705%" y="431.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="84.5205%" y="405" width="0.0274%" height="15" fill="rgb(249,193,18)" fg:x="3085" fg:w="1"/><text x="84.7705%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.03%)</title><rect x="84.5479%" y="421" width="0.0274%" height="15" fill="rgb(209,133,39)" fg:x="3086" fg:w="1"/><text x="84.7979%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="84.5479%" y="405" width="0.0274%" height="15" fill="rgb(232,100,14)" fg:x="3086" fg:w="1"/><text x="84.7979%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (1 samples, 0.03%)</title><rect x="84.5479%" y="389" width="0.0274%" height="15" fill="rgb(224,185,1)" fg:x="3086" fg:w="1"/><text x="84.7979%" y="399.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="84.5479%" y="373" width="0.0274%" height="15" fill="rgb(223,139,8)" fg:x="3086" fg:w="1"/><text x="84.7979%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.03%)</title><rect x="84.5479%" y="357" width="0.0274%" height="15" fill="rgb(232,213,38)" fg:x="3086" fg:w="1"/><text x="84.7979%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="84.5479%" y="341" width="0.0274%" height="15" fill="rgb(207,94,22)" fg:x="3086" fg:w="1"/><text x="84.7979%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="84.5479%" y="325" width="0.0274%" height="15" fill="rgb(219,183,54)" fg:x="3086" fg:w="1"/><text x="84.7979%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="84.5479%" y="309" width="0.0274%" height="15" fill="rgb(216,185,54)" fg:x="3086" fg:w="1"/><text x="84.7979%" y="319.50"></text></g><g><title>__rust_dealloc (1 samples, 0.03%)</title><rect x="84.5479%" y="293" width="0.0274%" height="15" fill="rgb(254,217,39)" fg:x="3086" fg:w="1"/><text x="84.7979%" y="303.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (1 samples, 0.03%)</title><rect x="84.6027%" y="325" width="0.0274%" height="15" fill="rgb(240,178,23)" fg:x="3088" fg:w="1"/><text x="84.8527%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="84.6027%" y="309" width="0.0274%" height="15" fill="rgb(218,11,47)" fg:x="3088" fg:w="1"/><text x="84.8527%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="84.6575%" y="277" width="0.0274%" height="15" fill="rgb(218,51,51)" fg:x="3090" fg:w="1"/><text x="84.9075%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1 samples, 0.03%)</title><rect x="84.6849%" y="277" width="0.0274%" height="15" fill="rgb(238,126,27)" fg:x="3091" fg:w="1"/><text x="84.9349%" y="287.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (1 samples, 0.03%)</title><rect x="84.6849%" y="261" width="0.0274%" height="15" fill="rgb(249,202,22)" fg:x="3091" fg:w="1"/><text x="84.9349%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (3 samples, 0.08%)</title><rect x="84.7123%" y="277" width="0.0822%" height="15" fill="rgb(254,195,49)" fg:x="3092" fg:w="3"/><text x="84.9623%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (8 samples, 0.22%)</title><rect x="84.6301%" y="309" width="0.2192%" height="15" fill="rgb(208,123,14)" fg:x="3089" fg:w="8"/><text x="84.8801%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (8 samples, 0.22%)</title><rect x="84.6301%" y="293" width="0.2192%" height="15" fill="rgb(224,200,8)" fg:x="3089" fg:w="8"/><text x="84.8801%" y="303.50"></text></g><g><title>hashbrown::raw::inner::h2 (2 samples, 0.05%)</title><rect x="84.7945%" y="277" width="0.0548%" height="15" fill="rgb(217,61,36)" fg:x="3095" fg:w="2"/><text x="85.0445%" y="287.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (12 samples, 0.33%)</title><rect x="84.5753%" y="389" width="0.3288%" height="15" fill="rgb(206,35,45)" fg:x="3087" fg:w="12"/><text x="84.8253%" y="399.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (12 samples, 0.33%)</title><rect x="84.5753%" y="373" width="0.3288%" height="15" fill="rgb(217,65,33)" fg:x="3087" fg:w="12"/><text x="84.8253%" y="383.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (12 samples, 0.33%)</title><rect x="84.5753%" y="357" width="0.3288%" height="15" fill="rgb(222,158,48)" fg:x="3087" fg:w="12"/><text x="84.8253%" y="367.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (11 samples, 0.30%)</title><rect x="84.6027%" y="341" width="0.3014%" height="15" fill="rgb(254,2,54)" fg:x="3088" fg:w="11"/><text x="84.8527%" y="351.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (10 samples, 0.27%)</title><rect x="84.6301%" y="325" width="0.2740%" height="15" fill="rgb(250,143,38)" fg:x="3089" fg:w="10"/><text x="84.8801%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (2 samples, 0.05%)</title><rect x="84.8493%" y="309" width="0.0548%" height="15" fill="rgb(248,25,0)" fg:x="3097" fg:w="2"/><text x="85.0993%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (2 samples, 0.05%)</title><rect x="84.8493%" y="293" width="0.0548%" height="15" fill="rgb(206,152,27)" fg:x="3097" fg:w="2"/><text x="85.0993%" y="303.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (3 samples, 0.08%)</title><rect x="84.9041%" y="389" width="0.0822%" height="15" fill="rgb(240,77,30)" fg:x="3099" fg:w="3"/><text x="85.1541%" y="399.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="85.1233%" y="357" width="0.0274%" height="15" fill="rgb(231,5,3)" fg:x="3107" fg:w="1"/><text x="85.3733%" y="367.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="85.1507%" y="357" width="0.0274%" height="15" fill="rgb(207,226,32)" fg:x="3108" fg:w="1"/><text x="85.4007%" y="367.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (41 samples, 1.12%)</title><rect x="84.5753%" y="421" width="1.1233%" height="15" fill="rgb(222,207,47)" fg:x="3087" fg:w="41"/><text x="84.8253%" y="431.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (41 samples, 1.12%)</title><rect x="84.5753%" y="405" width="1.1233%" height="15" fill="rgb(229,115,45)" fg:x="3087" fg:w="41"/><text x="84.8253%" y="415.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (26 samples, 0.71%)</title><rect x="84.9863%" y="389" width="0.7123%" height="15" fill="rgb(224,191,6)" fg:x="3102" fg:w="26"/><text x="85.2363%" y="399.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.60%)</title><rect x="85.0959%" y="373" width="0.6027%" height="15" fill="rgb(230,227,24)" fg:x="3106" fg:w="22"/><text x="85.3459%" y="383.50"></text></g><g><title>malloc (19 samples, 0.52%)</title><rect x="85.1781%" y="357" width="0.5205%" height="15" fill="rgb(228,80,19)" fg:x="3109" fg:w="19"/><text x="85.4281%" y="367.50"></text></g><g><title>[libc.so.6] (11 samples, 0.30%)</title><rect x="85.3973%" y="341" width="0.3014%" height="15" fill="rgb(247,229,0)" fg:x="3117" fg:w="11"/><text x="85.6473%" y="351.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="85.6438%" y="325" width="0.0548%" height="15" fill="rgb(237,194,15)" fg:x="3126" fg:w="2"/><text x="85.8938%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.05%)</title><rect x="85.7534%" y="357" width="0.0548%" height="15" fill="rgb(219,203,20)" fg:x="3130" fg:w="2"/><text x="86.0034%" y="367.50"></text></g><g><title>simple_lisp::interpreter::builtins::core::and (59 samples, 1.62%)</title><rect x="84.4110%" y="437" width="1.6164%" height="15" fill="rgb(234,128,8)" fg:x="3081" fg:w="59"/><text x="84.6610%" y="447.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (12 samples, 0.33%)</title><rect x="85.6986%" y="421" width="0.3288%" height="15" fill="rgb(248,202,8)" fg:x="3128" fg:w="12"/><text x="85.9486%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (12 samples, 0.33%)</title><rect x="85.6986%" y="405" width="0.3288%" height="15" fill="rgb(206,104,37)" fg:x="3128" fg:w="12"/><text x="85.9486%" y="415.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (12 samples, 0.33%)</title><rect x="85.6986%" y="389" width="0.3288%" height="15" fill="rgb(223,8,27)" fg:x="3128" fg:w="12"/><text x="85.9486%" y="399.50"></text></g><g><title>core::cell::BorrowRef::new (12 samples, 0.33%)</title><rect x="85.6986%" y="373" width="0.3288%" height="15" fill="rgb(216,217,28)" fg:x="3128" fg:w="12"/><text x="85.9486%" y="383.50"></text></g><g><title>core::cell::is_reading (8 samples, 0.22%)</title><rect x="85.8082%" y="357" width="0.2192%" height="15" fill="rgb(249,199,1)" fg:x="3132" fg:w="8"/><text x="86.0582%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::resize_inner (1 samples, 0.03%)</title><rect x="87.0959%" y="165" width="0.0274%" height="15" fill="rgb(240,85,17)" fg:x="3179" fg:w="1"/><text x="87.3459%" y="175.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::prepare_resize (1 samples, 0.03%)</title><rect x="87.0959%" y="149" width="0.0274%" height="15" fill="rgb(206,108,45)" fg:x="3179" fg:w="1"/><text x="87.3459%" y="159.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fallible_with_capacity (1 samples, 0.03%)</title><rect x="87.0959%" y="133" width="0.0274%" height="15" fill="rgb(245,210,41)" fg:x="3179" fg:w="1"/><text x="87.3459%" y="143.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::new_uninitialized (1 samples, 0.03%)</title><rect x="87.0959%" y="117" width="0.0274%" height="15" fill="rgb(206,13,37)" fg:x="3179" fg:w="1"/><text x="87.3459%" y="127.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1 samples, 0.03%)</title><rect x="87.0959%" y="101" width="0.0274%" height="15" fill="rgb(250,61,18)" fg:x="3179" fg:w="1"/><text x="87.3459%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="87.0959%" y="85" width="0.0274%" height="15" fill="rgb(235,172,48)" fg:x="3179" fg:w="1"/><text x="87.3459%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="87.0959%" y="69" width="0.0274%" height="15" fill="rgb(249,201,17)" fg:x="3179" fg:w="1"/><text x="87.3459%" y="79.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="87.0959%" y="53" width="0.0274%" height="15" fill="rgb(219,208,6)" fg:x="3179" fg:w="1"/><text x="87.3459%" y="63.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.05%)</title><rect x="87.0959%" y="325" width="0.0548%" height="15" fill="rgb(248,31,23)" fg:x="3179" fg:w="2"/><text x="87.3459%" y="335.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::collect::_{{closure}} (2 samples, 0.05%)</title><rect x="87.0959%" y="309" width="0.0548%" height="15" fill="rgb(245,15,42)" fg:x="3179" fg:w="2"/><text x="87.3459%" y="319.50"></text></g><g><title>simple_lisp::interpreter::data::Data::add_data_refs (2 samples, 0.05%)</title><rect x="87.0959%" y="293" width="0.0548%" height="15" fill="rgb(222,217,39)" fg:x="3179" fg:w="2"/><text x="87.3459%" y="303.50"></text></g><g><title>&lt;indexmap::set::IndexSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.05%)</title><rect x="87.0959%" y="277" width="0.0548%" height="15" fill="rgb(210,219,27)" fg:x="3179" fg:w="2"/><text x="87.3459%" y="287.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 0.05%)</title><rect x="87.0959%" y="261" width="0.0548%" height="15" fill="rgb(252,166,36)" fg:x="3179" fg:w="2"/><text x="87.3459%" y="271.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::reserve (2 samples, 0.05%)</title><rect x="87.0959%" y="245" width="0.0548%" height="15" fill="rgb(245,132,34)" fg:x="3179" fg:w="2"/><text x="87.3459%" y="255.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::reserve (2 samples, 0.05%)</title><rect x="87.0959%" y="229" width="0.0548%" height="15" fill="rgb(236,54,3)" fg:x="3179" fg:w="2"/><text x="87.3459%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (2 samples, 0.05%)</title><rect x="87.0959%" y="213" width="0.0548%" height="15" fill="rgb(241,173,43)" fg:x="3179" fg:w="2"/><text x="87.3459%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.05%)</title><rect x="87.0959%" y="197" width="0.0548%" height="15" fill="rgb(215,190,9)" fg:x="3179" fg:w="2"/><text x="87.3459%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::reserve_rehash_inner (2 samples, 0.05%)</title><rect x="87.0959%" y="181" width="0.0548%" height="15" fill="rgb(242,101,16)" fg:x="3179" fg:w="2"/><text x="87.3459%" y="191.50"></text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (1 samples, 0.03%)</title><rect x="87.1233%" y="165" width="0.0274%" height="15" fill="rgb(223,190,21)" fg:x="3180" fg:w="1"/><text x="87.3733%" y="175.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::is_external (6 samples, 0.16%)</title><rect x="87.1781%" y="309" width="0.1644%" height="15" fill="rgb(215,228,25)" fg:x="3182" fg:w="6"/><text x="87.4281%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (50 samples, 1.37%)</title><rect x="86.0274%" y="389" width="1.3699%" height="15" fill="rgb(225,36,22)" fg:x="3140" fg:w="50"/><text x="86.2774%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (50 samples, 1.37%)</title><rect x="86.0274%" y="373" width="1.3699%" height="15" fill="rgb(251,106,46)" fg:x="3140" fg:w="50"/><text x="86.2774%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (50 samples, 1.37%)</title><rect x="86.0274%" y="357" width="1.3699%" height="15" fill="rgb(208,90,1)" fg:x="3140" fg:w="50"/><text x="86.2774%" y="367.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (50 samples, 1.37%)</title><rect x="86.0274%" y="341" width="1.3699%" height="15" fill="rgb(243,10,4)" fg:x="3140" fg:w="50"/><text x="86.2774%" y="351.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::collect::_{{closure}} (9 samples, 0.25%)</title><rect x="87.1507%" y="325" width="0.2466%" height="15" fill="rgb(212,137,27)" fg:x="3181" fg:w="9"/><text x="87.4007%" y="335.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::is_pinned (2 samples, 0.05%)</title><rect x="87.3425%" y="309" width="0.0548%" height="15" fill="rgb(231,220,49)" fg:x="3188" fg:w="2"/><text x="87.5925%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.05%)</title><rect x="87.3425%" y="293" width="0.0548%" height="15" fill="rgb(237,96,20)" fg:x="3188" fg:w="2"/><text x="87.5925%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::set::IndexSet&lt;simple_lisp::interpreter::data::HashableDataRef,rustc_hash::FxBuildHasher&gt;&gt; (1 samples, 0.03%)</title><rect x="87.3973%" y="389" width="0.0274%" height="15" fill="rgb(239,229,30)" fg:x="3190" fg:w="1"/><text x="87.6473%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::map::IndexMap&lt;simple_lisp::interpreter::data::HashableDataRef,(),rustc_hash::FxBuildHasher&gt;&gt; (1 samples, 0.03%)</title><rect x="87.3973%" y="373" width="0.0274%" height="15" fill="rgb(219,65,33)" fg:x="3190" fg:w="1"/><text x="87.6473%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::map::core::IndexMapCore&lt;simple_lisp::interpreter::data::HashableDataRef,()&gt;&gt; (1 samples, 0.03%)</title><rect x="87.3973%" y="357" width="0.0274%" height="15" fill="rgb(243,134,7)" fg:x="3190" fg:w="1"/><text x="87.6473%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;usize&gt;&gt; (1 samples, 0.03%)</title><rect x="87.3973%" y="341" width="0.0274%" height="15" fill="rgb(216,177,54)" fg:x="3190" fg:w="1"/><text x="87.6473%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="87.3973%" y="325" width="0.0274%" height="15" fill="rgb(211,160,20)" fg:x="3190" fg:w="1"/><text x="87.6473%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::drop_inner_table (1 samples, 0.03%)</title><rect x="87.3973%" y="309" width="0.0274%" height="15" fill="rgb(239,85,39)" fg:x="3190" fg:w="1"/><text x="87.6473%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::free_buckets (1 samples, 0.03%)</title><rect x="87.3973%" y="293" width="0.0274%" height="15" fill="rgb(232,125,22)" fg:x="3190" fg:w="1"/><text x="87.6473%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::allocation_info (1 samples, 0.03%)</title><rect x="87.3973%" y="277" width="0.0274%" height="15" fill="rgb(244,57,34)" fg:x="3190" fg:w="1"/><text x="87.6473%" y="287.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (1 samples, 0.03%)</title><rect x="87.3973%" y="261" width="0.0274%" height="15" fill="rgb(214,203,32)" fg:x="3190" fg:w="1"/><text x="87.6473%" y="271.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (26 samples, 0.71%)</title><rect x="91.9178%" y="213" width="0.7123%" height="15" fill="rgb(207,58,43)" fg:x="3355" fg:w="26"/><text x="92.1678%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (26 samples, 0.71%)</title><rect x="91.9178%" y="197" width="0.7123%" height="15" fill="rgb(215,193,15)" fg:x="3355" fg:w="26"/><text x="92.1678%" y="207.50"></text></g><g><title>core::cell::BorrowRef::new (26 samples, 0.71%)</title><rect x="91.9178%" y="181" width="0.7123%" height="15" fill="rgb(232,15,44)" fg:x="3355" fg:w="26"/><text x="92.1678%" y="191.50"></text></g><g><title>core::cell::is_reading (4 samples, 0.11%)</title><rect x="92.5205%" y="165" width="0.1096%" height="15" fill="rgb(212,3,48)" fg:x="3377" fg:w="4"/><text x="92.7705%" y="175.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::allocation_size (109 samples, 2.99%)</title><rect x="91.9178%" y="245" width="2.9863%" height="15" fill="rgb(218,128,7)" fg:x="3355" fg:w="109"/><text x="92.1678%" y="255.50">sim..</text></g><g><title>simple_lisp::interpreter::data::DataBox::allocation_size (109 samples, 2.99%)</title><rect x="91.9178%" y="229" width="2.9863%" height="15" fill="rgb(226,216,39)" fg:x="3355" fg:w="109"/><text x="92.1678%" y="239.50">sim..</text></g><g><title>simple_lisp::interpreter::data::Data::allocation_size (83 samples, 2.27%)</title><rect x="92.6301%" y="213" width="2.2740%" height="15" fill="rgb(243,47,51)" fg:x="3381" fg:w="83"/><text x="92.8801%" y="223.50">s..</text></g><g><title>__rdl_dealloc (6 samples, 0.16%)</title><rect x="95.1507%" y="213" width="0.1644%" height="15" fill="rgb(241,183,40)" fg:x="3473" fg:w="6"/><text x="95.4007%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.16%)</title><rect x="95.1507%" y="197" width="0.1644%" height="15" fill="rgb(231,217,32)" fg:x="3473" fg:w="6"/><text x="95.4007%" y="207.50"></text></g><g><title>__rust_dealloc (11 samples, 0.30%)</title><rect x="95.3151%" y="213" width="0.3014%" height="15" fill="rgb(229,61,38)" fg:x="3479" fg:w="11"/><text x="95.5651%" y="223.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::dealloc (131 samples, 3.59%)</title><rect x="94.9041%" y="245" width="3.5890%" height="15" fill="rgb(225,210,5)" fg:x="3464" fg:w="131"/><text x="95.1541%" y="255.50">simp..</text></g><g><title>alloc::alloc::dealloc (131 samples, 3.59%)</title><rect x="94.9041%" y="229" width="3.5890%" height="15" fill="rgb(231,79,45)" fg:x="3464" fg:w="131"/><text x="95.1541%" y="239.50">allo..</text></g><g><title>cfree (105 samples, 2.88%)</title><rect x="95.6164%" y="213" width="2.8767%" height="15" fill="rgb(224,100,7)" fg:x="3490" fg:w="105"/><text x="95.8664%" y="223.50">cf..</text></g><g><title>[libc.so.6] (58 samples, 1.59%)</title><rect x="96.9041%" y="197" width="1.5890%" height="15" fill="rgb(241,198,18)" fg:x="3537" fg:w="58"/><text x="97.1541%" y="207.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_generation (1 samples, 0.03%)</title><rect x="98.4932%" y="245" width="0.0274%" height="15" fill="rgb(252,97,53)" fg:x="3595" fg:w="1"/><text x="98.7432%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.03%)</title><rect x="98.4932%" y="229" width="0.0274%" height="15" fill="rgb(220,88,7)" fg:x="3595" fg:w="1"/><text x="98.7432%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (418 samples, 11.45%)</title><rect x="87.4247%" y="341" width="11.4521%" height="15" fill="rgb(213,176,14)" fg:x="3191" fg:w="418"/><text x="87.6747%" y="351.50">alloc::vec::Vec&lt;T..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (418 samples, 11.45%)</title><rect x="87.4247%" y="325" width="11.4521%" height="15" fill="rgb(246,73,7)" fg:x="3191" fg:w="418"/><text x="87.6747%" y="335.50">alloc::vec::Vec&lt;T..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::retain_in_order::_{{closure}} (411 samples, 11.26%)</title><rect x="87.6164%" y="309" width="11.2603%" height="15" fill="rgb(245,64,36)" fg:x="3198" fg:w="411"/><text x="87.8664%" y="319.50">indexmap::map::co..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::retain::_{{closure}} (411 samples, 11.26%)</title><rect x="87.6164%" y="293" width="11.2603%" height="15" fill="rgb(245,80,10)" fg:x="3198" fg:w="411"/><text x="87.8664%" y="303.50">indexmap::map::In..</text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::retain::_{{closure}} (411 samples, 11.26%)</title><rect x="87.6164%" y="277" width="11.2603%" height="15" fill="rgb(232,107,50)" fg:x="3198" fg:w="411"/><text x="87.8664%" y="287.50">indexmap::set::In..</text></g><g><title>simple_lisp::interpreter::data::DataStore::collect::_{{closure}} (411 samples, 11.26%)</title><rect x="87.6164%" y="261" width="11.2603%" height="15" fill="rgb(253,3,0)" fg:x="3198" fg:w="411"/><text x="87.8664%" y="271.50">simple_lisp::inte..</text></g><g><title>simple_lisp::interpreter::data::DataRef::is_external (13 samples, 0.36%)</title><rect x="98.5205%" y="245" width="0.3562%" height="15" fill="rgb(212,99,53)" fg:x="3596" fg:w="13"/><text x="98.7705%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (13 samples, 0.36%)</title><rect x="98.5205%" y="229" width="0.3562%" height="15" fill="rgb(249,111,54)" fg:x="3596" fg:w="13"/><text x="98.7705%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (13 samples, 0.36%)</title><rect x="98.5205%" y="213" width="0.3562%" height="15" fill="rgb(249,55,30)" fg:x="3596" fg:w="13"/><text x="98.7705%" y="223.50"></text></g><g><title>core::cell::BorrowRef::new (13 samples, 0.36%)</title><rect x="98.5205%" y="197" width="0.3562%" height="15" fill="rgb(237,47,42)" fg:x="3596" fg:w="13"/><text x="98.7705%" y="207.50"></text></g><g><title>core::cell::is_reading (5 samples, 0.14%)</title><rect x="98.7397%" y="181" width="0.1370%" height="15" fill="rgb(211,20,18)" fg:x="3604" fg:w="5"/><text x="98.9897%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::clear (3 samples, 0.08%)</title><rect x="98.8767%" y="325" width="0.0822%" height="15" fill="rgb(231,203,46)" fg:x="3609" fg:w="3"/><text x="99.1267%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;&amp;mut hashbrown::raw::inner::RawTable&lt;usize&gt;,hashbrown::raw::inner::RawTable&lt;usize&gt;::clear::{{closure}}&gt;&gt; (3 samples, 0.08%)</title><rect x="98.8767%" y="309" width="0.0822%" height="15" fill="rgb(237,142,3)" fg:x="3609" fg:w="3"/><text x="99.1267%" y="319.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.08%)</title><rect x="98.8767%" y="293" width="0.0822%" height="15" fill="rgb(241,107,1)" fg:x="3609" fg:w="3"/><text x="99.1267%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::clear::_{{closure}} (3 samples, 0.08%)</title><rect x="98.8767%" y="277" width="0.0822%" height="15" fill="rgb(229,83,13)" fg:x="3609" fg:w="3"/><text x="99.1267%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::clear_no_drop (3 samples, 0.08%)</title><rect x="98.8767%" y="261" width="0.0822%" height="15" fill="rgb(241,91,40)" fg:x="3609" fg:w="3"/><text x="99.1267%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::clear_no_drop (3 samples, 0.08%)</title><rect x="98.8767%" y="245" width="0.0822%" height="15" fill="rgb(225,3,45)" fg:x="3609" fg:w="3"/><text x="99.1267%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (3 samples, 0.08%)</title><rect x="98.8767%" y="229" width="0.0822%" height="15" fill="rgb(244,223,14)" fg:x="3609" fg:w="3"/><text x="99.1267%" y="239.50"></text></g><g><title>core::intrinsics::write_bytes (3 samples, 0.08%)</title><rect x="98.8767%" y="213" width="0.0822%" height="15" fill="rgb(224,124,37)" fg:x="3609" fg:w="3"/><text x="99.1267%" y="223.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="98.8767%" y="197" width="0.0822%" height="15" fill="rgb(251,171,30)" fg:x="3609" fg:w="3"/><text x="99.1267%" y="207.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::retain (422 samples, 11.56%)</title><rect x="87.4247%" y="389" width="11.5616%" height="15" fill="rgb(236,46,54)" fg:x="3191" fg:w="422"/><text x="87.6747%" y="399.50">indexmap::set::In..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::retain (422 samples, 11.56%)</title><rect x="87.4247%" y="373" width="11.5616%" height="15" fill="rgb(245,213,5)" fg:x="3191" fg:w="422"/><text x="87.6747%" y="383.50">indexmap::map::In..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::retain_in_order (422 samples, 11.56%)</title><rect x="87.4247%" y="357" width="11.5616%" height="15" fill="rgb(230,144,27)" fg:x="3191" fg:w="422"/><text x="87.6747%" y="367.50">indexmap::map::co..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::rebuild_hash_table (4 samples, 0.11%)</title><rect x="98.8767%" y="341" width="0.1096%" height="15" fill="rgb(220,86,6)" fg:x="3609" fg:w="4"/><text x="99.1267%" y="351.50"></text></g><g><title>indexmap::map::core::raw::insert_bulk_no_grow (1 samples, 0.03%)</title><rect x="98.9589%" y="325" width="0.0274%" height="15" fill="rgb(240,20,13)" fg:x="3612" fg:w="1"/><text x="99.2089%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.03%)</title><rect x="98.9589%" y="309" width="0.0274%" height="15" fill="rgb(217,89,34)" fg:x="3612" fg:w="1"/><text x="99.2089%" y="319.50"></text></g><g><title>simple_lisp::interpreter::builtins::core::gc_collect (474 samples, 12.99%)</title><rect x="86.0274%" y="437" width="12.9863%" height="15" fill="rgb(229,13,5)" fg:x="3140" fg:w="474"/><text x="86.2774%" y="447.50">simple_lisp::interpr..</text></g><g><title>simple_lisp::interpreter::Interpreter::gc_collect (474 samples, 12.99%)</title><rect x="86.0274%" y="421" width="12.9863%" height="15" fill="rgb(244,67,35)" fg:x="3140" fg:w="474"/><text x="86.2774%" y="431.50">simple_lisp::interpr..</text></g><g><title>simple_lisp::interpreter::data::DataStore::collect (474 samples, 12.99%)</title><rect x="86.0274%" y="405" width="12.9863%" height="15" fill="rgb(221,40,2)" fg:x="3140" fg:w="474"/><text x="86.2774%" y="415.50">simple_lisp::interpr..</text></g><g><title>simple_lisp::interpreter::data::Data::add_data_refs (1 samples, 0.03%)</title><rect x="98.9863%" y="389" width="0.0274%" height="15" fill="rgb(237,157,21)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="399.50"></text></g><g><title>&lt;indexmap::set::IndexSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.03%)</title><rect x="98.9863%" y="373" width="0.0274%" height="15" fill="rgb(222,94,11)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="383.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.03%)</title><rect x="98.9863%" y="357" width="0.0274%" height="15" fill="rgb(249,113,6)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.03%)</title><rect x="98.9863%" y="341" width="0.0274%" height="15" fill="rgb(238,137,36)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="98.9863%" y="325" width="0.0274%" height="15" fill="rgb(210,102,26)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="98.9863%" y="309" width="0.0274%" height="15" fill="rgb(218,30,30)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="98.9863%" y="293" width="0.0274%" height="15" fill="rgb(214,67,26)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="98.9863%" y="277" width="0.0274%" height="15" fill="rgb(251,9,53)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.03%)</title><rect x="98.9863%" y="261" width="0.0274%" height="15" fill="rgb(228,204,25)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="271.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.03%)</title><rect x="98.9863%" y="245" width="0.0274%" height="15" fill="rgb(207,153,8)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.03%)</title><rect x="98.9863%" y="229" width="0.0274%" height="15" fill="rgb(242,9,16)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.03%)</title><rect x="98.9863%" y="213" width="0.0274%" height="15" fill="rgb(217,211,10)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.03%)</title><rect x="98.9863%" y="197" width="0.0274%" height="15" fill="rgb(219,228,52)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="207.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (1 samples, 0.03%)</title><rect x="98.9863%" y="181" width="0.0274%" height="15" fill="rgb(231,92,29)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="191.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (1 samples, 0.03%)</title><rect x="98.9863%" y="165" width="0.0274%" height="15" fill="rgb(232,8,23)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="175.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (1 samples, 0.03%)</title><rect x="98.9863%" y="149" width="0.0274%" height="15" fill="rgb(216,211,34)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="159.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (1 samples, 0.03%)</title><rect x="98.9863%" y="133" width="0.0274%" height="15" fill="rgb(236,151,0)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="143.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (1 samples, 0.03%)</title><rect x="98.9863%" y="117" width="0.0274%" height="15" fill="rgb(209,168,3)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="127.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.03%)</title><rect x="98.9863%" y="101" width="0.0274%" height="15" fill="rgb(208,129,28)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="111.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.03%)</title><rect x="98.9863%" y="85" width="0.0274%" height="15" fill="rgb(229,78,22)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="95.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (1 samples, 0.03%)</title><rect x="98.9863%" y="69" width="0.0274%" height="15" fill="rgb(228,187,13)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="79.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="98.9863%" y="53" width="0.0274%" height="15" fill="rgb(240,119,24)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="63.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="98.9863%" y="37" width="0.0274%" height="15" fill="rgb(209,194,42)" fg:x="3613" fg:w="1"/><text x="99.2363%" y="47.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.05%)</title><rect x="99.0137%" y="373" width="0.0548%" height="15" fill="rgb(247,200,46)" fg:x="3614" fg:w="2"/><text x="99.2637%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.05%)</title><rect x="99.0685%" y="373" width="0.0548%" height="15" fill="rgb(218,76,16)" fg:x="3616" fg:w="2"/><text x="99.3185%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.05%)</title><rect x="99.0685%" y="357" width="0.0548%" height="15" fill="rgb(225,21,48)" fg:x="3616" fg:w="2"/><text x="99.3185%" y="367.50"></text></g><g><title>core::mem::replace (2 samples, 0.05%)</title><rect x="99.0685%" y="341" width="0.0548%" height="15" fill="rgb(239,223,50)" fg:x="3616" fg:w="2"/><text x="99.3185%" y="351.50"></text></g><g><title>core::ptr::write (2 samples, 0.05%)</title><rect x="99.0685%" y="325" width="0.0548%" height="15" fill="rgb(244,45,21)" fg:x="3616" fg:w="2"/><text x="99.3185%" y="335.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (27 samples, 0.74%)</title><rect x="99.0137%" y="437" width="0.7397%" height="15" fill="rgb(232,33,43)" fg:x="3614" fg:w="27"/><text x="99.2637%" y="447.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (27 samples, 0.74%)</title><rect x="99.0137%" y="421" width="0.7397%" height="15" fill="rgb(209,8,3)" fg:x="3614" fg:w="27"/><text x="99.2637%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (27 samples, 0.74%)</title><rect x="99.0137%" y="405" width="0.7397%" height="15" fill="rgb(214,25,53)" fg:x="3614" fg:w="27"/><text x="99.2637%" y="415.50"></text></g><g><title>core::cell::BorrowRef::new (27 samples, 0.74%)</title><rect x="99.0137%" y="389" width="0.7397%" height="15" fill="rgb(254,186,54)" fg:x="3614" fg:w="27"/><text x="99.2637%" y="399.50"></text></g><g><title>core::cell::is_reading (23 samples, 0.63%)</title><rect x="99.1233%" y="373" width="0.6301%" height="15" fill="rgb(208,174,49)" fg:x="3618" fg:w="23"/><text x="99.3733%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="99.8082%" y="341" width="0.0274%" height="15" fill="rgb(233,191,51)" fg:x="3643" fg:w="1"/><text x="100.0582%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (3 samples, 0.08%)</title><rect x="99.8356%" y="341" width="0.0822%" height="15" fill="rgb(222,134,10)" fg:x="3644" fg:w="3"/><text x="100.0856%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.08%)</title><rect x="99.8356%" y="325" width="0.0822%" height="15" fill="rgb(230,226,20)" fg:x="3644" fg:w="3"/><text x="100.0856%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3 samples, 0.08%)</title><rect x="99.8356%" y="309" width="0.0822%" height="15" fill="rgb(251,111,25)" fg:x="3644" fg:w="3"/><text x="100.0856%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.08%)</title><rect x="99.8356%" y="293" width="0.0822%" height="15" fill="rgb(224,40,46)" fg:x="3644" fg:w="3"/><text x="100.0856%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.08%)</title><rect x="99.8356%" y="277" width="0.0822%" height="15" fill="rgb(236,108,47)" fg:x="3644" fg:w="3"/><text x="100.0856%" y="287.50"></text></g><g><title>all (3,650 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(234,93,0)" fg:x="0" fg:w="3650"/><text x="0.2500%" y="783.50"></text></g><g><title>simple_lisp (3,650 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(224,213,32)" fg:x="0" fg:w="3650"/><text x="0.2500%" y="767.50">simple_lisp</text></g><g><title>_start (3,641 samples, 99.75%)</title><rect x="0.2466%" y="741" width="99.7534%" height="15" fill="rgb(251,11,48)" fg:x="9" fg:w="3641"/><text x="0.4966%" y="751.50">_start</text></g><g><title>__libc_start_main (3,641 samples, 99.75%)</title><rect x="0.2466%" y="725" width="99.7534%" height="15" fill="rgb(236,173,5)" fg:x="9" fg:w="3641"/><text x="0.4966%" y="735.50">__libc_start_main</text></g><g><title>[libc.so.6] (3,641 samples, 99.75%)</title><rect x="0.2466%" y="709" width="99.7534%" height="15" fill="rgb(230,95,12)" fg:x="9" fg:w="3641"/><text x="0.4966%" y="719.50">[libc.so.6]</text></g><g><title>main (3,640 samples, 99.73%)</title><rect x="0.2740%" y="693" width="99.7260%" height="15" fill="rgb(232,209,1)" fg:x="10" fg:w="3640"/><text x="0.5240%" y="703.50">main</text></g><g><title>std::rt::lang_start_internal (3,640 samples, 99.73%)</title><rect x="0.2740%" y="677" width="99.7260%" height="15" fill="rgb(232,6,1)" fg:x="10" fg:w="3640"/><text x="0.5240%" y="687.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (3,640 samples, 99.73%)</title><rect x="0.2740%" y="661" width="99.7260%" height="15" fill="rgb(210,224,50)" fg:x="10" fg:w="3640"/><text x="0.5240%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,640 samples, 99.73%)</title><rect x="0.2740%" y="645" width="99.7260%" height="15" fill="rgb(228,127,35)" fg:x="10" fg:w="3640"/><text x="0.5240%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,640 samples, 99.73%)</title><rect x="0.2740%" y="629" width="99.7260%" height="15" fill="rgb(245,102,45)" fg:x="10" fg:w="3640"/><text x="0.5240%" y="639.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (3,640 samples, 99.73%)</title><rect x="0.2740%" y="613" width="99.7260%" height="15" fill="rgb(214,1,49)" fg:x="10" fg:w="3640"/><text x="0.5240%" y="623.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (3,640 samples, 99.73%)</title><rect x="0.2740%" y="597" width="99.7260%" height="15" fill="rgb(226,163,40)" fg:x="10" fg:w="3640"/><text x="0.5240%" y="607.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,640 samples, 99.73%)</title><rect x="0.2740%" y="581" width="99.7260%" height="15" fill="rgb(239,212,28)" fg:x="10" fg:w="3640"/><text x="0.5240%" y="591.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,640 samples, 99.73%)</title><rect x="0.2740%" y="565" width="99.7260%" height="15" fill="rgb(220,20,13)" fg:x="10" fg:w="3640"/><text x="0.5240%" y="575.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3,640 samples, 99.73%)</title><rect x="0.2740%" y="549" width="99.7260%" height="15" fill="rgb(210,164,35)" fg:x="10" fg:w="3640"/><text x="0.5240%" y="559.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (3,640 samples, 99.73%)</title><rect x="0.2740%" y="533" width="99.7260%" height="15" fill="rgb(248,109,41)" fg:x="10" fg:w="3640"/><text x="0.5240%" y="543.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,640 samples, 99.73%)</title><rect x="0.2740%" y="517" width="99.7260%" height="15" fill="rgb(238,23,50)" fg:x="10" fg:w="3640"/><text x="0.5240%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (3,640 samples, 99.73%)</title><rect x="0.2740%" y="501" width="99.7260%" height="15" fill="rgb(211,48,49)" fg:x="10" fg:w="3640"/><text x="0.5240%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>simple_lisp::main (3,640 samples, 99.73%)</title><rect x="0.2740%" y="485" width="99.7260%" height="15" fill="rgb(223,36,21)" fg:x="10" fg:w="3640"/><text x="0.5240%" y="495.50">simple_lisp::main</text></g><g><title>simple_lisp::run (3,640 samples, 99.73%)</title><rect x="0.2740%" y="469" width="99.7260%" height="15" fill="rgb(207,123,46)" fg:x="10" fg:w="3640"/><text x="0.5240%" y="479.50">simple_lisp::run</text></g><g><title>simple_lisp::interpreter::Interpreter::run (3,640 samples, 99.73%)</title><rect x="0.2740%" y="453" width="99.7260%" height="15" fill="rgb(240,218,32)" fg:x="10" fg:w="3640"/><text x="0.5240%" y="463.50">simple_lisp::interpreter::Interpreter::run</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (9 samples, 0.25%)</title><rect x="99.7534%" y="437" width="0.2466%" height="15" fill="rgb(252,5,43)" fg:x="3641" fg:w="9"/><text x="100.0034%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (9 samples, 0.25%)</title><rect x="99.7534%" y="421" width="0.2466%" height="15" fill="rgb(252,84,19)" fg:x="3641" fg:w="9"/><text x="100.0034%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (9 samples, 0.25%)</title><rect x="99.7534%" y="405" width="0.2466%" height="15" fill="rgb(243,152,39)" fg:x="3641" fg:w="9"/><text x="100.0034%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9 samples, 0.25%)</title><rect x="99.7534%" y="389" width="0.2466%" height="15" fill="rgb(234,160,15)" fg:x="3641" fg:w="9"/><text x="100.0034%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.25%)</title><rect x="99.7534%" y="373" width="0.2466%" height="15" fill="rgb(237,34,20)" fg:x="3641" fg:w="9"/><text x="100.0034%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (9 samples, 0.25%)</title><rect x="99.7534%" y="357" width="0.2466%" height="15" fill="rgb(229,97,13)" fg:x="3641" fg:w="9"/><text x="100.0034%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.08%)</title><rect x="99.9178%" y="341" width="0.0822%" height="15" fill="rgb(234,71,50)" fg:x="3647" fg:w="3"/><text x="100.1678%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.08%)</title><rect x="99.9178%" y="325" width="0.0822%" height="15" fill="rgb(253,155,4)" fg:x="3647" fg:w="3"/><text x="100.1678%" y="335.50"></text></g></svg></svg>