<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="918" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="901.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="901.00"> </text><svg id="frames" x="10" width="1180" total_samples="2618"><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.08%)</title><rect x="0.1528%" y="805" width="0.0764%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="2"/><text x="0.4028%" y="815.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.08%)</title><rect x="0.1528%" y="789" width="0.0764%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="2"/><text x="0.4028%" y="799.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.08%)</title><rect x="0.1528%" y="773" width="0.0764%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="2"/><text x="0.4028%" y="783.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.04%)</title><rect x="0.1910%" y="757" width="0.0382%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="1"/><text x="0.4410%" y="767.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.1910%" y="741" width="0.0382%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="0.4410%" y="751.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.1910%" y="725" width="0.0382%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="0.4410%" y="735.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.1910%" y="709" width="0.0382%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1"/><text x="0.4410%" y="719.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.1910%" y="693" width="0.0382%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="1"/><text x="0.4410%" y="703.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.1910%" y="677" width="0.0382%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="1"/><text x="0.4410%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.1910%" y="661" width="0.0382%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="1"/><text x="0.4410%" y="671.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.23%)</title><rect x="0.0382%" y="821" width="0.2292%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="6"/><text x="0.2882%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.2292%" y="805" width="0.0382%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="1"/><text x="0.4792%" y="815.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.31%)</title><rect x="0.0000%" y="837" width="0.3056%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="8"/><text x="0.2500%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.2674%" y="821" width="0.0382%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="1"/><text x="0.5174%" y="831.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="0.3056%" y="837" width="0.0382%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="1"/><text x="0.5556%" y="847.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="0.3056%" y="821" width="0.0382%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="1"/><text x="0.5556%" y="831.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="7.7922%" y="357" width="0.0382%" height="15" fill="rgb(225,20,46)" fg:x="204" fg:w="1"/><text x="8.0422%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (23 samples, 0.88%)</title><rect x="7.7158%" y="453" width="0.8785%" height="15" fill="rgb(210,31,41)" fg:x="202" fg:w="23"/><text x="7.9658%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (23 samples, 0.88%)</title><rect x="7.7158%" y="437" width="0.8785%" height="15" fill="rgb(221,200,47)" fg:x="202" fg:w="23"/><text x="7.9658%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (23 samples, 0.88%)</title><rect x="7.7158%" y="421" width="0.8785%" height="15" fill="rgb(226,26,5)" fg:x="202" fg:w="23"/><text x="7.9658%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (21 samples, 0.80%)</title><rect x="7.7922%" y="405" width="0.8021%" height="15" fill="rgb(249,33,26)" fg:x="204" fg:w="21"/><text x="8.0422%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.80%)</title><rect x="7.7922%" y="389" width="0.8021%" height="15" fill="rgb(235,183,28)" fg:x="204" fg:w="21"/><text x="8.0422%" y="399.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.80%)</title><rect x="7.7922%" y="373" width="0.8021%" height="15" fill="rgb(221,5,38)" fg:x="204" fg:w="21"/><text x="8.0422%" y="383.50"></text></g><g><title>malloc (20 samples, 0.76%)</title><rect x="7.8304%" y="357" width="0.7639%" height="15" fill="rgb(247,18,42)" fg:x="205" fg:w="20"/><text x="8.0804%" y="367.50"></text></g><g><title>[libc.so.6] (15 samples, 0.57%)</title><rect x="8.0214%" y="341" width="0.5730%" height="15" fill="rgb(241,131,45)" fg:x="210" fg:w="15"/><text x="8.2714%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (29 samples, 1.11%)</title><rect x="7.6394%" y="533" width="1.1077%" height="15" fill="rgb(249,31,29)" fg:x="200" fg:w="29"/><text x="7.8894%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (27 samples, 1.03%)</title><rect x="7.7158%" y="517" width="1.0313%" height="15" fill="rgb(225,111,53)" fg:x="202" fg:w="27"/><text x="7.9658%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (27 samples, 1.03%)</title><rect x="7.7158%" y="501" width="1.0313%" height="15" fill="rgb(238,160,17)" fg:x="202" fg:w="27"/><text x="7.9658%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (27 samples, 1.03%)</title><rect x="7.7158%" y="485" width="1.0313%" height="15" fill="rgb(214,148,48)" fg:x="202" fg:w="27"/><text x="7.9658%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (27 samples, 1.03%)</title><rect x="7.7158%" y="469" width="1.0313%" height="15" fill="rgb(232,36,49)" fg:x="202" fg:w="27"/><text x="7.9658%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.15%)</title><rect x="8.5943%" y="453" width="0.1528%" height="15" fill="rgb(209,103,24)" fg:x="225" fg:w="4"/><text x="8.8443%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.15%)</title><rect x="8.5943%" y="437" width="0.1528%" height="15" fill="rgb(229,88,8)" fg:x="225" fg:w="4"/><text x="8.8443%" y="447.50"></text></g><g><title>[libc.so.6] (4 samples, 0.15%)</title><rect x="8.5943%" y="421" width="0.1528%" height="15" fill="rgb(213,181,19)" fg:x="225" fg:w="4"/><text x="8.8443%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="8.7471%" y="533" width="0.0382%" height="15" fill="rgb(254,191,54)" fg:x="229" fg:w="1"/><text x="8.9971%" y="543.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (1 samples, 0.04%)</title><rect x="8.7471%" y="517" width="0.0382%" height="15" fill="rgb(241,83,37)" fg:x="229" fg:w="1"/><text x="8.9971%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (11 samples, 0.42%)</title><rect x="8.7853%" y="533" width="0.4202%" height="15" fill="rgb(233,36,39)" fg:x="230" fg:w="11"/><text x="9.0353%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (11 samples, 0.42%)</title><rect x="9.2055%" y="517" width="0.4202%" height="15" fill="rgb(226,3,54)" fg:x="241" fg:w="11"/><text x="9.4555%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (11 samples, 0.42%)</title><rect x="9.2055%" y="501" width="0.4202%" height="15" fill="rgb(245,192,40)" fg:x="241" fg:w="11"/><text x="9.4555%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (11 samples, 0.42%)</title><rect x="9.2055%" y="485" width="0.4202%" height="15" fill="rgb(238,167,29)" fg:x="241" fg:w="11"/><text x="9.4555%" y="495.50"></text></g><g><title>&lt;indexmap::set::IndexSet&lt;T,S&gt; as indexmap::Entries&gt;::as_entries (6 samples, 0.23%)</title><rect x="9.6257%" y="501" width="0.2292%" height="15" fill="rgb(232,182,51)" fg:x="252" fg:w="6"/><text x="9.8757%" y="511.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as indexmap::Entries&gt;::as_entries (6 samples, 0.23%)</title><rect x="9.6257%" y="485" width="0.2292%" height="15" fill="rgb(231,60,39)" fg:x="252" fg:w="6"/><text x="9.8757%" y="495.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as indexmap::Entries&gt;::as_entries (6 samples, 0.23%)</title><rect x="9.6257%" y="469" width="0.2292%" height="15" fill="rgb(208,69,12)" fg:x="252" fg:w="6"/><text x="9.8757%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.23%)</title><rect x="9.6257%" y="453" width="0.2292%" height="15" fill="rgb(235,93,37)" fg:x="252" fg:w="6"/><text x="9.8757%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (15 samples, 0.57%)</title><rect x="9.8549%" y="501" width="0.5730%" height="15" fill="rgb(213,116,39)" fg:x="258" fg:w="15"/><text x="10.1049%" y="511.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::InstructionIter as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 1.26%)</title><rect x="9.2055%" y="533" width="1.2605%" height="15" fill="rgb(222,207,29)" fg:x="241" fg:w="33"/><text x="9.4555%" y="543.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::get_index (22 samples, 0.84%)</title><rect x="9.6257%" y="517" width="0.8403%" height="15" fill="rgb(206,96,30)" fg:x="252" fg:w="22"/><text x="9.8757%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.04%)</title><rect x="10.4278%" y="501" width="0.0382%" height="15" fill="rgb(218,138,4)" fg:x="273" fg:w="1"/><text x="10.6778%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.04%)</title><rect x="10.4278%" y="485" width="0.0382%" height="15" fill="rgb(250,191,14)" fg:x="273" fg:w="1"/><text x="10.6778%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="10.4660%" y="533" width="0.0382%" height="15" fill="rgb(239,60,40)" fg:x="274" fg:w="1"/><text x="10.7160%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="10.4660%" y="517" width="0.0382%" height="15" fill="rgb(206,27,48)" fg:x="274" fg:w="1"/><text x="10.7160%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="10.4660%" y="501" width="0.0382%" height="15" fill="rgb(225,35,8)" fg:x="274" fg:w="1"/><text x="10.7160%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="10.4660%" y="485" width="0.0382%" height="15" fill="rgb(250,213,24)" fg:x="274" fg:w="1"/><text x="10.7160%" y="495.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="10.4660%" y="469" width="0.0382%" height="15" fill="rgb(247,123,22)" fg:x="274" fg:w="1"/><text x="10.7160%" y="479.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="10.4660%" y="453" width="0.0382%" height="15" fill="rgb(231,138,38)" fg:x="274" fg:w="1"/><text x="10.7160%" y="463.50"></text></g><g><title>core::intrinsics::copy (141 samples, 5.39%)</title><rect x="10.5042%" y="517" width="5.3858%" height="15" fill="rgb(231,145,46)" fg:x="275" fg:w="141"/><text x="10.7542%" y="527.50">core::i..</text></g><g><title>[libc.so.6] (138 samples, 5.27%)</title><rect x="10.6188%" y="501" width="5.2712%" height="15" fill="rgb(251,118,11)" fg:x="278" fg:w="138"/><text x="10.8688%" y="511.50">[libc...</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (142 samples, 5.42%)</title><rect x="10.5042%" y="533" width="5.4240%" height="15" fill="rgb(217,147,25)" fg:x="275" fg:w="142"/><text x="10.7542%" y="543.50">alloc::..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="15.8900%" y="517" width="0.0382%" height="15" fill="rgb(247,81,37)" fg:x="416" fg:w="1"/><text x="16.1400%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 0.23%)</title><rect x="15.9282%" y="533" width="0.2292%" height="15" fill="rgb(209,12,38)" fg:x="417" fg:w="6"/><text x="16.1782%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.23%)</title><rect x="15.9282%" y="517" width="0.2292%" height="15" fill="rgb(227,1,9)" fg:x="417" fg:w="6"/><text x="16.1782%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.23%)</title><rect x="15.9282%" y="501" width="0.2292%" height="15" fill="rgb(248,47,43)" fg:x="417" fg:w="6"/><text x="16.1782%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.23%)</title><rect x="15.9282%" y="485" width="0.2292%" height="15" fill="rgb(221,10,30)" fg:x="417" fg:w="6"/><text x="16.1782%" y="495.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.08%)</title><rect x="16.0810%" y="469" width="0.0764%" height="15" fill="rgb(210,229,1)" fg:x="421" fg:w="2"/><text x="16.3310%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.08%)</title><rect x="16.0810%" y="453" width="0.0764%" height="15" fill="rgb(222,148,37)" fg:x="421" fg:w="2"/><text x="16.3310%" y="463.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::run::_{{closure}} (2 samples, 0.08%)</title><rect x="16.0810%" y="437" width="0.0764%" height="15" fill="rgb(234,67,33)" fg:x="421" fg:w="2"/><text x="16.3310%" y="447.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_dr_to_scope (2 samples, 0.08%)</title><rect x="16.0810%" y="421" width="0.0764%" height="15" fill="rgb(247,98,35)" fg:x="421" fg:w="2"/><text x="16.3310%" y="431.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="16.1574%" y="517" width="0.0382%" height="15" fill="rgb(247,138,52)" fg:x="423" fg:w="1"/><text x="16.4074%" y="527.50"></text></g><g><title>core::mem::replace (2 samples, 0.08%)</title><rect x="16.1574%" y="533" width="0.0764%" height="15" fill="rgb(213,79,30)" fg:x="423" fg:w="2"/><text x="16.4074%" y="543.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="16.1956%" y="517" width="0.0382%" height="15" fill="rgb(246,177,23)" fg:x="424" fg:w="1"/><text x="16.4456%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (3 samples, 0.11%)</title><rect x="16.2338%" y="533" width="0.1146%" height="15" fill="rgb(230,62,27)" fg:x="425" fg:w="3"/><text x="16.4838%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (1 samples, 0.04%)</title><rect x="16.3484%" y="533" width="0.0382%" height="15" fill="rgb(216,154,8)" fg:x="428" fg:w="1"/><text x="16.5984%" y="543.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::run::_{{closure}} (1 samples, 0.04%)</title><rect x="16.3484%" y="517" width="0.0382%" height="15" fill="rgb(244,35,45)" fg:x="428" fg:w="1"/><text x="16.5984%" y="527.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (1 samples, 0.04%)</title><rect x="16.3484%" y="501" width="0.0382%" height="15" fill="rgb(251,115,12)" fg:x="428" fg:w="1"/><text x="16.5984%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;simple_lisp::interpreter::data::Data&gt;&gt; (10 samples, 0.38%)</title><rect x="16.3866%" y="533" width="0.3820%" height="15" fill="rgb(240,54,50)" fg:x="429" fg:w="10"/><text x="16.6366%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (10 samples, 0.38%)</title><rect x="16.3866%" y="517" width="0.3820%" height="15" fill="rgb(233,84,52)" fg:x="429" fg:w="10"/><text x="16.6366%" y="527.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (10 samples, 0.38%)</title><rect x="16.3866%" y="501" width="0.3820%" height="15" fill="rgb(207,117,47)" fg:x="429" fg:w="10"/><text x="16.6366%" y="511.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (10 samples, 0.38%)</title><rect x="16.3866%" y="485" width="0.3820%" height="15" fill="rgb(249,43,39)" fg:x="429" fg:w="10"/><text x="16.6366%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (10 samples, 0.38%)</title><rect x="16.3866%" y="469" width="0.3820%" height="15" fill="rgb(209,38,44)" fg:x="429" fg:w="10"/><text x="16.6366%" y="479.50"></text></g><g><title>core::mem::replace (10 samples, 0.38%)</title><rect x="16.3866%" y="453" width="0.3820%" height="15" fill="rgb(236,212,23)" fg:x="429" fg:w="10"/><text x="16.6366%" y="463.50"></text></g><g><title>core::ptr::write (10 samples, 0.38%)</title><rect x="16.3866%" y="437" width="0.3820%" height="15" fill="rgb(242,79,21)" fg:x="429" fg:w="10"/><text x="16.6366%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.23%)</title><rect x="16.7685%" y="501" width="0.2292%" height="15" fill="rgb(211,96,35)" fg:x="439" fg:w="6"/><text x="17.0185%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[simple_lisp::interpreter::ScopeItem]&gt; (6 samples, 0.23%)</title><rect x="16.7685%" y="485" width="0.2292%" height="15" fill="rgb(253,215,40)" fg:x="439" fg:w="6"/><text x="17.0185%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::ScopeItem&gt; (4 samples, 0.15%)</title><rect x="16.8449%" y="469" width="0.1528%" height="15" fill="rgb(211,81,21)" fg:x="441" fg:w="4"/><text x="17.0949%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (4 samples, 0.15%)</title><rect x="16.8449%" y="453" width="0.1528%" height="15" fill="rgb(208,190,38)" fg:x="441" fg:w="4"/><text x="17.0949%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (4 samples, 0.15%)</title><rect x="16.8449%" y="437" width="0.1528%" height="15" fill="rgb(235,213,38)" fg:x="441" fg:w="4"/><text x="17.0949%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.15%)</title><rect x="16.8449%" y="421" width="0.1528%" height="15" fill="rgb(237,122,38)" fg:x="441" fg:w="4"/><text x="17.0949%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.15%)</title><rect x="16.8449%" y="405" width="0.1528%" height="15" fill="rgb(244,218,35)" fg:x="441" fg:w="4"/><text x="17.0949%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.15%)</title><rect x="16.8449%" y="389" width="0.1528%" height="15" fill="rgb(240,68,47)" fg:x="441" fg:w="4"/><text x="17.0949%" y="399.50"></text></g><g><title>cfree (4 samples, 0.15%)</title><rect x="16.8449%" y="373" width="0.1528%" height="15" fill="rgb(210,16,53)" fg:x="441" fg:w="4"/><text x="17.0949%" y="383.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="16.8831%" y="357" width="0.1146%" height="15" fill="rgb(235,124,12)" fg:x="442" fg:w="3"/><text x="17.1331%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.50%)</title><rect x="16.9977%" y="469" width="0.4966%" height="15" fill="rgb(224,169,11)" fg:x="445" fg:w="13"/><text x="17.2477%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.50%)</title><rect x="16.9977%" y="453" width="0.4966%" height="15" fill="rgb(250,166,2)" fg:x="445" fg:w="13"/><text x="17.2477%" y="463.50"></text></g><g><title>cfree (12 samples, 0.46%)</title><rect x="17.0359%" y="437" width="0.4584%" height="15" fill="rgb(242,216,29)" fg:x="446" fg:w="12"/><text x="17.2859%" y="447.50"></text></g><g><title>[libc.so.6] (10 samples, 0.38%)</title><rect x="17.1123%" y="421" width="0.3820%" height="15" fill="rgb(230,116,27)" fg:x="448" fg:w="10"/><text x="17.3623%" y="431.50"></text></g><g><title>[libc.so.6] (7 samples, 0.27%)</title><rect x="17.2269%" y="405" width="0.2674%" height="15" fill="rgb(228,99,48)" fg:x="451" fg:w="7"/><text x="17.4769%" y="415.50"></text></g><g><title>[libc.so.6] (2 samples, 0.08%)</title><rect x="17.4179%" y="389" width="0.0764%" height="15" fill="rgb(253,11,6)" fg:x="456" fg:w="2"/><text x="17.6679%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;misc_utils::stack::Stack&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (20 samples, 0.76%)</title><rect x="16.7685%" y="533" width="0.7639%" height="15" fill="rgb(247,143,39)" fg:x="439" fg:w="20"/><text x="17.0185%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (20 samples, 0.76%)</title><rect x="16.7685%" y="517" width="0.7639%" height="15" fill="rgb(236,97,10)" fg:x="439" fg:w="20"/><text x="17.0185%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (14 samples, 0.53%)</title><rect x="16.9977%" y="501" width="0.5348%" height="15" fill="rgb(233,208,19)" fg:x="445" fg:w="14"/><text x="17.2477%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.53%)</title><rect x="16.9977%" y="485" width="0.5348%" height="15" fill="rgb(216,164,2)" fg:x="445" fg:w="14"/><text x="17.2477%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="17.4943%" y="469" width="0.0382%" height="15" fill="rgb(220,129,5)" fg:x="458" fg:w="1"/><text x="17.7443%" y="479.50"></text></g><g><title>misc_utils::slotmap::SlotMap&lt;K,T&gt;::get (5 samples, 0.19%)</title><rect x="17.5325%" y="533" width="0.1910%" height="15" fill="rgb(242,17,10)" fg:x="459" fg:w="5"/><text x="17.7825%" y="543.50"></text></g><g><title>misc_utils::slotmap::SlotMap&lt;K,T&gt;::is_key_valid (5 samples, 0.19%)</title><rect x="17.5325%" y="517" width="0.1910%" height="15" fill="rgb(242,107,0)" fg:x="459" fg:w="5"/><text x="17.7825%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.08%)</title><rect x="17.6471%" y="501" width="0.0764%" height="15" fill="rgb(251,28,31)" fg:x="462" fg:w="2"/><text x="17.8971%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.08%)</title><rect x="17.6471%" y="485" width="0.0764%" height="15" fill="rgb(233,223,10)" fg:x="462" fg:w="2"/><text x="17.8971%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.08%)</title><rect x="17.6471%" y="469" width="0.0764%" height="15" fill="rgb(215,21,27)" fg:x="462" fg:w="2"/><text x="17.8971%" y="479.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (1 samples, 0.04%)</title><rect x="17.7235%" y="533" width="0.0382%" height="15" fill="rgb(232,23,21)" fg:x="464" fg:w="1"/><text x="17.9735%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="17.7235%" y="517" width="0.0382%" height="15" fill="rgb(244,5,23)" fg:x="464" fg:w="1"/><text x="17.9735%" y="527.50"></text></g><g><title>__rdl_alloc (3 samples, 0.11%)</title><rect x="17.8380%" y="405" width="0.1146%" height="15" fill="rgb(226,81,46)" fg:x="467" fg:w="3"/><text x="18.0880%" y="415.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="17.9526%" y="405" width="0.0382%" height="15" fill="rgb(247,70,30)" fg:x="470" fg:w="1"/><text x="18.2026%" y="415.50"></text></g><g><title>core::ptr::read_volatile (2 samples, 0.08%)</title><rect x="17.9908%" y="405" width="0.0764%" height="15" fill="rgb(212,68,19)" fg:x="471" fg:w="2"/><text x="18.2408%" y="415.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::new (27 samples, 1.03%)</title><rect x="17.7617%" y="533" width="1.0313%" height="15" fill="rgb(240,187,13)" fg:x="465" fg:w="27"/><text x="18.0117%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (27 samples, 1.03%)</title><rect x="17.7617%" y="517" width="1.0313%" height="15" fill="rgb(223,113,26)" fg:x="465" fg:w="27"/><text x="18.0117%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (27 samples, 1.03%)</title><rect x="17.7617%" y="501" width="1.0313%" height="15" fill="rgb(206,192,2)" fg:x="465" fg:w="27"/><text x="18.0117%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (27 samples, 1.03%)</title><rect x="17.7617%" y="485" width="1.0313%" height="15" fill="rgb(241,108,4)" fg:x="465" fg:w="27"/><text x="18.0117%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (27 samples, 1.03%)</title><rect x="17.7617%" y="469" width="1.0313%" height="15" fill="rgb(247,173,49)" fg:x="465" fg:w="27"/><text x="18.0117%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 1.03%)</title><rect x="17.7617%" y="453" width="1.0313%" height="15" fill="rgb(224,114,35)" fg:x="465" fg:w="27"/><text x="18.0117%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 1.03%)</title><rect x="17.7617%" y="437" width="1.0313%" height="15" fill="rgb(245,159,27)" fg:x="465" fg:w="27"/><text x="18.0117%" y="447.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 1.03%)</title><rect x="17.7617%" y="421" width="1.0313%" height="15" fill="rgb(245,172,44)" fg:x="465" fg:w="27"/><text x="18.0117%" y="431.50"></text></g><g><title>malloc (19 samples, 0.73%)</title><rect x="18.0672%" y="405" width="0.7257%" height="15" fill="rgb(236,23,11)" fg:x="473" fg:w="19"/><text x="18.3172%" y="415.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::pop (5 samples, 0.19%)</title><rect x="18.7930%" y="533" width="0.1910%" height="15" fill="rgb(205,117,38)" fg:x="492" fg:w="5"/><text x="19.0430%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (5 samples, 0.19%)</title><rect x="18.7930%" y="517" width="0.1910%" height="15" fill="rgb(237,72,25)" fg:x="492" fg:w="5"/><text x="19.0430%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.04%)</title><rect x="18.9458%" y="501" width="0.0382%" height="15" fill="rgb(244,70,9)" fg:x="496" fg:w="1"/><text x="19.1958%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="19.5187%" y="469" width="0.0382%" height="15" fill="rgb(217,125,39)" fg:x="511" fg:w="1"/><text x="19.7687%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="19.5569%" y="469" width="0.0382%" height="15" fill="rgb(235,36,10)" fg:x="512" fg:w="1"/><text x="19.8069%" y="479.50"></text></g><g><title>__rdl_realloc (3 samples, 0.11%)</title><rect x="19.7097%" y="405" width="0.1146%" height="15" fill="rgb(251,123,47)" fg:x="516" fg:w="3"/><text x="19.9597%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (3 samples, 0.11%)</title><rect x="19.7097%" y="389" width="0.1146%" height="15" fill="rgb(221,13,13)" fg:x="516" fg:w="3"/><text x="19.9597%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (40 samples, 1.53%)</title><rect x="19.5951%" y="469" width="1.5279%" height="15" fill="rgb(238,131,9)" fg:x="513" fg:w="40"/><text x="19.8451%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (37 samples, 1.41%)</title><rect x="19.7097%" y="453" width="1.4133%" height="15" fill="rgb(211,50,8)" fg:x="516" fg:w="37"/><text x="19.9597%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (37 samples, 1.41%)</title><rect x="19.7097%" y="437" width="1.4133%" height="15" fill="rgb(245,182,24)" fg:x="516" fg:w="37"/><text x="19.9597%" y="447.50"></text></g><g><title>alloc::alloc::realloc (37 samples, 1.41%)</title><rect x="19.7097%" y="421" width="1.4133%" height="15" fill="rgb(242,14,37)" fg:x="516" fg:w="37"/><text x="19.9597%" y="431.50"></text></g><g><title>realloc (34 samples, 1.30%)</title><rect x="19.8243%" y="405" width="1.2987%" height="15" fill="rgb(246,228,12)" fg:x="519" fg:w="34"/><text x="20.0743%" y="415.50"></text></g><g><title>[libc.so.6] (29 samples, 1.11%)</title><rect x="20.0153%" y="389" width="1.1077%" height="15" fill="rgb(213,55,15)" fg:x="524" fg:w="29"/><text x="20.2653%" y="399.50"></text></g><g><title>[libc.so.6] (25 samples, 0.95%)</title><rect x="20.1681%" y="373" width="0.9549%" height="15" fill="rgb(209,9,3)" fg:x="528" fg:w="25"/><text x="20.4181%" y="383.50"></text></g><g><title>[libc.so.6] (10 samples, 0.38%)</title><rect x="20.7410%" y="357" width="0.3820%" height="15" fill="rgb(230,59,30)" fg:x="543" fg:w="10"/><text x="20.9910%" y="367.50"></text></g><g><title>core::cmp::max (2 samples, 0.08%)</title><rect x="21.1230%" y="469" width="0.0764%" height="15" fill="rgb(209,121,21)" fg:x="553" fg:w="2"/><text x="21.3730%" y="479.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.08%)</title><rect x="21.1230%" y="453" width="0.0764%" height="15" fill="rgb(220,109,13)" fg:x="553" fg:w="2"/><text x="21.3730%" y="463.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.08%)</title><rect x="21.1230%" y="437" width="0.0764%" height="15" fill="rgb(232,18,1)" fg:x="553" fg:w="2"/><text x="21.3730%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (51 samples, 1.95%)</title><rect x="19.3659%" y="501" width="1.9481%" height="15" fill="rgb(215,41,42)" fg:x="507" fg:w="51"/><text x="19.6159%" y="511.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (47 samples, 1.80%)</title><rect x="19.5187%" y="485" width="1.7953%" height="15" fill="rgb(224,123,36)" fg:x="511" fg:w="47"/><text x="19.7687%" y="495.50">a..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.11%)</title><rect x="21.1994%" y="469" width="0.1146%" height="15" fill="rgb(240,125,3)" fg:x="555" fg:w="3"/><text x="21.4494%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.11%)</title><rect x="21.1994%" y="453" width="0.1146%" height="15" fill="rgb(205,98,50)" fg:x="555" fg:w="3"/><text x="21.4494%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.08%)</title><rect x="21.3140%" y="501" width="0.0764%" height="15" fill="rgb(205,185,37)" fg:x="558" fg:w="2"/><text x="21.5640%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.08%)</title><rect x="21.3140%" y="485" width="0.0764%" height="15" fill="rgb(238,207,15)" fg:x="558" fg:w="2"/><text x="21.5640%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="21.3904%" y="501" width="0.0382%" height="15" fill="rgb(213,199,42)" fg:x="560" fg:w="1"/><text x="21.6404%" y="511.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (99 samples, 3.78%)</title><rect x="18.9840%" y="533" width="3.7815%" height="15" fill="rgb(235,201,11)" fg:x="497" fg:w="99"/><text x="19.2340%" y="543.50">misc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (99 samples, 3.78%)</title><rect x="18.9840%" y="517" width="3.7815%" height="15" fill="rgb(207,46,11)" fg:x="497" fg:w="99"/><text x="19.2340%" y="527.50">allo..</text></g><g><title>core::ptr::write (35 samples, 1.34%)</title><rect x="21.4286%" y="501" width="1.3369%" height="15" fill="rgb(241,35,35)" fg:x="561" fg:w="35"/><text x="21.6786%" y="511.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="22.8801%" y="517" width="0.0382%" height="15" fill="rgb(243,32,47)" fg:x="599" fg:w="1"/><text x="23.1301%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="22.8801%" y="501" width="0.0382%" height="15" fill="rgb(247,202,23)" fg:x="599" fg:w="1"/><text x="23.1301%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="22.8801%" y="485" width="0.0382%" height="15" fill="rgb(219,102,11)" fg:x="599" fg:w="1"/><text x="23.1301%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="22.8801%" y="469" width="0.0382%" height="15" fill="rgb(243,110,44)" fg:x="599" fg:w="1"/><text x="23.1301%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.08%)</title><rect x="23.1856%" y="437" width="0.0764%" height="15" fill="rgb(222,74,54)" fg:x="607" fg:w="2"/><text x="23.4356%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="23.2238%" y="421" width="0.0382%" height="15" fill="rgb(216,99,12)" fg:x="608" fg:w="1"/><text x="23.4738%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.19%)</title><rect x="23.1092%" y="501" width="0.1910%" height="15" fill="rgb(226,22,26)" fg:x="605" fg:w="5"/><text x="23.3592%" y="511.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.19%)</title><rect x="23.1092%" y="485" width="0.1910%" height="15" fill="rgb(217,163,10)" fg:x="605" fg:w="5"/><text x="23.3592%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.19%)</title><rect x="23.1092%" y="469" width="0.1910%" height="15" fill="rgb(213,25,53)" fg:x="605" fg:w="5"/><text x="23.3592%" y="479.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (3 samples, 0.11%)</title><rect x="23.1856%" y="453" width="0.1146%" height="15" fill="rgb(252,105,26)" fg:x="607" fg:w="3"/><text x="23.4356%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (1 samples, 0.04%)</title><rect x="23.2620%" y="437" width="0.0382%" height="15" fill="rgb(220,39,43)" fg:x="609" fg:w="1"/><text x="23.5120%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="23.2620%" y="421" width="0.0382%" height="15" fill="rgb(229,68,48)" fg:x="609" fg:w="1"/><text x="23.5120%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="23.2620%" y="405" width="0.0382%" height="15" fill="rgb(252,8,32)" fg:x="609" fg:w="1"/><text x="23.5120%" y="415.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.04%)</title><rect x="23.6822%" y="437" width="0.0382%" height="15" fill="rgb(223,20,43)" fg:x="620" fg:w="1"/><text x="23.9322%" y="447.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="23.6822%" y="469" width="0.1146%" height="15" fill="rgb(229,81,49)" fg:x="620" fg:w="3"/><text x="23.9322%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="23.6822%" y="453" width="0.1146%" height="15" fill="rgb(236,28,36)" fg:x="620" fg:w="3"/><text x="23.9322%" y="463.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (2 samples, 0.08%)</title><rect x="23.7204%" y="437" width="0.0764%" height="15" fill="rgb(249,185,26)" fg:x="621" fg:w="2"/><text x="23.9704%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (14 samples, 0.53%)</title><rect x="23.7968%" y="469" width="0.5348%" height="15" fill="rgb(249,174,33)" fg:x="623" fg:w="14"/><text x="24.0468%" y="479.50"></text></g><g><title>core::ops::function::FnMut::call_mut (14 samples, 0.53%)</title><rect x="23.7968%" y="453" width="0.5348%" height="15" fill="rgb(233,201,37)" fg:x="623" fg:w="14"/><text x="24.0468%" y="463.50"></text></g><g><title>core::mem::drop (14 samples, 0.53%)</title><rect x="23.7968%" y="437" width="0.5348%" height="15" fill="rgb(221,78,26)" fg:x="623" fg:w="14"/><text x="24.0468%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::ExternalData&gt; (14 samples, 0.53%)</title><rect x="23.7968%" y="421" width="0.5348%" height="15" fill="rgb(250,127,30)" fg:x="623" fg:w="14"/><text x="24.0468%" y="431.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::ExternalData as core::ops::drop::Drop&gt;::drop (14 samples, 0.53%)</title><rect x="23.7968%" y="405" width="0.5348%" height="15" fill="rgb(230,49,44)" fg:x="623" fg:w="14"/><text x="24.0468%" y="415.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::unset_external (14 samples, 0.53%)</title><rect x="23.7968%" y="389" width="0.5348%" height="15" fill="rgb(229,67,23)" fg:x="623" fg:w="14"/><text x="24.0468%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (13 samples, 0.50%)</title><rect x="23.8350%" y="373" width="0.4966%" height="15" fill="rgb(249,83,47)" fg:x="624" fg:w="13"/><text x="24.0850%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (13 samples, 0.50%)</title><rect x="23.8350%" y="357" width="0.4966%" height="15" fill="rgb(215,43,3)" fg:x="624" fg:w="13"/><text x="24.0850%" y="367.50"></text></g><g><title>core::cell::BorrowRefMut::new (13 samples, 0.50%)</title><rect x="23.8350%" y="341" width="0.4966%" height="15" fill="rgb(238,154,13)" fg:x="624" fg:w="13"/><text x="24.0850%" y="351.50"></text></g><g><title>core::ptr::read (11 samples, 0.42%)</title><rect x="25.0191%" y="405" width="0.4202%" height="15" fill="rgb(219,56,2)" fg:x="655" fg:w="11"/><text x="25.2691%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (60 samples, 2.29%)</title><rect x="23.3002%" y="501" width="2.2918%" height="15" fill="rgb(233,0,4)" fg:x="610" fg:w="60"/><text x="23.5502%" y="511.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (50 samples, 1.91%)</title><rect x="23.6822%" y="485" width="1.9099%" height="15" fill="rgb(235,30,7)" fg:x="620" fg:w="50"/><text x="23.9322%" y="495.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (33 samples, 1.26%)</title><rect x="24.3316%" y="469" width="1.2605%" height="15" fill="rgb(250,79,13)" fg:x="637" fg:w="33"/><text x="24.5816%" y="479.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 1.26%)</title><rect x="24.3316%" y="453" width="1.2605%" height="15" fill="rgb(211,146,34)" fg:x="637" fg:w="33"/><text x="24.5816%" y="463.50"></text></g><g><title>core::mem::take (15 samples, 0.57%)</title><rect x="25.0191%" y="437" width="0.5730%" height="15" fill="rgb(228,22,38)" fg:x="655" fg:w="15"/><text x="25.2691%" y="447.50"></text></g><g><title>core::mem::replace (15 samples, 0.57%)</title><rect x="25.0191%" y="421" width="0.5730%" height="15" fill="rgb(235,168,5)" fg:x="655" fg:w="15"/><text x="25.2691%" y="431.50"></text></g><g><title>core::ptr::write (4 samples, 0.15%)</title><rect x="25.4393%" y="405" width="0.1528%" height="15" fill="rgb(221,155,16)" fg:x="666" fg:w="4"/><text x="25.6893%" y="415.50"></text></g><g><title>__rust_dealloc (1 samples, 0.04%)</title><rect x="25.9740%" y="309" width="0.0382%" height="15" fill="rgb(215,215,53)" fg:x="680" fg:w="1"/><text x="26.2240%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.80%)</title><rect x="25.9740%" y="341" width="0.8021%" height="15" fill="rgb(223,4,10)" fg:x="680" fg:w="21"/><text x="26.2240%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 0.80%)</title><rect x="25.9740%" y="325" width="0.8021%" height="15" fill="rgb(234,103,6)" fg:x="680" fg:w="21"/><text x="26.2240%" y="335.50"></text></g><g><title>cfree (20 samples, 0.76%)</title><rect x="26.0122%" y="309" width="0.7639%" height="15" fill="rgb(227,97,0)" fg:x="681" fg:w="20"/><text x="26.2622%" y="319.50"></text></g><g><title>[libc.so.6] (12 samples, 0.46%)</title><rect x="26.3178%" y="293" width="0.4584%" height="15" fill="rgb(234,150,53)" fg:x="689" fg:w="12"/><text x="26.5678%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="26.7762%" y="325" width="0.0382%" height="15" fill="rgb(228,201,54)" fg:x="701" fg:w="1"/><text x="27.0262%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="26.7762%" y="309" width="0.0382%" height="15" fill="rgb(222,22,37)" fg:x="701" fg:w="1"/><text x="27.0262%" y="319.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::clear (33 samples, 1.26%)</title><rect x="25.5921%" y="501" width="1.2605%" height="15" fill="rgb(237,53,32)" fg:x="670" fg:w="33"/><text x="25.8421%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (33 samples, 1.26%)</title><rect x="25.5921%" y="485" width="1.2605%" height="15" fill="rgb(233,25,53)" fg:x="670" fg:w="33"/><text x="25.8421%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;]&gt; (33 samples, 1.26%)</title><rect x="25.5921%" y="469" width="1.2605%" height="15" fill="rgb(210,40,34)" fg:x="670" fg:w="33"/><text x="25.8421%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (30 samples, 1.15%)</title><rect x="25.7066%" y="453" width="1.1459%" height="15" fill="rgb(241,220,44)" fg:x="673" fg:w="30"/><text x="25.9566%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (30 samples, 1.15%)</title><rect x="25.7066%" y="437" width="1.1459%" height="15" fill="rgb(235,28,35)" fg:x="673" fg:w="30"/><text x="25.9566%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;simple_lisp::interpreter::ast::Ident,(),rustc_hash::FxBuildHasher&gt;&gt; (30 samples, 1.15%)</title><rect x="25.7066%" y="421" width="1.1459%" height="15" fill="rgb(210,56,17)" fg:x="673" fg:w="30"/><text x="25.9566%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(simple_lisp::interpreter::ast::Ident,())&gt;&gt; (30 samples, 1.15%)</title><rect x="25.7066%" y="405" width="1.1459%" height="15" fill="rgb(224,130,29)" fg:x="673" fg:w="30"/><text x="25.9566%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 1.15%)</title><rect x="25.7066%" y="389" width="1.1459%" height="15" fill="rgb(235,212,8)" fg:x="673" fg:w="30"/><text x="25.9566%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (30 samples, 1.15%)</title><rect x="25.7066%" y="373" width="1.1459%" height="15" fill="rgb(223,33,50)" fg:x="673" fg:w="30"/><text x="25.9566%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (23 samples, 0.88%)</title><rect x="25.9740%" y="357" width="0.8785%" height="15" fill="rgb(219,149,13)" fg:x="680" fg:w="23"/><text x="26.2240%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::allocation_info (2 samples, 0.08%)</title><rect x="26.7762%" y="341" width="0.0764%" height="15" fill="rgb(250,156,29)" fg:x="701" fg:w="2"/><text x="27.0262%" y="351.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.04%)</title><rect x="26.8144%" y="325" width="0.0382%" height="15" fill="rgb(216,193,19)" fg:x="702" fg:w="1"/><text x="27.0644%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.08%)</title><rect x="26.8526%" y="469" width="0.0764%" height="15" fill="rgb(216,135,14)" fg:x="703" fg:w="2"/><text x="27.1026%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.08%)</title><rect x="26.8526%" y="453" width="0.0764%" height="15" fill="rgb(241,47,5)" fg:x="703" fg:w="2"/><text x="27.1026%" y="463.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::drain (3 samples, 0.11%)</title><rect x="26.8526%" y="501" width="0.1146%" height="15" fill="rgb(233,42,35)" fg:x="703" fg:w="3"/><text x="27.1026%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (3 samples, 0.11%)</title><rect x="26.8526%" y="485" width="0.1146%" height="15" fill="rgb(231,13,6)" fg:x="703" fg:w="3"/><text x="27.1026%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.04%)</title><rect x="26.9290%" y="469" width="0.0382%" height="15" fill="rgb(207,181,40)" fg:x="705" fg:w="1"/><text x="27.1790%" y="479.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="26.9290%" y="453" width="0.0382%" height="15" fill="rgb(254,173,49)" fg:x="705" fg:w="1"/><text x="27.1790%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.04%)</title><rect x="26.9290%" y="437" width="0.0382%" height="15" fill="rgb(221,1,38)" fg:x="705" fg:w="1"/><text x="27.1790%" y="447.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (3 samples, 0.11%)</title><rect x="26.9672%" y="501" width="0.1146%" height="15" fill="rgb(206,124,46)" fg:x="706" fg:w="3"/><text x="27.2172%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.11%)</title><rect x="26.9672%" y="485" width="0.1146%" height="15" fill="rgb(249,21,11)" fg:x="706" fg:w="3"/><text x="27.2172%" y="495.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (3 samples, 0.11%)</title><rect x="27.0817%" y="405" width="0.1146%" height="15" fill="rgb(222,201,40)" fg:x="709" fg:w="3"/><text x="27.3317%" y="415.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clear_env (117 samples, 4.47%)</title><rect x="22.7655%" y="533" width="4.4691%" height="15" fill="rgb(235,61,29)" fg:x="596" fg:w="117"/><text x="23.0155%" y="543.50">simpl..</text></g><g><title>simple_lisp::interpreter::Env::clear (113 samples, 4.32%)</title><rect x="22.9183%" y="517" width="4.3163%" height="15" fill="rgb(219,207,3)" fg:x="600" fg:w="113"/><text x="23.1683%" y="527.50">simpl..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter_mut (4 samples, 0.15%)</title><rect x="27.0817%" y="501" width="0.1528%" height="15" fill="rgb(222,56,46)" fg:x="709" fg:w="4"/><text x="27.3317%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter_mut (4 samples, 0.15%)</title><rect x="27.0817%" y="485" width="0.1528%" height="15" fill="rgb(239,76,54)" fg:x="709" fg:w="4"/><text x="27.3317%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (4 samples, 0.15%)</title><rect x="27.0817%" y="469" width="0.1528%" height="15" fill="rgb(231,124,27)" fg:x="709" fg:w="4"/><text x="27.3317%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (4 samples, 0.15%)</title><rect x="27.0817%" y="453" width="0.1528%" height="15" fill="rgb(249,195,6)" fg:x="709" fg:w="4"/><text x="27.3317%" y="463.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (4 samples, 0.15%)</title><rect x="27.0817%" y="437" width="0.1528%" height="15" fill="rgb(237,174,47)" fg:x="709" fg:w="4"/><text x="27.3317%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (4 samples, 0.15%)</title><rect x="27.0817%" y="421" width="0.1528%" height="15" fill="rgb(206,201,31)" fg:x="709" fg:w="4"/><text x="27.3317%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.04%)</title><rect x="27.1963%" y="405" width="0.0382%" height="15" fill="rgb(231,57,52)" fg:x="712" fg:w="1"/><text x="27.4463%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="27.1963%" y="389" width="0.0382%" height="15" fill="rgb(248,177,22)" fg:x="712" fg:w="1"/><text x="27.4463%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.04%)</title><rect x="27.4637%" y="485" width="0.0382%" height="15" fill="rgb(215,211,37)" fg:x="719" fg:w="1"/><text x="27.7137%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="27.4637%" y="469" width="0.0382%" height="15" fill="rgb(241,128,51)" fg:x="719" fg:w="1"/><text x="27.7137%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="27.4637%" y="453" width="0.0382%" height="15" fill="rgb(227,165,31)" fg:x="719" fg:w="1"/><text x="27.7137%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="27.5019%" y="485" width="0.0382%" height="15" fill="rgb(228,167,24)" fg:x="720" fg:w="1"/><text x="27.7519%" y="495.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (3 samples, 0.11%)</title><rect x="27.4637%" y="501" width="0.1146%" height="15" fill="rgb(228,143,12)" fg:x="719" fg:w="3"/><text x="27.7137%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.04%)</title><rect x="27.5401%" y="485" width="0.0382%" height="15" fill="rgb(249,149,8)" fg:x="721" fg:w="1"/><text x="27.7901%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="27.5783%" y="485" width="0.0382%" height="15" fill="rgb(243,35,44)" fg:x="722" fg:w="1"/><text x="27.8283%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="27.5783%" y="469" width="0.0382%" height="15" fill="rgb(246,89,9)" fg:x="722" fg:w="1"/><text x="27.8283%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="27.5783%" y="453" width="0.0382%" height="15" fill="rgb(233,213,13)" fg:x="722" fg:w="1"/><text x="27.8283%" y="463.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (2 samples, 0.08%)</title><rect x="27.5783%" y="501" width="0.0764%" height="15" fill="rgb(233,141,41)" fg:x="722" fg:w="2"/><text x="27.8283%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.04%)</title><rect x="27.6165%" y="485" width="0.0382%" height="15" fill="rgb(239,167,4)" fg:x="723" fg:w="1"/><text x="27.8665%" y="495.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (1 samples, 0.04%)</title><rect x="27.6547%" y="501" width="0.0382%" height="15" fill="rgb(209,217,16)" fg:x="724" fg:w="1"/><text x="27.9047%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="27.6547%" y="485" width="0.0382%" height="15" fill="rgb(219,88,35)" fg:x="724" fg:w="1"/><text x="27.9047%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.04%)</title><rect x="27.6929%" y="469" width="0.0382%" height="15" fill="rgb(220,193,23)" fg:x="725" fg:w="1"/><text x="27.9429%" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.04%)</title><rect x="27.6929%" y="453" width="0.0382%" height="15" fill="rgb(230,90,52)" fg:x="725" fg:w="1"/><text x="27.9429%" y="463.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.04%)</title><rect x="27.6929%" y="437" width="0.0382%" height="15" fill="rgb(252,106,19)" fg:x="725" fg:w="1"/><text x="27.9429%" y="447.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::external (7 samples, 0.27%)</title><rect x="27.6929%" y="501" width="0.2674%" height="15" fill="rgb(206,74,20)" fg:x="725" fg:w="7"/><text x="27.9429%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::set_external (7 samples, 0.27%)</title><rect x="27.6929%" y="485" width="0.2674%" height="15" fill="rgb(230,138,44)" fg:x="725" fg:w="7"/><text x="27.9429%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;usize&gt;&gt; (6 samples, 0.23%)</title><rect x="27.7311%" y="469" width="0.2292%" height="15" fill="rgb(235,182,43)" fg:x="726" fg:w="6"/><text x="27.9811%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (6 samples, 0.23%)</title><rect x="27.7311%" y="453" width="0.2292%" height="15" fill="rgb(242,16,51)" fg:x="726" fg:w="6"/><text x="27.9811%" y="463.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (6 samples, 0.23%)</title><rect x="27.7311%" y="437" width="0.2292%" height="15" fill="rgb(248,9,4)" fg:x="726" fg:w="6"/><text x="27.9811%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (6 samples, 0.23%)</title><rect x="27.7311%" y="421" width="0.2292%" height="15" fill="rgb(210,31,22)" fg:x="726" fg:w="6"/><text x="27.9811%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (6 samples, 0.23%)</title><rect x="27.7311%" y="405" width="0.2292%" height="15" fill="rgb(239,54,39)" fg:x="726" fg:w="6"/><text x="27.9811%" y="415.50"></text></g><g><title>core::mem::replace (6 samples, 0.23%)</title><rect x="27.7311%" y="389" width="0.2292%" height="15" fill="rgb(230,99,41)" fg:x="726" fg:w="6"/><text x="27.9811%" y="399.50"></text></g><g><title>core::ptr::write (6 samples, 0.23%)</title><rect x="27.7311%" y="373" width="0.2292%" height="15" fill="rgb(253,106,12)" fg:x="726" fg:w="6"/><text x="27.9811%" y="383.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.04%)</title><rect x="27.9603%" y="501" width="0.0382%" height="15" fill="rgb(213,46,41)" fg:x="732" fg:w="1"/><text x="28.2103%" y="511.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (1 samples, 0.04%)</title><rect x="27.9603%" y="485" width="0.0382%" height="15" fill="rgb(215,133,35)" fg:x="732" fg:w="1"/><text x="28.2103%" y="495.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (1 samples, 0.04%)</title><rect x="27.9603%" y="469" width="0.0382%" height="15" fill="rgb(213,28,5)" fg:x="732" fg:w="1"/><text x="28.2103%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="28.1895%" y="437" width="0.0382%" height="15" fill="rgb(215,77,49)" fg:x="738" fg:w="1"/><text x="28.4395%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (8 samples, 0.31%)</title><rect x="27.9985%" y="501" width="0.3056%" height="15" fill="rgb(248,100,22)" fg:x="733" fg:w="8"/><text x="28.2485%" y="511.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (8 samples, 0.31%)</title><rect x="27.9985%" y="485" width="0.3056%" height="15" fill="rgb(208,67,9)" fg:x="733" fg:w="8"/><text x="28.2485%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (8 samples, 0.31%)</title><rect x="27.9985%" y="469" width="0.3056%" height="15" fill="rgb(219,133,21)" fg:x="733" fg:w="8"/><text x="28.2485%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (8 samples, 0.31%)</title><rect x="27.9985%" y="453" width="0.3056%" height="15" fill="rgb(246,46,29)" fg:x="733" fg:w="8"/><text x="28.2485%" y="463.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.08%)</title><rect x="28.2277%" y="437" width="0.0764%" height="15" fill="rgb(246,185,52)" fg:x="739" fg:w="2"/><text x="28.4777%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="28.4186%" y="389" width="0.0382%" height="15" fill="rgb(252,136,11)" fg:x="744" fg:w="1"/><text x="28.6686%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (1 samples, 0.04%)</title><rect x="28.4568%" y="389" width="0.0382%" height="15" fill="rgb(219,138,53)" fg:x="745" fg:w="1"/><text x="28.7068%" y="399.50"></text></g><g><title>hashbrown::raw::h2 (5 samples, 0.19%)</title><rect x="28.4950%" y="389" width="0.1910%" height="15" fill="rgb(211,51,23)" fg:x="746" fg:w="5"/><text x="28.7450%" y="399.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (11 samples, 0.42%)</title><rect x="28.3040%" y="501" width="0.4202%" height="15" fill="rgb(247,221,28)" fg:x="741" fg:w="11"/><text x="28.5540%" y="511.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (11 samples, 0.42%)</title><rect x="28.3040%" y="485" width="0.4202%" height="15" fill="rgb(251,222,45)" fg:x="741" fg:w="11"/><text x="28.5540%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (11 samples, 0.42%)</title><rect x="28.3040%" y="469" width="0.4202%" height="15" fill="rgb(217,162,53)" fg:x="741" fg:w="11"/><text x="28.5540%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (11 samples, 0.42%)</title><rect x="28.3040%" y="453" width="0.4202%" height="15" fill="rgb(229,93,14)" fg:x="741" fg:w="11"/><text x="28.5540%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (10 samples, 0.38%)</title><rect x="28.3422%" y="437" width="0.3820%" height="15" fill="rgb(209,67,49)" fg:x="742" fg:w="10"/><text x="28.5922%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (10 samples, 0.38%)</title><rect x="28.3422%" y="421" width="0.3820%" height="15" fill="rgb(213,87,29)" fg:x="742" fg:w="10"/><text x="28.5922%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (10 samples, 0.38%)</title><rect x="28.3422%" y="405" width="0.3820%" height="15" fill="rgb(205,151,52)" fg:x="742" fg:w="10"/><text x="28.5922%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="28.6860%" y="389" width="0.0382%" height="15" fill="rgb(253,215,39)" fg:x="751" fg:w="1"/><text x="28.9360%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="28.6860%" y="373" width="0.0382%" height="15" fill="rgb(221,220,41)" fg:x="751" fg:w="1"/><text x="28.9360%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.08%)</title><rect x="28.7624%" y="453" width="0.0764%" height="15" fill="rgb(218,133,21)" fg:x="753" fg:w="2"/><text x="29.0124%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.08%)</title><rect x="28.7624%" y="437" width="0.0764%" height="15" fill="rgb(221,193,43)" fg:x="753" fg:w="2"/><text x="29.0124%" y="447.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::finish (2 samples, 0.08%)</title><rect x="28.7624%" y="421" width="0.0764%" height="15" fill="rgb(240,128,52)" fg:x="753" fg:w="2"/><text x="29.0124%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (2 samples, 0.08%)</title><rect x="28.7624%" y="405" width="0.0764%" height="15" fill="rgb(253,114,12)" fg:x="753" fg:w="2"/><text x="29.0124%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.04%)</title><rect x="29.2208%" y="389" width="0.0382%" height="15" fill="rgb(215,223,47)" fg:x="765" fg:w="1"/><text x="29.4708%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.04%)</title><rect x="29.2208%" y="373" width="0.0382%" height="15" fill="rgb(248,225,23)" fg:x="765" fg:w="1"/><text x="29.4708%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (6 samples, 0.23%)</title><rect x="29.2590%" y="341" width="0.2292%" height="15" fill="rgb(250,108,0)" fg:x="766" fg:w="6"/><text x="29.5090%" y="351.50"></text></g><g><title>core::intrinsics::write_bytes (6 samples, 0.23%)</title><rect x="29.2590%" y="325" width="0.2292%" height="15" fill="rgb(228,208,7)" fg:x="766" fg:w="6"/><text x="29.5090%" y="335.50"></text></g><g><title>[libc.so.6] (6 samples, 0.23%)</title><rect x="29.2590%" y="309" width="0.2292%" height="15" fill="rgb(244,45,10)" fg:x="766" fg:w="6"/><text x="29.5090%" y="319.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.04%)</title><rect x="29.4882%" y="325" width="0.0382%" height="15" fill="rgb(207,125,25)" fg:x="772" fg:w="1"/><text x="29.7382%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.04%)</title><rect x="29.4882%" y="309" width="0.0382%" height="15" fill="rgb(210,195,18)" fg:x="772" fg:w="1"/><text x="29.7382%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.04%)</title><rect x="29.4882%" y="293" width="0.0382%" height="15" fill="rgb(249,80,12)" fg:x="772" fg:w="1"/><text x="29.7382%" y="303.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (8 samples, 0.31%)</title><rect x="29.5264%" y="325" width="0.3056%" height="15" fill="rgb(221,65,9)" fg:x="773" fg:w="8"/><text x="29.7764%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.31%)</title><rect x="29.5264%" y="309" width="0.3056%" height="15" fill="rgb(235,49,36)" fg:x="773" fg:w="8"/><text x="29.7764%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.31%)</title><rect x="29.5264%" y="293" width="0.3056%" height="15" fill="rgb(225,32,20)" fg:x="773" fg:w="8"/><text x="29.7764%" y="303.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.19%)</title><rect x="29.6409%" y="277" width="0.1910%" height="15" fill="rgb(215,141,46)" fg:x="776" fg:w="5"/><text x="29.8909%" y="287.50"></text></g><g><title>malloc (5 samples, 0.19%)</title><rect x="29.6409%" y="261" width="0.1910%" height="15" fill="rgb(250,160,47)" fg:x="776" fg:w="5"/><text x="29.8909%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (16 samples, 0.61%)</title><rect x="29.2590%" y="389" width="0.6112%" height="15" fill="rgb(216,222,40)" fg:x="766" fg:w="16"/><text x="29.5090%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (16 samples, 0.61%)</title><rect x="29.2590%" y="373" width="0.6112%" height="15" fill="rgb(234,217,39)" fg:x="766" fg:w="16"/><text x="29.5090%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (16 samples, 0.61%)</title><rect x="29.2590%" y="357" width="0.6112%" height="15" fill="rgb(207,178,40)" fg:x="766" fg:w="16"/><text x="29.5090%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (10 samples, 0.38%)</title><rect x="29.4882%" y="341" width="0.3820%" height="15" fill="rgb(221,136,13)" fg:x="772" fg:w="10"/><text x="29.7382%" y="351.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.04%)</title><rect x="29.8319%" y="325" width="0.0382%" height="15" fill="rgb(249,199,10)" fg:x="781" fg:w="1"/><text x="30.0819%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (29 samples, 1.11%)</title><rect x="28.8388%" y="437" width="1.1077%" height="15" fill="rgb(249,222,13)" fg:x="755" fg:w="29"/><text x="29.0888%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (25 samples, 0.95%)</title><rect x="28.9916%" y="421" width="0.9549%" height="15" fill="rgb(244,185,38)" fg:x="759" fg:w="25"/><text x="29.2416%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (23 samples, 0.88%)</title><rect x="29.0680%" y="405" width="0.8785%" height="15" fill="rgb(236,202,9)" fg:x="761" fg:w="23"/><text x="29.3180%" y="415.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (2 samples, 0.08%)</title><rect x="29.8701%" y="389" width="0.0764%" height="15" fill="rgb(250,229,37)" fg:x="782" fg:w="2"/><text x="30.1201%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.46%)</title><rect x="29.9465%" y="421" width="0.4584%" height="15" fill="rgb(206,174,23)" fg:x="784" fg:w="12"/><text x="30.1965%" y="431.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (12 samples, 0.46%)</title><rect x="29.9465%" y="405" width="0.4584%" height="15" fill="rgb(211,33,43)" fg:x="784" fg:w="12"/><text x="30.1965%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.04%)</title><rect x="30.4049%" y="421" width="0.0382%" height="15" fill="rgb(245,58,50)" fg:x="796" fg:w="1"/><text x="30.6549%" y="431.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="30.4049%" y="405" width="0.0382%" height="15" fill="rgb(244,68,36)" fg:x="796" fg:w="1"/><text x="30.6549%" y="415.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (1 samples, 0.04%)</title><rect x="30.4049%" y="389" width="0.0382%" height="15" fill="rgb(232,229,15)" fg:x="796" fg:w="1"/><text x="30.6549%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.04%)</title><rect x="30.4431%" y="421" width="0.0382%" height="15" fill="rgb(254,30,23)" fg:x="797" fg:w="1"/><text x="30.6931%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.04%)</title><rect x="30.4431%" y="405" width="0.0382%" height="15" fill="rgb(235,160,14)" fg:x="797" fg:w="1"/><text x="30.6931%" y="415.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.04%)</title><rect x="30.4431%" y="389" width="0.0382%" height="15" fill="rgb(212,155,44)" fg:x="797" fg:w="1"/><text x="30.6931%" y="399.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.04%)</title><rect x="30.4813%" y="421" width="0.0382%" height="15" fill="rgb(226,2,50)" fg:x="798" fg:w="1"/><text x="30.7313%" y="431.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::define_var (130 samples, 4.97%)</title><rect x="27.2345%" y="533" width="4.9656%" height="15" fill="rgb(234,177,6)" fg:x="713" fg:w="130"/><text x="27.4845%" y="543.50">simple..</text></g><g><title>simple_lisp::interpreter::Env::insert (127 samples, 4.85%)</title><rect x="27.3491%" y="517" width="4.8510%" height="15" fill="rgb(217,24,9)" fg:x="716" fg:w="127"/><text x="27.5991%" y="527.50">simple..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (91 samples, 3.48%)</title><rect x="28.7242%" y="501" width="3.4759%" height="15" fill="rgb(220,13,46)" fg:x="752" fg:w="91"/><text x="28.9742%" y="511.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (91 samples, 3.48%)</title><rect x="28.7242%" y="485" width="3.4759%" height="15" fill="rgb(239,221,27)" fg:x="752" fg:w="91"/><text x="28.9742%" y="495.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (90 samples, 3.44%)</title><rect x="28.7624%" y="469" width="3.4377%" height="15" fill="rgb(222,198,25)" fg:x="753" fg:w="90"/><text x="29.0124%" y="479.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (88 samples, 3.36%)</title><rect x="28.8388%" y="453" width="3.3613%" height="15" fill="rgb(211,99,13)" fg:x="755" fg:w="88"/><text x="29.0888%" y="463.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (59 samples, 2.25%)</title><rect x="29.9465%" y="437" width="2.2536%" height="15" fill="rgb(232,111,31)" fg:x="784" fg:w="59"/><text x="30.1965%" y="447.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (44 samples, 1.68%)</title><rect x="30.5195%" y="421" width="1.6807%" height="15" fill="rgb(245,82,37)" fg:x="799" fg:w="44"/><text x="30.7695%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (44 samples, 1.68%)</title><rect x="30.5195%" y="405" width="1.6807%" height="15" fill="rgb(227,149,46)" fg:x="799" fg:w="44"/><text x="30.7695%" y="415.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (3 samples, 0.11%)</title><rect x="32.3147%" y="517" width="0.1146%" height="15" fill="rgb(218,36,50)" fg:x="846" fg:w="3"/><text x="32.5647%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.11%)</title><rect x="32.3147%" y="501" width="0.1146%" height="15" fill="rgb(226,80,48)" fg:x="846" fg:w="3"/><text x="32.5647%" y="511.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (3 samples, 0.11%)</title><rect x="32.9259%" y="501" width="0.1146%" height="15" fill="rgb(238,224,15)" fg:x="862" fg:w="3"/><text x="33.1759%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (3 samples, 0.11%)</title><rect x="32.9259%" y="485" width="0.1146%" height="15" fill="rgb(241,136,10)" fg:x="862" fg:w="3"/><text x="33.1759%" y="495.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::DataRef as core::clone::Clone&gt;::clone (49 samples, 1.87%)</title><rect x="33.0405%" y="501" width="1.8717%" height="15" fill="rgb(208,32,45)" fg:x="865" fg:w="49"/><text x="33.2905%" y="511.50">&lt;..</text></g><g><title>hashbrown::map::make_hash (2 samples, 0.08%)</title><rect x="35.1795%" y="453" width="0.0764%" height="15" fill="rgb(207,135,9)" fg:x="921" fg:w="2"/><text x="35.4295%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.08%)</title><rect x="35.1795%" y="437" width="0.0764%" height="15" fill="rgb(206,86,44)" fg:x="921" fg:w="2"/><text x="35.4295%" y="447.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::finish (2 samples, 0.08%)</title><rect x="35.1795%" y="421" width="0.0764%" height="15" fill="rgb(245,177,15)" fg:x="921" fg:w="2"/><text x="35.4295%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (2 samples, 0.08%)</title><rect x="35.1795%" y="405" width="0.0764%" height="15" fill="rgb(206,64,50)" fg:x="921" fg:w="2"/><text x="35.4295%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (6 samples, 0.23%)</title><rect x="37.8915%" y="389" width="0.2292%" height="15" fill="rgb(234,36,40)" fg:x="992" fg:w="6"/><text x="38.1415%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.92%)</title><rect x="37.2422%" y="405" width="0.9167%" height="15" fill="rgb(213,64,8)" fg:x="975" fg:w="24"/><text x="37.4922%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.04%)</title><rect x="38.1207%" y="389" width="0.0382%" height="15" fill="rgb(210,75,36)" fg:x="998" fg:w="1"/><text x="38.3707%" y="399.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (18 samples, 0.69%)</title><rect x="38.1589%" y="389" width="0.6875%" height="15" fill="rgb(229,88,21)" fg:x="999" fg:w="18"/><text x="38.4089%" y="399.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (18 samples, 0.69%)</title><rect x="38.1589%" y="373" width="0.6875%" height="15" fill="rgb(252,204,47)" fg:x="999" fg:w="18"/><text x="38.4089%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (18 samples, 0.69%)</title><rect x="38.1589%" y="357" width="0.6875%" height="15" fill="rgb(208,77,27)" fg:x="999" fg:w="18"/><text x="38.4089%" y="367.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::cmp::PartialEq&gt;::eq (18 samples, 0.69%)</title><rect x="38.1589%" y="341" width="0.6875%" height="15" fill="rgb(221,76,26)" fg:x="999" fg:w="18"/><text x="38.4089%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (44 samples, 1.68%)</title><rect x="38.1589%" y="405" width="1.6807%" height="15" fill="rgb(225,139,18)" fg:x="999" fg:w="44"/><text x="38.4089%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (26 samples, 0.99%)</title><rect x="38.8464%" y="389" width="0.9931%" height="15" fill="rgb(230,137,11)" fg:x="1017" fg:w="26"/><text x="39.0964%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (26 samples, 0.99%)</title><rect x="38.8464%" y="373" width="0.9931%" height="15" fill="rgb(212,28,1)" fg:x="1017" fg:w="26"/><text x="39.0964%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (26 samples, 0.99%)</title><rect x="38.8464%" y="357" width="0.9931%" height="15" fill="rgb(248,164,17)" fg:x="1017" fg:w="26"/><text x="39.0964%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (26 samples, 0.99%)</title><rect x="38.8464%" y="341" width="0.9931%" height="15" fill="rgb(222,171,42)" fg:x="1017" fg:w="26"/><text x="39.0964%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (15 samples, 0.57%)</title><rect x="39.8396%" y="405" width="0.5730%" height="15" fill="rgb(243,84,45)" fg:x="1043" fg:w="15"/><text x="40.0896%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (10 samples, 0.38%)</title><rect x="40.4125%" y="405" width="0.3820%" height="15" fill="rgb(252,49,23)" fg:x="1058" fg:w="10"/><text x="40.6625%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (10 samples, 0.38%)</title><rect x="40.4125%" y="389" width="0.3820%" height="15" fill="rgb(215,19,7)" fg:x="1058" fg:w="10"/><text x="40.6625%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (148 samples, 5.65%)</title><rect x="35.2559%" y="453" width="5.6532%" height="15" fill="rgb(238,81,41)" fg:x="923" fg:w="148"/><text x="35.5059%" y="463.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (148 samples, 5.65%)</title><rect x="35.2559%" y="437" width="5.6532%" height="15" fill="rgb(210,199,37)" fg:x="923" fg:w="148"/><text x="35.5059%" y="447.50">hashbro..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (146 samples, 5.58%)</title><rect x="35.3323%" y="421" width="5.5768%" height="15" fill="rgb(244,192,49)" fg:x="925" fg:w="146"/><text x="35.5823%" y="431.50">hashbro..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (3 samples, 0.11%)</title><rect x="40.7945%" y="405" width="0.1146%" height="15" fill="rgb(226,211,11)" fg:x="1068" fg:w="3"/><text x="41.0445%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.11%)</title><rect x="40.7945%" y="389" width="0.1146%" height="15" fill="rgb(236,162,54)" fg:x="1068" fg:w="3"/><text x="41.0445%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.11%)</title><rect x="40.7945%" y="373" width="0.1146%" height="15" fill="rgb(220,229,9)" fg:x="1068" fg:w="3"/><text x="41.0445%" y="383.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::get_var (229 samples, 8.75%)</title><rect x="32.2002%" y="533" width="8.7471%" height="15" fill="rgb(250,87,22)" fg:x="843" fg:w="229"/><text x="32.4502%" y="543.50">simple_lisp:..</text></g><g><title>simple_lisp::interpreter::Env::get (223 samples, 8.52%)</title><rect x="32.4293%" y="517" width="8.5180%" height="15" fill="rgb(239,43,17)" fg:x="849" fg:w="223"/><text x="32.6793%" y="527.50">simple_lisp:..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (158 samples, 6.04%)</title><rect x="34.9121%" y="501" width="6.0351%" height="15" fill="rgb(231,177,25)" fg:x="914" fg:w="158"/><text x="35.1621%" y="511.50">std::col..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (158 samples, 6.04%)</title><rect x="34.9121%" y="485" width="6.0351%" height="15" fill="rgb(219,179,1)" fg:x="914" fg:w="158"/><text x="35.1621%" y="495.50">hashbrow..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (158 samples, 6.04%)</title><rect x="34.9121%" y="469" width="6.0351%" height="15" fill="rgb(238,219,53)" fg:x="914" fg:w="158"/><text x="35.1621%" y="479.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::is_empty (1 samples, 0.04%)</title><rect x="40.9091%" y="453" width="0.0382%" height="15" fill="rgb(232,167,36)" fg:x="1071" fg:w="1"/><text x="41.1591%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="40.9091%" y="437" width="0.0382%" height="15" fill="rgb(244,19,51)" fg:x="1071" fg:w="1"/><text x="41.1591%" y="447.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (1 samples, 0.04%)</title><rect x="40.9855%" y="517" width="0.0382%" height="15" fill="rgb(224,6,22)" fg:x="1073" fg:w="1"/><text x="41.2355%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="40.9855%" y="501" width="0.0382%" height="15" fill="rgb(224,145,5)" fg:x="1073" fg:w="1"/><text x="41.2355%" y="511.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="40.9855%" y="485" width="0.0382%" height="15" fill="rgb(234,130,49)" fg:x="1073" fg:w="1"/><text x="41.2355%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="41.0237%" y="501" width="0.0382%" height="15" fill="rgb(254,6,2)" fg:x="1074" fg:w="1"/><text x="41.2737%" y="511.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="41.0237%" y="485" width="0.0382%" height="15" fill="rgb(208,96,46)" fg:x="1074" fg:w="1"/><text x="41.2737%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="41.0237%" y="469" width="0.0382%" height="15" fill="rgb(239,3,39)" fg:x="1074" fg:w="1"/><text x="41.2737%" y="479.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.04%)</title><rect x="41.0237%" y="453" width="0.0382%" height="15" fill="rgb(233,210,1)" fg:x="1074" fg:w="1"/><text x="41.2737%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="41.0237%" y="437" width="0.0382%" height="15" fill="rgb(244,137,37)" fg:x="1074" fg:w="1"/><text x="41.2737%" y="447.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (2 samples, 0.08%)</title><rect x="41.1001%" y="373" width="0.0764%" height="15" fill="rgb(240,136,2)" fg:x="1076" fg:w="2"/><text x="41.3501%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (2 samples, 0.08%)</title><rect x="41.1001%" y="357" width="0.0764%" height="15" fill="rgb(239,18,37)" fg:x="1076" fg:w="2"/><text x="41.3501%" y="367.50"></text></g><g><title>core::cell::BorrowRefMut::new (2 samples, 0.08%)</title><rect x="41.1001%" y="341" width="0.0764%" height="15" fill="rgb(218,185,22)" fg:x="1076" fg:w="2"/><text x="41.3501%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.15%)</title><rect x="41.0619%" y="469" width="0.1528%" height="15" fill="rgb(225,218,4)" fg:x="1075" fg:w="4"/><text x="41.3119%" y="479.50"></text></g><g><title>core::ops::function::FnMut::call_mut (4 samples, 0.15%)</title><rect x="41.0619%" y="453" width="0.1528%" height="15" fill="rgb(230,182,32)" fg:x="1075" fg:w="4"/><text x="41.3119%" y="463.50"></text></g><g><title>core::mem::drop (4 samples, 0.15%)</title><rect x="41.0619%" y="437" width="0.1528%" height="15" fill="rgb(242,56,43)" fg:x="1075" fg:w="4"/><text x="41.3119%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::ExternalData&gt; (4 samples, 0.15%)</title><rect x="41.0619%" y="421" width="0.1528%" height="15" fill="rgb(233,99,24)" fg:x="1075" fg:w="4"/><text x="41.3119%" y="431.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::ExternalData as core::ops::drop::Drop&gt;::drop (4 samples, 0.15%)</title><rect x="41.0619%" y="405" width="0.1528%" height="15" fill="rgb(234,209,42)" fg:x="1075" fg:w="4"/><text x="41.3119%" y="415.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::unset_external (4 samples, 0.15%)</title><rect x="41.0619%" y="389" width="0.1528%" height="15" fill="rgb(227,7,12)" fg:x="1075" fg:w="4"/><text x="41.3119%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;usize&gt;&gt; (1 samples, 0.04%)</title><rect x="41.1765%" y="373" width="0.0382%" height="15" fill="rgb(245,203,43)" fg:x="1078" fg:w="1"/><text x="41.4265%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (1 samples, 0.04%)</title><rect x="41.1765%" y="357" width="0.0382%" height="15" fill="rgb(238,205,33)" fg:x="1078" fg:w="1"/><text x="41.4265%" y="367.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="41.1765%" y="341" width="0.0382%" height="15" fill="rgb(231,56,7)" fg:x="1078" fg:w="1"/><text x="41.4265%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.04%)</title><rect x="41.1765%" y="325" width="0.0382%" height="15" fill="rgb(244,186,29)" fg:x="1078" fg:w="1"/><text x="41.4265%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.04%)</title><rect x="41.1765%" y="309" width="0.0382%" height="15" fill="rgb(234,111,31)" fg:x="1078" fg:w="1"/><text x="41.4265%" y="319.50"></text></g><g><title>core::mem::replace (1 samples, 0.04%)</title><rect x="41.1765%" y="293" width="0.0382%" height="15" fill="rgb(241,149,10)" fg:x="1078" fg:w="1"/><text x="41.4265%" y="303.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="41.1765%" y="277" width="0.0382%" height="15" fill="rgb(249,206,44)" fg:x="1078" fg:w="1"/><text x="41.4265%" y="287.50"></text></g><g><title>core::ptr::read (5 samples, 0.19%)</title><rect x="41.4057%" y="405" width="0.1910%" height="15" fill="rgb(251,153,30)" fg:x="1084" fg:w="5"/><text x="41.6557%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (17 samples, 0.65%)</title><rect x="41.0619%" y="501" width="0.6494%" height="15" fill="rgb(239,152,38)" fg:x="1075" fg:w="17"/><text x="41.3119%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (17 samples, 0.65%)</title><rect x="41.0619%" y="485" width="0.6494%" height="15" fill="rgb(249,139,47)" fg:x="1075" fg:w="17"/><text x="41.3119%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (13 samples, 0.50%)</title><rect x="41.2147%" y="469" width="0.4966%" height="15" fill="rgb(244,64,35)" fg:x="1079" fg:w="13"/><text x="41.4647%" y="479.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.50%)</title><rect x="41.2147%" y="453" width="0.4966%" height="15" fill="rgb(216,46,15)" fg:x="1079" fg:w="13"/><text x="41.4647%" y="463.50"></text></g><g><title>core::mem::take (8 samples, 0.31%)</title><rect x="41.4057%" y="437" width="0.3056%" height="15" fill="rgb(250,74,19)" fg:x="1084" fg:w="8"/><text x="41.6557%" y="447.50"></text></g><g><title>core::mem::replace (8 samples, 0.31%)</title><rect x="41.4057%" y="421" width="0.3056%" height="15" fill="rgb(249,42,33)" fg:x="1084" fg:w="8"/><text x="41.6557%" y="431.50"></text></g><g><title>core::ptr::write (3 samples, 0.11%)</title><rect x="41.5966%" y="405" width="0.1146%" height="15" fill="rgb(242,149,17)" fg:x="1089" fg:w="3"/><text x="41.8466%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (1 samples, 0.04%)</title><rect x="41.7112%" y="469" width="0.0382%" height="15" fill="rgb(244,29,21)" fg:x="1092" fg:w="1"/><text x="41.9612%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.04%)</title><rect x="41.7112%" y="453" width="0.0382%" height="15" fill="rgb(220,130,37)" fg:x="1092" fg:w="1"/><text x="41.9612%" y="463.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::clear (3 samples, 0.11%)</title><rect x="41.7112%" y="501" width="0.1146%" height="15" fill="rgb(211,67,2)" fg:x="1092" fg:w="3"/><text x="41.9612%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (3 samples, 0.11%)</title><rect x="41.7112%" y="485" width="0.1146%" height="15" fill="rgb(235,68,52)" fg:x="1092" fg:w="3"/><text x="41.9612%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;]&gt; (2 samples, 0.08%)</title><rect x="41.7494%" y="469" width="0.0764%" height="15" fill="rgb(246,142,3)" fg:x="1093" fg:w="2"/><text x="41.9994%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (2 samples, 0.08%)</title><rect x="41.7494%" y="453" width="0.0764%" height="15" fill="rgb(241,25,7)" fg:x="1093" fg:w="2"/><text x="41.9994%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (2 samples, 0.08%)</title><rect x="41.7494%" y="437" width="0.0764%" height="15" fill="rgb(242,119,39)" fg:x="1093" fg:w="2"/><text x="41.9994%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;simple_lisp::interpreter::ast::Ident,(),rustc_hash::FxBuildHasher&gt;&gt; (2 samples, 0.08%)</title><rect x="41.7494%" y="421" width="0.0764%" height="15" fill="rgb(241,98,45)" fg:x="1093" fg:w="2"/><text x="41.9994%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(simple_lisp::interpreter::ast::Ident,())&gt;&gt; (2 samples, 0.08%)</title><rect x="41.7494%" y="405" width="0.0764%" height="15" fill="rgb(254,28,30)" fg:x="1093" fg:w="2"/><text x="41.9994%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.08%)</title><rect x="41.7494%" y="389" width="0.0764%" height="15" fill="rgb(241,142,54)" fg:x="1093" fg:w="2"/><text x="41.9994%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (2 samples, 0.08%)</title><rect x="41.7494%" y="373" width="0.0764%" height="15" fill="rgb(222,85,15)" fg:x="1093" fg:w="2"/><text x="41.9994%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (2 samples, 0.08%)</title><rect x="41.7494%" y="357" width="0.0764%" height="15" fill="rgb(210,85,47)" fg:x="1093" fg:w="2"/><text x="41.9994%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.08%)</title><rect x="41.7494%" y="341" width="0.0764%" height="15" fill="rgb(224,206,25)" fg:x="1093" fg:w="2"/><text x="41.9994%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.08%)</title><rect x="41.7494%" y="325" width="0.0764%" height="15" fill="rgb(243,201,19)" fg:x="1093" fg:w="2"/><text x="41.9994%" y="335.50"></text></g><g><title>cfree (2 samples, 0.08%)</title><rect x="41.7494%" y="309" width="0.0764%" height="15" fill="rgb(236,59,4)" fg:x="1093" fg:w="2"/><text x="41.9994%" y="319.50"></text></g><g><title>[libc.so.6] (2 samples, 0.08%)</title><rect x="41.7494%" y="293" width="0.0764%" height="15" fill="rgb(254,179,45)" fg:x="1093" fg:w="2"/><text x="41.9994%" y="303.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::pop_env (24 samples, 0.92%)</title><rect x="40.9473%" y="533" width="0.9167%" height="15" fill="rgb(226,14,10)" fg:x="1072" fg:w="24"/><text x="41.1973%" y="543.50"></text></g><g><title>simple_lisp::interpreter::Env::clear (22 samples, 0.84%)</title><rect x="41.0237%" y="517" width="0.8403%" height="15" fill="rgb(244,27,41)" fg:x="1074" fg:w="22"/><text x="41.2737%" y="527.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::drain (1 samples, 0.04%)</title><rect x="41.8258%" y="501" width="0.0382%" height="15" fill="rgb(235,35,32)" fg:x="1095" fg:w="1"/><text x="42.0758%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (1 samples, 0.04%)</title><rect x="41.8258%" y="485" width="0.0382%" height="15" fill="rgb(218,68,31)" fg:x="1095" fg:w="1"/><text x="42.0758%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.04%)</title><rect x="41.8258%" y="469" width="0.0382%" height="15" fill="rgb(207,120,37)" fg:x="1095" fg:w="1"/><text x="42.0758%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="41.8258%" y="453" width="0.0382%" height="15" fill="rgb(227,98,0)" fg:x="1095" fg:w="1"/><text x="42.0758%" y="463.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::pop_from_scope (2 samples, 0.08%)</title><rect x="41.8640%" y="533" width="0.0764%" height="15" fill="rgb(207,7,3)" fg:x="1096" fg:w="2"/><text x="42.1140%" y="543.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="41.9022%" y="517" width="0.0382%" height="15" fill="rgb(206,98,19)" fg:x="1097" fg:w="1"/><text x="42.1522%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.04%)</title><rect x="41.9022%" y="501" width="0.0382%" height="15" fill="rgb(217,5,26)" fg:x="1097" fg:w="1"/><text x="42.1522%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.08%)</title><rect x="42.3606%" y="501" width="0.0764%" height="15" fill="rgb(235,190,38)" fg:x="1109" fg:w="2"/><text x="42.6106%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.08%)</title><rect x="42.3606%" y="485" width="0.0764%" height="15" fill="rgb(247,86,24)" fg:x="1109" fg:w="2"/><text x="42.6106%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.08%)</title><rect x="42.3606%" y="469" width="0.0764%" height="15" fill="rgb(205,101,16)" fg:x="1109" fg:w="2"/><text x="42.6106%" y="479.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (3 samples, 0.11%)</title><rect x="42.3606%" y="517" width="0.1146%" height="15" fill="rgb(246,168,33)" fg:x="1109" fg:w="3"/><text x="42.6106%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.04%)</title><rect x="42.4370%" y="501" width="0.0382%" height="15" fill="rgb(231,114,1)" fg:x="1111" fg:w="1"/><text x="42.6870%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.15%)</title><rect x="43.3919%" y="469" width="0.1528%" height="15" fill="rgb(207,184,53)" fg:x="1136" fg:w="4"/><text x="43.6419%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.19%)</title><rect x="43.5447%" y="469" width="0.1910%" height="15" fill="rgb(224,95,51)" fg:x="1140" fg:w="5"/><text x="43.7947%" y="479.50"></text></g><g><title>__rust_alloc (3 samples, 0.11%)</title><rect x="44.2322%" y="453" width="0.1146%" height="15" fill="rgb(212,188,45)" fg:x="1158" fg:w="3"/><text x="44.4822%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.08%)</title><rect x="44.3468%" y="453" width="0.0764%" height="15" fill="rgb(223,154,38)" fg:x="1161" fg:w="2"/><text x="44.5968%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (68 samples, 2.60%)</title><rect x="43.7357%" y="469" width="2.5974%" height="15" fill="rgb(251,22,52)" fg:x="1145" fg:w="68"/><text x="43.9857%" y="479.50">al..</text></g><g><title>malloc (50 samples, 1.91%)</title><rect x="44.4232%" y="453" width="1.9099%" height="15" fill="rgb(229,209,22)" fg:x="1163" fg:w="50"/><text x="44.6732%" y="463.50">m..</text></g><g><title>[libc.so.6] (27 samples, 1.03%)</title><rect x="45.3018%" y="437" width="1.0313%" height="15" fill="rgb(234,138,34)" fg:x="1186" fg:w="27"/><text x="45.5518%" y="447.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.04%)</title><rect x="46.3331%" y="469" width="0.0382%" height="15" fill="rgb(212,95,11)" fg:x="1213" fg:w="1"/><text x="46.5831%" y="479.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.04%)</title><rect x="46.3331%" y="453" width="0.0382%" height="15" fill="rgb(240,179,47)" fg:x="1213" fg:w="1"/><text x="46.5831%" y="463.50"></text></g><g><title>core::cmp::max (10 samples, 0.38%)</title><rect x="46.3713%" y="469" width="0.3820%" height="15" fill="rgb(240,163,11)" fg:x="1214" fg:w="10"/><text x="46.6213%" y="479.50"></text></g><g><title>core::cmp::Ord::max (10 samples, 0.38%)</title><rect x="46.3713%" y="453" width="0.3820%" height="15" fill="rgb(236,37,12)" fg:x="1214" fg:w="10"/><text x="46.6213%" y="463.50"></text></g><g><title>core::cmp::max_by (10 samples, 0.38%)</title><rect x="46.3713%" y="437" width="0.3820%" height="15" fill="rgb(232,164,16)" fg:x="1214" fg:w="10"/><text x="46.6213%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (97 samples, 3.71%)</title><rect x="43.1627%" y="501" width="3.7051%" height="15" fill="rgb(244,205,15)" fg:x="1130" fg:w="97"/><text x="43.4127%" y="511.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (95 samples, 3.63%)</title><rect x="43.2391%" y="485" width="3.6287%" height="15" fill="rgb(223,117,47)" fg:x="1132" fg:w="95"/><text x="43.4891%" y="495.50">allo..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.11%)</title><rect x="46.7532%" y="469" width="0.1146%" height="15" fill="rgb(244,107,35)" fg:x="1224" fg:w="3"/><text x="47.0032%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.11%)</title><rect x="46.7532%" y="453" width="0.1146%" height="15" fill="rgb(205,140,8)" fg:x="1224" fg:w="3"/><text x="47.0032%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.15%)</title><rect x="46.8678%" y="501" width="0.1528%" height="15" fill="rgb(228,84,46)" fg:x="1227" fg:w="4"/><text x="47.1178%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.15%)</title><rect x="46.8678%" y="485" width="0.1528%" height="15" fill="rgb(254,188,9)" fg:x="1227" fg:w="4"/><text x="47.1178%" y="495.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_dr_to_scope (136 samples, 5.19%)</title><rect x="41.9404%" y="533" width="5.1948%" height="15" fill="rgb(206,112,54)" fg:x="1098" fg:w="136"/><text x="42.1904%" y="543.50">simple..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (122 samples, 4.66%)</title><rect x="42.4752%" y="517" width="4.6600%" height="15" fill="rgb(216,84,49)" fg:x="1112" fg:w="122"/><text x="42.7252%" y="527.50">alloc..</text></g><g><title>core::ptr::write (3 samples, 0.11%)</title><rect x="47.0206%" y="501" width="0.1146%" height="15" fill="rgb(214,194,35)" fg:x="1231" fg:w="3"/><text x="47.2706%" y="511.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_env (17 samples, 0.65%)</title><rect x="47.1352%" y="533" width="0.6494%" height="15" fill="rgb(249,28,3)" fg:x="1234" fg:w="17"/><text x="47.3852%" y="543.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (4 samples, 0.15%)</title><rect x="47.6318%" y="517" width="0.1528%" height="15" fill="rgb(222,56,52)" fg:x="1247" fg:w="4"/><text x="47.8818%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.15%)</title><rect x="47.6318%" y="501" width="0.1528%" height="15" fill="rgb(245,217,50)" fg:x="1247" fg:w="4"/><text x="47.8818%" y="511.50"></text></g><g><title>core::ptr::write (2 samples, 0.08%)</title><rect x="47.7082%" y="485" width="0.0764%" height="15" fill="rgb(213,201,24)" fg:x="1249" fg:w="2"/><text x="47.9582%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.08%)</title><rect x="47.7846%" y="501" width="0.0764%" height="15" fill="rgb(248,116,28)" fg:x="1251" fg:w="2"/><text x="48.0346%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.08%)</title><rect x="47.7846%" y="485" width="0.0764%" height="15" fill="rgb(219,72,43)" fg:x="1251" fg:w="2"/><text x="48.0346%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.08%)</title><rect x="47.7846%" y="469" width="0.0764%" height="15" fill="rgb(209,138,14)" fg:x="1251" fg:w="2"/><text x="48.0346%" y="479.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (3 samples, 0.11%)</title><rect x="47.7846%" y="517" width="0.1146%" height="15" fill="rgb(222,18,33)" fg:x="1251" fg:w="3"/><text x="48.0346%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.04%)</title><rect x="47.8610%" y="501" width="0.0382%" height="15" fill="rgb(213,199,7)" fg:x="1253" fg:w="1"/><text x="48.1110%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.08%)</title><rect x="48.3957%" y="469" width="0.0764%" height="15" fill="rgb(250,110,10)" fg:x="1267" fg:w="2"/><text x="48.6457%" y="479.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_env_scope (25 samples, 0.95%)</title><rect x="47.7846%" y="533" width="0.9549%" height="15" fill="rgb(248,123,6)" fg:x="1251" fg:w="25"/><text x="48.0346%" y="543.50"></text></g><g><title>simple_lisp::interpreter::Env::push_scope (22 samples, 0.84%)</title><rect x="47.8992%" y="517" width="0.8403%" height="15" fill="rgb(206,91,31)" fg:x="1254" fg:w="22"/><text x="48.1492%" y="527.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (22 samples, 0.84%)</title><rect x="47.8992%" y="501" width="0.8403%" height="15" fill="rgb(211,154,13)" fg:x="1254" fg:w="22"/><text x="48.1492%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (22 samples, 0.84%)</title><rect x="47.8992%" y="485" width="0.8403%" height="15" fill="rgb(225,148,7)" fg:x="1254" fg:w="22"/><text x="48.1492%" y="495.50"></text></g><g><title>core::ptr::write (7 samples, 0.27%)</title><rect x="48.4721%" y="469" width="0.2674%" height="15" fill="rgb(220,160,43)" fg:x="1269" fg:w="7"/><text x="48.7221%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (10 samples, 0.38%)</title><rect x="49.6180%" y="405" width="0.3820%" height="15" fill="rgb(213,52,39)" fg:x="1299" fg:w="10"/><text x="49.8680%" y="415.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (14 samples, 0.53%)</title><rect x="49.6180%" y="421" width="0.5348%" height="15" fill="rgb(243,137,7)" fg:x="1299" fg:w="14"/><text x="49.8680%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.15%)</title><rect x="50.0000%" y="405" width="0.1528%" height="15" fill="rgb(230,79,13)" fg:x="1309" fg:w="4"/><text x="50.2500%" y="415.50"></text></g><g><title>core::ptr::write (4 samples, 0.15%)</title><rect x="50.0000%" y="389" width="0.1528%" height="15" fill="rgb(247,105,23)" fg:x="1309" fg:w="4"/><text x="50.2500%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.19%)</title><rect x="50.1528%" y="405" width="0.1910%" height="15" fill="rgb(223,179,41)" fg:x="1313" fg:w="5"/><text x="50.4028%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5 samples, 0.19%)</title><rect x="50.1528%" y="389" width="0.1910%" height="15" fill="rgb(218,9,34)" fg:x="1313" fg:w="5"/><text x="50.4028%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 0.19%)</title><rect x="50.1528%" y="373" width="0.1910%" height="15" fill="rgb(222,106,8)" fg:x="1313" fg:w="5"/><text x="50.4028%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.04%)</title><rect x="50.9167%" y="373" width="0.0382%" height="15" fill="rgb(211,220,0)" fg:x="1333" fg:w="1"/><text x="51.1667%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.04%)</title><rect x="50.9167%" y="357" width="0.0382%" height="15" fill="rgb(229,52,16)" fg:x="1333" fg:w="1"/><text x="51.1667%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1 samples, 0.04%)</title><rect x="50.9549%" y="373" width="0.0382%" height="15" fill="rgb(212,155,18)" fg:x="1334" fg:w="1"/><text x="51.2049%" y="383.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (1 samples, 0.04%)</title><rect x="50.9549%" y="357" width="0.0382%" height="15" fill="rgb(242,21,14)" fg:x="1334" fg:w="1"/><text x="51.2049%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (1 samples, 0.04%)</title><rect x="50.9931%" y="373" width="0.0382%" height="15" fill="rgb(222,19,48)" fg:x="1335" fg:w="1"/><text x="51.2431%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (1 samples, 0.04%)</title><rect x="51.0313%" y="373" width="0.0382%" height="15" fill="rgb(232,45,27)" fg:x="1336" fg:w="1"/><text x="51.2813%" y="383.50"></text></g><g><title>hashbrown::raw::inner::h2 (8 samples, 0.31%)</title><rect x="51.0695%" y="373" width="0.3056%" height="15" fill="rgb(249,103,42)" fg:x="1337" fg:w="8"/><text x="51.3195%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (28 samples, 1.07%)</title><rect x="50.3438%" y="405" width="1.0695%" height="15" fill="rgb(246,81,33)" fg:x="1318" fg:w="28"/><text x="50.5938%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (27 samples, 1.03%)</title><rect x="50.3820%" y="389" width="1.0313%" height="15" fill="rgb(252,33,42)" fg:x="1319" fg:w="27"/><text x="50.6320%" y="399.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="51.3751%" y="373" width="0.0382%" height="15" fill="rgb(209,212,41)" fg:x="1345" fg:w="1"/><text x="51.6251%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="51.3751%" y="357" width="0.0382%" height="15" fill="rgb(207,154,6)" fg:x="1345" fg:w="1"/><text x="51.6251%" y="367.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (72 samples, 2.75%)</title><rect x="48.8923%" y="485" width="2.7502%" height="15" fill="rgb(223,64,47)" fg:x="1280" fg:w="72"/><text x="49.1423%" y="495.50">in..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (72 samples, 2.75%)</title><rect x="48.8923%" y="469" width="2.7502%" height="15" fill="rgb(211,161,38)" fg:x="1280" fg:w="72"/><text x="49.1423%" y="479.50">in..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (65 samples, 2.48%)</title><rect x="49.1597%" y="453" width="2.4828%" height="15" fill="rgb(219,138,40)" fg:x="1287" fg:w="65"/><text x="49.4097%" y="463.50">in..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (53 samples, 2.02%)</title><rect x="49.6180%" y="437" width="2.0244%" height="15" fill="rgb(241,228,46)" fg:x="1299" fg:w="53"/><text x="49.8680%" y="447.50">i..</text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (39 samples, 1.49%)</title><rect x="50.1528%" y="421" width="1.4897%" height="15" fill="rgb(223,209,38)" fg:x="1313" fg:w="39"/><text x="50.4028%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (6 samples, 0.23%)</title><rect x="51.4133%" y="405" width="0.2292%" height="15" fill="rgb(236,164,45)" fg:x="1346" fg:w="6"/><text x="51.6633%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (6 samples, 0.23%)</title><rect x="51.4133%" y="389" width="0.2292%" height="15" fill="rgb(231,15,5)" fg:x="1346" fg:w="6"/><text x="51.6633%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (3 samples, 0.11%)</title><rect x="51.5279%" y="373" width="0.1146%" height="15" fill="rgb(252,35,15)" fg:x="1349" fg:w="3"/><text x="51.7779%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (3 samples, 0.11%)</title><rect x="51.5279%" y="357" width="0.1146%" height="15" fill="rgb(248,181,18)" fg:x="1349" fg:w="3"/><text x="51.7779%" y="367.50"></text></g><g><title>__rdl_alloc (5 samples, 0.19%)</title><rect x="56.0733%" y="453" width="0.1910%" height="15" fill="rgb(233,39,42)" fg:x="1468" fg:w="5"/><text x="56.3233%" y="463.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="56.2643%" y="453" width="0.0382%" height="15" fill="rgb(238,110,33)" fg:x="1473" fg:w="1"/><text x="56.5143%" y="463.50"></text></g><g><title>alloc::alloc::alloc (80 samples, 3.06%)</title><rect x="55.9206%" y="469" width="3.0558%" height="15" fill="rgb(233,195,10)" fg:x="1464" fg:w="80"/><text x="56.1706%" y="479.50">all..</text></g><g><title>malloc (70 samples, 2.67%)</title><rect x="56.3025%" y="453" width="2.6738%" height="15" fill="rgb(254,105,3)" fg:x="1474" fg:w="70"/><text x="56.5525%" y="463.50">ma..</text></g><g><title>[libc.so.6] (41 samples, 1.57%)</title><rect x="57.4102%" y="437" width="1.5661%" height="15" fill="rgb(221,225,9)" fg:x="1503" fg:w="41"/><text x="57.6602%" y="447.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (284 samples, 10.85%)</title><rect x="48.7395%" y="517" width="10.8480%" height="15" fill="rgb(224,227,45)" fg:x="1276" fg:w="284"/><text x="48.9895%" y="527.50">simple_lisp::int..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (283 samples, 10.81%)</title><rect x="48.7777%" y="501" width="10.8098%" height="15" fill="rgb(229,198,43)" fg:x="1277" fg:w="283"/><text x="49.0277%" y="511.50">simple_lisp::int..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (208 samples, 7.94%)</title><rect x="51.6425%" y="485" width="7.9450%" height="15" fill="rgb(206,209,35)" fg:x="1352" fg:w="208"/><text x="51.8925%" y="495.50">simple_lisp..</text></g><g><title>core::ptr::write (16 samples, 0.61%)</title><rect x="58.9763%" y="469" width="0.6112%" height="15" fill="rgb(245,195,53)" fg:x="1544" fg:w="16"/><text x="59.2263%" y="479.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_to_scope (285 samples, 10.89%)</title><rect x="48.7395%" y="533" width="10.8862%" height="15" fill="rgb(240,92,26)" fg:x="1276" fg:w="285"/><text x="48.9895%" y="543.50">simple_lisp::int..</text></g><g><title>simple_lisp::interpreter::Interpreter::push_dr_to_scope (1 samples, 0.04%)</title><rect x="59.5875%" y="517" width="0.0382%" height="15" fill="rgb(207,40,23)" fg:x="1560" fg:w="1"/><text x="59.8375%" y="527.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="59.5875%" y="501" width="0.0382%" height="15" fill="rgb(223,111,35)" fg:x="1560" fg:w="1"/><text x="59.8375%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.04%)</title><rect x="59.5875%" y="485" width="0.0382%" height="15" fill="rgb(229,147,28)" fg:x="1560" fg:w="1"/><text x="59.8375%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.08%)</title><rect x="59.6639%" y="517" width="0.0764%" height="15" fill="rgb(211,29,28)" fg:x="1562" fg:w="2"/><text x="59.9139%" y="527.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (2 samples, 0.08%)</title><rect x="59.6639%" y="501" width="0.0764%" height="15" fill="rgb(228,72,33)" fg:x="1562" fg:w="2"/><text x="59.9139%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.04%)</title><rect x="59.7403%" y="517" width="0.0382%" height="15" fill="rgb(205,214,31)" fg:x="1564" fg:w="1"/><text x="59.9903%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="59.7403%" y="501" width="0.0382%" height="15" fill="rgb(224,111,15)" fg:x="1564" fg:w="1"/><text x="59.9903%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (1 samples, 0.04%)</title><rect x="59.7403%" y="485" width="0.0382%" height="15" fill="rgb(253,21,26)" fg:x="1564" fg:w="1"/><text x="59.9903%" y="495.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="59.7403%" y="469" width="0.0382%" height="15" fill="rgb(245,139,43)" fg:x="1564" fg:w="1"/><text x="59.9903%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.04%)</title><rect x="59.7403%" y="453" width="0.0382%" height="15" fill="rgb(252,170,7)" fg:x="1564" fg:w="1"/><text x="59.9903%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="59.7403%" y="437" width="0.0382%" height="15" fill="rgb(231,118,14)" fg:x="1564" fg:w="1"/><text x="59.9903%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="59.7403%" y="421" width="0.0382%" height="15" fill="rgb(238,83,0)" fg:x="1564" fg:w="1"/><text x="59.9903%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="59.7403%" y="405" width="0.0382%" height="15" fill="rgb(221,39,39)" fg:x="1564" fg:w="1"/><text x="59.9903%" y="415.50"></text></g><g><title>cfree (1 samples, 0.04%)</title><rect x="59.7403%" y="389" width="0.0382%" height="15" fill="rgb(222,119,46)" fg:x="1564" fg:w="1"/><text x="59.9903%" y="399.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="59.7403%" y="373" width="0.0382%" height="15" fill="rgb(222,165,49)" fg:x="1564" fg:w="1"/><text x="59.9903%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.04%)</title><rect x="59.7785%" y="517" width="0.0382%" height="15" fill="rgb(219,113,52)" fg:x="1565" fg:w="1"/><text x="60.0285%" y="527.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (4 samples, 0.15%)</title><rect x="60.6188%" y="421" width="0.1528%" height="15" fill="rgb(214,7,15)" fg:x="1587" fg:w="4"/><text x="60.8688%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.15%)</title><rect x="60.6188%" y="405" width="0.1528%" height="15" fill="rgb(235,32,4)" fg:x="1587" fg:w="4"/><text x="60.8688%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.08%)</title><rect x="60.7716%" y="405" width="0.0764%" height="15" fill="rgb(238,90,54)" fg:x="1591" fg:w="2"/><text x="61.0216%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.08%)</title><rect x="60.7716%" y="389" width="0.0764%" height="15" fill="rgb(213,208,19)" fg:x="1591" fg:w="2"/><text x="61.0216%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.08%)</title><rect x="60.7716%" y="373" width="0.0764%" height="15" fill="rgb(233,156,4)" fg:x="1591" fg:w="2"/><text x="61.0216%" y="383.50"></text></g><g><title>hashbrown::raw::inner::h2 (7 samples, 0.27%)</title><rect x="60.9626%" y="373" width="0.2674%" height="15" fill="rgb(207,194,5)" fg:x="1596" fg:w="7"/><text x="61.2126%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (11 samples, 0.42%)</title><rect x="60.8480%" y="405" width="0.4202%" height="15" fill="rgb(206,111,30)" fg:x="1593" fg:w="11"/><text x="61.0980%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (11 samples, 0.42%)</title><rect x="60.8480%" y="389" width="0.4202%" height="15" fill="rgb(243,70,54)" fg:x="1593" fg:w="11"/><text x="61.0980%" y="399.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="61.2299%" y="373" width="0.0382%" height="15" fill="rgb(242,28,8)" fg:x="1603" fg:w="1"/><text x="61.4799%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="61.2299%" y="357" width="0.0382%" height="15" fill="rgb(219,106,18)" fg:x="1603" fg:w="1"/><text x="61.4799%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (1 samples, 0.04%)</title><rect x="61.2681%" y="373" width="0.0382%" height="15" fill="rgb(244,222,10)" fg:x="1604" fg:w="1"/><text x="61.5181%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (1 samples, 0.04%)</title><rect x="61.2681%" y="357" width="0.0382%" height="15" fill="rgb(236,179,52)" fg:x="1604" fg:w="1"/><text x="61.5181%" y="367.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (39 samples, 1.49%)</title><rect x="59.8549%" y="485" width="1.4897%" height="15" fill="rgb(213,23,39)" fg:x="1567" fg:w="39"/><text x="60.1049%" y="495.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (39 samples, 1.49%)</title><rect x="59.8549%" y="469" width="1.4897%" height="15" fill="rgb(238,48,10)" fg:x="1567" fg:w="39"/><text x="60.1049%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (32 samples, 1.22%)</title><rect x="60.1222%" y="453" width="1.2223%" height="15" fill="rgb(251,196,23)" fg:x="1574" fg:w="32"/><text x="60.3722%" y="463.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (19 samples, 0.73%)</title><rect x="60.6188%" y="437" width="0.7257%" height="15" fill="rgb(250,152,24)" fg:x="1587" fg:w="19"/><text x="60.8688%" y="447.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (15 samples, 0.57%)</title><rect x="60.7716%" y="421" width="0.5730%" height="15" fill="rgb(209,150,17)" fg:x="1591" fg:w="15"/><text x="61.0216%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (2 samples, 0.08%)</title><rect x="61.2681%" y="405" width="0.0764%" height="15" fill="rgb(234,202,34)" fg:x="1604" fg:w="2"/><text x="61.5181%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (2 samples, 0.08%)</title><rect x="61.2681%" y="389" width="0.0764%" height="15" fill="rgb(253,148,53)" fg:x="1604" fg:w="2"/><text x="61.5181%" y="399.50"></text></g><g><title>hashbrown::raw::inner::special_is_empty (1 samples, 0.04%)</title><rect x="61.3063%" y="373" width="0.0382%" height="15" fill="rgb(218,129,16)" fg:x="1605" fg:w="1"/><text x="61.5563%" y="383.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.61%)</title><rect x="61.9939%" y="469" width="0.6112%" height="15" fill="rgb(216,85,19)" fg:x="1623" fg:w="16"/><text x="62.2439%" y="479.50"></text></g><g><title>malloc (16 samples, 0.61%)</title><rect x="61.9939%" y="453" width="0.6112%" height="15" fill="rgb(235,228,7)" fg:x="1623" fg:w="16"/><text x="62.2439%" y="463.50"></text></g><g><title>[libc.so.6] (14 samples, 0.53%)</title><rect x="62.0703%" y="437" width="0.5348%" height="15" fill="rgb(245,175,0)" fg:x="1625" fg:w="14"/><text x="62.3203%" y="447.50"></text></g><g><title>core::ptr::write (3 samples, 0.11%)</title><rect x="62.6050%" y="469" width="0.1146%" height="15" fill="rgb(208,168,36)" fg:x="1639" fg:w="3"/><text x="62.8550%" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.04%)</title><rect x="62.7196%" y="405" width="0.0382%" height="15" fill="rgb(246,171,24)" fg:x="1642" fg:w="1"/><text x="62.9696%" y="415.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.04%)</title><rect x="62.7196%" y="389" width="0.0382%" height="15" fill="rgb(215,142,24)" fg:x="1642" fg:w="1"/><text x="62.9696%" y="399.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.04%)</title><rect x="62.7196%" y="373" width="0.0382%" height="15" fill="rgb(250,187,7)" fg:x="1642" fg:w="1"/><text x="62.9696%" y="383.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (79 samples, 3.02%)</title><rect x="59.8167%" y="517" width="3.0176%" height="15" fill="rgb(228,66,33)" fg:x="1566" fg:w="79"/><text x="60.0667%" y="527.50">sim..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (79 samples, 3.02%)</title><rect x="59.8167%" y="501" width="3.0176%" height="15" fill="rgb(234,215,21)" fg:x="1566" fg:w="79"/><text x="60.0667%" y="511.50">sim..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (39 samples, 1.49%)</title><rect x="61.3445%" y="485" width="1.4897%" height="15" fill="rgb(222,191,20)" fg:x="1606" fg:w="39"/><text x="61.5945%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (3 samples, 0.11%)</title><rect x="62.7196%" y="469" width="0.1146%" height="15" fill="rgb(245,79,54)" fg:x="1642" fg:w="3"/><text x="62.9696%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.11%)</title><rect x="62.7196%" y="453" width="0.1146%" height="15" fill="rgb(240,10,37)" fg:x="1642" fg:w="3"/><text x="62.9696%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.11%)</title><rect x="62.7196%" y="437" width="0.1146%" height="15" fill="rgb(214,192,32)" fg:x="1642" fg:w="3"/><text x="62.9696%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (3 samples, 0.11%)</title><rect x="62.7196%" y="421" width="0.1146%" height="15" fill="rgb(209,36,54)" fg:x="1642" fg:w="3"/><text x="62.9696%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;usize&gt;&gt; (2 samples, 0.08%)</title><rect x="62.7578%" y="405" width="0.0764%" height="15" fill="rgb(220,10,11)" fg:x="1643" fg:w="2"/><text x="63.0078%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (2 samples, 0.08%)</title><rect x="62.7578%" y="389" width="0.0764%" height="15" fill="rgb(221,106,17)" fg:x="1643" fg:w="2"/><text x="63.0078%" y="399.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (2 samples, 0.08%)</title><rect x="62.7578%" y="373" width="0.0764%" height="15" fill="rgb(251,142,44)" fg:x="1643" fg:w="2"/><text x="63.0078%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.08%)</title><rect x="62.7578%" y="357" width="0.0764%" height="15" fill="rgb(238,13,15)" fg:x="1643" fg:w="2"/><text x="63.0078%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.08%)</title><rect x="62.7578%" y="341" width="0.0764%" height="15" fill="rgb(208,107,27)" fg:x="1643" fg:w="2"/><text x="63.0078%" y="351.50"></text></g><g><title>core::mem::replace (2 samples, 0.08%)</title><rect x="62.7578%" y="325" width="0.0764%" height="15" fill="rgb(205,136,37)" fg:x="1643" fg:w="2"/><text x="63.0078%" y="335.50"></text></g><g><title>core::ptr::write (2 samples, 0.08%)</title><rect x="62.7578%" y="309" width="0.0764%" height="15" fill="rgb(250,205,27)" fg:x="1643" fg:w="2"/><text x="63.0078%" y="319.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (1 samples, 0.04%)</title><rect x="62.9488%" y="485" width="0.0382%" height="15" fill="rgb(210,80,43)" fg:x="1648" fg:w="1"/><text x="63.1988%" y="495.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (3 samples, 0.11%)</title><rect x="62.9870%" y="485" width="0.1146%" height="15" fill="rgb(247,160,36)" fg:x="1649" fg:w="3"/><text x="63.2370%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.11%)</title><rect x="62.9870%" y="469" width="0.1146%" height="15" fill="rgb(234,13,49)" fg:x="1649" fg:w="3"/><text x="63.2370%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 0.11%)</title><rect x="62.9870%" y="453" width="0.1146%" height="15" fill="rgb(234,122,0)" fg:x="1649" fg:w="3"/><text x="63.2370%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.11%)</title><rect x="62.9870%" y="437" width="0.1146%" height="15" fill="rgb(207,146,38)" fg:x="1649" fg:w="3"/><text x="63.2370%" y="447.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (6 samples, 0.23%)</title><rect x="63.1016%" y="485" width="0.2292%" height="15" fill="rgb(207,177,25)" fg:x="1652" fg:w="6"/><text x="63.3516%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.23%)</title><rect x="63.1016%" y="469" width="0.2292%" height="15" fill="rgb(211,178,42)" fg:x="1652" fg:w="6"/><text x="63.3516%" y="479.50"></text></g><g><title>core::ptr::write (4 samples, 0.15%)</title><rect x="63.1780%" y="453" width="0.1528%" height="15" fill="rgb(230,69,54)" fg:x="1654" fg:w="4"/><text x="63.4280%" y="463.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (5 samples, 0.19%)</title><rect x="63.3308%" y="485" width="0.1910%" height="15" fill="rgb(214,135,41)" fg:x="1658" fg:w="5"/><text x="63.5808%" y="495.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (5 samples, 0.19%)</title><rect x="63.3308%" y="469" width="0.1910%" height="15" fill="rgb(237,67,25)" fg:x="1658" fg:w="5"/><text x="63.5808%" y="479.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (5 samples, 0.19%)</title><rect x="63.3308%" y="453" width="0.1910%" height="15" fill="rgb(222,189,50)" fg:x="1658" fg:w="5"/><text x="63.5808%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.08%)</title><rect x="63.7128%" y="421" width="0.0764%" height="15" fill="rgb(245,148,34)" fg:x="1668" fg:w="2"/><text x="63.9628%" y="431.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.08%)</title><rect x="63.7128%" y="405" width="0.0764%" height="15" fill="rgb(222,29,6)" fg:x="1668" fg:w="2"/><text x="63.9628%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (3 samples, 0.11%)</title><rect x="63.7892%" y="421" width="0.1146%" height="15" fill="rgb(221,189,43)" fg:x="1670" fg:w="3"/><text x="64.0392%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.11%)</title><rect x="63.7892%" y="405" width="0.1146%" height="15" fill="rgb(207,36,27)" fg:x="1670" fg:w="3"/><text x="64.0392%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3 samples, 0.11%)</title><rect x="63.7892%" y="389" width="0.1146%" height="15" fill="rgb(217,90,24)" fg:x="1670" fg:w="3"/><text x="64.0392%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.11%)</title><rect x="63.7892%" y="373" width="0.1146%" height="15" fill="rgb(224,66,35)" fg:x="1670" fg:w="3"/><text x="64.0392%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.11%)</title><rect x="63.7892%" y="357" width="0.1146%" height="15" fill="rgb(221,13,50)" fg:x="1670" fg:w="3"/><text x="64.0392%" y="367.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.08%)</title><rect x="63.9037%" y="421" width="0.0764%" height="15" fill="rgb(236,68,49)" fg:x="1673" fg:w="2"/><text x="64.1537%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (18 samples, 0.69%)</title><rect x="63.5218%" y="485" width="0.6875%" height="15" fill="rgb(229,146,28)" fg:x="1663" fg:w="18"/><text x="63.7718%" y="495.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (18 samples, 0.69%)</title><rect x="63.5218%" y="469" width="0.6875%" height="15" fill="rgb(225,31,38)" fg:x="1663" fg:w="18"/><text x="63.7718%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (18 samples, 0.69%)</title><rect x="63.5218%" y="453" width="0.6875%" height="15" fill="rgb(250,208,3)" fg:x="1663" fg:w="18"/><text x="63.7718%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (15 samples, 0.57%)</title><rect x="63.6364%" y="437" width="0.5730%" height="15" fill="rgb(246,54,23)" fg:x="1666" fg:w="15"/><text x="63.8864%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (6 samples, 0.23%)</title><rect x="63.9801%" y="421" width="0.2292%" height="15" fill="rgb(243,76,11)" fg:x="1675" fg:w="6"/><text x="64.2301%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.23%)</title><rect x="63.9801%" y="405" width="0.2292%" height="15" fill="rgb(245,21,50)" fg:x="1675" fg:w="6"/><text x="64.2301%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.31%)</title><rect x="64.6295%" y="373" width="0.3056%" height="15" fill="rgb(228,9,43)" fg:x="1692" fg:w="8"/><text x="64.8795%" y="383.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (26 samples, 0.99%)</title><rect x="64.2093%" y="485" width="0.9931%" height="15" fill="rgb(208,100,47)" fg:x="1681" fg:w="26"/><text x="64.4593%" y="495.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (26 samples, 0.99%)</title><rect x="64.2093%" y="469" width="0.9931%" height="15" fill="rgb(232,26,8)" fg:x="1681" fg:w="26"/><text x="64.4593%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (26 samples, 0.99%)</title><rect x="64.2093%" y="453" width="0.9931%" height="15" fill="rgb(216,166,38)" fg:x="1681" fg:w="26"/><text x="64.4593%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (26 samples, 0.99%)</title><rect x="64.2093%" y="437" width="0.9931%" height="15" fill="rgb(251,202,51)" fg:x="1681" fg:w="26"/><text x="64.4593%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (22 samples, 0.84%)</title><rect x="64.3621%" y="421" width="0.8403%" height="15" fill="rgb(254,216,34)" fg:x="1685" fg:w="22"/><text x="64.6121%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (22 samples, 0.84%)</title><rect x="64.3621%" y="405" width="0.8403%" height="15" fill="rgb(251,32,27)" fg:x="1685" fg:w="22"/><text x="64.6121%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (22 samples, 0.84%)</title><rect x="64.3621%" y="389" width="0.8403%" height="15" fill="rgb(208,127,28)" fg:x="1685" fg:w="22"/><text x="64.6121%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 0.27%)</title><rect x="64.9351%" y="373" width="0.2674%" height="15" fill="rgb(224,137,22)" fg:x="1700" fg:w="7"/><text x="65.1851%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.27%)</title><rect x="64.9351%" y="357" width="0.2674%" height="15" fill="rgb(254,70,32)" fg:x="1700" fg:w="7"/><text x="65.1851%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.08%)</title><rect x="65.7372%" y="373" width="0.0764%" height="15" fill="rgb(229,75,37)" fg:x="1721" fg:w="2"/><text x="65.9872%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.08%)</title><rect x="65.7372%" y="357" width="0.0764%" height="15" fill="rgb(252,64,23)" fg:x="1721" fg:w="2"/><text x="65.9872%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket_ptr (1 samples, 0.04%)</title><rect x="65.8518%" y="357" width="0.0382%" height="15" fill="rgb(232,162,48)" fg:x="1724" fg:w="1"/><text x="66.1018%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.04%)</title><rect x="65.8900%" y="325" width="0.0382%" height="15" fill="rgb(246,160,12)" fg:x="1725" fg:w="1"/><text x="66.1400%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="65.8900%" y="309" width="0.0382%" height="15" fill="rgb(247,166,0)" fg:x="1725" fg:w="1"/><text x="66.1400%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (1 samples, 0.04%)</title><rect x="65.8900%" y="293" width="0.0382%" height="15" fill="rgb(249,219,21)" fg:x="1725" fg:w="1"/><text x="66.1400%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (3 samples, 0.11%)</title><rect x="65.8900%" y="357" width="0.1146%" height="15" fill="rgb(205,209,3)" fg:x="1725" fg:w="3"/><text x="66.1400%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (3 samples, 0.11%)</title><rect x="65.8900%" y="341" width="0.1146%" height="15" fill="rgb(243,44,1)" fg:x="1725" fg:w="3"/><text x="66.1400%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (2 samples, 0.08%)</title><rect x="65.9282%" y="325" width="0.0764%" height="15" fill="rgb(206,159,16)" fg:x="1726" fg:w="2"/><text x="66.1782%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (7 samples, 0.27%)</title><rect x="66.0046%" y="325" width="0.2674%" height="15" fill="rgb(244,77,30)" fg:x="1728" fg:w="7"/><text x="66.2546%" y="335.50"></text></g><g><title>core::intrinsics::write_bytes (7 samples, 0.27%)</title><rect x="66.0046%" y="309" width="0.2674%" height="15" fill="rgb(218,69,12)" fg:x="1728" fg:w="7"/><text x="66.2546%" y="319.50"></text></g><g><title>[libc.so.6] (7 samples, 0.27%)</title><rect x="66.0046%" y="293" width="0.2674%" height="15" fill="rgb(212,87,7)" fg:x="1728" fg:w="7"/><text x="66.2546%" y="303.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.04%)</title><rect x="66.2720%" y="309" width="0.0382%" height="15" fill="rgb(245,114,25)" fg:x="1735" fg:w="1"/><text x="66.5220%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="66.3484%" y="245" width="0.0382%" height="15" fill="rgb(210,61,42)" fg:x="1737" fg:w="1"/><text x="66.5984%" y="255.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="66.3866%" y="245" width="0.0382%" height="15" fill="rgb(211,52,33)" fg:x="1738" fg:w="1"/><text x="66.6366%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (24 samples, 0.92%)</title><rect x="65.8136%" y="373" width="0.9167%" height="15" fill="rgb(234,58,33)" fg:x="1723" fg:w="24"/><text x="66.0636%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (19 samples, 0.73%)</title><rect x="66.0046%" y="357" width="0.7257%" height="15" fill="rgb(220,115,36)" fg:x="1728" fg:w="19"/><text x="66.2546%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (19 samples, 0.73%)</title><rect x="66.0046%" y="341" width="0.7257%" height="15" fill="rgb(243,153,54)" fg:x="1728" fg:w="19"/><text x="66.2546%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (12 samples, 0.46%)</title><rect x="66.2720%" y="325" width="0.4584%" height="15" fill="rgb(251,47,18)" fg:x="1735" fg:w="12"/><text x="66.5220%" y="335.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (11 samples, 0.42%)</title><rect x="66.3102%" y="309" width="0.4202%" height="15" fill="rgb(242,102,42)" fg:x="1736" fg:w="11"/><text x="66.5602%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.42%)</title><rect x="66.3102%" y="293" width="0.4202%" height="15" fill="rgb(234,31,38)" fg:x="1736" fg:w="11"/><text x="66.5602%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.42%)</title><rect x="66.3102%" y="277" width="0.4202%" height="15" fill="rgb(221,117,51)" fg:x="1736" fg:w="11"/><text x="66.5602%" y="287.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.42%)</title><rect x="66.3102%" y="261" width="0.4202%" height="15" fill="rgb(212,20,18)" fg:x="1736" fg:w="11"/><text x="66.5602%" y="271.50"></text></g><g><title>malloc (8 samples, 0.31%)</title><rect x="66.4248%" y="245" width="0.3056%" height="15" fill="rgb(245,133,36)" fg:x="1739" fg:w="8"/><text x="66.6748%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (33 samples, 1.26%)</title><rect x="65.5080%" y="421" width="1.2605%" height="15" fill="rgb(212,6,19)" fg:x="1715" fg:w="33"/><text x="65.7580%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (32 samples, 1.22%)</title><rect x="65.5462%" y="405" width="1.2223%" height="15" fill="rgb(218,1,36)" fg:x="1716" fg:w="32"/><text x="65.7962%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (29 samples, 1.11%)</title><rect x="65.6608%" y="389" width="1.1077%" height="15" fill="rgb(246,84,54)" fg:x="1719" fg:w="29"/><text x="65.9108%" y="399.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.04%)</title><rect x="66.7303%" y="373" width="0.0382%" height="15" fill="rgb(242,110,6)" fg:x="1747" fg:w="1"/><text x="66.9803%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="66.7685%" y="405" width="0.1146%" height="15" fill="rgb(214,47,5)" fg:x="1748" fg:w="3"/><text x="67.0185%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.11%)</title><rect x="66.7685%" y="389" width="0.1146%" height="15" fill="rgb(218,159,25)" fg:x="1748" fg:w="3"/><text x="67.0185%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.04%)</title><rect x="66.8831%" y="405" width="0.0382%" height="15" fill="rgb(215,211,28)" fg:x="1751" fg:w="1"/><text x="67.1331%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.04%)</title><rect x="66.9213%" y="405" width="0.0382%" height="15" fill="rgb(238,59,32)" fg:x="1752" fg:w="1"/><text x="67.1713%" y="415.50"></text></g><g><title>hashbrown::raw::h2 (5 samples, 0.19%)</title><rect x="66.9595%" y="405" width="0.1910%" height="15" fill="rgb(226,82,3)" fg:x="1753" fg:w="5"/><text x="67.2095%" y="415.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::set_func_args (271 samples, 10.35%)</title><rect x="59.6257%" y="533" width="10.3514%" height="15" fill="rgb(240,164,32)" fg:x="1561" fg:w="271"/><text x="59.8757%" y="543.50">simple_lisp::in..</text></g><g><title>simple_lisp::interpreter::Interpreter::define_var (187 samples, 7.14%)</title><rect x="62.8342%" y="517" width="7.1429%" height="15" fill="rgb(232,46,7)" fg:x="1645" fg:w="187"/><text x="63.0842%" y="527.50">simple_lis..</text></g><g><title>simple_lisp::interpreter::Env::insert (185 samples, 7.07%)</title><rect x="62.9106%" y="501" width="7.0665%" height="15" fill="rgb(229,129,53)" fg:x="1647" fg:w="185"/><text x="63.1606%" y="511.50">simple_li..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (125 samples, 4.77%)</title><rect x="65.2024%" y="485" width="4.7746%" height="15" fill="rgb(234,188,29)" fg:x="1707" fg:w="125"/><text x="65.4524%" y="495.50">std::c..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (125 samples, 4.77%)</title><rect x="65.2024%" y="469" width="4.7746%" height="15" fill="rgb(246,141,4)" fg:x="1707" fg:w="125"/><text x="65.4524%" y="479.50">hashbr..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (125 samples, 4.77%)</title><rect x="65.2024%" y="453" width="4.7746%" height="15" fill="rgb(229,23,39)" fg:x="1707" fg:w="125"/><text x="65.4524%" y="463.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (120 samples, 4.58%)</title><rect x="65.3934%" y="437" width="4.5837%" height="15" fill="rgb(206,12,3)" fg:x="1712" fg:w="120"/><text x="65.6434%" y="447.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (84 samples, 3.21%)</title><rect x="66.7685%" y="421" width="3.2086%" height="15" fill="rgb(252,226,20)" fg:x="1748" fg:w="84"/><text x="67.0185%" y="431.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (74 samples, 2.83%)</title><rect x="67.1505%" y="405" width="2.8266%" height="15" fill="rgb(216,123,35)" fg:x="1758" fg:w="74"/><text x="67.4005%" y="415.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (74 samples, 2.83%)</title><rect x="67.1505%" y="389" width="2.8266%" height="15" fill="rgb(212,68,40)" fg:x="1758" fg:w="74"/><text x="67.4005%" y="399.50">co..</text></g><g><title>simple_lisp::interpreter::ScopeItem::last (1 samples, 0.04%)</title><rect x="69.9771%" y="533" width="0.0382%" height="15" fill="rgb(254,125,32)" fg:x="1832" fg:w="1"/><text x="70.2271%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (9 samples, 0.34%)</title><rect x="70.0153%" y="517" width="0.3438%" height="15" fill="rgb(253,97,22)" fg:x="1833" fg:w="9"/><text x="70.2653%" y="527.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as indexmap::Entries&gt;::as_entries (1 samples, 0.04%)</title><rect x="70.4736%" y="485" width="0.0382%" height="15" fill="rgb(241,101,14)" fg:x="1845" fg:w="1"/><text x="70.7236%" y="495.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as indexmap::Entries&gt;::as_entries (1 samples, 0.04%)</title><rect x="70.4736%" y="469" width="0.0382%" height="15" fill="rgb(238,103,29)" fg:x="1845" fg:w="1"/><text x="70.7236%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="70.4736%" y="453" width="0.0382%" height="15" fill="rgb(233,195,47)" fg:x="1845" fg:w="1"/><text x="70.7236%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.11%)</title><rect x="70.5118%" y="469" width="0.1146%" height="15" fill="rgb(246,218,30)" fg:x="1846" fg:w="3"/><text x="70.7618%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.11%)</title><rect x="70.5118%" y="453" width="0.1146%" height="15" fill="rgb(219,145,47)" fg:x="1846" fg:w="3"/><text x="70.7618%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.11%)</title><rect x="70.5118%" y="437" width="0.1146%" height="15" fill="rgb(243,12,26)" fg:x="1846" fg:w="3"/><text x="70.7618%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.19%)</title><rect x="71.3904%" y="421" width="0.1910%" height="15" fill="rgb(214,87,16)" fg:x="1869" fg:w="5"/><text x="71.6404%" y="431.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (2 samples, 0.08%)</title><rect x="71.5050%" y="405" width="0.0764%" height="15" fill="rgb(208,99,42)" fg:x="1872" fg:w="2"/><text x="71.7550%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::_{{closure}} (13 samples, 0.50%)</title><rect x="71.5814%" y="421" width="0.4966%" height="15" fill="rgb(253,99,2)" fg:x="1874" fg:w="13"/><text x="71.8314%" y="431.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (8 samples, 0.31%)</title><rect x="71.7723%" y="405" width="0.3056%" height="15" fill="rgb(220,168,23)" fg:x="1879" fg:w="8"/><text x="72.0223%" y="415.50"></text></g><g><title>hashbrown::raw::inner::h2 (11 samples, 0.42%)</title><rect x="72.0779%" y="421" width="0.4202%" height="15" fill="rgb(242,38,24)" fg:x="1887" fg:w="11"/><text x="72.3279%" y="431.50"></text></g><g><title>simple_lisp::interpreter::ast::InstructionIter::jump (69 samples, 2.64%)</title><rect x="70.0153%" y="533" width="2.6356%" height="15" fill="rgb(225,182,9)" fg:x="1833" fg:w="69"/><text x="70.2653%" y="543.50">si..</text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::get_index_of (60 samples, 2.29%)</title><rect x="70.3591%" y="517" width="2.2918%" height="15" fill="rgb(243,178,37)" fg:x="1842" fg:w="60"/><text x="70.6091%" y="527.50">i..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (58 samples, 2.22%)</title><rect x="70.4354%" y="501" width="2.2154%" height="15" fill="rgb(232,139,19)" fg:x="1844" fg:w="58"/><text x="70.6854%" y="511.50">i..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (56 samples, 2.14%)</title><rect x="70.5118%" y="485" width="2.1390%" height="15" fill="rgb(225,201,24)" fg:x="1846" fg:w="56"/><text x="70.7618%" y="495.50">i..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (53 samples, 2.02%)</title><rect x="70.6264%" y="469" width="2.0244%" height="15" fill="rgb(221,47,46)" fg:x="1849" fg:w="53"/><text x="70.8764%" y="479.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (53 samples, 2.02%)</title><rect x="70.6264%" y="453" width="2.0244%" height="15" fill="rgb(249,23,13)" fg:x="1849" fg:w="53"/><text x="70.8764%" y="463.50">h..</text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (53 samples, 2.02%)</title><rect x="70.6264%" y="437" width="2.0244%" height="15" fill="rgb(219,9,5)" fg:x="1849" fg:w="53"/><text x="70.8764%" y="447.50">h..</text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (4 samples, 0.15%)</title><rect x="72.4981%" y="421" width="0.1528%" height="15" fill="rgb(254,171,16)" fg:x="1898" fg:w="4"/><text x="72.7481%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.15%)</title><rect x="72.4981%" y="405" width="0.1528%" height="15" fill="rgb(230,171,20)" fg:x="1898" fg:w="4"/><text x="72.7481%" y="415.50"></text></g><g><title>simple_lisp::interpreter::ast::InstructionIter::next_ins_id (1 samples, 0.04%)</title><rect x="72.6509%" y="533" width="0.0382%" height="15" fill="rgb(210,71,41)" fg:x="1902" fg:w="1"/><text x="72.9009%" y="543.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::copied (1 samples, 0.04%)</title><rect x="72.6509%" y="517" width="0.0382%" height="15" fill="rgb(206,173,20)" fg:x="1902" fg:w="1"/><text x="72.9009%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (5 samples, 0.19%)</title><rect x="72.7273%" y="517" width="0.1910%" height="15" fill="rgb(233,88,34)" fg:x="1904" fg:w="5"/><text x="72.9773%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.19%)</title><rect x="72.7273%" y="501" width="0.1910%" height="15" fill="rgb(223,209,46)" fg:x="1904" fg:w="5"/><text x="72.9773%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (5 samples, 0.19%)</title><rect x="72.7273%" y="485" width="0.1910%" height="15" fill="rgb(250,43,18)" fg:x="1904" fg:w="5"/><text x="72.9773%" y="495.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.19%)</title><rect x="72.7273%" y="469" width="0.1910%" height="15" fill="rgb(208,13,10)" fg:x="1904" fg:w="5"/><text x="72.9773%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (5 samples, 0.19%)</title><rect x="72.7273%" y="453" width="0.1910%" height="15" fill="rgb(212,200,36)" fg:x="1904" fg:w="5"/><text x="72.9773%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.19%)</title><rect x="72.7273%" y="437" width="0.1910%" height="15" fill="rgb(225,90,30)" fg:x="1904" fg:w="5"/><text x="72.9773%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.19%)</title><rect x="72.7273%" y="421" width="0.1910%" height="15" fill="rgb(236,182,39)" fg:x="1904" fg:w="5"/><text x="72.9773%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.19%)</title><rect x="72.7273%" y="405" width="0.1910%" height="15" fill="rgb(212,144,35)" fg:x="1904" fg:w="5"/><text x="72.9773%" y="415.50"></text></g><g><title>cfree (5 samples, 0.19%)</title><rect x="72.7273%" y="389" width="0.1910%" height="15" fill="rgb(228,63,44)" fg:x="1904" fg:w="5"/><text x="72.9773%" y="399.50"></text></g><g><title>[libc.so.6] (2 samples, 0.08%)</title><rect x="72.8419%" y="373" width="0.0764%" height="15" fill="rgb(228,109,6)" fg:x="1907" fg:w="2"/><text x="73.0919%" y="383.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::Data as core::clone::Clone&gt;::clone (3 samples, 0.11%)</title><rect x="72.9183%" y="501" width="0.1146%" height="15" fill="rgb(238,117,24)" fg:x="1909" fg:w="3"/><text x="73.1683%" y="511.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (1 samples, 0.04%)</title><rect x="73.1092%" y="405" width="0.0382%" height="15" fill="rgb(242,26,26)" fg:x="1914" fg:w="1"/><text x="73.3592%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="73.1092%" y="389" width="0.0382%" height="15" fill="rgb(221,92,48)" fg:x="1914" fg:w="1"/><text x="73.3592%" y="399.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (5 samples, 0.19%)</title><rect x="73.0328%" y="469" width="0.1910%" height="15" fill="rgb(209,209,32)" fg:x="1912" fg:w="5"/><text x="73.2828%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (5 samples, 0.19%)</title><rect x="73.0328%" y="453" width="0.1910%" height="15" fill="rgb(221,70,22)" fg:x="1912" fg:w="5"/><text x="73.2828%" y="463.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (5 samples, 0.19%)</title><rect x="73.0328%" y="437" width="0.1910%" height="15" fill="rgb(248,145,5)" fg:x="1912" fg:w="5"/><text x="73.2828%" y="447.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (3 samples, 0.11%)</title><rect x="73.1092%" y="421" width="0.1146%" height="15" fill="rgb(226,116,26)" fg:x="1914" fg:w="3"/><text x="73.3592%" y="431.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (2 samples, 0.08%)</title><rect x="73.1474%" y="405" width="0.0764%" height="15" fill="rgb(244,5,17)" fg:x="1915" fg:w="2"/><text x="73.3974%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (2 samples, 0.08%)</title><rect x="73.1474%" y="389" width="0.0764%" height="15" fill="rgb(252,159,33)" fg:x="1915" fg:w="2"/><text x="73.3974%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (2 samples, 0.08%)</title><rect x="73.1474%" y="373" width="0.0764%" height="15" fill="rgb(206,71,0)" fg:x="1915" fg:w="2"/><text x="73.3974%" y="383.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (17 samples, 0.65%)</title><rect x="73.0328%" y="501" width="0.6494%" height="15" fill="rgb(233,118,54)" fg:x="1912" fg:w="17"/><text x="73.2828%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (17 samples, 0.65%)</title><rect x="73.0328%" y="485" width="0.6494%" height="15" fill="rgb(234,83,48)" fg:x="1912" fg:w="17"/><text x="73.2828%" y="495.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (12 samples, 0.46%)</title><rect x="73.2238%" y="469" width="0.4584%" height="15" fill="rgb(228,3,54)" fg:x="1917" fg:w="12"/><text x="73.4738%" y="479.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.19%)</title><rect x="73.4912%" y="453" width="0.1910%" height="15" fill="rgb(226,155,13)" fg:x="1924" fg:w="5"/><text x="73.7412%" y="463.50"></text></g><g><title>malloc (5 samples, 0.19%)</title><rect x="73.4912%" y="437" width="0.1910%" height="15" fill="rgb(241,28,37)" fg:x="1924" fg:w="5"/><text x="73.7412%" y="447.50"></text></g><g><title>[libc.so.6] (5 samples, 0.19%)</title><rect x="73.4912%" y="421" width="0.1910%" height="15" fill="rgb(233,93,10)" fg:x="1924" fg:w="5"/><text x="73.7412%" y="431.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clone_data (27 samples, 1.03%)</title><rect x="72.9183%" y="517" width="1.0313%" height="15" fill="rgb(225,113,19)" fg:x="1909" fg:w="27"/><text x="73.1683%" y="527.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (7 samples, 0.27%)</title><rect x="73.6822%" y="501" width="0.2674%" height="15" fill="rgb(241,2,18)" fg:x="1929" fg:w="7"/><text x="73.9322%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (7 samples, 0.27%)</title><rect x="73.6822%" y="485" width="0.2674%" height="15" fill="rgb(228,207,21)" fg:x="1929" fg:w="7"/><text x="73.9322%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (7 samples, 0.27%)</title><rect x="73.6822%" y="469" width="0.2674%" height="15" fill="rgb(213,211,35)" fg:x="1929" fg:w="7"/><text x="73.9322%" y="479.50"></text></g><g><title>core::cell::BorrowRef::new (7 samples, 0.27%)</title><rect x="73.6822%" y="453" width="0.2674%" height="15" fill="rgb(209,83,10)" fg:x="1929" fg:w="7"/><text x="73.9322%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (5 samples, 0.19%)</title><rect x="73.7586%" y="437" width="0.1910%" height="15" fill="rgb(209,164,1)" fg:x="1931" fg:w="5"/><text x="74.0086%" y="447.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::add (39 samples, 1.49%)</title><rect x="72.6891%" y="533" width="1.4897%" height="15" fill="rgb(213,184,43)" fg:x="1903" fg:w="39"/><text x="72.9391%" y="543.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::do_the_thing_add (6 samples, 0.23%)</title><rect x="73.9496%" y="517" width="0.2292%" height="15" fill="rgb(231,61,34)" fg:x="1936" fg:w="6"/><text x="74.1996%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.15%)</title><rect x="74.2934%" y="517" width="0.1528%" height="15" fill="rgb(235,75,3)" fg:x="1945" fg:w="4"/><text x="74.5434%" y="527.50"></text></g><g><title>cfree (4 samples, 0.15%)</title><rect x="74.4461%" y="517" width="0.1528%" height="15" fill="rgb(220,106,47)" fg:x="1949" fg:w="4"/><text x="74.6961%" y="527.50"></text></g><g><title>[libc.so.6] (2 samples, 0.08%)</title><rect x="74.5225%" y="501" width="0.0764%" height="15" fill="rgb(210,196,33)" fg:x="1951" fg:w="2"/><text x="74.7725%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (2 samples, 0.08%)</title><rect x="74.5989%" y="517" width="0.0764%" height="15" fill="rgb(229,154,42)" fg:x="1953" fg:w="2"/><text x="74.8489%" y="527.50"></text></g><g><title>core::cmp::PartialEq::ne (2 samples, 0.08%)</title><rect x="74.5989%" y="501" width="0.0764%" height="15" fill="rgb(228,114,26)" fg:x="1953" fg:w="2"/><text x="74.8489%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (2 samples, 0.08%)</title><rect x="74.6753%" y="517" width="0.0764%" height="15" fill="rgb(208,144,1)" fg:x="1955" fg:w="2"/><text x="74.9253%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.08%)</title><rect x="74.6753%" y="501" width="0.0764%" height="15" fill="rgb(239,112,37)" fg:x="1955" fg:w="2"/><text x="74.9253%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (2 samples, 0.08%)</title><rect x="74.6753%" y="485" width="0.0764%" height="15" fill="rgb(210,96,50)" fg:x="1955" fg:w="2"/><text x="74.9253%" y="495.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.08%)</title><rect x="74.6753%" y="469" width="0.0764%" height="15" fill="rgb(222,178,2)" fg:x="1955" fg:w="2"/><text x="74.9253%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (2 samples, 0.08%)</title><rect x="74.6753%" y="453" width="0.0764%" height="15" fill="rgb(226,74,18)" fg:x="1955" fg:w="2"/><text x="74.9253%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.08%)</title><rect x="74.6753%" y="437" width="0.0764%" height="15" fill="rgb(225,67,54)" fg:x="1955" fg:w="2"/><text x="74.9253%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.08%)</title><rect x="74.6753%" y="421" width="0.0764%" height="15" fill="rgb(251,92,32)" fg:x="1955" fg:w="2"/><text x="74.9253%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.08%)</title><rect x="74.6753%" y="405" width="0.0764%" height="15" fill="rgb(228,149,22)" fg:x="1955" fg:w="2"/><text x="74.9253%" y="415.50"></text></g><g><title>cfree (2 samples, 0.08%)</title><rect x="74.6753%" y="389" width="0.0764%" height="15" fill="rgb(243,54,13)" fg:x="1955" fg:w="2"/><text x="74.9253%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;simple_lisp::interpreter::data::Data&gt;&gt; (1 samples, 0.04%)</title><rect x="74.7517%" y="517" width="0.0382%" height="15" fill="rgb(243,180,28)" fg:x="1957" fg:w="1"/><text x="75.0017%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (1 samples, 0.04%)</title><rect x="74.7517%" y="501" width="0.0382%" height="15" fill="rgb(208,167,24)" fg:x="1957" fg:w="1"/><text x="75.0017%" y="511.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="74.7517%" y="485" width="0.0382%" height="15" fill="rgb(245,73,45)" fg:x="1957" fg:w="1"/><text x="75.0017%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.04%)</title><rect x="74.7517%" y="469" width="0.0382%" height="15" fill="rgb(237,203,48)" fg:x="1957" fg:w="1"/><text x="75.0017%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.04%)</title><rect x="74.7517%" y="453" width="0.0382%" height="15" fill="rgb(211,197,16)" fg:x="1957" fg:w="1"/><text x="75.0017%" y="463.50"></text></g><g><title>core::mem::replace (1 samples, 0.04%)</title><rect x="74.7517%" y="437" width="0.0382%" height="15" fill="rgb(243,99,51)" fg:x="1957" fg:w="1"/><text x="75.0017%" y="447.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="74.7517%" y="421" width="0.0382%" height="15" fill="rgb(215,123,29)" fg:x="1957" fg:w="1"/><text x="75.0017%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (8 samples, 0.31%)</title><rect x="74.9427%" y="405" width="0.3056%" height="15" fill="rgb(239,186,37)" fg:x="1962" fg:w="8"/><text x="75.1927%" y="415.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (10 samples, 0.38%)</title><rect x="74.9427%" y="421" width="0.3820%" height="15" fill="rgb(252,136,39)" fg:x="1962" fg:w="10"/><text x="75.1927%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.08%)</title><rect x="75.2483%" y="405" width="0.0764%" height="15" fill="rgb(223,213,32)" fg:x="1970" fg:w="2"/><text x="75.4983%" y="415.50"></text></g><g><title>core::ptr::write (2 samples, 0.08%)</title><rect x="75.2483%" y="389" width="0.0764%" height="15" fill="rgb(233,115,5)" fg:x="1970" fg:w="2"/><text x="75.4983%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="75.3247%" y="389" width="0.0382%" height="15" fill="rgb(207,226,44)" fg:x="1972" fg:w="1"/><text x="75.5747%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="75.6684%" y="373" width="0.0382%" height="15" fill="rgb(208,126,0)" fg:x="1981" fg:w="1"/><text x="75.9184%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1 samples, 0.04%)</title><rect x="75.7066%" y="373" width="0.0382%" height="15" fill="rgb(244,66,21)" fg:x="1982" fg:w="1"/><text x="75.9566%" y="383.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (1 samples, 0.04%)</title><rect x="75.7066%" y="357" width="0.0382%" height="15" fill="rgb(222,97,12)" fg:x="1982" fg:w="1"/><text x="75.9566%" y="367.50"></text></g><g><title>hashbrown::raw::inner::h2 (4 samples, 0.15%)</title><rect x="75.7448%" y="373" width="0.1528%" height="15" fill="rgb(219,213,19)" fg:x="1983" fg:w="4"/><text x="75.9948%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (16 samples, 0.61%)</title><rect x="75.3247%" y="405" width="0.6112%" height="15" fill="rgb(252,169,30)" fg:x="1972" fg:w="16"/><text x="75.5747%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (15 samples, 0.57%)</title><rect x="75.3629%" y="389" width="0.5730%" height="15" fill="rgb(206,32,51)" fg:x="1973" fg:w="15"/><text x="75.6129%" y="399.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="75.8976%" y="373" width="0.0382%" height="15" fill="rgb(250,172,42)" fg:x="1987" fg:w="1"/><text x="76.1476%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="75.8976%" y="357" width="0.0382%" height="15" fill="rgb(209,34,43)" fg:x="1987" fg:w="1"/><text x="76.1476%" y="367.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (32 samples, 1.22%)</title><rect x="74.9045%" y="485" width="1.2223%" height="15" fill="rgb(223,11,35)" fg:x="1961" fg:w="32"/><text x="75.1545%" y="495.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (32 samples, 1.22%)</title><rect x="74.9045%" y="469" width="1.2223%" height="15" fill="rgb(251,219,26)" fg:x="1961" fg:w="32"/><text x="75.1545%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (32 samples, 1.22%)</title><rect x="74.9045%" y="453" width="1.2223%" height="15" fill="rgb(231,119,3)" fg:x="1961" fg:w="32"/><text x="75.1545%" y="463.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (31 samples, 1.18%)</title><rect x="74.9427%" y="437" width="1.1841%" height="15" fill="rgb(216,97,11)" fg:x="1962" fg:w="31"/><text x="75.1927%" y="447.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (21 samples, 0.80%)</title><rect x="75.3247%" y="421" width="0.8021%" height="15" fill="rgb(223,59,9)" fg:x="1972" fg:w="21"/><text x="75.5747%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (5 samples, 0.19%)</title><rect x="75.9358%" y="405" width="0.1910%" height="15" fill="rgb(233,93,31)" fg:x="1988" fg:w="5"/><text x="76.1858%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (5 samples, 0.19%)</title><rect x="75.9358%" y="389" width="0.1910%" height="15" fill="rgb(239,81,33)" fg:x="1988" fg:w="5"/><text x="76.1858%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (5 samples, 0.19%)</title><rect x="75.9358%" y="373" width="0.1910%" height="15" fill="rgb(213,120,34)" fg:x="1988" fg:w="5"/><text x="76.1858%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (5 samples, 0.19%)</title><rect x="75.9358%" y="357" width="0.1910%" height="15" fill="rgb(243,49,53)" fg:x="1988" fg:w="5"/><text x="76.1858%" y="367.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.65%)</title><rect x="76.7762%" y="469" width="0.6494%" height="15" fill="rgb(247,216,33)" fg:x="2010" fg:w="17"/><text x="77.0262%" y="479.50"></text></g><g><title>malloc (17 samples, 0.65%)</title><rect x="76.7762%" y="453" width="0.6494%" height="15" fill="rgb(226,26,14)" fg:x="2010" fg:w="17"/><text x="77.0262%" y="463.50"></text></g><g><title>[libc.so.6] (15 samples, 0.57%)</title><rect x="76.8526%" y="437" width="0.5730%" height="15" fill="rgb(215,49,53)" fg:x="2012" fg:w="15"/><text x="77.1026%" y="447.50"></text></g><g><title>core::ptr::write (3 samples, 0.11%)</title><rect x="77.4255%" y="469" width="0.1146%" height="15" fill="rgb(245,162,40)" fg:x="2027" fg:w="3"/><text x="77.6755%" y="479.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (73 samples, 2.79%)</title><rect x="74.7899%" y="517" width="2.7884%" height="15" fill="rgb(229,68,17)" fg:x="1958" fg:w="73"/><text x="75.0399%" y="527.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (72 samples, 2.75%)</title><rect x="74.8281%" y="501" width="2.7502%" height="15" fill="rgb(213,182,10)" fg:x="1959" fg:w="72"/><text x="75.0781%" y="511.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (38 samples, 1.45%)</title><rect x="76.1268%" y="485" width="1.4515%" height="15" fill="rgb(245,125,30)" fg:x="1993" fg:w="38"/><text x="76.3768%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (1 samples, 0.04%)</title><rect x="77.5401%" y="469" width="0.0382%" height="15" fill="rgb(232,202,2)" fg:x="2030" fg:w="1"/><text x="77.7901%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.04%)</title><rect x="77.5401%" y="453" width="0.0382%" height="15" fill="rgb(237,140,51)" fg:x="2030" fg:w="1"/><text x="77.7901%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.04%)</title><rect x="77.5401%" y="437" width="0.0382%" height="15" fill="rgb(236,157,25)" fg:x="2030" fg:w="1"/><text x="77.7901%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (1 samples, 0.04%)</title><rect x="77.5401%" y="421" width="0.0382%" height="15" fill="rgb(219,209,0)" fg:x="2030" fg:w="1"/><text x="77.7901%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.04%)</title><rect x="77.5401%" y="405" width="0.0382%" height="15" fill="rgb(240,116,54)" fg:x="2030" fg:w="1"/><text x="77.7901%" y="415.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.04%)</title><rect x="77.5401%" y="389" width="0.0382%" height="15" fill="rgb(216,10,36)" fg:x="2030" fg:w="1"/><text x="77.7901%" y="399.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.04%)</title><rect x="77.5401%" y="373" width="0.0382%" height="15" fill="rgb(222,72,44)" fg:x="2030" fg:w="1"/><text x="77.7901%" y="383.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::equal (95 samples, 3.63%)</title><rect x="74.1788%" y="533" width="3.6287%" height="15" fill="rgb(232,159,9)" fg:x="1942" fg:w="95"/><text x="74.4288%" y="543.50">simp..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (6 samples, 0.23%)</title><rect x="77.5783%" y="517" width="0.2292%" height="15" fill="rgb(210,39,32)" fg:x="2031" fg:w="6"/><text x="77.8283%" y="527.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (6 samples, 0.23%)</title><rect x="77.5783%" y="501" width="0.2292%" height="15" fill="rgb(216,194,45)" fg:x="2031" fg:w="6"/><text x="77.8283%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (6 samples, 0.23%)</title><rect x="77.5783%" y="485" width="0.2292%" height="15" fill="rgb(218,18,35)" fg:x="2031" fg:w="6"/><text x="77.8283%" y="495.50"></text></g><g><title>core::cell::BorrowRef::new (6 samples, 0.23%)</title><rect x="77.5783%" y="469" width="0.2292%" height="15" fill="rgb(207,83,51)" fg:x="2031" fg:w="6"/><text x="77.8283%" y="479.50"></text></g><g><title>core::cell::is_reading (6 samples, 0.23%)</title><rect x="77.5783%" y="453" width="0.2292%" height="15" fill="rgb(225,63,43)" fg:x="2031" fg:w="6"/><text x="77.8283%" y="463.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::less (1 samples, 0.04%)</title><rect x="77.8075%" y="533" width="0.0382%" height="15" fill="rgb(207,57,36)" fg:x="2037" fg:w="1"/><text x="78.0575%" y="543.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (1 samples, 0.04%)</title><rect x="77.8075%" y="517" width="0.0382%" height="15" fill="rgb(216,99,33)" fg:x="2037" fg:w="1"/><text x="78.0575%" y="527.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (1 samples, 0.04%)</title><rect x="77.8075%" y="501" width="0.0382%" height="15" fill="rgb(225,42,16)" fg:x="2037" fg:w="1"/><text x="78.0575%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (1 samples, 0.04%)</title><rect x="77.8075%" y="485" width="0.0382%" height="15" fill="rgb(220,201,45)" fg:x="2037" fg:w="1"/><text x="78.0575%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="77.8075%" y="469" width="0.0382%" height="15" fill="rgb(225,33,4)" fg:x="2037" fg:w="1"/><text x="78.0575%" y="479.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="77.8075%" y="453" width="0.0382%" height="15" fill="rgb(224,33,50)" fg:x="2037" fg:w="1"/><text x="78.0575%" y="463.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="77.8075%" y="437" width="0.0382%" height="15" fill="rgb(246,198,51)" fg:x="2037" fg:w="1"/><text x="78.0575%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.08%)</title><rect x="77.9221%" y="517" width="0.0764%" height="15" fill="rgb(205,22,4)" fg:x="2040" fg:w="2"/><text x="78.1721%" y="527.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (1 samples, 0.04%)</title><rect x="78.1895%" y="421" width="0.0382%" height="15" fill="rgb(206,3,8)" fg:x="2047" fg:w="1"/><text x="78.4395%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="78.1895%" y="405" width="0.0382%" height="15" fill="rgb(251,23,15)" fg:x="2047" fg:w="1"/><text x="78.4395%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="78.2277%" y="389" width="0.0382%" height="15" fill="rgb(252,88,28)" fg:x="2048" fg:w="1"/><text x="78.4777%" y="399.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (12 samples, 0.46%)</title><rect x="78.0367%" y="485" width="0.4584%" height="15" fill="rgb(212,127,14)" fg:x="2043" fg:w="12"/><text x="78.2867%" y="495.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (12 samples, 0.46%)</title><rect x="78.0367%" y="469" width="0.4584%" height="15" fill="rgb(247,145,37)" fg:x="2043" fg:w="12"/><text x="78.2867%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (11 samples, 0.42%)</title><rect x="78.0749%" y="453" width="0.4202%" height="15" fill="rgb(209,117,53)" fg:x="2044" fg:w="11"/><text x="78.3249%" y="463.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (8 samples, 0.31%)</title><rect x="78.1895%" y="437" width="0.3056%" height="15" fill="rgb(212,90,42)" fg:x="2047" fg:w="8"/><text x="78.4395%" y="447.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (7 samples, 0.27%)</title><rect x="78.2277%" y="421" width="0.2674%" height="15" fill="rgb(218,164,37)" fg:x="2048" fg:w="7"/><text x="78.4777%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (7 samples, 0.27%)</title><rect x="78.2277%" y="405" width="0.2674%" height="15" fill="rgb(246,65,34)" fg:x="2048" fg:w="7"/><text x="78.4777%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (6 samples, 0.23%)</title><rect x="78.2659%" y="389" width="0.2292%" height="15" fill="rgb(231,100,33)" fg:x="2049" fg:w="6"/><text x="78.5159%" y="399.50"></text></g><g><title>hashbrown::raw::inner::h2 (2 samples, 0.08%)</title><rect x="78.4186%" y="373" width="0.0764%" height="15" fill="rgb(228,126,14)" fg:x="2053" fg:w="2"/><text x="78.6686%" y="383.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="78.6096%" y="453" width="0.0382%" height="15" fill="rgb(215,173,21)" fg:x="2058" fg:w="1"/><text x="78.8596%" y="463.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="78.6478%" y="453" width="0.0382%" height="15" fill="rgb(210,6,40)" fg:x="2059" fg:w="1"/><text x="78.8978%" y="463.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.04%)</title><rect x="78.6860%" y="453" width="0.0382%" height="15" fill="rgb(212,48,18)" fg:x="2060" fg:w="1"/><text x="78.9360%" y="463.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.31%)</title><rect x="78.6096%" y="469" width="0.3056%" height="15" fill="rgb(230,214,11)" fg:x="2058" fg:w="8"/><text x="78.8596%" y="479.50"></text></g><g><title>malloc (5 samples, 0.19%)</title><rect x="78.7242%" y="453" width="0.1910%" height="15" fill="rgb(254,105,39)" fg:x="2061" fg:w="5"/><text x="78.9742%" y="463.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="78.8006%" y="437" width="0.1146%" height="15" fill="rgb(245,158,5)" fg:x="2063" fg:w="3"/><text x="79.0506%" y="447.50"></text></g><g><title>core::ptr::write (2 samples, 0.08%)</title><rect x="78.9152%" y="469" width="0.0764%" height="15" fill="rgb(249,208,11)" fg:x="2066" fg:w="2"/><text x="79.1652%" y="479.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (27 samples, 1.03%)</title><rect x="77.9985%" y="517" width="1.0313%" height="15" fill="rgb(210,39,28)" fg:x="2042" fg:w="27"/><text x="78.2485%" y="527.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (27 samples, 1.03%)</title><rect x="77.9985%" y="501" width="1.0313%" height="15" fill="rgb(211,56,53)" fg:x="2042" fg:w="27"/><text x="78.2485%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (14 samples, 0.53%)</title><rect x="78.4950%" y="485" width="0.5348%" height="15" fill="rgb(226,201,30)" fg:x="2055" fg:w="14"/><text x="78.7450%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (1 samples, 0.04%)</title><rect x="78.9916%" y="469" width="0.0382%" height="15" fill="rgb(239,101,34)" fg:x="2068" fg:w="1"/><text x="79.2416%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.04%)</title><rect x="78.9916%" y="453" width="0.0382%" height="15" fill="rgb(226,209,5)" fg:x="2068" fg:w="1"/><text x="79.2416%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.04%)</title><rect x="78.9916%" y="437" width="0.0382%" height="15" fill="rgb(250,105,47)" fg:x="2068" fg:w="1"/><text x="79.2416%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (1 samples, 0.04%)</title><rect x="78.9916%" y="421" width="0.0382%" height="15" fill="rgb(230,72,3)" fg:x="2068" fg:w="1"/><text x="79.2416%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.04%)</title><rect x="78.9916%" y="405" width="0.0382%" height="15" fill="rgb(232,218,39)" fg:x="2068" fg:w="1"/><text x="79.2416%" y="415.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.04%)</title><rect x="78.9916%" y="389" width="0.0382%" height="15" fill="rgb(248,166,6)" fg:x="2068" fg:w="1"/><text x="79.2416%" y="399.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.04%)</title><rect x="78.9916%" y="373" width="0.0382%" height="15" fill="rgb(247,89,20)" fg:x="2068" fg:w="1"/><text x="79.2416%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.04%)</title><rect x="79.0298%" y="453" width="0.0382%" height="15" fill="rgb(248,130,54)" fg:x="2069" fg:w="1"/><text x="79.2798%" y="463.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::less_equal (40 samples, 1.53%)</title><rect x="77.8457%" y="533" width="1.5279%" height="15" fill="rgb(234,196,4)" fg:x="2038" fg:w="40"/><text x="78.0957%" y="543.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (9 samples, 0.34%)</title><rect x="79.0298%" y="517" width="0.3438%" height="15" fill="rgb(250,143,31)" fg:x="2069" fg:w="9"/><text x="79.2798%" y="527.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (9 samples, 0.34%)</title><rect x="79.0298%" y="501" width="0.3438%" height="15" fill="rgb(211,110,34)" fg:x="2069" fg:w="9"/><text x="79.2798%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (9 samples, 0.34%)</title><rect x="79.0298%" y="485" width="0.3438%" height="15" fill="rgb(215,124,48)" fg:x="2069" fg:w="9"/><text x="79.2798%" y="495.50"></text></g><g><title>core::cell::BorrowRef::new (9 samples, 0.34%)</title><rect x="79.0298%" y="469" width="0.3438%" height="15" fill="rgb(216,46,13)" fg:x="2069" fg:w="9"/><text x="79.2798%" y="479.50"></text></g><g><title>core::cell::is_reading (8 samples, 0.31%)</title><rect x="79.0680%" y="453" width="0.3056%" height="15" fill="rgb(205,184,25)" fg:x="2070" fg:w="8"/><text x="79.3180%" y="463.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.08%)</title><rect x="79.6791%" y="517" width="0.0764%" height="15" fill="rgb(228,1,10)" fg:x="2086" fg:w="2"/><text x="79.9291%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.08%)</title><rect x="79.6791%" y="501" width="0.0764%" height="15" fill="rgb(213,116,27)" fg:x="2086" fg:w="2"/><text x="79.9291%" y="511.50"></text></g><g><title>cfree (11 samples, 0.42%)</title><rect x="79.7555%" y="517" width="0.4202%" height="15" fill="rgb(241,95,50)" fg:x="2088" fg:w="11"/><text x="80.0055%" y="527.50"></text></g><g><title>[libc.so.6] (5 samples, 0.19%)</title><rect x="79.9847%" y="501" width="0.1910%" height="15" fill="rgb(238,48,32)" fg:x="2094" fg:w="5"/><text x="80.2347%" y="511.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::Data as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="80.1757%" y="501" width="0.0382%" height="15" fill="rgb(235,113,49)" fg:x="2099" fg:w="1"/><text x="80.4257%" y="511.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (1 samples, 0.04%)</title><rect x="80.2521%" y="405" width="0.0382%" height="15" fill="rgb(205,127,43)" fg:x="2101" fg:w="1"/><text x="80.5021%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="80.2521%" y="389" width="0.0382%" height="15" fill="rgb(250,162,2)" fg:x="2101" fg:w="1"/><text x="80.5021%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="80.2903%" y="389" width="0.0382%" height="15" fill="rgb(220,13,41)" fg:x="2102" fg:w="1"/><text x="80.5403%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.04%)</title><rect x="80.2903%" y="373" width="0.0382%" height="15" fill="rgb(249,221,25)" fg:x="2102" fg:w="1"/><text x="80.5403%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="80.2903%" y="357" width="0.0382%" height="15" fill="rgb(215,208,19)" fg:x="2102" fg:w="1"/><text x="80.5403%" y="367.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (3 samples, 0.11%)</title><rect x="80.2521%" y="469" width="0.1146%" height="15" fill="rgb(236,175,2)" fg:x="2101" fg:w="3"/><text x="80.5021%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (3 samples, 0.11%)</title><rect x="80.2521%" y="453" width="0.1146%" height="15" fill="rgb(241,52,2)" fg:x="2101" fg:w="3"/><text x="80.5021%" y="463.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (3 samples, 0.11%)</title><rect x="80.2521%" y="437" width="0.1146%" height="15" fill="rgb(248,140,14)" fg:x="2101" fg:w="3"/><text x="80.5021%" y="447.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (3 samples, 0.11%)</title><rect x="80.2521%" y="421" width="0.1146%" height="15" fill="rgb(253,22,42)" fg:x="2101" fg:w="3"/><text x="80.5021%" y="431.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (2 samples, 0.08%)</title><rect x="80.2903%" y="405" width="0.0764%" height="15" fill="rgb(234,61,47)" fg:x="2102" fg:w="2"/><text x="80.5403%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.04%)</title><rect x="80.3285%" y="389" width="0.0382%" height="15" fill="rgb(208,226,15)" fg:x="2103" fg:w="1"/><text x="80.5785%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.04%)</title><rect x="80.3285%" y="373" width="0.0382%" height="15" fill="rgb(217,221,4)" fg:x="2103" fg:w="1"/><text x="80.5785%" y="383.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="80.3285%" y="357" width="0.0382%" height="15" fill="rgb(212,174,34)" fg:x="2103" fg:w="1"/><text x="80.5785%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="80.3285%" y="341" width="0.0382%" height="15" fill="rgb(253,83,4)" fg:x="2103" fg:w="1"/><text x="80.5785%" y="351.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="81.2834%" y="437" width="0.0382%" height="15" fill="rgb(250,195,49)" fg:x="2128" fg:w="1"/><text x="81.5334%" y="447.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.50%)</title><rect x="81.2834%" y="453" width="0.4966%" height="15" fill="rgb(241,192,25)" fg:x="2128" fg:w="13"/><text x="81.5334%" y="463.50"></text></g><g><title>malloc (12 samples, 0.46%)</title><rect x="81.3216%" y="437" width="0.4584%" height="15" fill="rgb(208,124,10)" fg:x="2129" fg:w="12"/><text x="81.5716%" y="447.50"></text></g><g><title>[libc.so.6] (12 samples, 0.46%)</title><rect x="81.3216%" y="421" width="0.4584%" height="15" fill="rgb(222,33,0)" fg:x="2129" fg:w="12"/><text x="81.5716%" y="431.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (44 samples, 1.68%)</title><rect x="80.2139%" y="501" width="1.6807%" height="15" fill="rgb(234,209,28)" fg:x="2100" fg:w="44"/><text x="80.4639%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (44 samples, 1.68%)</title><rect x="80.2139%" y="485" width="1.6807%" height="15" fill="rgb(224,11,23)" fg:x="2100" fg:w="44"/><text x="80.4639%" y="495.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (40 samples, 1.53%)</title><rect x="80.3667%" y="469" width="1.5279%" height="15" fill="rgb(232,99,1)" fg:x="2104" fg:w="40"/><text x="80.6167%" y="479.50"></text></g><g><title>core::ptr::write (3 samples, 0.11%)</title><rect x="81.7800%" y="453" width="0.1146%" height="15" fill="rgb(237,95,45)" fg:x="2141" fg:w="3"/><text x="82.0300%" y="463.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clone_data (50 samples, 1.91%)</title><rect x="80.1757%" y="517" width="1.9099%" height="15" fill="rgb(208,109,11)" fg:x="2099" fg:w="50"/><text x="80.4257%" y="527.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (5 samples, 0.19%)</title><rect x="81.8946%" y="501" width="0.1910%" height="15" fill="rgb(216,190,48)" fg:x="2144" fg:w="5"/><text x="82.1446%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (5 samples, 0.19%)</title><rect x="81.8946%" y="485" width="0.1910%" height="15" fill="rgb(251,171,36)" fg:x="2144" fg:w="5"/><text x="82.1446%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (5 samples, 0.19%)</title><rect x="81.8946%" y="469" width="0.1910%" height="15" fill="rgb(230,62,22)" fg:x="2144" fg:w="5"/><text x="82.1446%" y="479.50"></text></g><g><title>core::cell::BorrowRef::new (5 samples, 0.19%)</title><rect x="81.8946%" y="453" width="0.1910%" height="15" fill="rgb(225,114,35)" fg:x="2144" fg:w="5"/><text x="82.1446%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (4 samples, 0.15%)</title><rect x="81.9328%" y="437" width="0.1528%" height="15" fill="rgb(215,118,42)" fg:x="2145" fg:w="4"/><text x="82.1828%" y="447.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::modulo::do_the_thing (2 samples, 0.08%)</title><rect x="82.0856%" y="517" width="0.0764%" height="15" fill="rgb(243,119,21)" fg:x="2149" fg:w="2"/><text x="82.3356%" y="527.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::modulo (74 samples, 2.83%)</title><rect x="79.3736%" y="533" width="2.8266%" height="15" fill="rgb(252,177,53)" fg:x="2078" fg:w="74"/><text x="79.6236%" y="543.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (1 samples, 0.04%)</title><rect x="82.1620%" y="517" width="0.0382%" height="15" fill="rgb(237,209,29)" fg:x="2151" fg:w="1"/><text x="82.4120%" y="527.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (1 samples, 0.04%)</title><rect x="82.1620%" y="501" width="0.0382%" height="15" fill="rgb(212,65,23)" fg:x="2151" fg:w="1"/><text x="82.4120%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (1 samples, 0.04%)</title><rect x="82.1620%" y="485" width="0.0382%" height="15" fill="rgb(230,222,46)" fg:x="2151" fg:w="1"/><text x="82.4120%" y="495.50"></text></g><g><title>core::cell::BorrowRef::new (1 samples, 0.04%)</title><rect x="82.1620%" y="469" width="0.0382%" height="15" fill="rgb(215,135,32)" fg:x="2151" fg:w="1"/><text x="82.4120%" y="479.50"></text></g><g><title>core::cell::is_reading (1 samples, 0.04%)</title><rect x="82.1620%" y="453" width="0.0382%" height="15" fill="rgb(246,101,22)" fg:x="2151" fg:w="1"/><text x="82.4120%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.08%)</title><rect x="82.2765%" y="517" width="0.0764%" height="15" fill="rgb(206,107,13)" fg:x="2154" fg:w="2"/><text x="82.5265%" y="527.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (2 samples, 0.08%)</title><rect x="82.2765%" y="501" width="0.0764%" height="15" fill="rgb(250,100,44)" fg:x="2154" fg:w="2"/><text x="82.5265%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.04%)</title><rect x="82.3529%" y="517" width="0.0382%" height="15" fill="rgb(231,147,38)" fg:x="2156" fg:w="1"/><text x="82.6029%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="82.3529%" y="501" width="0.0382%" height="15" fill="rgb(229,8,40)" fg:x="2156" fg:w="1"/><text x="82.6029%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (1 samples, 0.04%)</title><rect x="82.3529%" y="485" width="0.0382%" height="15" fill="rgb(221,135,30)" fg:x="2156" fg:w="1"/><text x="82.6029%" y="495.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="82.3529%" y="469" width="0.0382%" height="15" fill="rgb(249,193,18)" fg:x="2156" fg:w="1"/><text x="82.6029%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.04%)</title><rect x="82.3529%" y="453" width="0.0382%" height="15" fill="rgb(209,133,39)" fg:x="2156" fg:w="1"/><text x="82.6029%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="82.3529%" y="437" width="0.0382%" height="15" fill="rgb(232,100,14)" fg:x="2156" fg:w="1"/><text x="82.6029%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="82.3529%" y="421" width="0.0382%" height="15" fill="rgb(224,185,1)" fg:x="2156" fg:w="1"/><text x="82.6029%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="82.3529%" y="405" width="0.0382%" height="15" fill="rgb(223,139,8)" fg:x="2156" fg:w="1"/><text x="82.6029%" y="415.50"></text></g><g><title>cfree (1 samples, 0.04%)</title><rect x="82.3529%" y="389" width="0.0382%" height="15" fill="rgb(232,213,38)" fg:x="2156" fg:w="1"/><text x="82.6029%" y="399.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="82.3529%" y="373" width="0.0382%" height="15" fill="rgb(207,94,22)" fg:x="2156" fg:w="1"/><text x="82.6029%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.11%)</title><rect x="82.5821%" y="405" width="0.1146%" height="15" fill="rgb(219,183,54)" fg:x="2162" fg:w="3"/><text x="82.8321%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.11%)</title><rect x="82.5821%" y="389" width="0.1146%" height="15" fill="rgb(216,185,54)" fg:x="2162" fg:w="3"/><text x="82.8321%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.11%)</title><rect x="82.5821%" y="373" width="0.1146%" height="15" fill="rgb(254,217,39)" fg:x="2162" fg:w="3"/><text x="82.8321%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (2 samples, 0.08%)</title><rect x="82.6967%" y="405" width="0.0764%" height="15" fill="rgb(240,178,23)" fg:x="2165" fg:w="2"/><text x="82.9467%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (2 samples, 0.08%)</title><rect x="82.6967%" y="389" width="0.0764%" height="15" fill="rgb(218,11,47)" fg:x="2165" fg:w="2"/><text x="82.9467%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="82.7349%" y="373" width="0.0382%" height="15" fill="rgb(218,51,51)" fg:x="2166" fg:w="1"/><text x="82.9849%" y="383.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (10 samples, 0.38%)</title><rect x="82.4293%" y="485" width="0.3820%" height="15" fill="rgb(238,126,27)" fg:x="2158" fg:w="10"/><text x="82.6793%" y="495.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (10 samples, 0.38%)</title><rect x="82.4293%" y="469" width="0.3820%" height="15" fill="rgb(249,202,22)" fg:x="2158" fg:w="10"/><text x="82.6793%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (10 samples, 0.38%)</title><rect x="82.4293%" y="453" width="0.3820%" height="15" fill="rgb(254,195,49)" fg:x="2158" fg:w="10"/><text x="82.6793%" y="463.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (6 samples, 0.23%)</title><rect x="82.5821%" y="437" width="0.2292%" height="15" fill="rgb(208,123,14)" fg:x="2162" fg:w="6"/><text x="82.8321%" y="447.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (6 samples, 0.23%)</title><rect x="82.5821%" y="421" width="0.2292%" height="15" fill="rgb(224,200,8)" fg:x="2162" fg:w="6"/><text x="82.8321%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.04%)</title><rect x="82.7731%" y="405" width="0.0382%" height="15" fill="rgb(217,61,36)" fg:x="2167" fg:w="1"/><text x="83.0231%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (1 samples, 0.04%)</title><rect x="82.7731%" y="389" width="0.0382%" height="15" fill="rgb(206,35,45)" fg:x="2167" fg:w="1"/><text x="83.0231%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (1 samples, 0.04%)</title><rect x="82.7731%" y="373" width="0.0382%" height="15" fill="rgb(217,65,33)" fg:x="2167" fg:w="1"/><text x="83.0231%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (1 samples, 0.04%)</title><rect x="82.7731%" y="357" width="0.0382%" height="15" fill="rgb(222,158,48)" fg:x="2167" fg:w="1"/><text x="83.0231%" y="367.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.23%)</title><rect x="83.0023%" y="469" width="0.2292%" height="15" fill="rgb(254,2,54)" fg:x="2173" fg:w="6"/><text x="83.2523%" y="479.50"></text></g><g><title>malloc (6 samples, 0.23%)</title><rect x="83.0023%" y="453" width="0.2292%" height="15" fill="rgb(250,143,38)" fg:x="2173" fg:w="6"/><text x="83.2523%" y="463.50"></text></g><g><title>[libc.so.6] (4 samples, 0.15%)</title><rect x="83.0787%" y="437" width="0.1528%" height="15" fill="rgb(248,25,0)" fg:x="2175" fg:w="4"/><text x="83.3287%" y="447.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (23 samples, 0.88%)</title><rect x="82.3911%" y="517" width="0.8785%" height="15" fill="rgb(206,152,27)" fg:x="2157" fg:w="23"/><text x="82.6411%" y="527.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (22 samples, 0.84%)</title><rect x="82.4293%" y="501" width="0.8403%" height="15" fill="rgb(240,77,30)" fg:x="2158" fg:w="22"/><text x="82.6793%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (12 samples, 0.46%)</title><rect x="82.8113%" y="485" width="0.4584%" height="15" fill="rgb(231,5,3)" fg:x="2168" fg:w="12"/><text x="83.0613%" y="495.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="83.2315%" y="469" width="0.0382%" height="15" fill="rgb(207,226,32)" fg:x="2179" fg:w="1"/><text x="83.4815%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.04%)</title><rect x="83.3079%" y="453" width="0.0382%" height="15" fill="rgb(222,207,47)" fg:x="2181" fg:w="1"/><text x="83.5579%" y="463.50"></text></g><g><title>simple_lisp::interpreter::builtins::core::and (35 samples, 1.34%)</title><rect x="82.2002%" y="533" width="1.3369%" height="15" fill="rgb(229,115,45)" fg:x="2152" fg:w="35"/><text x="82.4502%" y="543.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (7 samples, 0.27%)</title><rect x="83.2697%" y="517" width="0.2674%" height="15" fill="rgb(224,191,6)" fg:x="2180" fg:w="7"/><text x="83.5197%" y="527.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (7 samples, 0.27%)</title><rect x="83.2697%" y="501" width="0.2674%" height="15" fill="rgb(230,227,24)" fg:x="2180" fg:w="7"/><text x="83.5197%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (7 samples, 0.27%)</title><rect x="83.2697%" y="485" width="0.2674%" height="15" fill="rgb(228,80,19)" fg:x="2180" fg:w="7"/><text x="83.5197%" y="495.50"></text></g><g><title>core::cell::BorrowRef::new (7 samples, 0.27%)</title><rect x="83.2697%" y="469" width="0.2674%" height="15" fill="rgb(247,229,0)" fg:x="2180" fg:w="7"/><text x="83.5197%" y="479.50"></text></g><g><title>core::cell::is_reading (5 samples, 0.19%)</title><rect x="83.3461%" y="453" width="0.1910%" height="15" fill="rgb(237,194,15)" fg:x="2182" fg:w="5"/><text x="83.5961%" y="463.50"></text></g><g><title>&lt;indexmap::set::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="83.5371%" y="437" width="0.0382%" height="15" fill="rgb(219,203,20)" fg:x="2187" fg:w="1"/><text x="83.7871%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="83.5371%" y="421" width="0.0382%" height="15" fill="rgb(234,128,8)" fg:x="2187" fg:w="1"/><text x="83.7871%" y="431.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.04%)</title><rect x="83.5371%" y="405" width="0.0382%" height="15" fill="rgb(248,202,8)" fg:x="2187" fg:w="1"/><text x="83.7871%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.04%)</title><rect x="84.4538%" y="341" width="0.0382%" height="15" fill="rgb(206,104,37)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="84.4538%" y="325" width="0.0382%" height="15" fill="rgb(223,8,27)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="84.4538%" y="309" width="0.0382%" height="15" fill="rgb(216,217,28)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="84.4538%" y="293" width="0.0382%" height="15" fill="rgb(249,199,1)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="84.4538%" y="277" width="0.0382%" height="15" fill="rgb(240,85,17)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.04%)</title><rect x="84.4538%" y="261" width="0.0382%" height="15" fill="rgb(206,108,45)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="271.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.04%)</title><rect x="84.4538%" y="245" width="0.0382%" height="15" fill="rgb(245,210,41)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.04%)</title><rect x="84.4538%" y="229" width="0.0382%" height="15" fill="rgb(206,13,37)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.04%)</title><rect x="84.4538%" y="213" width="0.0382%" height="15" fill="rgb(250,61,18)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.04%)</title><rect x="84.4538%" y="197" width="0.0382%" height="15" fill="rgb(235,172,48)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="207.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (1 samples, 0.04%)</title><rect x="84.4538%" y="181" width="0.0382%" height="15" fill="rgb(249,201,17)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="191.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (1 samples, 0.04%)</title><rect x="84.4538%" y="165" width="0.0382%" height="15" fill="rgb(219,208,6)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="175.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (1 samples, 0.04%)</title><rect x="84.4538%" y="149" width="0.0382%" height="15" fill="rgb(248,31,23)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="159.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (1 samples, 0.04%)</title><rect x="84.4538%" y="133" width="0.0382%" height="15" fill="rgb(245,15,42)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="143.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (1 samples, 0.04%)</title><rect x="84.4538%" y="117" width="0.0382%" height="15" fill="rgb(222,217,39)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="127.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.04%)</title><rect x="84.4538%" y="101" width="0.0382%" height="15" fill="rgb(210,219,27)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="111.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.04%)</title><rect x="84.4538%" y="85" width="0.0382%" height="15" fill="rgb(252,166,36)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="95.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (1 samples, 0.04%)</title><rect x="84.4538%" y="69" width="0.0382%" height="15" fill="rgb(245,132,34)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="79.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="84.4538%" y="53" width="0.0382%" height="15" fill="rgb(236,54,3)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="63.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="84.4538%" y="37" width="0.0382%" height="15" fill="rgb(241,173,43)" fg:x="2211" fg:w="1"/><text x="84.7038%" y="47.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::prepare_insert_slot (1 samples, 0.04%)</title><rect x="84.5302%" y="245" width="0.0382%" height="15" fill="rgb(215,190,9)" fg:x="2213" fg:w="1"/><text x="84.7802%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot (1 samples, 0.04%)</title><rect x="84.5302%" y="229" width="0.0382%" height="15" fill="rgb(242,101,16)" fg:x="2213" fg:w="1"/><text x="84.7802%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::probe_seq (1 samples, 0.04%)</title><rect x="84.5302%" y="213" width="0.0382%" height="15" fill="rgb(223,190,21)" fg:x="2213" fg:w="1"/><text x="84.7802%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (28 samples, 1.07%)</title><rect x="83.5371%" y="485" width="1.0695%" height="15" fill="rgb(215,228,25)" fg:x="2187" fg:w="28"/><text x="83.7871%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (28 samples, 1.07%)</title><rect x="83.5371%" y="469" width="1.0695%" height="15" fill="rgb(225,36,22)" fg:x="2187" fg:w="28"/><text x="83.7871%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (28 samples, 1.07%)</title><rect x="83.5371%" y="453" width="1.0695%" height="15" fill="rgb(251,106,46)" fg:x="2187" fg:w="28"/><text x="83.7871%" y="463.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (27 samples, 1.03%)</title><rect x="83.5752%" y="437" width="1.0313%" height="15" fill="rgb(208,90,1)" fg:x="2188" fg:w="27"/><text x="83.8252%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (4 samples, 0.15%)</title><rect x="84.4538%" y="421" width="0.1528%" height="15" fill="rgb(243,10,4)" fg:x="2211" fg:w="4"/><text x="84.7038%" y="431.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::collect::_{{closure}} (4 samples, 0.15%)</title><rect x="84.4538%" y="405" width="0.1528%" height="15" fill="rgb(212,137,27)" fg:x="2211" fg:w="4"/><text x="84.7038%" y="415.50"></text></g><g><title>simple_lisp::interpreter::data::Data::add_data_refs (4 samples, 0.15%)</title><rect x="84.4538%" y="389" width="0.1528%" height="15" fill="rgb(231,220,49)" fg:x="2211" fg:w="4"/><text x="84.7038%" y="399.50"></text></g><g><title>&lt;indexmap::set::IndexSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (4 samples, 0.15%)</title><rect x="84.4538%" y="373" width="0.1528%" height="15" fill="rgb(237,96,20)" fg:x="2211" fg:w="4"/><text x="84.7038%" y="383.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (4 samples, 0.15%)</title><rect x="84.4538%" y="357" width="0.1528%" height="15" fill="rgb(239,229,30)" fg:x="2211" fg:w="4"/><text x="84.7038%" y="367.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::reserve (3 samples, 0.11%)</title><rect x="84.4920%" y="341" width="0.1146%" height="15" fill="rgb(219,65,33)" fg:x="2212" fg:w="3"/><text x="84.7420%" y="351.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::reserve (3 samples, 0.11%)</title><rect x="84.4920%" y="325" width="0.1146%" height="15" fill="rgb(243,134,7)" fg:x="2212" fg:w="3"/><text x="84.7420%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (3 samples, 0.11%)</title><rect x="84.4920%" y="309" width="0.1146%" height="15" fill="rgb(216,177,54)" fg:x="2212" fg:w="3"/><text x="84.7420%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.11%)</title><rect x="84.4920%" y="293" width="0.1146%" height="15" fill="rgb(211,160,20)" fg:x="2212" fg:w="3"/><text x="84.7420%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::reserve_rehash_inner (3 samples, 0.11%)</title><rect x="84.4920%" y="277" width="0.1146%" height="15" fill="rgb(239,85,39)" fg:x="2212" fg:w="3"/><text x="84.7420%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::resize_inner (2 samples, 0.08%)</title><rect x="84.5302%" y="261" width="0.0764%" height="15" fill="rgb(232,125,22)" fg:x="2213" fg:w="2"/><text x="84.7802%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::prepare_resize (1 samples, 0.04%)</title><rect x="84.5684%" y="245" width="0.0382%" height="15" fill="rgb(244,57,34)" fg:x="2214" fg:w="1"/><text x="84.8184%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fallible_with_capacity (1 samples, 0.04%)</title><rect x="84.5684%" y="229" width="0.0382%" height="15" fill="rgb(214,203,32)" fg:x="2214" fg:w="1"/><text x="84.8184%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::new_uninitialized (1 samples, 0.04%)</title><rect x="84.5684%" y="213" width="0.0382%" height="15" fill="rgb(207,58,43)" fg:x="2214" fg:w="1"/><text x="84.8184%" y="223.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1 samples, 0.04%)</title><rect x="84.5684%" y="197" width="0.0382%" height="15" fill="rgb(215,193,15)" fg:x="2214" fg:w="1"/><text x="84.8184%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="84.5684%" y="181" width="0.0382%" height="15" fill="rgb(232,15,44)" fg:x="2214" fg:w="1"/><text x="84.8184%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="84.5684%" y="165" width="0.0382%" height="15" fill="rgb(212,3,48)" fg:x="2214" fg:w="1"/><text x="84.8184%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::set::IndexSet&lt;simple_lisp::interpreter::data::HashableDataRef,rustc_hash::FxBuildHasher&gt;&gt; (1 samples, 0.04%)</title><rect x="84.6066%" y="485" width="0.0382%" height="15" fill="rgb(218,128,7)" fg:x="2215" fg:w="1"/><text x="84.8566%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::map::IndexMap&lt;simple_lisp::interpreter::data::HashableDataRef,(),rustc_hash::FxBuildHasher&gt;&gt; (1 samples, 0.04%)</title><rect x="84.6066%" y="469" width="0.0382%" height="15" fill="rgb(226,216,39)" fg:x="2215" fg:w="1"/><text x="84.8566%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::map::core::IndexMapCore&lt;simple_lisp::interpreter::data::HashableDataRef,()&gt;&gt; (1 samples, 0.04%)</title><rect x="84.6066%" y="453" width="0.0382%" height="15" fill="rgb(243,47,51)" fg:x="2215" fg:w="1"/><text x="84.8566%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;simple_lisp::interpreter::data::HashableDataRef,()&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="84.6066%" y="437" width="0.0382%" height="15" fill="rgb(241,183,40)" fg:x="2215" fg:w="1"/><text x="84.8566%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;indexmap::Bucket&lt;simple_lisp::interpreter::data::HashableDataRef,()&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="84.6066%" y="421" width="0.0382%" height="15" fill="rgb(231,217,32)" fg:x="2215" fg:w="1"/><text x="84.8566%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="84.6066%" y="405" width="0.0382%" height="15" fill="rgb(229,61,38)" fg:x="2215" fg:w="1"/><text x="84.8566%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="84.6066%" y="389" width="0.0382%" height="15" fill="rgb(225,210,5)" fg:x="2215" fg:w="1"/><text x="84.8566%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="84.6066%" y="373" width="0.0382%" height="15" fill="rgb(231,79,45)" fg:x="2215" fg:w="1"/><text x="84.8566%" y="383.50"></text></g><g><title>cfree (1 samples, 0.04%)</title><rect x="84.6066%" y="357" width="0.0382%" height="15" fill="rgb(224,100,7)" fg:x="2215" fg:w="1"/><text x="84.8566%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="84.6066%" y="341" width="0.0382%" height="15" fill="rgb(241,198,18)" fg:x="2215" fg:w="1"/><text x="84.8566%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="84.6066%" y="325" width="0.0382%" height="15" fill="rgb(252,97,53)" fg:x="2215" fg:w="1"/><text x="84.8566%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (10 samples, 0.38%)</title><rect x="86.6692%" y="309" width="0.3820%" height="15" fill="rgb(220,88,7)" fg:x="2269" fg:w="10"/><text x="86.9192%" y="319.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (10 samples, 0.38%)</title><rect x="86.6692%" y="293" width="0.3820%" height="15" fill="rgb(213,176,14)" fg:x="2269" fg:w="10"/><text x="86.9192%" y="303.50"></text></g><g><title>core::cell::BorrowRef::new (10 samples, 0.38%)</title><rect x="86.6692%" y="277" width="0.3820%" height="15" fill="rgb(246,73,7)" fg:x="2269" fg:w="10"/><text x="86.9192%" y="287.50"></text></g><g><title>core::cell::is_reading (1 samples, 0.04%)</title><rect x="87.0130%" y="261" width="0.0382%" height="15" fill="rgb(245,64,36)" fg:x="2278" fg:w="1"/><text x="87.2630%" y="271.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::allocation_size (64 samples, 2.44%)</title><rect x="86.4018%" y="341" width="2.4446%" height="15" fill="rgb(245,80,10)" fg:x="2262" fg:w="64"/><text x="86.6518%" y="351.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataBox::allocation_size (64 samples, 2.44%)</title><rect x="86.4018%" y="325" width="2.4446%" height="15" fill="rgb(232,107,50)" fg:x="2262" fg:w="64"/><text x="86.6518%" y="335.50">si..</text></g><g><title>simple_lisp::interpreter::data::Data::allocation_size (47 samples, 1.80%)</title><rect x="87.0512%" y="309" width="1.7953%" height="15" fill="rgb(253,3,0)" fg:x="2279" fg:w="47"/><text x="87.3012%" y="319.50">s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (1 samples, 0.04%)</title><rect x="88.8083%" y="293" width="0.0382%" height="15" fill="rgb(212,99,53)" fg:x="2325" fg:w="1"/><text x="89.0583%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.04%)</title><rect x="88.8083%" y="277" width="0.0382%" height="15" fill="rgb(249,111,54)" fg:x="2325" fg:w="1"/><text x="89.0583%" y="287.50"></text></g><g><title>__rdl_dealloc (9 samples, 0.34%)</title><rect x="89.0756%" y="309" width="0.3438%" height="15" fill="rgb(249,55,30)" fg:x="2332" fg:w="9"/><text x="89.3256%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (9 samples, 0.34%)</title><rect x="89.0756%" y="293" width="0.3438%" height="15" fill="rgb(237,47,42)" fg:x="2332" fg:w="9"/><text x="89.3256%" y="303.50"></text></g><g><title>__rust_dealloc (10 samples, 0.38%)</title><rect x="89.4194%" y="309" width="0.3820%" height="15" fill="rgb(211,20,18)" fg:x="2341" fg:w="10"/><text x="89.6694%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (163 samples, 6.23%)</title><rect x="88.8464%" y="325" width="6.2261%" height="15" fill="rgb(231,203,46)" fg:x="2326" fg:w="163"/><text x="89.0964%" y="335.50">alloc::a..</text></g><g><title>cfree (138 samples, 5.27%)</title><rect x="89.8014%" y="309" width="5.2712%" height="15" fill="rgb(237,142,3)" fg:x="2351" fg:w="138"/><text x="90.0514%" y="319.50">cfree</text></g><g><title>[libc.so.6] (91 samples, 3.48%)</title><rect x="91.5966%" y="293" width="3.4759%" height="15" fill="rgb(241,107,1)" fg:x="2398" fg:w="91"/><text x="91.8466%" y="303.50">[li..</text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="95.1872%" y="261" width="0.0382%" height="15" fill="rgb(229,83,13)" fg:x="2492" fg:w="1"/><text x="95.4372%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="95.1872%" y="245" width="0.0382%" height="15" fill="rgb(241,91,40)" fg:x="2492" fg:w="1"/><text x="95.4372%" y="255.50"></text></g><g><title>cfree (49 samples, 1.87%)</title><rect x="95.2254%" y="261" width="1.8717%" height="15" fill="rgb(225,3,45)" fg:x="2493" fg:w="49"/><text x="95.4754%" y="271.50">c..</text></g><g><title>[libc.so.6] (21 samples, 0.80%)</title><rect x="96.2949%" y="245" width="0.8021%" height="15" fill="rgb(244,223,14)" fg:x="2521" fg:w="21"/><text x="96.5449%" y="255.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::dealloc (234 samples, 8.94%)</title><rect x="88.8464%" y="341" width="8.9381%" height="15" fill="rgb(224,124,37)" fg:x="2326" fg:w="234"/><text x="89.0964%" y="351.50">simple_lisp::..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (71 samples, 2.71%)</title><rect x="95.0726%" y="325" width="2.7120%" height="15" fill="rgb(251,171,30)" fg:x="2489" fg:w="71"/><text x="95.3226%" y="335.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::DataBox&gt; (71 samples, 2.71%)</title><rect x="95.0726%" y="309" width="2.7120%" height="15" fill="rgb(236,46,54)" fg:x="2489" fg:w="71"/><text x="95.3226%" y="319.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;simple_lisp::interpreter::data::Data&gt;&gt; (71 samples, 2.71%)</title><rect x="95.0726%" y="293" width="2.7120%" height="15" fill="rgb(245,213,5)" fg:x="2489" fg:w="71"/><text x="95.3226%" y="303.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;simple_lisp::interpreter::data::Data&gt;&gt; (71 samples, 2.71%)</title><rect x="95.0726%" y="277" width="2.7120%" height="15" fill="rgb(230,144,27)" fg:x="2489" fg:w="71"/><text x="95.3226%" y="287.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::Data&gt; (18 samples, 0.69%)</title><rect x="97.0970%" y="261" width="0.6875%" height="15" fill="rgb(220,86,6)" fg:x="2542" fg:w="18"/><text x="97.3470%" y="271.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_generation (10 samples, 0.38%)</title><rect x="97.7846%" y="341" width="0.3820%" height="15" fill="rgb(240,20,13)" fg:x="2560" fg:w="10"/><text x="98.0346%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (10 samples, 0.38%)</title><rect x="97.7846%" y="325" width="0.3820%" height="15" fill="rgb(217,89,34)" fg:x="2560" fg:w="10"/><text x="98.0346%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (359 samples, 13.71%)</title><rect x="84.6448%" y="437" width="13.7128%" height="15" fill="rgb(229,13,5)" fg:x="2216" fg:w="359"/><text x="84.8948%" y="447.50">alloc::vec::Vec&lt;T,A&gt;:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (359 samples, 13.71%)</title><rect x="84.6448%" y="421" width="13.7128%" height="15" fill="rgb(244,67,35)" fg:x="2216" fg:w="359"/><text x="84.8948%" y="431.50">alloc::vec::Vec&lt;T,A&gt;:..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::retain_in_order::_{{closure}} (355 samples, 13.56%)</title><rect x="84.7976%" y="405" width="13.5600%" height="15" fill="rgb(221,40,2)" fg:x="2220" fg:w="355"/><text x="85.0476%" y="415.50">indexmap::map::core:..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::retain::_{{closure}} (355 samples, 13.56%)</title><rect x="84.7976%" y="389" width="13.5600%" height="15" fill="rgb(237,157,21)" fg:x="2220" fg:w="355"/><text x="85.0476%" y="399.50">indexmap::map::Index..</text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::retain::_{{closure}} (355 samples, 13.56%)</title><rect x="84.7976%" y="373" width="13.5600%" height="15" fill="rgb(222,94,11)" fg:x="2220" fg:w="355"/><text x="85.0476%" y="383.50">indexmap::set::Index..</text></g><g><title>simple_lisp::interpreter::data::DataStore::collect::_{{closure}} (355 samples, 13.56%)</title><rect x="84.7976%" y="357" width="13.5600%" height="15" fill="rgb(249,113,6)" fg:x="2220" fg:w="355"/><text x="85.0476%" y="367.50">simple_lisp::interpr..</text></g><g><title>simple_lisp::interpreter::data::DataRef::is_external (5 samples, 0.19%)</title><rect x="98.1665%" y="341" width="0.1910%" height="15" fill="rgb(238,137,36)" fg:x="2570" fg:w="5"/><text x="98.4165%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (4 samples, 0.15%)</title><rect x="98.2047%" y="325" width="0.1528%" height="15" fill="rgb(210,102,26)" fg:x="2571" fg:w="4"/><text x="98.4547%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (4 samples, 0.15%)</title><rect x="98.2047%" y="309" width="0.1528%" height="15" fill="rgb(218,30,30)" fg:x="2571" fg:w="4"/><text x="98.4547%" y="319.50"></text></g><g><title>core::cell::BorrowRef::new (4 samples, 0.15%)</title><rect x="98.2047%" y="293" width="0.1528%" height="15" fill="rgb(214,67,26)" fg:x="2571" fg:w="4"/><text x="98.4547%" y="303.50"></text></g><g><title>core::cell::is_reading (3 samples, 0.11%)</title><rect x="98.2429%" y="277" width="0.1146%" height="15" fill="rgb(251,9,53)" fg:x="2572" fg:w="3"/><text x="98.4929%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::clear (3 samples, 0.11%)</title><rect x="98.3575%" y="421" width="0.1146%" height="15" fill="rgb(228,204,25)" fg:x="2575" fg:w="3"/><text x="98.6075%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;&amp;mut hashbrown::raw::inner::RawTable&lt;usize&gt;,hashbrown::raw::inner::RawTable&lt;usize&gt;::clear::{{closure}}&gt;&gt; (3 samples, 0.11%)</title><rect x="98.3575%" y="405" width="0.1146%" height="15" fill="rgb(207,153,8)" fg:x="2575" fg:w="3"/><text x="98.6075%" y="415.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="98.3575%" y="389" width="0.1146%" height="15" fill="rgb(242,9,16)" fg:x="2575" fg:w="3"/><text x="98.6075%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::clear::_{{closure}} (3 samples, 0.11%)</title><rect x="98.3575%" y="373" width="0.1146%" height="15" fill="rgb(217,211,10)" fg:x="2575" fg:w="3"/><text x="98.6075%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::clear_no_drop (3 samples, 0.11%)</title><rect x="98.3575%" y="357" width="0.1146%" height="15" fill="rgb(219,228,52)" fg:x="2575" fg:w="3"/><text x="98.6075%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::clear_no_drop (3 samples, 0.11%)</title><rect x="98.3575%" y="341" width="0.1146%" height="15" fill="rgb(231,92,29)" fg:x="2575" fg:w="3"/><text x="98.6075%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (3 samples, 0.11%)</title><rect x="98.3575%" y="325" width="0.1146%" height="15" fill="rgb(232,8,23)" fg:x="2575" fg:w="3"/><text x="98.6075%" y="335.50"></text></g><g><title>core::intrinsics::write_bytes (3 samples, 0.11%)</title><rect x="98.3575%" y="309" width="0.1146%" height="15" fill="rgb(216,211,34)" fg:x="2575" fg:w="3"/><text x="98.6075%" y="319.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="98.3575%" y="293" width="0.1146%" height="15" fill="rgb(236,151,0)" fg:x="2575" fg:w="3"/><text x="98.6075%" y="303.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (1 samples, 0.04%)</title><rect x="98.4721%" y="389" width="0.0382%" height="15" fill="rgb(209,168,3)" fg:x="2578" fg:w="1"/><text x="98.7221%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.04%)</title><rect x="98.4721%" y="373" width="0.0382%" height="15" fill="rgb(208,129,28)" fg:x="2578" fg:w="1"/><text x="98.7221%" y="383.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="98.4721%" y="357" width="0.0382%" height="15" fill="rgb(229,78,22)" fg:x="2578" fg:w="1"/><text x="98.7221%" y="367.50"></text></g><g><title>simple_lisp::interpreter::builtins::core::gc_collect (393 samples, 15.01%)</title><rect x="83.5371%" y="533" width="15.0115%" height="15" fill="rgb(228,187,13)" fg:x="2187" fg:w="393"/><text x="83.7871%" y="543.50">simple_lisp::interprete..</text></g><g><title>simple_lisp::interpreter::Interpreter::gc_collect (393 samples, 15.01%)</title><rect x="83.5371%" y="517" width="15.0115%" height="15" fill="rgb(240,119,24)" fg:x="2187" fg:w="393"/><text x="83.7871%" y="527.50">simple_lisp::interprete..</text></g><g><title>simple_lisp::interpreter::data::DataStore::collect (393 samples, 15.01%)</title><rect x="83.5371%" y="501" width="15.0115%" height="15" fill="rgb(209,194,42)" fg:x="2187" fg:w="393"/><text x="83.7871%" y="511.50">simple_lisp::interprete..</text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::retain (364 samples, 13.90%)</title><rect x="84.6448%" y="485" width="13.9037%" height="15" fill="rgb(247,200,46)" fg:x="2216" fg:w="364"/><text x="84.8948%" y="495.50">indexmap::set::IndexS..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::retain (364 samples, 13.90%)</title><rect x="84.6448%" y="469" width="13.9037%" height="15" fill="rgb(218,76,16)" fg:x="2216" fg:w="364"/><text x="84.8948%" y="479.50">indexmap::map::IndexM..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::retain_in_order (364 samples, 13.90%)</title><rect x="84.6448%" y="453" width="13.9037%" height="15" fill="rgb(225,21,48)" fg:x="2216" fg:w="364"/><text x="84.8948%" y="463.50">indexmap::map::core::..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::rebuild_hash_table (5 samples, 0.19%)</title><rect x="98.3575%" y="437" width="0.1910%" height="15" fill="rgb(239,223,50)" fg:x="2575" fg:w="5"/><text x="98.6075%" y="447.50"></text></g><g><title>indexmap::map::core::raw::insert_bulk_no_grow (2 samples, 0.08%)</title><rect x="98.4721%" y="421" width="0.0764%" height="15" fill="rgb(244,45,21)" fg:x="2578" fg:w="2"/><text x="98.7221%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_no_grow (2 samples, 0.08%)</title><rect x="98.4721%" y="405" width="0.0764%" height="15" fill="rgb(232,33,43)" fg:x="2578" fg:w="2"/><text x="98.7221%" y="415.50"></text></g><g><title>hashbrown::raw::inner::special_is_empty (1 samples, 0.04%)</title><rect x="98.5103%" y="389" width="0.0382%" height="15" fill="rgb(209,8,3)" fg:x="2579" fg:w="1"/><text x="98.7603%" y="399.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.04%)</title><rect x="98.5867%" y="469" width="0.0382%" height="15" fill="rgb(214,25,53)" fg:x="2581" fg:w="1"/><text x="98.8367%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (7 samples, 0.27%)</title><rect x="98.6249%" y="469" width="0.2674%" height="15" fill="rgb(254,186,54)" fg:x="2582" fg:w="7"/><text x="98.8749%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (7 samples, 0.27%)</title><rect x="98.6249%" y="453" width="0.2674%" height="15" fill="rgb(208,174,49)" fg:x="2582" fg:w="7"/><text x="98.8749%" y="463.50"></text></g><g><title>core::mem::replace (7 samples, 0.27%)</title><rect x="98.6249%" y="437" width="0.2674%" height="15" fill="rgb(233,191,51)" fg:x="2582" fg:w="7"/><text x="98.8749%" y="447.50"></text></g><g><title>core::ptr::write (7 samples, 0.27%)</title><rect x="98.6249%" y="421" width="0.2674%" height="15" fill="rgb(222,134,10)" fg:x="2582" fg:w="7"/><text x="98.8749%" y="431.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (21 samples, 0.80%)</title><rect x="98.5485%" y="533" width="0.8021%" height="15" fill="rgb(230,226,20)" fg:x="2580" fg:w="21"/><text x="98.7985%" y="543.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (21 samples, 0.80%)</title><rect x="98.5485%" y="517" width="0.8021%" height="15" fill="rgb(251,111,25)" fg:x="2580" fg:w="21"/><text x="98.7985%" y="527.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (21 samples, 0.80%)</title><rect x="98.5485%" y="501" width="0.8021%" height="15" fill="rgb(224,40,46)" fg:x="2580" fg:w="21"/><text x="98.7985%" y="511.50"></text></g><g><title>core::cell::BorrowRef::new (21 samples, 0.80%)</title><rect x="98.5485%" y="485" width="0.8021%" height="15" fill="rgb(236,108,47)" fg:x="2580" fg:w="21"/><text x="98.7985%" y="495.50"></text></g><g><title>core::cell::is_reading (12 samples, 0.46%)</title><rect x="98.8923%" y="469" width="0.4584%" height="15" fill="rgb(234,93,0)" fg:x="2589" fg:w="12"/><text x="99.1423%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="99.5798%" y="437" width="0.0382%" height="15" fill="rgb(224,213,32)" fg:x="2607" fg:w="1"/><text x="99.8298%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (3 samples, 0.11%)</title><rect x="99.6180%" y="437" width="0.1146%" height="15" fill="rgb(251,11,48)" fg:x="2608" fg:w="3"/><text x="99.8680%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 0.11%)</title><rect x="99.6180%" y="421" width="0.1146%" height="15" fill="rgb(236,173,5)" fg:x="2608" fg:w="3"/><text x="99.8680%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (3 samples, 0.11%)</title><rect x="99.6180%" y="405" width="0.1146%" height="15" fill="rgb(230,95,12)" fg:x="2608" fg:w="3"/><text x="99.8680%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.11%)</title><rect x="99.6180%" y="389" width="0.1146%" height="15" fill="rgb(232,209,1)" fg:x="2608" fg:w="3"/><text x="99.8680%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.11%)</title><rect x="99.6180%" y="373" width="0.1146%" height="15" fill="rgb(232,6,1)" fg:x="2608" fg:w="3"/><text x="99.8680%" y="383.50"></text></g><g><title>all (2,618 samples, 100%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(210,224,50)" fg:x="0" fg:w="2618"/><text x="0.2500%" y="879.50"></text></g><g><title>simple_lisp (2,618 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(228,127,35)" fg:x="0" fg:w="2618"/><text x="0.2500%" y="863.50">simple_lisp</text></g><g><title>_start (2,609 samples, 99.66%)</title><rect x="0.3438%" y="837" width="99.6562%" height="15" fill="rgb(245,102,45)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="847.50">_start</text></g><g><title>__libc_start_main (2,609 samples, 99.66%)</title><rect x="0.3438%" y="821" width="99.6562%" height="15" fill="rgb(214,1,49)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="831.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,609 samples, 99.66%)</title><rect x="0.3438%" y="805" width="99.6562%" height="15" fill="rgb(226,163,40)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="815.50">[libc.so.6]</text></g><g><title>main (2,609 samples, 99.66%)</title><rect x="0.3438%" y="789" width="99.6562%" height="15" fill="rgb(239,212,28)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="799.50">main</text></g><g><title>std::rt::lang_start_internal (2,609 samples, 99.66%)</title><rect x="0.3438%" y="773" width="99.6562%" height="15" fill="rgb(220,20,13)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="783.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,609 samples, 99.66%)</title><rect x="0.3438%" y="757" width="99.6562%" height="15" fill="rgb(210,164,35)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,609 samples, 99.66%)</title><rect x="0.3438%" y="741" width="99.6562%" height="15" fill="rgb(248,109,41)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,609 samples, 99.66%)</title><rect x="0.3438%" y="725" width="99.6562%" height="15" fill="rgb(238,23,50)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="735.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (2,609 samples, 99.66%)</title><rect x="0.3438%" y="709" width="99.6562%" height="15" fill="rgb(211,48,49)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="719.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (2,609 samples, 99.66%)</title><rect x="0.3438%" y="693" width="99.6562%" height="15" fill="rgb(223,36,21)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,609 samples, 99.66%)</title><rect x="0.3438%" y="677" width="99.6562%" height="15" fill="rgb(207,123,46)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,609 samples, 99.66%)</title><rect x="0.3438%" y="661" width="99.6562%" height="15" fill="rgb(240,218,32)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="671.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,609 samples, 99.66%)</title><rect x="0.3438%" y="645" width="99.6562%" height="15" fill="rgb(252,5,43)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="655.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (2,609 samples, 99.66%)</title><rect x="0.3438%" y="629" width="99.6562%" height="15" fill="rgb(252,84,19)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="639.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,609 samples, 99.66%)</title><rect x="0.3438%" y="613" width="99.6562%" height="15" fill="rgb(243,152,39)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="623.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,609 samples, 99.66%)</title><rect x="0.3438%" y="597" width="99.6562%" height="15" fill="rgb(234,160,15)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="607.50">core::ops::function::FnOnce::call_once</text></g><g><title>simple_lisp::main (2,609 samples, 99.66%)</title><rect x="0.3438%" y="581" width="99.6562%" height="15" fill="rgb(237,34,20)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="591.50">simple_lisp::main</text></g><g><title>simple_lisp::run (2,609 samples, 99.66%)</title><rect x="0.3438%" y="565" width="99.6562%" height="15" fill="rgb(229,97,13)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="575.50">simple_lisp::run</text></g><g><title>simple_lisp::interpreter::Interpreter::run (2,609 samples, 99.66%)</title><rect x="0.3438%" y="549" width="99.6562%" height="15" fill="rgb(234,71,50)" fg:x="9" fg:w="2609"/><text x="0.5938%" y="559.50">simple_lisp::interpreter::Interpreter::run</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (17 samples, 0.65%)</title><rect x="99.3506%" y="533" width="0.6494%" height="15" fill="rgb(253,155,4)" fg:x="2601" fg:w="17"/><text x="99.6006%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (17 samples, 0.65%)</title><rect x="99.3506%" y="517" width="0.6494%" height="15" fill="rgb(222,185,37)" fg:x="2601" fg:w="17"/><text x="99.6006%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (17 samples, 0.65%)</title><rect x="99.3506%" y="501" width="0.6494%" height="15" fill="rgb(251,177,13)" fg:x="2601" fg:w="17"/><text x="99.6006%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (16 samples, 0.61%)</title><rect x="99.3888%" y="485" width="0.6112%" height="15" fill="rgb(250,179,40)" fg:x="2602" fg:w="16"/><text x="99.6388%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (16 samples, 0.61%)</title><rect x="99.3888%" y="469" width="0.6112%" height="15" fill="rgb(242,44,2)" fg:x="2602" fg:w="16"/><text x="99.6388%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (16 samples, 0.61%)</title><rect x="99.3888%" y="453" width="0.6112%" height="15" fill="rgb(216,177,13)" fg:x="2602" fg:w="16"/><text x="99.6388%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 0.27%)</title><rect x="99.7326%" y="437" width="0.2674%" height="15" fill="rgb(216,106,43)" fg:x="2611" fg:w="7"/><text x="99.9826%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.27%)</title><rect x="99.7326%" y="421" width="0.2674%" height="15" fill="rgb(216,183,2)" fg:x="2611" fg:w="7"/><text x="99.9826%" y="431.50"></text></g></svg></svg>