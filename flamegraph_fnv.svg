<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="902" onload="init(evt)" viewBox="0 0 1200 902" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="902" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="885.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="885.00"> </text><svg id="frames" x="10" width="1180" total_samples="4333"><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.05%)</title><rect x="0.0692%" y="789" width="0.0462%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="2"/><text x="0.3192%" y="799.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.05%)</title><rect x="0.0692%" y="773" width="0.0462%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="2"/><text x="0.3192%" y="783.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.02%)</title><rect x="0.0923%" y="757" width="0.0231%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.3423%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0923%" y="741" width="0.0231%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.3423%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0923%" y="725" width="0.0231%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1"/><text x="0.3423%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.0923%" y="709" width="0.0231%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="1"/><text x="0.3423%" y="719.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.12%)</title><rect x="0.0231%" y="805" width="0.1154%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="5"/><text x="0.2731%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.1154%" y="789" width="0.0231%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="1"/><text x="0.3654%" y="799.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.18%)</title><rect x="0.0000%" y="821" width="0.1846%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="8"/><text x="0.2500%" y="831.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="0.1385%" y="805" width="0.0462%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="2"/><text x="0.3885%" y="815.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="0.1846%" y="805" width="0.0231%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="1"/><text x="0.4346%" y="815.50"></text></g><g><title>[libc.so.6] (3 samples, 0.07%)</title><rect x="0.1846%" y="821" width="0.0692%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="3"/><text x="0.4346%" y="831.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="0.2077%" y="805" width="0.0462%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="2"/><text x="0.4577%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.2308%" y="789" width="0.0231%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="1"/><text x="0.4808%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="0.2308%" y="773" width="0.0231%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="1"/><text x="0.4808%" y="783.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="5.5850%" y="341" width="0.0231%" height="15" fill="rgb(231,73,38)" fg:x="242" fg:w="1"/><text x="5.8350%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (77 samples, 1.78%)</title><rect x="5.5850%" y="437" width="1.7771%" height="15" fill="rgb(225,20,46)" fg:x="242" fg:w="77"/><text x="5.8350%" y="447.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (77 samples, 1.78%)</title><rect x="5.5850%" y="421" width="1.7771%" height="15" fill="rgb(210,31,41)" fg:x="242" fg:w="77"/><text x="5.8350%" y="431.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (77 samples, 1.78%)</title><rect x="5.5850%" y="405" width="1.7771%" height="15" fill="rgb(221,200,47)" fg:x="242" fg:w="77"/><text x="5.8350%" y="415.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (77 samples, 1.78%)</title><rect x="5.5850%" y="389" width="1.7771%" height="15" fill="rgb(226,26,5)" fg:x="242" fg:w="77"/><text x="5.8350%" y="399.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (77 samples, 1.78%)</title><rect x="5.5850%" y="373" width="1.7771%" height="15" fill="rgb(249,33,26)" fg:x="242" fg:w="77"/><text x="5.8350%" y="383.50">a..</text></g><g><title>alloc::alloc::alloc (77 samples, 1.78%)</title><rect x="5.5850%" y="357" width="1.7771%" height="15" fill="rgb(235,183,28)" fg:x="242" fg:w="77"/><text x="5.8350%" y="367.50">a..</text></g><g><title>malloc (76 samples, 1.75%)</title><rect x="5.6081%" y="341" width="1.7540%" height="15" fill="rgb(221,5,38)" fg:x="243" fg:w="76"/><text x="5.8581%" y="351.50"></text></g><g><title>[libc.so.6] (73 samples, 1.68%)</title><rect x="5.6774%" y="325" width="1.6847%" height="15" fill="rgb(247,18,42)" fg:x="246" fg:w="73"/><text x="5.9274%" y="335.50"></text></g><g><title>[libc.so.6] (39 samples, 0.90%)</title><rect x="6.4620%" y="309" width="0.9001%" height="15" fill="rgb(241,131,45)" fg:x="280" fg:w="39"/><text x="6.7120%" y="319.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="7.3159%" y="293" width="0.0462%" height="15" fill="rgb(249,31,29)" fg:x="317" fg:w="2"/><text x="7.5659%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (84 samples, 1.94%)</title><rect x="5.5389%" y="517" width="1.9386%" height="15" fill="rgb(225,111,53)" fg:x="240" fg:w="84"/><text x="5.7889%" y="527.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (82 samples, 1.89%)</title><rect x="5.5850%" y="501" width="1.8925%" height="15" fill="rgb(238,160,17)" fg:x="242" fg:w="82"/><text x="5.8350%" y="511.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (82 samples, 1.89%)</title><rect x="5.5850%" y="485" width="1.8925%" height="15" fill="rgb(214,148,48)" fg:x="242" fg:w="82"/><text x="5.8350%" y="495.50">a..</text></g><g><title>alloc::slice::hack::to_vec (82 samples, 1.89%)</title><rect x="5.5850%" y="469" width="1.8925%" height="15" fill="rgb(232,36,49)" fg:x="242" fg:w="82"/><text x="5.8350%" y="479.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (82 samples, 1.89%)</title><rect x="5.5850%" y="453" width="1.8925%" height="15" fill="rgb(209,103,24)" fg:x="242" fg:w="82"/><text x="5.8350%" y="463.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 0.12%)</title><rect x="7.3621%" y="437" width="0.1154%" height="15" fill="rgb(229,88,8)" fg:x="319" fg:w="5"/><text x="7.6121%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.12%)</title><rect x="7.3621%" y="421" width="0.1154%" height="15" fill="rgb(213,181,19)" fg:x="319" fg:w="5"/><text x="7.6121%" y="431.50"></text></g><g><title>[libc.so.6] (5 samples, 0.12%)</title><rect x="7.3621%" y="405" width="0.1154%" height="15" fill="rgb(254,191,54)" fg:x="319" fg:w="5"/><text x="7.6121%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.12%)</title><rect x="7.5237%" y="501" width="0.1154%" height="15" fill="rgb(241,83,37)" fg:x="326" fg:w="5"/><text x="7.7737%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.12%)</title><rect x="7.5237%" y="485" width="0.1154%" height="15" fill="rgb(233,36,39)" fg:x="326" fg:w="5"/><text x="7.7737%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.12%)</title><rect x="7.5237%" y="469" width="0.1154%" height="15" fill="rgb(226,3,54)" fg:x="326" fg:w="5"/><text x="7.7737%" y="479.50"></text></g><g><title>&lt;indexmap::set::IndexSet&lt;T,S&gt; as indexmap::Entries&gt;::as_entries (1 samples, 0.02%)</title><rect x="7.6390%" y="485" width="0.0231%" height="15" fill="rgb(245,192,40)" fg:x="331" fg:w="1"/><text x="7.8890%" y="495.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as indexmap::Entries&gt;::as_entries (1 samples, 0.02%)</title><rect x="7.6390%" y="469" width="0.0231%" height="15" fill="rgb(238,167,29)" fg:x="331" fg:w="1"/><text x="7.8890%" y="479.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as indexmap::Entries&gt;::as_entries (1 samples, 0.02%)</title><rect x="7.6390%" y="453" width="0.0231%" height="15" fill="rgb(232,182,51)" fg:x="331" fg:w="1"/><text x="7.8890%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="7.6390%" y="437" width="0.0231%" height="15" fill="rgb(231,60,39)" fg:x="331" fg:w="1"/><text x="7.8890%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (14 samples, 0.32%)</title><rect x="7.6621%" y="485" width="0.3231%" height="15" fill="rgb(208,69,12)" fg:x="332" fg:w="14"/><text x="7.9121%" y="495.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::InstructionIter as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.62%)</title><rect x="7.4775%" y="517" width="0.6231%" height="15" fill="rgb(235,93,37)" fg:x="324" fg:w="27"/><text x="7.7275%" y="527.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::get_index (20 samples, 0.46%)</title><rect x="7.6390%" y="501" width="0.4616%" height="15" fill="rgb(213,116,39)" fg:x="331" fg:w="20"/><text x="7.8890%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (5 samples, 0.12%)</title><rect x="7.9852%" y="485" width="0.1154%" height="15" fill="rgb(222,207,29)" fg:x="346" fg:w="5"/><text x="8.2352%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (5 samples, 0.12%)</title><rect x="7.9852%" y="469" width="0.1154%" height="15" fill="rgb(206,96,30)" fg:x="346" fg:w="5"/><text x="8.2352%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="8.1006%" y="517" width="0.0231%" height="15" fill="rgb(218,138,4)" fg:x="351" fg:w="1"/><text x="8.3506%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="8.1006%" y="501" width="0.0231%" height="15" fill="rgb(250,191,14)" fg:x="351" fg:w="1"/><text x="8.3506%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="8.1006%" y="485" width="0.0231%" height="15" fill="rgb(239,60,40)" fg:x="351" fg:w="1"/><text x="8.3506%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="8.1006%" y="469" width="0.0231%" height="15" fill="rgb(206,27,48)" fg:x="351" fg:w="1"/><text x="8.3506%" y="479.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="8.1006%" y="453" width="0.0231%" height="15" fill="rgb(225,35,8)" fg:x="351" fg:w="1"/><text x="8.3506%" y="463.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="8.1006%" y="437" width="0.0231%" height="15" fill="rgb(250,213,24)" fg:x="351" fg:w="1"/><text x="8.3506%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (93 samples, 2.15%)</title><rect x="8.1237%" y="517" width="2.1463%" height="15" fill="rgb(247,123,22)" fg:x="352" fg:w="93"/><text x="8.3737%" y="527.50">a..</text></g><g><title>core::intrinsics::copy (93 samples, 2.15%)</title><rect x="8.1237%" y="501" width="2.1463%" height="15" fill="rgb(231,138,38)" fg:x="352" fg:w="93"/><text x="8.3737%" y="511.50">c..</text></g><g><title>[libc.so.6] (90 samples, 2.08%)</title><rect x="8.1929%" y="485" width="2.0771%" height="15" fill="rgb(231,145,46)" fg:x="355" fg:w="90"/><text x="8.4429%" y="495.50">[..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.05%)</title><rect x="10.2700%" y="517" width="0.0462%" height="15" fill="rgb(251,118,11)" fg:x="445" fg:w="2"/><text x="10.5200%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.05%)</title><rect x="10.2700%" y="501" width="0.0462%" height="15" fill="rgb(217,147,25)" fg:x="445" fg:w="2"/><text x="10.5200%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.05%)</title><rect x="10.2700%" y="485" width="0.0462%" height="15" fill="rgb(247,81,37)" fg:x="445" fg:w="2"/><text x="10.5200%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.05%)</title><rect x="10.2700%" y="469" width="0.0462%" height="15" fill="rgb(209,12,38)" fg:x="445" fg:w="2"/><text x="10.5200%" y="479.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.05%)</title><rect x="10.2700%" y="453" width="0.0462%" height="15" fill="rgb(227,1,9)" fg:x="445" fg:w="2"/><text x="10.5200%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.05%)</title><rect x="10.2700%" y="437" width="0.0462%" height="15" fill="rgb(248,47,43)" fg:x="445" fg:w="2"/><text x="10.5200%" y="447.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::run::_{{closure}} (2 samples, 0.05%)</title><rect x="10.2700%" y="421" width="0.0462%" height="15" fill="rgb(221,10,30)" fg:x="445" fg:w="2"/><text x="10.5200%" y="431.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_dr_to_scope (2 samples, 0.05%)</title><rect x="10.2700%" y="405" width="0.0462%" height="15" fill="rgb(210,229,1)" fg:x="445" fg:w="2"/><text x="10.5200%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (6 samples, 0.14%)</title><rect x="10.3162%" y="517" width="0.1385%" height="15" fill="rgb(222,148,37)" fg:x="447" fg:w="6"/><text x="10.5662%" y="527.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (1 samples, 0.02%)</title><rect x="10.4547%" y="453" width="0.0231%" height="15" fill="rgb(234,67,33)" fg:x="453" fg:w="1"/><text x="10.7047%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="10.5008%" y="437" width="0.0231%" height="15" fill="rgb(247,98,35)" fg:x="455" fg:w="1"/><text x="10.7508%" y="447.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="10.5008%" y="421" width="0.0231%" height="15" fill="rgb(247,138,52)" fg:x="455" fg:w="1"/><text x="10.7508%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (4 samples, 0.09%)</title><rect x="10.4547%" y="517" width="0.0923%" height="15" fill="rgb(213,79,30)" fg:x="453" fg:w="4"/><text x="10.7047%" y="527.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::run::_{{closure}} (4 samples, 0.09%)</title><rect x="10.4547%" y="501" width="0.0923%" height="15" fill="rgb(246,177,23)" fg:x="453" fg:w="4"/><text x="10.7047%" y="511.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (4 samples, 0.09%)</title><rect x="10.4547%" y="485" width="0.0923%" height="15" fill="rgb(230,62,27)" fg:x="453" fg:w="4"/><text x="10.7047%" y="495.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (4 samples, 0.09%)</title><rect x="10.4547%" y="469" width="0.0923%" height="15" fill="rgb(216,154,8)" fg:x="453" fg:w="4"/><text x="10.7047%" y="479.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (3 samples, 0.07%)</title><rect x="10.4777%" y="453" width="0.0692%" height="15" fill="rgb(244,35,45)" fg:x="454" fg:w="3"/><text x="10.7277%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (1 samples, 0.02%)</title><rect x="10.5239%" y="437" width="0.0231%" height="15" fill="rgb(251,115,12)" fg:x="456" fg:w="1"/><text x="10.7739%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.02%)</title><rect x="10.5239%" y="421" width="0.0231%" height="15" fill="rgb(240,54,50)" fg:x="456" fg:w="1"/><text x="10.7739%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.02%)</title><rect x="10.5239%" y="405" width="0.0231%" height="15" fill="rgb(233,84,52)" fg:x="456" fg:w="1"/><text x="10.7739%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (1 samples, 0.02%)</title><rect x="10.5239%" y="389" width="0.0231%" height="15" fill="rgb(207,117,47)" fg:x="456" fg:w="1"/><text x="10.7739%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.02%)</title><rect x="10.5239%" y="373" width="0.0231%" height="15" fill="rgb(249,43,39)" fg:x="456" fg:w="1"/><text x="10.7739%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.02%)</title><rect x="10.5239%" y="357" width="0.0231%" height="15" fill="rgb(209,38,44)" fg:x="456" fg:w="1"/><text x="10.7739%" y="367.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.02%)</title><rect x="10.5239%" y="341" width="0.0231%" height="15" fill="rgb(236,212,23)" fg:x="456" fg:w="1"/><text x="10.7739%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;simple_lisp::interpreter::data::Data&gt;&gt; (19 samples, 0.44%)</title><rect x="10.5470%" y="517" width="0.4385%" height="15" fill="rgb(242,79,21)" fg:x="457" fg:w="19"/><text x="10.7970%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (19 samples, 0.44%)</title><rect x="10.5470%" y="501" width="0.4385%" height="15" fill="rgb(211,96,35)" fg:x="457" fg:w="19"/><text x="10.7970%" y="511.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (19 samples, 0.44%)</title><rect x="10.5470%" y="485" width="0.4385%" height="15" fill="rgb(253,215,40)" fg:x="457" fg:w="19"/><text x="10.7970%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (19 samples, 0.44%)</title><rect x="10.5470%" y="469" width="0.4385%" height="15" fill="rgb(211,81,21)" fg:x="457" fg:w="19"/><text x="10.7970%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (19 samples, 0.44%)</title><rect x="10.5470%" y="453" width="0.4385%" height="15" fill="rgb(208,190,38)" fg:x="457" fg:w="19"/><text x="10.7970%" y="463.50"></text></g><g><title>core::mem::replace (19 samples, 0.44%)</title><rect x="10.5470%" y="437" width="0.4385%" height="15" fill="rgb(235,213,38)" fg:x="457" fg:w="19"/><text x="10.7970%" y="447.50"></text></g><g><title>core::ptr::write (19 samples, 0.44%)</title><rect x="10.5470%" y="421" width="0.4385%" height="15" fill="rgb(237,122,38)" fg:x="457" fg:w="19"/><text x="10.7970%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.14%)</title><rect x="10.9855%" y="485" width="0.1385%" height="15" fill="rgb(244,218,35)" fg:x="476" fg:w="6"/><text x="11.2355%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[simple_lisp::interpreter::ScopeItem]&gt; (6 samples, 0.14%)</title><rect x="10.9855%" y="469" width="0.1385%" height="15" fill="rgb(240,68,47)" fg:x="476" fg:w="6"/><text x="11.2355%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::ScopeItem&gt; (5 samples, 0.12%)</title><rect x="11.0085%" y="453" width="0.1154%" height="15" fill="rgb(210,16,53)" fg:x="477" fg:w="5"/><text x="11.2585%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (5 samples, 0.12%)</title><rect x="11.0085%" y="437" width="0.1154%" height="15" fill="rgb(235,124,12)" fg:x="477" fg:w="5"/><text x="11.2585%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (5 samples, 0.12%)</title><rect x="11.0085%" y="421" width="0.1154%" height="15" fill="rgb(224,169,11)" fg:x="477" fg:w="5"/><text x="11.2585%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.12%)</title><rect x="11.0085%" y="405" width="0.1154%" height="15" fill="rgb(250,166,2)" fg:x="477" fg:w="5"/><text x="11.2585%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.12%)</title><rect x="11.0085%" y="389" width="0.1154%" height="15" fill="rgb(242,216,29)" fg:x="477" fg:w="5"/><text x="11.2585%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.12%)</title><rect x="11.0085%" y="373" width="0.1154%" height="15" fill="rgb(230,116,27)" fg:x="477" fg:w="5"/><text x="11.2585%" y="383.50"></text></g><g><title>cfree (5 samples, 0.12%)</title><rect x="11.0085%" y="357" width="0.1154%" height="15" fill="rgb(228,99,48)" fg:x="477" fg:w="5"/><text x="11.2585%" y="367.50"></text></g><g><title>[libc.so.6] (4 samples, 0.09%)</title><rect x="11.0316%" y="341" width="0.0923%" height="15" fill="rgb(253,11,6)" fg:x="478" fg:w="4"/><text x="11.2816%" y="351.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="11.1701%" y="421" width="0.0231%" height="15" fill="rgb(247,143,39)" fg:x="484" fg:w="1"/><text x="11.4201%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;misc_utils::stack::Stack&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (156 samples, 3.60%)</title><rect x="10.9855%" y="517" width="3.6003%" height="15" fill="rgb(236,97,10)" fg:x="476" fg:w="156"/><text x="11.2355%" y="527.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (156 samples, 3.60%)</title><rect x="10.9855%" y="501" width="3.6003%" height="15" fill="rgb(233,208,19)" fg:x="476" fg:w="156"/><text x="11.2355%" y="511.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (150 samples, 3.46%)</title><rect x="11.1239%" y="485" width="3.4618%" height="15" fill="rgb(216,164,2)" fg:x="482" fg:w="150"/><text x="11.3739%" y="495.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (150 samples, 3.46%)</title><rect x="11.1239%" y="469" width="3.4618%" height="15" fill="rgb(220,129,5)" fg:x="482" fg:w="150"/><text x="11.3739%" y="479.50">&lt;al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (149 samples, 3.44%)</title><rect x="11.1470%" y="453" width="3.4387%" height="15" fill="rgb(242,17,10)" fg:x="483" fg:w="149"/><text x="11.3970%" y="463.50">&lt;al..</text></g><g><title>alloc::alloc::dealloc (149 samples, 3.44%)</title><rect x="11.1470%" y="437" width="3.4387%" height="15" fill="rgb(242,107,0)" fg:x="483" fg:w="149"/><text x="11.3970%" y="447.50">all..</text></g><g><title>cfree (147 samples, 3.39%)</title><rect x="11.1932%" y="421" width="3.3926%" height="15" fill="rgb(251,28,31)" fg:x="485" fg:w="147"/><text x="11.4432%" y="431.50">cfr..</text></g><g><title>[libc.so.6] (141 samples, 3.25%)</title><rect x="11.3316%" y="405" width="3.2541%" height="15" fill="rgb(233,223,10)" fg:x="491" fg:w="141"/><text x="11.5816%" y="415.50">[li..</text></g><g><title>[libc.so.6] (134 samples, 3.09%)</title><rect x="11.4932%" y="389" width="3.0925%" height="15" fill="rgb(215,21,27)" fg:x="498" fg:w="134"/><text x="11.7432%" y="399.50">[li..</text></g><g><title>[libc.so.6] (45 samples, 1.04%)</title><rect x="13.5472%" y="373" width="1.0385%" height="15" fill="rgb(232,23,21)" fg:x="587" fg:w="45"/><text x="13.7972%" y="383.50"></text></g><g><title>misc_utils::slotmap::SlotMap&lt;K,T&gt;::get (3 samples, 0.07%)</title><rect x="14.5857%" y="517" width="0.0692%" height="15" fill="rgb(244,5,23)" fg:x="632" fg:w="3"/><text x="14.8357%" y="527.50"></text></g><g><title>misc_utils::slotmap::SlotMap&lt;K,T&gt;::is_key_valid (3 samples, 0.07%)</title><rect x="14.5857%" y="501" width="0.0692%" height="15" fill="rgb(226,81,46)" fg:x="632" fg:w="3"/><text x="14.8357%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="14.6781%" y="389" width="0.0231%" height="15" fill="rgb(247,70,30)" fg:x="636" fg:w="1"/><text x="14.9281%" y="399.50"></text></g><g><title>__rust_alloc (6 samples, 0.14%)</title><rect x="14.7011%" y="389" width="0.1385%" height="15" fill="rgb(212,68,19)" fg:x="637" fg:w="6"/><text x="14.9511%" y="399.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.02%)</title><rect x="14.8396%" y="389" width="0.0231%" height="15" fill="rgb(240,187,13)" fg:x="643" fg:w="1"/><text x="15.0896%" y="399.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::new (20 samples, 0.46%)</title><rect x="14.6550%" y="517" width="0.4616%" height="15" fill="rgb(223,113,26)" fg:x="635" fg:w="20"/><text x="14.9050%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (20 samples, 0.46%)</title><rect x="14.6550%" y="501" width="0.4616%" height="15" fill="rgb(206,192,2)" fg:x="635" fg:w="20"/><text x="14.9050%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (20 samples, 0.46%)</title><rect x="14.6550%" y="485" width="0.4616%" height="15" fill="rgb(241,108,4)" fg:x="635" fg:w="20"/><text x="14.9050%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 0.46%)</title><rect x="14.6550%" y="469" width="0.4616%" height="15" fill="rgb(247,173,49)" fg:x="635" fg:w="20"/><text x="14.9050%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (20 samples, 0.46%)</title><rect x="14.6550%" y="453" width="0.4616%" height="15" fill="rgb(224,114,35)" fg:x="635" fg:w="20"/><text x="14.9050%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.46%)</title><rect x="14.6550%" y="437" width="0.4616%" height="15" fill="rgb(245,159,27)" fg:x="635" fg:w="20"/><text x="14.9050%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.46%)</title><rect x="14.6550%" y="421" width="0.4616%" height="15" fill="rgb(245,172,44)" fg:x="635" fg:w="20"/><text x="14.9050%" y="431.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.46%)</title><rect x="14.6550%" y="405" width="0.4616%" height="15" fill="rgb(236,23,11)" fg:x="635" fg:w="20"/><text x="14.9050%" y="415.50"></text></g><g><title>malloc (11 samples, 0.25%)</title><rect x="14.8627%" y="389" width="0.2539%" height="15" fill="rgb(205,117,38)" fg:x="644" fg:w="11"/><text x="15.1127%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.07%)</title><rect x="15.2089%" y="485" width="0.0692%" height="15" fill="rgb(237,72,25)" fg:x="659" fg:w="3"/><text x="15.4589%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.07%)</title><rect x="15.2089%" y="469" width="0.0692%" height="15" fill="rgb(244,70,9)" fg:x="659" fg:w="3"/><text x="15.4589%" y="479.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::pop (8 samples, 0.18%)</title><rect x="15.1165%" y="517" width="0.1846%" height="15" fill="rgb(217,125,39)" fg:x="655" fg:w="8"/><text x="15.3665%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (8 samples, 0.18%)</title><rect x="15.1165%" y="501" width="0.1846%" height="15" fill="rgb(235,36,10)" fg:x="655" fg:w="8"/><text x="15.3665%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect x="15.2781%" y="485" width="0.0231%" height="15" fill="rgb(251,123,47)" fg:x="662" fg:w="1"/><text x="15.5281%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.09%)</title><rect x="15.6012%" y="453" width="0.0923%" height="15" fill="rgb(221,13,13)" fg:x="676" fg:w="4"/><text x="15.8512%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.02%)</title><rect x="15.6935%" y="453" width="0.0231%" height="15" fill="rgb(238,131,9)" fg:x="680" fg:w="1"/><text x="15.9435%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (1 samples, 0.02%)</title><rect x="15.6935%" y="437" width="0.0231%" height="15" fill="rgb(211,50,8)" fg:x="680" fg:w="1"/><text x="15.9435%" y="447.50"></text></g><g><title>__rdl_realloc (2 samples, 0.05%)</title><rect x="15.8320%" y="389" width="0.0462%" height="15" fill="rgb(245,182,24)" fg:x="686" fg:w="2"/><text x="16.0820%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.02%)</title><rect x="15.8551%" y="373" width="0.0231%" height="15" fill="rgb(242,14,37)" fg:x="687" fg:w="1"/><text x="16.1051%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (91 samples, 2.10%)</title><rect x="15.7858%" y="437" width="2.1002%" height="15" fill="rgb(246,228,12)" fg:x="684" fg:w="91"/><text x="16.0358%" y="447.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (91 samples, 2.10%)</title><rect x="15.7858%" y="421" width="2.1002%" height="15" fill="rgb(213,55,15)" fg:x="684" fg:w="91"/><text x="16.0358%" y="431.50">a..</text></g><g><title>alloc::alloc::realloc (89 samples, 2.05%)</title><rect x="15.8320%" y="405" width="2.0540%" height="15" fill="rgb(209,9,3)" fg:x="686" fg:w="89"/><text x="16.0820%" y="415.50">a..</text></g><g><title>realloc (87 samples, 2.01%)</title><rect x="15.8781%" y="389" width="2.0078%" height="15" fill="rgb(230,59,30)" fg:x="688" fg:w="87"/><text x="16.1281%" y="399.50">r..</text></g><g><title>[libc.so.6] (81 samples, 1.87%)</title><rect x="16.0166%" y="373" width="1.8694%" height="15" fill="rgb(209,121,21)" fg:x="694" fg:w="81"/><text x="16.2666%" y="383.50">[..</text></g><g><title>[libc.so.6] (74 samples, 1.71%)</title><rect x="16.1782%" y="357" width="1.7078%" height="15" fill="rgb(220,109,13)" fg:x="701" fg:w="74"/><text x="16.4282%" y="367.50"></text></g><g><title>[libc.so.6] (4 samples, 0.09%)</title><rect x="17.7937%" y="341" width="0.0923%" height="15" fill="rgb(232,18,1)" fg:x="771" fg:w="4"/><text x="18.0437%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (101 samples, 2.33%)</title><rect x="15.7166%" y="453" width="2.3309%" height="15" fill="rgb(215,41,42)" fg:x="681" fg:w="101"/><text x="15.9666%" y="463.50">a..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (7 samples, 0.16%)</title><rect x="17.8860%" y="437" width="0.1616%" height="15" fill="rgb(224,123,36)" fg:x="775" fg:w="7"/><text x="18.1360%" y="447.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.02%)</title><rect x="18.0475%" y="453" width="0.0231%" height="15" fill="rgb(240,125,3)" fg:x="782" fg:w="1"/><text x="18.2975%" y="463.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.02%)</title><rect x="18.0475%" y="437" width="0.0231%" height="15" fill="rgb(205,98,50)" fg:x="782" fg:w="1"/><text x="18.2975%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (109 samples, 2.52%)</title><rect x="15.5781%" y="485" width="2.5156%" height="15" fill="rgb(205,185,37)" fg:x="675" fg:w="109"/><text x="15.8281%" y="495.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (108 samples, 2.49%)</title><rect x="15.6012%" y="469" width="2.4925%" height="15" fill="rgb(238,207,15)" fg:x="676" fg:w="108"/><text x="15.8512%" y="479.50">al..</text></g><g><title>core::cmp::max (1 samples, 0.02%)</title><rect x="18.0706%" y="453" width="0.0231%" height="15" fill="rgb(213,199,42)" fg:x="783" fg:w="1"/><text x="18.3206%" y="463.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.02%)</title><rect x="18.0706%" y="437" width="0.0231%" height="15" fill="rgb(235,201,11)" fg:x="783" fg:w="1"/><text x="18.3206%" y="447.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.02%)</title><rect x="18.0706%" y="421" width="0.0231%" height="15" fill="rgb(207,46,11)" fg:x="783" fg:w="1"/><text x="18.3206%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.05%)</title><rect x="18.0937%" y="485" width="0.0462%" height="15" fill="rgb(241,35,35)" fg:x="784" fg:w="2"/><text x="18.3437%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.05%)</title><rect x="18.0937%" y="469" width="0.0462%" height="15" fill="rgb(243,32,47)" fg:x="784" fg:w="2"/><text x="18.3437%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.05%)</title><rect x="18.1399%" y="485" width="0.0462%" height="15" fill="rgb(247,202,23)" fg:x="786" fg:w="2"/><text x="18.3899%" y="495.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (150 samples, 3.46%)</title><rect x="15.3012%" y="517" width="3.4618%" height="15" fill="rgb(219,102,11)" fg:x="663" fg:w="150"/><text x="15.5512%" y="527.50">mis..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (150 samples, 3.46%)</title><rect x="15.3012%" y="501" width="3.4618%" height="15" fill="rgb(243,110,44)" fg:x="663" fg:w="150"/><text x="15.5512%" y="511.50">all..</text></g><g><title>core::ptr::write (25 samples, 0.58%)</title><rect x="18.1860%" y="485" width="0.5770%" height="15" fill="rgb(222,74,54)" fg:x="788" fg:w="25"/><text x="18.4360%" y="495.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="18.7630%" y="501" width="0.0231%" height="15" fill="rgb(216,99,12)" fg:x="813" fg:w="1"/><text x="19.0130%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="18.7630%" y="485" width="0.0231%" height="15" fill="rgb(226,22,26)" fg:x="813" fg:w="1"/><text x="19.0130%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.02%)</title><rect x="18.7630%" y="469" width="0.0231%" height="15" fill="rgb(217,163,10)" fg:x="813" fg:w="1"/><text x="19.0130%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="18.7630%" y="453" width="0.0231%" height="15" fill="rgb(213,25,53)" fg:x="813" fg:w="1"/><text x="19.0130%" y="463.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (3 samples, 0.07%)</title><rect x="18.7861%" y="501" width="0.0692%" height="15" fill="rgb(252,105,26)" fg:x="814" fg:w="3"/><text x="19.0361%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.07%)</title><rect x="18.7861%" y="485" width="0.0692%" height="15" fill="rgb(220,39,43)" fg:x="814" fg:w="3"/><text x="19.0361%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="19.0399%" y="421" width="0.0462%" height="15" fill="rgb(229,68,48)" fg:x="825" fg:w="2"/><text x="19.2899%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.09%)</title><rect x="19.0168%" y="485" width="0.0923%" height="15" fill="rgb(252,8,32)" fg:x="824" fg:w="4"/><text x="19.2668%" y="495.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.09%)</title><rect x="19.0168%" y="469" width="0.0923%" height="15" fill="rgb(223,20,43)" fg:x="824" fg:w="4"/><text x="19.2668%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.09%)</title><rect x="19.0168%" y="453" width="0.0923%" height="15" fill="rgb(229,81,49)" fg:x="824" fg:w="4"/><text x="19.2668%" y="463.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (3 samples, 0.07%)</title><rect x="19.0399%" y="437" width="0.0692%" height="15" fill="rgb(236,28,36)" fg:x="825" fg:w="3"/><text x="19.2899%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (1 samples, 0.02%)</title><rect x="19.0861%" y="421" width="0.0231%" height="15" fill="rgb(249,185,26)" fg:x="827" fg:w="1"/><text x="19.3361%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.02%)</title><rect x="19.0861%" y="405" width="0.0231%" height="15" fill="rgb(249,174,33)" fg:x="827" fg:w="1"/><text x="19.3361%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="19.0861%" y="389" width="0.0231%" height="15" fill="rgb(233,201,37)" fg:x="827" fg:w="1"/><text x="19.3361%" y="399.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="19.3399%" y="453" width="0.0231%" height="15" fill="rgb(221,78,26)" fg:x="838" fg:w="1"/><text x="19.5899%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="19.3399%" y="437" width="0.0231%" height="15" fill="rgb(250,127,30)" fg:x="838" fg:w="1"/><text x="19.5899%" y="447.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="19.3399%" y="421" width="0.0231%" height="15" fill="rgb(230,49,44)" fg:x="838" fg:w="1"/><text x="19.5899%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (14 samples, 0.32%)</title><rect x="19.3630%" y="453" width="0.3231%" height="15" fill="rgb(229,67,23)" fg:x="839" fg:w="14"/><text x="19.6130%" y="463.50"></text></g><g><title>core::ops::function::FnMut::call_mut (14 samples, 0.32%)</title><rect x="19.3630%" y="437" width="0.3231%" height="15" fill="rgb(249,83,47)" fg:x="839" fg:w="14"/><text x="19.6130%" y="447.50"></text></g><g><title>core::mem::drop (14 samples, 0.32%)</title><rect x="19.3630%" y="421" width="0.3231%" height="15" fill="rgb(215,43,3)" fg:x="839" fg:w="14"/><text x="19.6130%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::ExternalData&gt; (14 samples, 0.32%)</title><rect x="19.3630%" y="405" width="0.3231%" height="15" fill="rgb(238,154,13)" fg:x="839" fg:w="14"/><text x="19.6130%" y="415.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::ExternalData as core::ops::drop::Drop&gt;::drop (14 samples, 0.32%)</title><rect x="19.3630%" y="389" width="0.3231%" height="15" fill="rgb(219,56,2)" fg:x="839" fg:w="14"/><text x="19.6130%" y="399.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::unset_external (14 samples, 0.32%)</title><rect x="19.3630%" y="373" width="0.3231%" height="15" fill="rgb(233,0,4)" fg:x="839" fg:w="14"/><text x="19.6130%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (11 samples, 0.25%)</title><rect x="19.4323%" y="357" width="0.2539%" height="15" fill="rgb(235,30,7)" fg:x="842" fg:w="11"/><text x="19.6823%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (11 samples, 0.25%)</title><rect x="19.4323%" y="341" width="0.2539%" height="15" fill="rgb(250,79,13)" fg:x="842" fg:w="11"/><text x="19.6823%" y="351.50"></text></g><g><title>core::cell::BorrowRefMut::new (11 samples, 0.25%)</title><rect x="19.4323%" y="325" width="0.2539%" height="15" fill="rgb(211,146,34)" fg:x="842" fg:w="11"/><text x="19.6823%" y="335.50"></text></g><g><title>core::ptr::read (5 samples, 0.12%)</title><rect x="20.0323%" y="389" width="0.1154%" height="15" fill="rgb(228,22,38)" fg:x="868" fg:w="5"/><text x="20.2823%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (47 samples, 1.08%)</title><rect x="19.1092%" y="485" width="1.0847%" height="15" fill="rgb(235,168,5)" fg:x="828" fg:w="47"/><text x="19.3592%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (37 samples, 0.85%)</title><rect x="19.3399%" y="469" width="0.8539%" height="15" fill="rgb(221,155,16)" fg:x="838" fg:w="37"/><text x="19.5899%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (22 samples, 0.51%)</title><rect x="19.6861%" y="453" width="0.5077%" height="15" fill="rgb(215,215,53)" fg:x="853" fg:w="22"/><text x="19.9361%" y="463.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.51%)</title><rect x="19.6861%" y="437" width="0.5077%" height="15" fill="rgb(223,4,10)" fg:x="853" fg:w="22"/><text x="19.9361%" y="447.50"></text></g><g><title>core::mem::take (7 samples, 0.16%)</title><rect x="20.0323%" y="421" width="0.1616%" height="15" fill="rgb(234,103,6)" fg:x="868" fg:w="7"/><text x="20.2823%" y="431.50"></text></g><g><title>core::mem::replace (7 samples, 0.16%)</title><rect x="20.0323%" y="405" width="0.1616%" height="15" fill="rgb(227,97,0)" fg:x="868" fg:w="7"/><text x="20.2823%" y="415.50"></text></g><g><title>core::ptr::write (2 samples, 0.05%)</title><rect x="20.1477%" y="389" width="0.0462%" height="15" fill="rgb(234,150,53)" fg:x="873" fg:w="2"/><text x="20.3977%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (2 samples, 0.05%)</title><rect x="20.1939%" y="453" width="0.0462%" height="15" fill="rgb(228,201,54)" fg:x="875" fg:w="2"/><text x="20.4439%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.05%)</title><rect x="20.1939%" y="437" width="0.0462%" height="15" fill="rgb(222,22,37)" fg:x="875" fg:w="2"/><text x="20.4439%" y="447.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="20.4939%" y="293" width="0.0231%" height="15" fill="rgb(237,53,32)" fg:x="888" fg:w="1"/><text x="20.7439%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (28 samples, 0.65%)</title><rect x="20.4939%" y="325" width="0.6462%" height="15" fill="rgb(233,25,53)" fg:x="888" fg:w="28"/><text x="20.7439%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (28 samples, 0.65%)</title><rect x="20.4939%" y="309" width="0.6462%" height="15" fill="rgb(210,40,34)" fg:x="888" fg:w="28"/><text x="20.7439%" y="319.50"></text></g><g><title>cfree (27 samples, 0.62%)</title><rect x="20.5170%" y="293" width="0.6231%" height="15" fill="rgb(241,220,44)" fg:x="889" fg:w="27"/><text x="20.7670%" y="303.50"></text></g><g><title>[libc.so.6] (16 samples, 0.37%)</title><rect x="20.7708%" y="277" width="0.3693%" height="15" fill="rgb(235,28,35)" fg:x="900" fg:w="16"/><text x="21.0208%" y="287.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::clear (43 samples, 0.99%)</title><rect x="20.1939%" y="485" width="0.9924%" height="15" fill="rgb(210,56,17)" fg:x="875" fg:w="43"/><text x="20.4439%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (43 samples, 0.99%)</title><rect x="20.1939%" y="469" width="0.9924%" height="15" fill="rgb(224,130,29)" fg:x="875" fg:w="43"/><text x="20.4439%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;]&gt; (41 samples, 0.95%)</title><rect x="20.2400%" y="453" width="0.9462%" height="15" fill="rgb(235,212,8)" fg:x="877" fg:w="41"/><text x="20.4900%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (38 samples, 0.88%)</title><rect x="20.3093%" y="437" width="0.8770%" height="15" fill="rgb(223,33,50)" fg:x="880" fg:w="38"/><text x="20.5593%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (38 samples, 0.88%)</title><rect x="20.3093%" y="421" width="0.8770%" height="15" fill="rgb(219,149,13)" fg:x="880" fg:w="38"/><text x="20.5593%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;simple_lisp::interpreter::ast::Ident,(),core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (38 samples, 0.88%)</title><rect x="20.3093%" y="405" width="0.8770%" height="15" fill="rgb(250,156,29)" fg:x="880" fg:w="38"/><text x="20.5593%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(simple_lisp::interpreter::ast::Ident,())&gt;&gt; (38 samples, 0.88%)</title><rect x="20.3093%" y="389" width="0.8770%" height="15" fill="rgb(216,193,19)" fg:x="880" fg:w="38"/><text x="20.5593%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.88%)</title><rect x="20.3093%" y="373" width="0.8770%" height="15" fill="rgb(216,135,14)" fg:x="880" fg:w="38"/><text x="20.5593%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (38 samples, 0.88%)</title><rect x="20.3093%" y="357" width="0.8770%" height="15" fill="rgb(241,47,5)" fg:x="880" fg:w="38"/><text x="20.5593%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (30 samples, 0.69%)</title><rect x="20.4939%" y="341" width="0.6924%" height="15" fill="rgb(233,42,35)" fg:x="888" fg:w="30"/><text x="20.7439%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::allocation_info (2 samples, 0.05%)</title><rect x="21.1401%" y="325" width="0.0462%" height="15" fill="rgb(231,13,6)" fg:x="916" fg:w="2"/><text x="21.3901%" y="335.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (2 samples, 0.05%)</title><rect x="21.1401%" y="309" width="0.0462%" height="15" fill="rgb(207,181,40)" fg:x="916" fg:w="2"/><text x="21.3901%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (2 samples, 0.05%)</title><rect x="21.1862%" y="453" width="0.0462%" height="15" fill="rgb(254,173,49)" fg:x="918" fg:w="2"/><text x="21.4362%" y="463.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::drain (3 samples, 0.07%)</title><rect x="21.1862%" y="485" width="0.0692%" height="15" fill="rgb(221,1,38)" fg:x="918" fg:w="3"/><text x="21.4362%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (3 samples, 0.07%)</title><rect x="21.1862%" y="469" width="0.0692%" height="15" fill="rgb(206,124,46)" fg:x="918" fg:w="3"/><text x="21.4362%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.02%)</title><rect x="21.2324%" y="453" width="0.0231%" height="15" fill="rgb(249,21,11)" fg:x="920" fg:w="1"/><text x="21.4824%" y="463.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="21.2324%" y="437" width="0.0231%" height="15" fill="rgb(222,201,40)" fg:x="920" fg:w="1"/><text x="21.4824%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.02%)</title><rect x="21.2324%" y="421" width="0.0231%" height="15" fill="rgb(235,61,29)" fg:x="920" fg:w="1"/><text x="21.4824%" y="431.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (6 samples, 0.14%)</title><rect x="21.2555%" y="485" width="0.1385%" height="15" fill="rgb(219,207,3)" fg:x="921" fg:w="6"/><text x="21.5055%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (6 samples, 0.14%)</title><rect x="21.2555%" y="469" width="0.1385%" height="15" fill="rgb(222,56,46)" fg:x="921" fg:w="6"/><text x="21.5055%" y="479.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (2 samples, 0.05%)</title><rect x="21.3940%" y="389" width="0.0462%" height="15" fill="rgb(239,76,54)" fg:x="927" fg:w="2"/><text x="21.6440%" y="399.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clear_env (117 samples, 2.70%)</title><rect x="18.7630%" y="517" width="2.7002%" height="15" fill="rgb(231,124,27)" fg:x="813" fg:w="117"/><text x="19.0130%" y="527.50">si..</text></g><g><title>simple_lisp::interpreter::Env::clear (113 samples, 2.61%)</title><rect x="18.8553%" y="501" width="2.6079%" height="15" fill="rgb(249,195,6)" fg:x="817" fg:w="113"/><text x="19.1053%" y="511.50">si..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter_mut (3 samples, 0.07%)</title><rect x="21.3940%" y="485" width="0.0692%" height="15" fill="rgb(237,174,47)" fg:x="927" fg:w="3"/><text x="21.6440%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter_mut (3 samples, 0.07%)</title><rect x="21.3940%" y="469" width="0.0692%" height="15" fill="rgb(206,201,31)" fg:x="927" fg:w="3"/><text x="21.6440%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (3 samples, 0.07%)</title><rect x="21.3940%" y="453" width="0.0692%" height="15" fill="rgb(231,57,52)" fg:x="927" fg:w="3"/><text x="21.6440%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (3 samples, 0.07%)</title><rect x="21.3940%" y="437" width="0.0692%" height="15" fill="rgb(248,177,22)" fg:x="927" fg:w="3"/><text x="21.6440%" y="447.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (3 samples, 0.07%)</title><rect x="21.3940%" y="421" width="0.0692%" height="15" fill="rgb(215,211,37)" fg:x="927" fg:w="3"/><text x="21.6440%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (3 samples, 0.07%)</title><rect x="21.3940%" y="405" width="0.0692%" height="15" fill="rgb(241,128,51)" fg:x="927" fg:w="3"/><text x="21.6440%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.02%)</title><rect x="21.4401%" y="389" width="0.0231%" height="15" fill="rgb(227,165,31)" fg:x="929" fg:w="1"/><text x="21.6901%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="21.4401%" y="373" width="0.0231%" height="15" fill="rgb(228,167,24)" fg:x="929" fg:w="1"/><text x="21.6901%" y="383.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (2 samples, 0.05%)</title><rect x="21.5786%" y="501" width="0.0462%" height="15" fill="rgb(228,143,12)" fg:x="935" fg:w="2"/><text x="21.8286%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.05%)</title><rect x="21.5786%" y="485" width="0.0462%" height="15" fill="rgb(249,149,8)" fg:x="935" fg:w="2"/><text x="21.8286%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.05%)</title><rect x="21.5786%" y="469" width="0.0462%" height="15" fill="rgb(243,35,44)" fg:x="935" fg:w="2"/><text x="21.8286%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.05%)</title><rect x="21.5786%" y="453" width="0.0462%" height="15" fill="rgb(246,89,9)" fg:x="935" fg:w="2"/><text x="21.8286%" y="463.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (1 samples, 0.02%)</title><rect x="21.6940%" y="485" width="0.0231%" height="15" fill="rgb(233,213,13)" fg:x="940" fg:w="1"/><text x="21.9440%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.02%)</title><rect x="21.6940%" y="469" width="0.0231%" height="15" fill="rgb(233,141,41)" fg:x="940" fg:w="1"/><text x="21.9440%" y="479.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (15 samples, 0.35%)</title><rect x="21.7171%" y="485" width="0.3462%" height="15" fill="rgb(239,167,4)" fg:x="941" fg:w="15"/><text x="21.9671%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (15 samples, 0.35%)</title><rect x="21.7171%" y="469" width="0.3462%" height="15" fill="rgb(209,217,16)" fg:x="941" fg:w="15"/><text x="21.9671%" y="479.50"></text></g><g><title>core::ops::function::FnOnce::call_once (83 samples, 1.92%)</title><rect x="22.0632%" y="469" width="1.9155%" height="15" fill="rgb(219,88,35)" fg:x="956" fg:w="83"/><text x="22.3132%" y="479.50">c..</text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::new (83 samples, 1.92%)</title><rect x="22.0632%" y="453" width="1.9155%" height="15" fill="rgb(220,193,23)" fg:x="956" fg:w="83"/><text x="22.3132%" y="463.50">m..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (83 samples, 1.92%)</title><rect x="22.0632%" y="437" width="1.9155%" height="15" fill="rgb(230,90,52)" fg:x="956" fg:w="83"/><text x="22.3132%" y="447.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (83 samples, 1.92%)</title><rect x="22.0632%" y="421" width="1.9155%" height="15" fill="rgb(252,106,19)" fg:x="956" fg:w="83"/><text x="22.3132%" y="431.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (83 samples, 1.92%)</title><rect x="22.0632%" y="405" width="1.9155%" height="15" fill="rgb(206,74,20)" fg:x="956" fg:w="83"/><text x="22.3132%" y="415.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (83 samples, 1.92%)</title><rect x="22.0632%" y="389" width="1.9155%" height="15" fill="rgb(230,138,44)" fg:x="956" fg:w="83"/><text x="22.3132%" y="399.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (83 samples, 1.92%)</title><rect x="22.0632%" y="373" width="1.9155%" height="15" fill="rgb(235,182,43)" fg:x="956" fg:w="83"/><text x="22.3132%" y="383.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (83 samples, 1.92%)</title><rect x="22.0632%" y="357" width="1.9155%" height="15" fill="rgb(242,16,51)" fg:x="956" fg:w="83"/><text x="22.3132%" y="367.50">a..</text></g><g><title>alloc::alloc::alloc (83 samples, 1.92%)</title><rect x="22.0632%" y="341" width="1.9155%" height="15" fill="rgb(248,9,4)" fg:x="956" fg:w="83"/><text x="22.3132%" y="351.50">a..</text></g><g><title>malloc (83 samples, 1.92%)</title><rect x="22.0632%" y="325" width="1.9155%" height="15" fill="rgb(210,31,22)" fg:x="956" fg:w="83"/><text x="22.3132%" y="335.50">m..</text></g><g><title>[libc.so.6] (76 samples, 1.75%)</title><rect x="22.2248%" y="309" width="1.7540%" height="15" fill="rgb(239,54,39)" fg:x="963" fg:w="76"/><text x="22.4748%" y="319.50"></text></g><g><title>[libc.so.6] (44 samples, 1.02%)</title><rect x="22.9633%" y="293" width="1.0155%" height="15" fill="rgb(230,99,41)" fg:x="995" fg:w="44"/><text x="23.2133%" y="303.50"></text></g><g><title>[libc.so.6] (12 samples, 0.28%)</title><rect x="23.7018%" y="277" width="0.2769%" height="15" fill="rgb(253,106,12)" fg:x="1027" fg:w="12"/><text x="23.9518%" y="287.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (1 samples, 0.02%)</title><rect x="23.9788%" y="469" width="0.0231%" height="15" fill="rgb(213,46,41)" fg:x="1039" fg:w="1"/><text x="24.2288%" y="479.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (1 samples, 0.02%)</title><rect x="23.9788%" y="453" width="0.0231%" height="15" fill="rgb(215,133,35)" fg:x="1039" fg:w="1"/><text x="24.2288%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (2 samples, 0.05%)</title><rect x="24.0018%" y="405" width="0.0462%" height="15" fill="rgb(213,28,5)" fg:x="1040" fg:w="2"/><text x="24.2518%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (2 samples, 0.05%)</title><rect x="24.0018%" y="389" width="0.0462%" height="15" fill="rgb(215,77,49)" fg:x="1040" fg:w="2"/><text x="24.2518%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (2 samples, 0.05%)</title><rect x="24.0018%" y="373" width="0.0462%" height="15" fill="rgb(248,100,22)" fg:x="1040" fg:w="2"/><text x="24.2518%" y="383.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.02%)</title><rect x="24.0249%" y="357" width="0.0231%" height="15" fill="rgb(208,67,9)" fg:x="1041" fg:w="1"/><text x="24.2749%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (87 samples, 2.01%)</title><rect x="22.0632%" y="485" width="2.0078%" height="15" fill="rgb(219,133,21)" fg:x="956" fg:w="87"/><text x="22.3132%" y="495.50">s..</text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.07%)</title><rect x="24.0018%" y="469" width="0.0692%" height="15" fill="rgb(246,46,29)" fg:x="1040" fg:w="3"/><text x="24.2518%" y="479.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.07%)</title><rect x="24.0018%" y="453" width="0.0692%" height="15" fill="rgb(246,185,52)" fg:x="1040" fg:w="3"/><text x="24.2518%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (3 samples, 0.07%)</title><rect x="24.0018%" y="437" width="0.0692%" height="15" fill="rgb(252,136,11)" fg:x="1040" fg:w="3"/><text x="24.2518%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (3 samples, 0.07%)</title><rect x="24.0018%" y="421" width="0.0692%" height="15" fill="rgb(219,138,53)" fg:x="1040" fg:w="3"/><text x="24.2518%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 0.02%)</title><rect x="24.0480%" y="405" width="0.0231%" height="15" fill="rgb(211,51,23)" fg:x="1042" fg:w="1"/><text x="24.2980%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.02%)</title><rect x="24.0480%" y="389" width="0.0231%" height="15" fill="rgb(247,221,28)" fg:x="1042" fg:w="1"/><text x="24.2980%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.02%)</title><rect x="24.2096%" y="373" width="0.0231%" height="15" fill="rgb(251,222,45)" fg:x="1049" fg:w="1"/><text x="24.4596%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.02%)</title><rect x="24.2096%" y="357" width="0.0231%" height="15" fill="rgb(217,162,53)" fg:x="1049" fg:w="1"/><text x="24.4596%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.02%)</title><rect x="24.2096%" y="341" width="0.0231%" height="15" fill="rgb(229,93,14)" fg:x="1049" fg:w="1"/><text x="24.4596%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2 samples, 0.05%)</title><rect x="24.2096%" y="453" width="0.0462%" height="15" fill="rgb(209,67,49)" fg:x="1049" fg:w="2"/><text x="24.4596%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (2 samples, 0.05%)</title><rect x="24.2096%" y="437" width="0.0462%" height="15" fill="rgb(213,87,29)" fg:x="1049" fg:w="2"/><text x="24.4596%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.05%)</title><rect x="24.2096%" y="421" width="0.0462%" height="15" fill="rgb(205,151,52)" fg:x="1049" fg:w="2"/><text x="24.4596%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (2 samples, 0.05%)</title><rect x="24.2096%" y="405" width="0.0462%" height="15" fill="rgb(253,215,39)" fg:x="1049" fg:w="2"/><text x="24.4596%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (2 samples, 0.05%)</title><rect x="24.2096%" y="389" width="0.0462%" height="15" fill="rgb(221,220,41)" fg:x="1049" fg:w="2"/><text x="24.4596%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1 samples, 0.02%)</title><rect x="24.2326%" y="373" width="0.0231%" height="15" fill="rgb(218,133,21)" fg:x="1050" fg:w="1"/><text x="24.4826%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.02%)</title><rect x="24.2326%" y="357" width="0.0231%" height="15" fill="rgb(221,193,43)" fg:x="1050" fg:w="1"/><text x="24.4826%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 0.02%)</title><rect x="24.2326%" y="341" width="0.0231%" height="15" fill="rgb(240,128,52)" fg:x="1050" fg:w="1"/><text x="24.4826%" y="351.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.02%)</title><rect x="24.2326%" y="325" width="0.0231%" height="15" fill="rgb(253,114,12)" fg:x="1050" fg:w="1"/><text x="24.4826%" y="335.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (20 samples, 0.46%)</title><rect x="24.2557%" y="373" width="0.4616%" height="15" fill="rgb(215,223,47)" fg:x="1051" fg:w="20"/><text x="24.5057%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (12 samples, 0.28%)</title><rect x="24.4403%" y="357" width="0.2769%" height="15" fill="rgb(248,225,23)" fg:x="1059" fg:w="12"/><text x="24.6903%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (22 samples, 0.51%)</title><rect x="24.2557%" y="453" width="0.5077%" height="15" fill="rgb(250,108,0)" fg:x="1051" fg:w="22"/><text x="24.5057%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (22 samples, 0.51%)</title><rect x="24.2557%" y="437" width="0.5077%" height="15" fill="rgb(228,208,7)" fg:x="1051" fg:w="22"/><text x="24.5057%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (22 samples, 0.51%)</title><rect x="24.2557%" y="421" width="0.5077%" height="15" fill="rgb(244,45,10)" fg:x="1051" fg:w="22"/><text x="24.5057%" y="431.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (22 samples, 0.51%)</title><rect x="24.2557%" y="405" width="0.5077%" height="15" fill="rgb(207,125,25)" fg:x="1051" fg:w="22"/><text x="24.5057%" y="415.50"></text></g><g><title>core::hash::Hasher::write_usize (22 samples, 0.51%)</title><rect x="24.2557%" y="389" width="0.5077%" height="15" fill="rgb(210,195,18)" fg:x="1051" fg:w="22"/><text x="24.5057%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (2 samples, 0.05%)</title><rect x="24.7173%" y="373" width="0.0462%" height="15" fill="rgb(249,80,12)" fg:x="1071" fg:w="2"/><text x="24.9673%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.05%)</title><rect x="25.1327%" y="405" width="0.0462%" height="15" fill="rgb(221,65,9)" fg:x="1089" fg:w="2"/><text x="25.3827%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.30%)</title><rect x="24.9942%" y="421" width="0.3000%" height="15" fill="rgb(235,49,36)" fg:x="1083" fg:w="13"/><text x="25.2442%" y="431.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (5 samples, 0.12%)</title><rect x="25.1789%" y="405" width="0.1154%" height="15" fill="rgb(225,32,20)" fg:x="1091" fg:w="5"/><text x="25.4289%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.02%)</title><rect x="25.2943%" y="421" width="0.0231%" height="15" fill="rgb(215,141,46)" fg:x="1096" fg:w="1"/><text x="25.5443%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.02%)</title><rect x="25.2943%" y="405" width="0.0231%" height="15" fill="rgb(250,160,47)" fg:x="1096" fg:w="1"/><text x="25.5443%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.02%)</title><rect x="25.2943%" y="389" width="0.0231%" height="15" fill="rgb(216,222,40)" fg:x="1096" fg:w="1"/><text x="25.5443%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.02%)</title><rect x="25.2943%" y="373" width="0.0231%" height="15" fill="rgb(234,217,39)" fg:x="1096" fg:w="1"/><text x="25.5443%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="25.2943%" y="357" width="0.0231%" height="15" fill="rgb(207,178,40)" fg:x="1096" fg:w="1"/><text x="25.5443%" y="367.50"></text></g><g><title>hashbrown::raw::h2 (18 samples, 0.42%)</title><rect x="25.3173%" y="421" width="0.4154%" height="15" fill="rgb(221,136,13)" fg:x="1097" fg:w="18"/><text x="25.5673%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.02%)</title><rect x="25.7327%" y="421" width="0.0231%" height="15" fill="rgb(249,199,10)" fg:x="1115" fg:w="1"/><text x="25.9827%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.02%)</title><rect x="25.7327%" y="405" width="0.0231%" height="15" fill="rgb(249,222,13)" fg:x="1115" fg:w="1"/><text x="25.9827%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="25.7327%" y="389" width="0.0231%" height="15" fill="rgb(244,185,38)" fg:x="1115" fg:w="1"/><text x="25.9827%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.05%)</title><rect x="25.7558%" y="421" width="0.0462%" height="15" fill="rgb(236,202,9)" fg:x="1116" fg:w="2"/><text x="26.0058%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.05%)</title><rect x="25.7558%" y="405" width="0.0462%" height="15" fill="rgb(250,229,37)" fg:x="1116" fg:w="2"/><text x="26.0058%" y="415.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (76 samples, 1.75%)</title><rect x="24.1172%" y="469" width="1.7540%" height="15" fill="rgb(206,174,23)" fg:x="1045" fg:w="76"/><text x="24.3672%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (48 samples, 1.11%)</title><rect x="24.7634%" y="453" width="1.1078%" height="15" fill="rgb(211,33,43)" fg:x="1073" fg:w="48"/><text x="25.0134%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (47 samples, 1.08%)</title><rect x="24.7865%" y="437" width="1.0847%" height="15" fill="rgb(245,58,50)" fg:x="1074" fg:w="47"/><text x="25.0365%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (3 samples, 0.07%)</title><rect x="25.8020%" y="421" width="0.0692%" height="15" fill="rgb(244,68,36)" fg:x="1118" fg:w="3"/><text x="26.0520%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.07%)</title><rect x="25.8020%" y="405" width="0.0692%" height="15" fill="rgb(232,229,15)" fg:x="1118" fg:w="3"/><text x="26.0520%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.07%)</title><rect x="25.8020%" y="389" width="0.0692%" height="15" fill="rgb(254,30,23)" fg:x="1118" fg:w="3"/><text x="26.0520%" y="399.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (82 samples, 1.89%)</title><rect x="24.0711%" y="485" width="1.8925%" height="15" fill="rgb(235,160,14)" fg:x="1043" fg:w="82"/><text x="24.3211%" y="495.50">s..</text></g><g><title>std::collections::hash::map::map_entry (4 samples, 0.09%)</title><rect x="25.8712%" y="469" width="0.0923%" height="15" fill="rgb(212,155,44)" fg:x="1121" fg:w="4"/><text x="26.1212%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.12%)</title><rect x="26.0097%" y="421" width="0.1154%" height="15" fill="rgb(226,2,50)" fg:x="1127" fg:w="5"/><text x="26.2597%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.12%)</title><rect x="26.0097%" y="405" width="0.1154%" height="15" fill="rgb(234,177,6)" fg:x="1127" fg:w="5"/><text x="26.2597%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.12%)</title><rect x="26.0097%" y="389" width="0.1154%" height="15" fill="rgb(217,24,9)" fg:x="1127" fg:w="5"/><text x="26.2597%" y="399.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (5 samples, 0.12%)</title><rect x="26.0097%" y="373" width="0.1154%" height="15" fill="rgb(220,13,46)" fg:x="1127" fg:w="5"/><text x="26.2597%" y="383.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.09%)</title><rect x="26.0328%" y="357" width="0.0923%" height="15" fill="rgb(239,221,27)" fg:x="1128" fg:w="4"/><text x="26.2828%" y="367.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (4 samples, 0.09%)</title><rect x="26.0328%" y="341" width="0.0923%" height="15" fill="rgb(222,198,25)" fg:x="1128" fg:w="4"/><text x="26.2828%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.02%)</title><rect x="26.1020%" y="325" width="0.0231%" height="15" fill="rgb(211,99,13)" fg:x="1131" fg:w="1"/><text x="26.3520%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="26.1251%" y="373" width="0.0231%" height="15" fill="rgb(232,111,31)" fg:x="1132" fg:w="1"/><text x="26.3751%" y="383.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (13 samples, 0.30%)</title><rect x="25.9635%" y="485" width="0.3000%" height="15" fill="rgb(245,82,37)" fg:x="1125" fg:w="13"/><text x="26.2135%" y="495.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (13 samples, 0.30%)</title><rect x="25.9635%" y="469" width="0.3000%" height="15" fill="rgb(227,149,46)" fg:x="1125" fg:w="13"/><text x="26.2135%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (13 samples, 0.30%)</title><rect x="25.9635%" y="453" width="0.3000%" height="15" fill="rgb(218,36,50)" fg:x="1125" fg:w="13"/><text x="26.2135%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (12 samples, 0.28%)</title><rect x="25.9866%" y="437" width="0.2769%" height="15" fill="rgb(226,80,48)" fg:x="1126" fg:w="12"/><text x="26.2366%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (6 samples, 0.14%)</title><rect x="26.1251%" y="421" width="0.1385%" height="15" fill="rgb(238,224,15)" fg:x="1132" fg:w="6"/><text x="26.3751%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6 samples, 0.14%)</title><rect x="26.1251%" y="405" width="0.1385%" height="15" fill="rgb(241,136,10)" fg:x="1132" fg:w="6"/><text x="26.3751%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6 samples, 0.14%)</title><rect x="26.1251%" y="389" width="0.1385%" height="15" fill="rgb(208,32,45)" fg:x="1132" fg:w="6"/><text x="26.3751%" y="399.50"></text></g><g><title>hashbrown::raw::h2 (5 samples, 0.12%)</title><rect x="26.1482%" y="373" width="0.1154%" height="15" fill="rgb(207,135,9)" fg:x="1133" fg:w="5"/><text x="26.3982%" y="383.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (4 samples, 0.09%)</title><rect x="26.2866%" y="357" width="0.0923%" height="15" fill="rgb(206,86,44)" fg:x="1139" fg:w="4"/><text x="26.5366%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.12%)</title><rect x="26.2866%" y="437" width="0.1154%" height="15" fill="rgb(245,177,15)" fg:x="1139" fg:w="5"/><text x="26.5366%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.12%)</title><rect x="26.2866%" y="421" width="0.1154%" height="15" fill="rgb(206,64,50)" fg:x="1139" fg:w="5"/><text x="26.5366%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.12%)</title><rect x="26.2866%" y="405" width="0.1154%" height="15" fill="rgb(234,36,40)" fg:x="1139" fg:w="5"/><text x="26.5366%" y="415.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (5 samples, 0.12%)</title><rect x="26.2866%" y="389" width="0.1154%" height="15" fill="rgb(213,64,8)" fg:x="1139" fg:w="5"/><text x="26.5366%" y="399.50"></text></g><g><title>core::hash::Hasher::write_usize (5 samples, 0.12%)</title><rect x="26.2866%" y="373" width="0.1154%" height="15" fill="rgb(210,75,36)" fg:x="1139" fg:w="5"/><text x="26.5366%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.02%)</title><rect x="26.3790%" y="357" width="0.0231%" height="15" fill="rgb(229,88,21)" fg:x="1143" fg:w="1"/><text x="26.6290%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (4 samples, 0.09%)</title><rect x="26.4251%" y="325" width="0.0923%" height="15" fill="rgb(252,204,47)" fg:x="1145" fg:w="4"/><text x="26.6751%" y="335.50"></text></g><g><title>core::intrinsics::write_bytes (4 samples, 0.09%)</title><rect x="26.4251%" y="309" width="0.0923%" height="15" fill="rgb(208,77,27)" fg:x="1145" fg:w="4"/><text x="26.6751%" y="319.50"></text></g><g><title>[libc.so.6] (3 samples, 0.07%)</title><rect x="26.4482%" y="293" width="0.0692%" height="15" fill="rgb(221,76,26)" fg:x="1146" fg:w="3"/><text x="26.6982%" y="303.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.02%)</title><rect x="26.5174%" y="309" width="0.0231%" height="15" fill="rgb(225,139,18)" fg:x="1149" fg:w="1"/><text x="26.7674%" y="319.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="26.5405%" y="245" width="0.0231%" height="15" fill="rgb(230,137,11)" fg:x="1150" fg:w="1"/><text x="26.7905%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (5 samples, 0.12%)</title><rect x="26.5174%" y="325" width="0.1154%" height="15" fill="rgb(212,28,1)" fg:x="1149" fg:w="5"/><text x="26.7674%" y="335.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (4 samples, 0.09%)</title><rect x="26.5405%" y="309" width="0.0923%" height="15" fill="rgb(248,164,17)" fg:x="1150" fg:w="4"/><text x="26.7905%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.09%)</title><rect x="26.5405%" y="293" width="0.0923%" height="15" fill="rgb(222,171,42)" fg:x="1150" fg:w="4"/><text x="26.7905%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.09%)</title><rect x="26.5405%" y="277" width="0.0923%" height="15" fill="rgb(243,84,45)" fg:x="1150" fg:w="4"/><text x="26.7905%" y="287.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.09%)</title><rect x="26.5405%" y="261" width="0.0923%" height="15" fill="rgb(252,49,23)" fg:x="1150" fg:w="4"/><text x="26.7905%" y="271.50"></text></g><g><title>malloc (3 samples, 0.07%)</title><rect x="26.5636%" y="245" width="0.0692%" height="15" fill="rgb(215,19,7)" fg:x="1151" fg:w="3"/><text x="26.8136%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (11 samples, 0.25%)</title><rect x="26.4020%" y="421" width="0.2539%" height="15" fill="rgb(238,81,41)" fg:x="1144" fg:w="11"/><text x="26.6520%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.25%)</title><rect x="26.4020%" y="405" width="0.2539%" height="15" fill="rgb(210,199,37)" fg:x="1144" fg:w="11"/><text x="26.6520%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (11 samples, 0.25%)</title><rect x="26.4020%" y="389" width="0.2539%" height="15" fill="rgb(244,192,49)" fg:x="1144" fg:w="11"/><text x="26.6520%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (10 samples, 0.23%)</title><rect x="26.4251%" y="373" width="0.2308%" height="15" fill="rgb(226,211,11)" fg:x="1145" fg:w="10"/><text x="26.6751%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (10 samples, 0.23%)</title><rect x="26.4251%" y="357" width="0.2308%" height="15" fill="rgb(236,162,54)" fg:x="1145" fg:w="10"/><text x="26.6751%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (10 samples, 0.23%)</title><rect x="26.4251%" y="341" width="0.2308%" height="15" fill="rgb(220,229,9)" fg:x="1145" fg:w="10"/><text x="26.6751%" y="351.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (1 samples, 0.02%)</title><rect x="26.6328%" y="325" width="0.0231%" height="15" fill="rgb(250,87,22)" fg:x="1154" fg:w="1"/><text x="26.8828%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.37%)</title><rect x="26.6559%" y="405" width="0.3693%" height="15" fill="rgb(239,43,17)" fg:x="1155" fg:w="16"/><text x="26.9059%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (16 samples, 0.37%)</title><rect x="26.6559%" y="389" width="0.3693%" height="15" fill="rgb(231,177,25)" fg:x="1155" fg:w="16"/><text x="26.9059%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (2 samples, 0.05%)</title><rect x="27.0252%" y="405" width="0.0462%" height="15" fill="rgb(219,179,1)" fg:x="1171" fg:w="2"/><text x="27.2752%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.02%)</title><rect x="27.0482%" y="389" width="0.0231%" height="15" fill="rgb(238,219,53)" fg:x="1172" fg:w="1"/><text x="27.2982%" y="399.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.02%)</title><rect x="27.0482%" y="373" width="0.0231%" height="15" fill="rgb(232,167,36)" fg:x="1172" fg:w="1"/><text x="27.2982%" y="383.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.05%)</title><rect x="27.0713%" y="405" width="0.0462%" height="15" fill="rgb(244,19,51)" fg:x="1173" fg:w="2"/><text x="27.3213%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (37 samples, 0.85%)</title><rect x="27.1175%" y="405" width="0.8539%" height="15" fill="rgb(224,6,22)" fg:x="1175" fg:w="37"/><text x="27.3675%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (37 samples, 0.85%)</title><rect x="27.1175%" y="389" width="0.8539%" height="15" fill="rgb(224,145,5)" fg:x="1175" fg:w="37"/><text x="27.3675%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (69 samples, 1.59%)</title><rect x="26.4020%" y="437" width="1.5924%" height="15" fill="rgb(234,130,49)" fg:x="1144" fg:w="69"/><text x="26.6520%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (58 samples, 1.34%)</title><rect x="26.6559%" y="421" width="1.3386%" height="15" fill="rgb(254,6,2)" fg:x="1155" fg:w="58"/><text x="26.9059%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.02%)</title><rect x="27.9714%" y="405" width="0.0231%" height="15" fill="rgb(208,96,46)" fg:x="1212" fg:w="1"/><text x="28.2214%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.02%)</title><rect x="27.9714%" y="389" width="0.0231%" height="15" fill="rgb(239,3,39)" fg:x="1212" fg:w="1"/><text x="28.2214%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="27.9714%" y="373" width="0.0231%" height="15" fill="rgb(233,210,1)" fg:x="1212" fg:w="1"/><text x="28.2214%" y="383.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::define_var (284 samples, 6.55%)</title><rect x="21.4632%" y="517" width="6.5544%" height="15" fill="rgb(244,137,37)" fg:x="930" fg:w="284"/><text x="21.7132%" y="527.50">simple_li..</text></g><g><title>simple_lisp::interpreter::Env::insert (277 samples, 6.39%)</title><rect x="21.6247%" y="501" width="6.3928%" height="15" fill="rgb(240,136,2)" fg:x="937" fg:w="277"/><text x="21.8747%" y="511.50">simple_l..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (76 samples, 1.75%)</title><rect x="26.2636%" y="485" width="1.7540%" height="15" fill="rgb(239,18,37)" fg:x="1138" fg:w="76"/><text x="26.5136%" y="495.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (76 samples, 1.75%)</title><rect x="26.2636%" y="469" width="1.7540%" height="15" fill="rgb(218,185,22)" fg:x="1138" fg:w="76"/><text x="26.5136%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (75 samples, 1.73%)</title><rect x="26.2866%" y="453" width="1.7309%" height="15" fill="rgb(225,218,4)" fg:x="1139" fg:w="75"/><text x="26.5366%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.02%)</title><rect x="27.9945%" y="437" width="0.0231%" height="15" fill="rgb(230,182,32)" fg:x="1213" fg:w="1"/><text x="28.2445%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (1 samples, 0.02%)</title><rect x="27.9945%" y="421" width="0.0231%" height="15" fill="rgb(242,56,43)" fg:x="1213" fg:w="1"/><text x="28.2445%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 0.02%)</title><rect x="27.9945%" y="405" width="0.0231%" height="15" fill="rgb(233,99,24)" fg:x="1213" fg:w="1"/><text x="28.2445%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 0.02%)</title><rect x="27.9945%" y="389" width="0.0231%" height="15" fill="rgb(234,209,42)" fg:x="1213" fg:w="1"/><text x="28.2445%" y="399.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (6 samples, 0.14%)</title><rect x="28.8253%" y="501" width="0.1385%" height="15" fill="rgb(227,7,12)" fg:x="1249" fg:w="6"/><text x="29.0753%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.14%)</title><rect x="28.8253%" y="485" width="0.1385%" height="15" fill="rgb(245,203,43)" fg:x="1249" fg:w="6"/><text x="29.0753%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.14%)</title><rect x="28.8253%" y="469" width="0.1385%" height="15" fill="rgb(238,205,33)" fg:x="1249" fg:w="6"/><text x="29.0753%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.14%)</title><rect x="28.8253%" y="453" width="0.1385%" height="15" fill="rgb(231,56,7)" fg:x="1249" fg:w="6"/><text x="29.0753%" y="463.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (1 samples, 0.02%)</title><rect x="28.9638%" y="501" width="0.0231%" height="15" fill="rgb(244,186,29)" fg:x="1255" fg:w="1"/><text x="29.2138%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.02%)</title><rect x="28.9638%" y="485" width="0.0231%" height="15" fill="rgb(234,111,31)" fg:x="1255" fg:w="1"/><text x="29.2138%" y="495.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (14 samples, 0.32%)</title><rect x="29.3099%" y="485" width="0.3231%" height="15" fill="rgb(241,149,10)" fg:x="1270" fg:w="14"/><text x="29.5599%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (14 samples, 0.32%)</title><rect x="29.3099%" y="469" width="0.3231%" height="15" fill="rgb(249,206,44)" fg:x="1270" fg:w="14"/><text x="29.5599%" y="479.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::DataRef as core::clone::Clone&gt;::clone (78 samples, 1.80%)</title><rect x="29.6330%" y="485" width="1.8001%" height="15" fill="rgb(251,153,30)" fg:x="1284" fg:w="78"/><text x="29.8830%" y="495.50">&lt;..</text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::clone::Clone&gt;::clone (78 samples, 1.80%)</title><rect x="29.6330%" y="469" width="1.8001%" height="15" fill="rgb(239,152,38)" fg:x="1284" fg:w="78"/><text x="29.8830%" y="479.50">&lt;..</text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (119 samples, 2.75%)</title><rect x="31.7563%" y="357" width="2.7464%" height="15" fill="rgb(249,139,47)" fg:x="1376" fg:w="119"/><text x="32.0063%" y="367.50">&lt;f..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (65 samples, 1.50%)</title><rect x="33.0025%" y="341" width="1.5001%" height="15" fill="rgb(244,64,35)" fg:x="1430" fg:w="65"/><text x="33.2525%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (128 samples, 2.95%)</title><rect x="31.7563%" y="437" width="2.9541%" height="15" fill="rgb(216,46,15)" fg:x="1376" fg:w="128"/><text x="32.0063%" y="447.50">has..</text></g><g><title>core::hash::BuildHasher::hash_one (128 samples, 2.95%)</title><rect x="31.7563%" y="421" width="2.9541%" height="15" fill="rgb(250,74,19)" fg:x="1376" fg:w="128"/><text x="32.0063%" y="431.50">cor..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (128 samples, 2.95%)</title><rect x="31.7563%" y="405" width="2.9541%" height="15" fill="rgb(249,42,33)" fg:x="1376" fg:w="128"/><text x="32.0063%" y="415.50">cor..</text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (128 samples, 2.95%)</title><rect x="31.7563%" y="389" width="2.9541%" height="15" fill="rgb(242,149,17)" fg:x="1376" fg:w="128"/><text x="32.0063%" y="399.50">&lt;si..</text></g><g><title>core::hash::Hasher::write_usize (128 samples, 2.95%)</title><rect x="31.7563%" y="373" width="2.9541%" height="15" fill="rgb(244,29,21)" fg:x="1376" fg:w="128"/><text x="32.0063%" y="383.50">cor..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (9 samples, 0.21%)</title><rect x="34.5027%" y="357" width="0.2077%" height="15" fill="rgb(220,130,37)" fg:x="1495" fg:w="9"/><text x="34.7527%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.07%)</title><rect x="36.7874%" y="373" width="0.0692%" height="15" fill="rgb(211,67,2)" fg:x="1594" fg:w="3"/><text x="37.0374%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 1.15%)</title><rect x="35.9105%" y="389" width="1.1539%" height="15" fill="rgb(235,68,52)" fg:x="1556" fg:w="50"/><text x="36.1605%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (9 samples, 0.21%)</title><rect x="36.8567%" y="373" width="0.2077%" height="15" fill="rgb(246,142,3)" fg:x="1597" fg:w="9"/><text x="37.1067%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (26 samples, 0.60%)</title><rect x="37.0644%" y="389" width="0.6000%" height="15" fill="rgb(241,25,7)" fg:x="1606" fg:w="26"/><text x="37.3144%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (26 samples, 0.60%)</title><rect x="37.0644%" y="373" width="0.6000%" height="15" fill="rgb(242,119,39)" fg:x="1606" fg:w="26"/><text x="37.3144%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (26 samples, 0.60%)</title><rect x="37.0644%" y="357" width="0.6000%" height="15" fill="rgb(241,98,45)" fg:x="1606" fg:w="26"/><text x="37.3144%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (26 samples, 0.60%)</title><rect x="37.0644%" y="341" width="0.6000%" height="15" fill="rgb(254,28,30)" fg:x="1606" fg:w="26"/><text x="37.3144%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (26 samples, 0.60%)</title><rect x="37.0644%" y="325" width="0.6000%" height="15" fill="rgb(241,142,54)" fg:x="1606" fg:w="26"/><text x="37.3144%" y="335.50"></text></g><g><title>hashbrown::raw::h2 (75 samples, 1.73%)</title><rect x="37.6644%" y="389" width="1.7309%" height="15" fill="rgb(222,85,15)" fg:x="1632" fg:w="75"/><text x="37.9144%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (13 samples, 0.30%)</title><rect x="39.3953%" y="389" width="0.3000%" height="15" fill="rgb(210,85,47)" fg:x="1707" fg:w="13"/><text x="39.6453%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (13 samples, 0.30%)</title><rect x="39.3953%" y="373" width="0.3000%" height="15" fill="rgb(224,206,25)" fg:x="1707" fg:w="13"/><text x="39.6453%" y="383.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::get_var (514 samples, 11.86%)</title><rect x="28.0175%" y="517" width="11.8625%" height="15" fill="rgb(243,201,19)" fg:x="1214" fg:w="514"/><text x="28.2675%" y="527.50">simple_lisp::inter..</text></g><g><title>simple_lisp::interpreter::Env::get (472 samples, 10.89%)</title><rect x="28.9868%" y="501" width="10.8931%" height="15" fill="rgb(236,59,4)" fg:x="1256" fg:w="472"/><text x="29.2368%" y="511.50">simple_lisp::int..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (366 samples, 8.45%)</title><rect x="31.4332%" y="485" width="8.4468%" height="15" fill="rgb(254,179,45)" fg:x="1362" fg:w="366"/><text x="31.6832%" y="495.50">std::collect..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (366 samples, 8.45%)</title><rect x="31.4332%" y="469" width="8.4468%" height="15" fill="rgb(226,14,10)" fg:x="1362" fg:w="366"/><text x="31.6832%" y="479.50">hashbrown::m..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (366 samples, 8.45%)</title><rect x="31.4332%" y="453" width="8.4468%" height="15" fill="rgb(244,27,41)" fg:x="1362" fg:w="366"/><text x="31.6832%" y="463.50">hashbrown::m..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (224 samples, 5.17%)</title><rect x="34.7104%" y="437" width="5.1696%" height="15" fill="rgb(235,35,32)" fg:x="1504" fg:w="224"/><text x="34.9604%" y="447.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (224 samples, 5.17%)</title><rect x="34.7104%" y="421" width="5.1696%" height="15" fill="rgb(218,68,31)" fg:x="1504" fg:w="224"/><text x="34.9604%" y="431.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (224 samples, 5.17%)</title><rect x="34.7104%" y="405" width="5.1696%" height="15" fill="rgb(207,120,37)" fg:x="1504" fg:w="224"/><text x="34.9604%" y="415.50">hashbr..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (8 samples, 0.18%)</title><rect x="39.6954%" y="389" width="0.1846%" height="15" fill="rgb(227,98,0)" fg:x="1720" fg:w="8"/><text x="39.9454%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 0.18%)</title><rect x="39.6954%" y="373" width="0.1846%" height="15" fill="rgb(207,7,3)" fg:x="1720" fg:w="8"/><text x="39.9454%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.18%)</title><rect x="39.6954%" y="357" width="0.1846%" height="15" fill="rgb(206,98,19)" fg:x="1720" fg:w="8"/><text x="39.9454%" y="367.50"></text></g><g><title>cfree (3 samples, 0.07%)</title><rect x="39.8800%" y="501" width="0.0692%" height="15" fill="rgb(217,5,26)" fg:x="1728" fg:w="3"/><text x="40.1300%" y="511.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="39.9031%" y="485" width="0.0462%" height="15" fill="rgb(235,190,38)" fg:x="1729" fg:w="2"/><text x="40.1531%" y="495.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="39.9261%" y="469" width="0.0231%" height="15" fill="rgb(247,86,24)" fg:x="1730" fg:w="1"/><text x="40.1761%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (3 samples, 0.07%)</title><rect x="39.9492%" y="501" width="0.0692%" height="15" fill="rgb(205,101,16)" fg:x="1731" fg:w="3"/><text x="40.1992%" y="511.50"></text></g><g><title>core::mem::drop (10 samples, 0.23%)</title><rect x="40.1569%" y="469" width="0.2308%" height="15" fill="rgb(246,168,33)" fg:x="1740" fg:w="10"/><text x="40.4069%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::ExternalData&gt; (10 samples, 0.23%)</title><rect x="40.1569%" y="453" width="0.2308%" height="15" fill="rgb(231,114,1)" fg:x="1740" fg:w="10"/><text x="40.4069%" y="463.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::ExternalData as core::ops::drop::Drop&gt;::drop (10 samples, 0.23%)</title><rect x="40.1569%" y="437" width="0.2308%" height="15" fill="rgb(207,184,53)" fg:x="1740" fg:w="10"/><text x="40.4069%" y="447.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::unset_external (10 samples, 0.23%)</title><rect x="40.1569%" y="421" width="0.2308%" height="15" fill="rgb(224,95,51)" fg:x="1740" fg:w="10"/><text x="40.4069%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (10 samples, 0.23%)</title><rect x="40.1569%" y="405" width="0.2308%" height="15" fill="rgb(212,188,45)" fg:x="1740" fg:w="10"/><text x="40.4069%" y="415.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (10 samples, 0.23%)</title><rect x="40.1569%" y="389" width="0.2308%" height="15" fill="rgb(223,154,38)" fg:x="1740" fg:w="10"/><text x="40.4069%" y="399.50"></text></g><g><title>core::cell::BorrowRefMut::new (10 samples, 0.23%)</title><rect x="40.1569%" y="373" width="0.2308%" height="15" fill="rgb(251,22,52)" fg:x="1740" fg:w="10"/><text x="40.4069%" y="383.50"></text></g><g><title>__rust_dealloc (2 samples, 0.05%)</title><rect x="40.4108%" y="373" width="0.0462%" height="15" fill="rgb(229,209,22)" fg:x="1751" fg:w="2"/><text x="40.6608%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;misc_utils::stack::Stack&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (13 samples, 0.30%)</title><rect x="40.3877%" y="469" width="0.3000%" height="15" fill="rgb(234,138,34)" fg:x="1750" fg:w="13"/><text x="40.6377%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (13 samples, 0.30%)</title><rect x="40.3877%" y="453" width="0.3000%" height="15" fill="rgb(212,95,11)" fg:x="1750" fg:w="13"/><text x="40.6377%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (13 samples, 0.30%)</title><rect x="40.3877%" y="437" width="0.3000%" height="15" fill="rgb(240,179,47)" fg:x="1750" fg:w="13"/><text x="40.6377%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.30%)</title><rect x="40.3877%" y="421" width="0.3000%" height="15" fill="rgb(240,163,11)" fg:x="1750" fg:w="13"/><text x="40.6377%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.30%)</title><rect x="40.3877%" y="405" width="0.3000%" height="15" fill="rgb(236,37,12)" fg:x="1750" fg:w="13"/><text x="40.6377%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.30%)</title><rect x="40.3877%" y="389" width="0.3000%" height="15" fill="rgb(232,164,16)" fg:x="1750" fg:w="13"/><text x="40.6377%" y="399.50"></text></g><g><title>cfree (10 samples, 0.23%)</title><rect x="40.4570%" y="373" width="0.2308%" height="15" fill="rgb(244,205,15)" fg:x="1753" fg:w="10"/><text x="40.7070%" y="383.50"></text></g><g><title>[libc.so.6] (8 samples, 0.18%)</title><rect x="40.5031%" y="357" width="0.1846%" height="15" fill="rgb(223,117,47)" fg:x="1755" fg:w="8"/><text x="40.7531%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (31 samples, 0.72%)</title><rect x="40.8031%" y="405" width="0.7154%" height="15" fill="rgb(244,107,35)" fg:x="1768" fg:w="31"/><text x="41.0531%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.72%)</title><rect x="40.8031%" y="389" width="0.7154%" height="15" fill="rgb(205,140,8)" fg:x="1768" fg:w="31"/><text x="41.0531%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::Drain&lt;simple_lisp::interpreter::ast::Ident,misc_utils::stack::Stack&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt;&gt; (47 samples, 1.08%)</title><rect x="40.6877%" y="469" width="1.0847%" height="15" fill="rgb(228,84,46)" fg:x="1763" fg:w="47"/><text x="40.9377%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::Drain&lt;simple_lisp::interpreter::ast::Ident,misc_utils::stack::Stack&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt;&gt; (47 samples, 1.08%)</title><rect x="40.6877%" y="453" width="1.0847%" height="15" fill="rgb(254,188,9)" fg:x="1763" fg:w="47"/><text x="40.9377%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawDrain&lt;(simple_lisp::interpreter::ast::Ident,misc_utils::stack::Stack&lt;simple_lisp::interpreter::data::ExternalData&gt;)&gt;&gt; (47 samples, 1.08%)</title><rect x="40.6877%" y="437" width="1.0847%" height="15" fill="rgb(206,112,54)" fg:x="1763" fg:w="47"/><text x="40.9377%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawDrain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 1.08%)</title><rect x="40.6877%" y="421" width="1.0847%" height="15" fill="rgb(216,84,49)" fg:x="1763" fg:w="47"/><text x="40.9377%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::clear_no_drop (11 samples, 0.25%)</title><rect x="41.5186%" y="405" width="0.2539%" height="15" fill="rgb(214,194,35)" fg:x="1799" fg:w="11"/><text x="41.7686%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (4 samples, 0.09%)</title><rect x="41.6801%" y="389" width="0.0923%" height="15" fill="rgb(249,28,3)" fg:x="1806" fg:w="4"/><text x="41.9301%" y="399.50"></text></g><g><title>core::intrinsics::write_bytes (4 samples, 0.09%)</title><rect x="41.6801%" y="373" width="0.0923%" height="15" fill="rgb(222,56,52)" fg:x="1806" fg:w="4"/><text x="41.9301%" y="383.50"></text></g><g><title>[libc.so.6] (4 samples, 0.09%)</title><rect x="41.6801%" y="357" width="0.0923%" height="15" fill="rgb(245,217,50)" fg:x="1806" fg:w="4"/><text x="41.9301%" y="367.50"></text></g><g><title>&lt;simple_lisp::interpreter::Env as core::ops::drop::Drop&gt;::drop (83 samples, 1.92%)</title><rect x="40.0185%" y="485" width="1.9155%" height="15" fill="rgb(213,201,24)" fg:x="1734" fg:w="83"/><text x="40.2685%" y="495.50">&lt;..</text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::pop (7 samples, 0.16%)</title><rect x="41.7724%" y="469" width="0.1616%" height="15" fill="rgb(248,116,28)" fg:x="1810" fg:w="7"/><text x="42.0224%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (7 samples, 0.16%)</title><rect x="41.7724%" y="453" width="0.1616%" height="15" fill="rgb(219,72,43)" fg:x="1810" fg:w="7"/><text x="42.0224%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;misc_utils::stack::Stack&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="41.9340%" y="485" width="0.0231%" height="15" fill="rgb(209,138,14)" fg:x="1817" fg:w="1"/><text x="42.1840%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="41.9340%" y="469" width="0.0231%" height="15" fill="rgb(222,18,33)" fg:x="1817" fg:w="1"/><text x="42.1840%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="41.9340%" y="453" width="0.0231%" height="15" fill="rgb(213,199,7)" fg:x="1817" fg:w="1"/><text x="42.1840%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;]&gt; (1 samples, 0.02%)</title><rect x="41.9340%" y="437" width="0.0231%" height="15" fill="rgb(250,110,10)" fg:x="1817" fg:w="1"/><text x="42.1840%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="41.9340%" y="421" width="0.0231%" height="15" fill="rgb(248,123,6)" fg:x="1817" fg:w="1"/><text x="42.1840%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="41.9340%" y="405" width="0.0231%" height="15" fill="rgb(206,91,31)" fg:x="1817" fg:w="1"/><text x="42.1840%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;simple_lisp::interpreter::ast::Ident,(),core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="41.9340%" y="389" width="0.0231%" height="15" fill="rgb(211,154,13)" fg:x="1817" fg:w="1"/><text x="42.1840%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(simple_lisp::interpreter::ast::Ident,())&gt;&gt; (1 samples, 0.02%)</title><rect x="41.9340%" y="373" width="0.0231%" height="15" fill="rgb(225,148,7)" fg:x="1817" fg:w="1"/><text x="42.1840%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="41.9340%" y="357" width="0.0231%" height="15" fill="rgb(220,160,43)" fg:x="1817" fg:w="1"/><text x="42.1840%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.02%)</title><rect x="41.9340%" y="341" width="0.0231%" height="15" fill="rgb(213,52,39)" fg:x="1817" fg:w="1"/><text x="42.1840%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1 samples, 0.02%)</title><rect x="41.9340%" y="325" width="0.0231%" height="15" fill="rgb(243,137,7)" fg:x="1817" fg:w="1"/><text x="42.1840%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="41.9340%" y="309" width="0.0231%" height="15" fill="rgb(230,79,13)" fg:x="1817" fg:w="1"/><text x="42.1840%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="41.9340%" y="293" width="0.0231%" height="15" fill="rgb(247,105,23)" fg:x="1817" fg:w="1"/><text x="42.1840%" y="303.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="41.9340%" y="277" width="0.0231%" height="15" fill="rgb(223,179,41)" fg:x="1817" fg:w="1"/><text x="42.1840%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="41.9571%" y="437" width="0.0231%" height="15" fill="rgb(218,9,34)" fg:x="1818" fg:w="1"/><text x="42.2071%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (1 samples, 0.02%)</title><rect x="41.9571%" y="421" width="0.0231%" height="15" fill="rgb(222,106,8)" fg:x="1818" fg:w="1"/><text x="42.2071%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_empty_singleton (1 samples, 0.02%)</title><rect x="41.9571%" y="405" width="0.0231%" height="15" fill="rgb(211,220,0)" fg:x="1818" fg:w="1"/><text x="42.2071%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::Env&gt; (86 samples, 1.98%)</title><rect x="40.0185%" y="501" width="1.9848%" height="15" fill="rgb(229,52,16)" fg:x="1734" fg:w="86"/><text x="40.2685%" y="511.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;simple_lisp::interpreter::ast::Ident,misc_utils::stack::Stack&lt;simple_lisp::interpreter::data::ExternalData&gt;,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (2 samples, 0.05%)</title><rect x="41.9571%" y="485" width="0.0462%" height="15" fill="rgb(212,155,18)" fg:x="1818" fg:w="2"/><text x="42.2071%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;simple_lisp::interpreter::ast::Ident,misc_utils::stack::Stack&lt;simple_lisp::interpreter::data::ExternalData&gt;,core::hash::BuildHasherDefault&lt;fnv::FnvHasher&gt;&gt;&gt; (2 samples, 0.05%)</title><rect x="41.9571%" y="469" width="0.0462%" height="15" fill="rgb(242,21,14)" fg:x="1818" fg:w="2"/><text x="42.2071%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(simple_lisp::interpreter::ast::Ident,misc_utils::stack::Stack&lt;simple_lisp::interpreter::data::ExternalData&gt;)&gt;&gt; (2 samples, 0.05%)</title><rect x="41.9571%" y="453" width="0.0462%" height="15" fill="rgb(222,19,48)" fg:x="1818" fg:w="2"/><text x="42.2071%" y="463.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="41.9802%" y="437" width="0.0231%" height="15" fill="rgb(232,45,27)" fg:x="1819" fg:w="1"/><text x="42.2302%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="41.9802%" y="421" width="0.0231%" height="15" fill="rgb(249,103,42)" fg:x="1819" fg:w="1"/><text x="42.2302%" y="431.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::pop (1 samples, 0.02%)</title><rect x="42.0032%" y="501" width="0.0231%" height="15" fill="rgb(246,81,33)" fg:x="1820" fg:w="1"/><text x="42.2532%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.02%)</title><rect x="42.0032%" y="485" width="0.0231%" height="15" fill="rgb(252,33,42)" fg:x="1820" fg:w="1"/><text x="42.2532%" y="495.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="42.0032%" y="469" width="0.0231%" height="15" fill="rgb(209,212,41)" fg:x="1820" fg:w="1"/><text x="42.2532%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="42.0494%" y="485" width="0.0462%" height="15" fill="rgb(207,154,6)" fg:x="1822" fg:w="2"/><text x="42.2994%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="42.0494%" y="469" width="0.0462%" height="15" fill="rgb(223,64,47)" fg:x="1822" fg:w="2"/><text x="42.2994%" y="479.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="42.0494%" y="453" width="0.0462%" height="15" fill="rgb(211,161,38)" fg:x="1822" fg:w="2"/><text x="42.2994%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="42.0494%" y="437" width="0.0462%" height="15" fill="rgb(219,138,40)" fg:x="1822" fg:w="2"/><text x="42.2994%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (2 samples, 0.05%)</title><rect x="42.0955%" y="373" width="0.0462%" height="15" fill="rgb(241,228,46)" fg:x="1824" fg:w="2"/><text x="42.3455%" y="383.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::pop_env (99 samples, 2.28%)</title><rect x="39.8800%" y="517" width="2.2848%" height="15" fill="rgb(223,209,38)" fg:x="1728" fg:w="99"/><text x="40.1300%" y="527.50">s..</text></g><g><title>simple_lisp::interpreter::Env::var_count (6 samples, 0.14%)</title><rect x="42.0263%" y="501" width="0.1385%" height="15" fill="rgb(236,164,45)" fg:x="1821" fg:w="6"/><text x="42.2763%" y="511.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::values (3 samples, 0.07%)</title><rect x="42.0955%" y="485" width="0.0692%" height="15" fill="rgb(231,15,5)" fg:x="1824" fg:w="3"/><text x="42.3455%" y="495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (3 samples, 0.07%)</title><rect x="42.0955%" y="469" width="0.0692%" height="15" fill="rgb(252,35,15)" fg:x="1824" fg:w="3"/><text x="42.3455%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (3 samples, 0.07%)</title><rect x="42.0955%" y="453" width="0.0692%" height="15" fill="rgb(248,181,18)" fg:x="1824" fg:w="3"/><text x="42.3455%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (3 samples, 0.07%)</title><rect x="42.0955%" y="437" width="0.0692%" height="15" fill="rgb(233,39,42)" fg:x="1824" fg:w="3"/><text x="42.3455%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (3 samples, 0.07%)</title><rect x="42.0955%" y="421" width="0.0692%" height="15" fill="rgb(238,110,33)" fg:x="1824" fg:w="3"/><text x="42.3455%" y="431.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (3 samples, 0.07%)</title><rect x="42.0955%" y="405" width="0.0692%" height="15" fill="rgb(233,195,10)" fg:x="1824" fg:w="3"/><text x="42.3455%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (3 samples, 0.07%)</title><rect x="42.0955%" y="389" width="0.0692%" height="15" fill="rgb(254,105,3)" fg:x="1824" fg:w="3"/><text x="42.3455%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.02%)</title><rect x="42.1417%" y="373" width="0.0231%" height="15" fill="rgb(221,225,9)" fg:x="1826" fg:w="1"/><text x="42.3917%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="42.1417%" y="357" width="0.0231%" height="15" fill="rgb(224,227,45)" fg:x="1826" fg:w="1"/><text x="42.3917%" y="367.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (4 samples, 0.09%)</title><rect x="42.2340%" y="501" width="0.0923%" height="15" fill="rgb(229,198,43)" fg:x="1830" fg:w="4"/><text x="42.4840%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.09%)</title><rect x="42.2340%" y="485" width="0.0923%" height="15" fill="rgb(206,209,35)" fg:x="1830" fg:w="4"/><text x="42.4840%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.09%)</title><rect x="42.2340%" y="469" width="0.0923%" height="15" fill="rgb(245,195,53)" fg:x="1830" fg:w="4"/><text x="42.4840%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.09%)</title><rect x="42.2340%" y="453" width="0.0923%" height="15" fill="rgb(240,92,26)" fg:x="1830" fg:w="4"/><text x="42.4840%" y="463.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::pop_from_scope (8 samples, 0.18%)</title><rect x="42.1648%" y="517" width="0.1846%" height="15" fill="rgb(207,40,23)" fg:x="1827" fg:w="8"/><text x="42.4148%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.02%)</title><rect x="42.3263%" y="501" width="0.0231%" height="15" fill="rgb(223,111,35)" fg:x="1834" fg:w="1"/><text x="42.5763%" y="511.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (10 samples, 0.23%)</title><rect x="42.4879%" y="501" width="0.2308%" height="15" fill="rgb(229,147,28)" fg:x="1841" fg:w="10"/><text x="42.7379%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (10 samples, 0.23%)</title><rect x="42.4879%" y="485" width="0.2308%" height="15" fill="rgb(211,29,28)" fg:x="1841" fg:w="10"/><text x="42.7379%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (10 samples, 0.23%)</title><rect x="42.4879%" y="469" width="0.2308%" height="15" fill="rgb(228,72,33)" fg:x="1841" fg:w="10"/><text x="42.7379%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (10 samples, 0.23%)</title><rect x="42.4879%" y="453" width="0.2308%" height="15" fill="rgb(205,214,31)" fg:x="1841" fg:w="10"/><text x="42.7379%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.05%)</title><rect x="43.8495%" y="453" width="0.0462%" height="15" fill="rgb(224,111,15)" fg:x="1900" fg:w="2"/><text x="44.0995%" y="463.50"></text></g><g><title>__rdl_alloc (4 samples, 0.09%)</title><rect x="44.3342%" y="437" width="0.0923%" height="15" fill="rgb(253,21,26)" fg:x="1921" fg:w="4"/><text x="44.5842%" y="447.50"></text></g><g><title>__rust_alloc (7 samples, 0.16%)</title><rect x="44.4265%" y="437" width="0.1616%" height="15" fill="rgb(245,139,43)" fg:x="1925" fg:w="7"/><text x="44.6765%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.05%)</title><rect x="44.5880%" y="437" width="0.0462%" height="15" fill="rgb(252,170,7)" fg:x="1932" fg:w="2"/><text x="44.8380%" y="447.50"></text></g><g><title>[libc.so.6] (38 samples, 0.88%)</title><rect x="46.5267%" y="405" width="0.8770%" height="15" fill="rgb(231,118,14)" fg:x="2016" fg:w="38"/><text x="46.7767%" y="415.50"></text></g><g><title>[libc.so.6] (8 samples, 0.18%)</title><rect x="47.2190%" y="389" width="0.1846%" height="15" fill="rgb(238,83,0)" fg:x="2046" fg:w="8"/><text x="47.4690%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (153 samples, 3.53%)</title><rect x="43.8957%" y="453" width="3.5310%" height="15" fill="rgb(221,39,39)" fg:x="1902" fg:w="153"/><text x="44.1457%" y="463.50">all..</text></g><g><title>malloc (121 samples, 2.79%)</title><rect x="44.6342%" y="437" width="2.7925%" height="15" fill="rgb(222,119,46)" fg:x="1934" fg:w="121"/><text x="44.8842%" y="447.50">ma..</text></g><g><title>[libc.so.6] (87 samples, 2.01%)</title><rect x="45.4189%" y="421" width="2.0078%" height="15" fill="rgb(222,165,49)" fg:x="1968" fg:w="87"/><text x="45.6689%" y="431.50">[..</text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.4036%" y="405" width="0.0231%" height="15" fill="rgb(219,113,52)" fg:x="2054" fg:w="1"/><text x="47.6536%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="47.4036%" y="389" width="0.0231%" height="15" fill="rgb(214,7,15)" fg:x="2054" fg:w="1"/><text x="47.6536%" y="399.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.02%)</title><rect x="47.4267%" y="453" width="0.0231%" height="15" fill="rgb(235,32,4)" fg:x="2055" fg:w="1"/><text x="47.6767%" y="463.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.02%)</title><rect x="47.4267%" y="437" width="0.0231%" height="15" fill="rgb(238,90,54)" fg:x="2055" fg:w="1"/><text x="47.6767%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (181 samples, 4.18%)</title><rect x="43.3649%" y="485" width="4.1772%" height="15" fill="rgb(213,208,19)" fg:x="1879" fg:w="181"/><text x="43.6149%" y="495.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (168 samples, 3.88%)</title><rect x="43.6649%" y="469" width="3.8772%" height="15" fill="rgb(233,156,4)" fg:x="1892" fg:w="168"/><text x="43.9149%" y="479.50">allo..</text></g><g><title>core::cmp::max (4 samples, 0.09%)</title><rect x="47.4498%" y="453" width="0.0923%" height="15" fill="rgb(207,194,5)" fg:x="2056" fg:w="4"/><text x="47.6998%" y="463.50"></text></g><g><title>core::cmp::Ord::max (4 samples, 0.09%)</title><rect x="47.4498%" y="437" width="0.0923%" height="15" fill="rgb(206,111,30)" fg:x="2056" fg:w="4"/><text x="47.6998%" y="447.50"></text></g><g><title>core::cmp::max_by (4 samples, 0.09%)</title><rect x="47.4498%" y="421" width="0.0923%" height="15" fill="rgb(243,70,54)" fg:x="2056" fg:w="4"/><text x="47.6998%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (8 samples, 0.18%)</title><rect x="47.5421%" y="485" width="0.1846%" height="15" fill="rgb(242,28,8)" fg:x="2060" fg:w="8"/><text x="47.7921%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8 samples, 0.18%)</title><rect x="47.5421%" y="469" width="0.1846%" height="15" fill="rgb(219,106,18)" fg:x="2060" fg:w="8"/><text x="47.7921%" y="479.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_dr_to_scope (239 samples, 5.52%)</title><rect x="42.3494%" y="517" width="5.5158%" height="15" fill="rgb(244,222,10)" fg:x="1835" fg:w="239"/><text x="42.5994%" y="527.50">simple_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (223 samples, 5.15%)</title><rect x="42.7187%" y="501" width="5.1465%" height="15" fill="rgb(236,179,52)" fg:x="1851" fg:w="223"/><text x="42.9687%" y="511.50">alloc:..</text></g><g><title>core::ptr::write (6 samples, 0.14%)</title><rect x="47.7267%" y="485" width="0.1385%" height="15" fill="rgb(213,23,39)" fg:x="2068" fg:w="6"/><text x="47.9767%" y="495.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (16 samples, 0.37%)</title><rect x="47.8883%" y="501" width="0.3693%" height="15" fill="rgb(238,48,10)" fg:x="2075" fg:w="16"/><text x="48.1383%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16 samples, 0.37%)</title><rect x="47.8883%" y="485" width="0.3693%" height="15" fill="rgb(251,196,23)" fg:x="2075" fg:w="16"/><text x="48.1383%" y="495.50"></text></g><g><title>core::ptr::write (15 samples, 0.35%)</title><rect x="47.9114%" y="469" width="0.3462%" height="15" fill="rgb(250,152,24)" fg:x="2076" fg:w="15"/><text x="48.1614%" y="479.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_env (19 samples, 0.44%)</title><rect x="47.8652%" y="517" width="0.4385%" height="15" fill="rgb(209,150,17)" fg:x="2074" fg:w="19"/><text x="48.1152%" y="527.50"></text></g><g><title>simple_lisp::interpreter::Env::new (2 samples, 0.05%)</title><rect x="48.2576%" y="501" width="0.0462%" height="15" fill="rgb(234,202,34)" fg:x="2091" fg:w="2"/><text x="48.5076%" y="511.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="48.2806%" y="485" width="0.0231%" height="15" fill="rgb(253,148,53)" fg:x="2092" fg:w="1"/><text x="48.5306%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="48.2806%" y="469" width="0.0231%" height="15" fill="rgb(218,129,16)" fg:x="2092" fg:w="1"/><text x="48.5306%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="48.2806%" y="453" width="0.0231%" height="15" fill="rgb(216,85,19)" fg:x="2092" fg:w="1"/><text x="48.5306%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.02%)</title><rect x="48.2806%" y="437" width="0.0231%" height="15" fill="rgb(235,228,7)" fg:x="2092" fg:w="1"/><text x="48.5306%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.02%)</title><rect x="48.2806%" y="421" width="0.0231%" height="15" fill="rgb(245,175,0)" fg:x="2092" fg:w="1"/><text x="48.5306%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="48.2806%" y="405" width="0.0231%" height="15" fill="rgb(208,168,36)" fg:x="2092" fg:w="1"/><text x="48.5306%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="48.2806%" y="389" width="0.0231%" height="15" fill="rgb(246,171,24)" fg:x="2092" fg:w="1"/><text x="48.5306%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="48.2806%" y="373" width="0.0231%" height="15" fill="rgb(215,142,24)" fg:x="2092" fg:w="1"/><text x="48.5306%" y="383.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="48.2806%" y="357" width="0.0231%" height="15" fill="rgb(250,187,7)" fg:x="2092" fg:w="1"/><text x="48.5306%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (4 samples, 0.09%)</title><rect x="48.3037%" y="485" width="0.0923%" height="15" fill="rgb(228,66,33)" fg:x="2093" fg:w="4"/><text x="48.5537%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.09%)</title><rect x="48.3037%" y="469" width="0.0923%" height="15" fill="rgb(234,215,21)" fg:x="2093" fg:w="4"/><text x="48.5537%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.09%)</title><rect x="48.3037%" y="453" width="0.0923%" height="15" fill="rgb(222,191,20)" fg:x="2093" fg:w="4"/><text x="48.5537%" y="463.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (5 samples, 0.12%)</title><rect x="48.3037%" y="501" width="0.1154%" height="15" fill="rgb(245,79,54)" fg:x="2093" fg:w="5"/><text x="48.5537%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.02%)</title><rect x="48.3960%" y="485" width="0.0231%" height="15" fill="rgb(240,10,37)" fg:x="2097" fg:w="1"/><text x="48.6460%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.09%)</title><rect x="48.7884%" y="453" width="0.0923%" height="15" fill="rgb(214,192,32)" fg:x="2114" fg:w="4"/><text x="49.0384%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.09%)</title><rect x="48.7884%" y="437" width="0.0923%" height="15" fill="rgb(209,36,54)" fg:x="2114" fg:w="4"/><text x="49.0384%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.09%)</title><rect x="48.7884%" y="421" width="0.0923%" height="15" fill="rgb(220,10,11)" fg:x="2114" fg:w="4"/><text x="49.0384%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 0.09%)</title><rect x="48.7884%" y="405" width="0.0923%" height="15" fill="rgb(221,106,17)" fg:x="2114" fg:w="4"/><text x="49.0384%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.09%)</title><rect x="48.7884%" y="389" width="0.0923%" height="15" fill="rgb(251,142,44)" fg:x="2114" fg:w="4"/><text x="49.0384%" y="399.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.09%)</title><rect x="48.7884%" y="373" width="0.0923%" height="15" fill="rgb(238,13,15)" fg:x="2114" fg:w="4"/><text x="49.0384%" y="383.50"></text></g><g><title>realloc (4 samples, 0.09%)</title><rect x="48.7884%" y="357" width="0.0923%" height="15" fill="rgb(208,107,27)" fg:x="2114" fg:w="4"/><text x="49.0384%" y="367.50"></text></g><g><title>[libc.so.6] (4 samples, 0.09%)</title><rect x="48.7884%" y="341" width="0.0923%" height="15" fill="rgb(205,136,37)" fg:x="2114" fg:w="4"/><text x="49.0384%" y="351.50"></text></g><g><title>[libc.so.6] (4 samples, 0.09%)</title><rect x="48.7884%" y="325" width="0.0923%" height="15" fill="rgb(250,205,27)" fg:x="2114" fg:w="4"/><text x="49.0384%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="48.8576%" y="309" width="0.0231%" height="15" fill="rgb(210,80,43)" fg:x="2117" fg:w="1"/><text x="49.1076%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.05%)</title><rect x="48.8807%" y="453" width="0.0462%" height="15" fill="rgb(247,160,36)" fg:x="2118" fg:w="2"/><text x="49.1307%" y="463.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_env_scope (39 samples, 0.90%)</title><rect x="48.3037%" y="517" width="0.9001%" height="15" fill="rgb(234,13,49)" fg:x="2093" fg:w="39"/><text x="48.5537%" y="527.50"></text></g><g><title>simple_lisp::interpreter::Env::push_scope (34 samples, 0.78%)</title><rect x="48.4191%" y="501" width="0.7847%" height="15" fill="rgb(234,122,0)" fg:x="2098" fg:w="34"/><text x="48.6691%" y="511.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (34 samples, 0.78%)</title><rect x="48.4191%" y="485" width="0.7847%" height="15" fill="rgb(207,146,38)" fg:x="2098" fg:w="34"/><text x="48.6691%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (34 samples, 0.78%)</title><rect x="48.4191%" y="469" width="0.7847%" height="15" fill="rgb(207,177,25)" fg:x="2098" fg:w="34"/><text x="48.6691%" y="479.50"></text></g><g><title>core::ptr::write (12 samples, 0.28%)</title><rect x="48.9268%" y="453" width="0.2769%" height="15" fill="rgb(211,178,42)" fg:x="2120" fg:w="12"/><text x="49.1768%" y="463.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (19 samples, 0.44%)</title><rect x="49.5500%" y="373" width="0.4385%" height="15" fill="rgb(230,69,54)" fg:x="2147" fg:w="19"/><text x="49.8000%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (9 samples, 0.21%)</title><rect x="49.7808%" y="357" width="0.2077%" height="15" fill="rgb(214,135,41)" fg:x="2157" fg:w="9"/><text x="50.0308%" y="367.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (23 samples, 0.53%)</title><rect x="49.5500%" y="421" width="0.5308%" height="15" fill="rgb(237,67,25)" fg:x="2147" fg:w="23"/><text x="49.8000%" y="431.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::HashableDataRef as core::hash::Hash&gt;::hash (23 samples, 0.53%)</title><rect x="49.5500%" y="405" width="0.5308%" height="15" fill="rgb(222,189,50)" fg:x="2147" fg:w="23"/><text x="49.8000%" y="415.50"></text></g><g><title>core::hash::Hasher::write_usize (23 samples, 0.53%)</title><rect x="49.5500%" y="389" width="0.5308%" height="15" fill="rgb(245,148,34)" fg:x="2147" fg:w="23"/><text x="49.8000%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (4 samples, 0.09%)</title><rect x="49.9885%" y="373" width="0.0923%" height="15" fill="rgb(222,29,6)" fg:x="2166" fg:w="4"/><text x="50.2385%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (17 samples, 0.39%)</title><rect x="50.1269%" y="389" width="0.3923%" height="15" fill="rgb(221,189,43)" fg:x="2172" fg:w="17"/><text x="50.3769%" y="399.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (21 samples, 0.48%)</title><rect x="50.0808%" y="405" width="0.4847%" height="15" fill="rgb(207,36,27)" fg:x="2170" fg:w="21"/><text x="50.3308%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.05%)</title><rect x="50.5193%" y="389" width="0.0462%" height="15" fill="rgb(217,90,24)" fg:x="2189" fg:w="2"/><text x="50.7693%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (6 samples, 0.14%)</title><rect x="50.7731%" y="373" width="0.1385%" height="15" fill="rgb(224,66,35)" fg:x="2200" fg:w="6"/><text x="51.0231%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.14%)</title><rect x="50.7731%" y="357" width="0.1385%" height="15" fill="rgb(221,13,50)" fg:x="2200" fg:w="6"/><text x="51.0231%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::reserve_rehash_inner (6 samples, 0.14%)</title><rect x="50.7731%" y="341" width="0.1385%" height="15" fill="rgb(236,68,49)" fg:x="2200" fg:w="6"/><text x="51.0231%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::resize_inner (6 samples, 0.14%)</title><rect x="50.7731%" y="325" width="0.1385%" height="15" fill="rgb(229,146,28)" fg:x="2200" fg:w="6"/><text x="51.0231%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.12%)</title><rect x="50.7962%" y="309" width="0.1154%" height="15" fill="rgb(225,31,38)" fg:x="2201" fg:w="5"/><text x="51.0462%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="50.8885%" y="293" width="0.0231%" height="15" fill="rgb(250,208,3)" fg:x="2205" fg:w="1"/><text x="51.1385%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="50.9808%" y="357" width="0.0231%" height="15" fill="rgb(246,54,23)" fg:x="2209" fg:w="1"/><text x="51.2308%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.02%)</title><rect x="51.0039%" y="357" width="0.0231%" height="15" fill="rgb(243,76,11)" fg:x="2210" fg:w="1"/><text x="51.2539%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.02%)</title><rect x="51.0039%" y="341" width="0.0231%" height="15" fill="rgb(245,21,50)" fg:x="2210" fg:w="1"/><text x="51.2539%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1 samples, 0.02%)</title><rect x="51.0270%" y="357" width="0.0231%" height="15" fill="rgb(228,9,43)" fg:x="2211" fg:w="1"/><text x="51.2770%" y="367.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (1 samples, 0.02%)</title><rect x="51.0270%" y="341" width="0.0231%" height="15" fill="rgb(208,100,47)" fg:x="2211" fg:w="1"/><text x="51.2770%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (3 samples, 0.07%)</title><rect x="51.0501%" y="357" width="0.0692%" height="15" fill="rgb(232,26,8)" fg:x="2212" fg:w="3"/><text x="51.3001%" y="367.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (3 samples, 0.07%)</title><rect x="51.0501%" y="341" width="0.0692%" height="15" fill="rgb(216,166,38)" fg:x="2212" fg:w="3"/><text x="51.3001%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (11 samples, 0.25%)</title><rect x="51.1193%" y="357" width="0.2539%" height="15" fill="rgb(251,202,51)" fg:x="2215" fg:w="11"/><text x="51.3693%" y="367.50"></text></g><g><title>hashbrown::raw::inner::h2 (19 samples, 0.44%)</title><rect x="51.3732%" y="357" width="0.4385%" height="15" fill="rgb(254,216,34)" fg:x="2226" fg:w="19"/><text x="51.6232%" y="367.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (16 samples, 0.37%)</title><rect x="51.8117%" y="357" width="0.3693%" height="15" fill="rgb(251,32,27)" fg:x="2245" fg:w="16"/><text x="52.0617%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (16 samples, 0.37%)</title><rect x="51.8117%" y="341" width="0.3693%" height="15" fill="rgb(208,127,28)" fg:x="2245" fg:w="16"/><text x="52.0617%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (73 samples, 1.68%)</title><rect x="50.5654%" y="389" width="1.6847%" height="15" fill="rgb(224,137,22)" fg:x="2191" fg:w="73"/><text x="50.8154%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (58 samples, 1.34%)</title><rect x="50.9116%" y="373" width="1.3386%" height="15" fill="rgb(254,70,32)" fg:x="2206" fg:w="58"/><text x="51.1616%" y="383.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (3 samples, 0.07%)</title><rect x="52.1809%" y="357" width="0.0692%" height="15" fill="rgb(229,75,37)" fg:x="2261" fg:w="3"/><text x="52.4309%" y="367.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (3 samples, 0.07%)</title><rect x="52.1809%" y="341" width="0.0692%" height="15" fill="rgb(252,64,23)" fg:x="2261" fg:w="3"/><text x="52.4309%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.07%)</title><rect x="52.1809%" y="325" width="0.0692%" height="15" fill="rgb(232,162,48)" fg:x="2261" fg:w="3"/><text x="52.4309%" y="335.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (1 samples, 0.02%)</title><rect x="52.2502%" y="373" width="0.0231%" height="15" fill="rgb(246,160,12)" fg:x="2264" fg:w="1"/><text x="52.5002%" y="383.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (1 samples, 0.02%)</title><rect x="52.2502%" y="357" width="0.0231%" height="15" fill="rgb(247,166,0)" fg:x="2264" fg:w="1"/><text x="52.5002%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.02%)</title><rect x="52.2502%" y="341" width="0.0231%" height="15" fill="rgb(249,219,21)" fg:x="2264" fg:w="1"/><text x="52.5002%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.02%)</title><rect x="52.2502%" y="325" width="0.0231%" height="15" fill="rgb(205,209,3)" fg:x="2264" fg:w="1"/><text x="52.5002%" y="335.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (135 samples, 3.12%)</title><rect x="49.3192%" y="469" width="3.1156%" height="15" fill="rgb(243,44,1)" fg:x="2137" fg:w="135"/><text x="49.5692%" y="479.50">ind..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (135 samples, 3.12%)</title><rect x="49.3192%" y="453" width="3.1156%" height="15" fill="rgb(206,159,16)" fg:x="2137" fg:w="135"/><text x="49.5692%" y="463.50">ind..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (133 samples, 3.07%)</title><rect x="49.3653%" y="437" width="3.0695%" height="15" fill="rgb(244,77,30)" fg:x="2139" fg:w="133"/><text x="49.6153%" y="447.50">ind..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (102 samples, 2.35%)</title><rect x="50.0808%" y="421" width="2.3540%" height="15" fill="rgb(218,69,12)" fg:x="2170" fg:w="102"/><text x="50.3308%" y="431.50">i..</text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (81 samples, 1.87%)</title><rect x="50.5654%" y="405" width="1.8694%" height="15" fill="rgb(212,87,7)" fg:x="2191" fg:w="81"/><text x="50.8154%" y="415.50">i..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (8 samples, 0.18%)</title><rect x="52.2502%" y="389" width="0.1846%" height="15" fill="rgb(245,114,25)" fg:x="2264" fg:w="8"/><text x="52.5002%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (7 samples, 0.16%)</title><rect x="52.2733%" y="373" width="0.1616%" height="15" fill="rgb(210,61,42)" fg:x="2265" fg:w="7"/><text x="52.5233%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (4 samples, 0.09%)</title><rect x="52.3425%" y="357" width="0.0923%" height="15" fill="rgb(211,52,33)" fg:x="2268" fg:w="4"/><text x="52.5925%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (4 samples, 0.09%)</title><rect x="52.3425%" y="341" width="0.0923%" height="15" fill="rgb(234,58,33)" fg:x="2268" fg:w="4"/><text x="52.5925%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.02%)</title><rect x="52.4117%" y="325" width="0.0231%" height="15" fill="rgb(220,115,36)" fg:x="2271" fg:w="1"/><text x="52.6617%" y="335.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (122 samples, 2.82%)</title><rect x="52.4348%" y="469" width="2.8156%" height="15" fill="rgb(243,153,54)" fg:x="2272" fg:w="122"/><text x="52.6848%" y="479.50">si..</text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="56.5197%" y="437" width="0.0231%" height="15" fill="rgb(251,47,18)" fg:x="2449" fg:w="1"/><text x="56.7697%" y="447.50"></text></g><g><title>[libc.so.6] (19 samples, 0.44%)</title><rect x="58.9199%" y="405" width="0.4385%" height="15" fill="rgb(242,102,42)" fg:x="2553" fg:w="19"/><text x="59.1699%" y="415.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (440 samples, 10.15%)</title><rect x="49.2269%" y="501" width="10.1546%" height="15" fill="rgb(234,31,38)" fg:x="2133" fg:w="440"/><text x="49.4769%" y="511.50">simple_lisp::in..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (437 samples, 10.09%)</title><rect x="49.2961%" y="485" width="10.0854%" height="15" fill="rgb(221,117,51)" fg:x="2136" fg:w="437"/><text x="49.5461%" y="495.50">simple_lisp::in..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (179 samples, 4.13%)</title><rect x="55.2504%" y="469" width="4.1311%" height="15" fill="rgb(212,20,18)" fg:x="2394" fg:w="179"/><text x="55.5004%" y="479.50">simpl..</text></g><g><title>alloc::alloc::alloc (125 samples, 2.88%)</title><rect x="56.4967%" y="453" width="2.8848%" height="15" fill="rgb(245,133,36)" fg:x="2448" fg:w="125"/><text x="56.7467%" y="463.50">al..</text></g><g><title>malloc (123 samples, 2.84%)</title><rect x="56.5428%" y="437" width="2.8387%" height="15" fill="rgb(212,6,19)" fg:x="2450" fg:w="123"/><text x="56.7928%" y="447.50">ma..</text></g><g><title>[libc.so.6] (99 samples, 2.28%)</title><rect x="57.0967%" y="421" width="2.2848%" height="15" fill="rgb(218,1,36)" fg:x="2474" fg:w="99"/><text x="57.3467%" y="431.50">[..</text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.3584%" y="405" width="0.0231%" height="15" fill="rgb(246,84,54)" fg:x="2572" fg:w="1"/><text x="59.6084%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="59.3584%" y="389" width="0.0231%" height="15" fill="rgb(242,110,6)" fg:x="2572" fg:w="1"/><text x="59.6084%" y="399.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_to_scope (444 samples, 10.25%)</title><rect x="49.2038%" y="517" width="10.2469%" height="15" fill="rgb(214,47,5)" fg:x="2132" fg:w="444"/><text x="49.4538%" y="527.50">simple_lisp::in..</text></g><g><title>simple_lisp::interpreter::Interpreter::push_dr_to_scope (3 samples, 0.07%)</title><rect x="59.3815%" y="501" width="0.0692%" height="15" fill="rgb(218,159,25)" fg:x="2573" fg:w="3"/><text x="59.6315%" y="511.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (3 samples, 0.07%)</title><rect x="59.3815%" y="485" width="0.0692%" height="15" fill="rgb(215,211,28)" fg:x="2573" fg:w="3"/><text x="59.6315%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (3 samples, 0.07%)</title><rect x="59.3815%" y="469" width="0.0692%" height="15" fill="rgb(238,59,32)" fg:x="2573" fg:w="3"/><text x="59.6315%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.02%)</title><rect x="59.5661%" y="501" width="0.0231%" height="15" fill="rgb(226,82,3)" fg:x="2581" fg:w="1"/><text x="59.8161%" y="511.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (1 samples, 0.02%)</title><rect x="59.5661%" y="485" width="0.0231%" height="15" fill="rgb(240,164,32)" fg:x="2581" fg:w="1"/><text x="59.8161%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (6 samples, 0.14%)</title><rect x="59.5892%" y="501" width="0.1385%" height="15" fill="rgb(232,46,7)" fg:x="2582" fg:w="6"/><text x="59.8392%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.14%)</title><rect x="59.5892%" y="485" width="0.1385%" height="15" fill="rgb(229,129,53)" fg:x="2582" fg:w="6"/><text x="59.8392%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (6 samples, 0.14%)</title><rect x="59.5892%" y="469" width="0.1385%" height="15" fill="rgb(234,188,29)" fg:x="2582" fg:w="6"/><text x="59.8392%" y="479.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.14%)</title><rect x="59.5892%" y="453" width="0.1385%" height="15" fill="rgb(246,141,4)" fg:x="2582" fg:w="6"/><text x="59.8392%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (6 samples, 0.14%)</title><rect x="59.5892%" y="437" width="0.1385%" height="15" fill="rgb(229,23,39)" fg:x="2582" fg:w="6"/><text x="59.8392%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.14%)</title><rect x="59.5892%" y="421" width="0.1385%" height="15" fill="rgb(206,12,3)" fg:x="2582" fg:w="6"/><text x="59.8392%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.14%)</title><rect x="59.5892%" y="405" width="0.1385%" height="15" fill="rgb(252,226,20)" fg:x="2582" fg:w="6"/><text x="59.8392%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.14%)</title><rect x="59.5892%" y="389" width="0.1385%" height="15" fill="rgb(216,123,35)" fg:x="2582" fg:w="6"/><text x="59.8392%" y="399.50"></text></g><g><title>cfree (6 samples, 0.14%)</title><rect x="59.5892%" y="373" width="0.1385%" height="15" fill="rgb(212,68,40)" fg:x="2582" fg:w="6"/><text x="59.8392%" y="383.50"></text></g><g><title>[libc.so.6] (5 samples, 0.12%)</title><rect x="59.6123%" y="357" width="0.1154%" height="15" fill="rgb(254,125,32)" fg:x="2583" fg:w="5"/><text x="59.8623%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.02%)</title><rect x="59.7277%" y="501" width="0.0231%" height="15" fill="rgb(253,97,22)" fg:x="2588" fg:w="1"/><text x="59.9777%" y="511.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (16 samples, 0.37%)</title><rect x="59.8892%" y="373" width="0.3693%" height="15" fill="rgb(241,101,14)" fg:x="2595" fg:w="16"/><text x="60.1392%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (7 samples, 0.16%)</title><rect x="60.0969%" y="357" width="0.1616%" height="15" fill="rgb(238,103,29)" fg:x="2604" fg:w="7"/><text x="60.3469%" y="367.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (19 samples, 0.44%)</title><rect x="59.8892%" y="421" width="0.4385%" height="15" fill="rgb(233,195,47)" fg:x="2595" fg:w="19"/><text x="60.1392%" y="431.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::HashableDataRef as core::hash::Hash&gt;::hash (19 samples, 0.44%)</title><rect x="59.8892%" y="405" width="0.4385%" height="15" fill="rgb(246,218,30)" fg:x="2595" fg:w="19"/><text x="60.1392%" y="415.50"></text></g><g><title>core::hash::Hasher::write_usize (19 samples, 0.44%)</title><rect x="59.8892%" y="389" width="0.4385%" height="15" fill="rgb(219,145,47)" fg:x="2595" fg:w="19"/><text x="60.1392%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (3 samples, 0.07%)</title><rect x="60.2585%" y="373" width="0.0692%" height="15" fill="rgb(243,12,26)" fg:x="2611" fg:w="3"/><text x="60.5085%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (13 samples, 0.30%)</title><rect x="60.3970%" y="389" width="0.3000%" height="15" fill="rgb(214,87,16)" fg:x="2617" fg:w="13"/><text x="60.6470%" y="399.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (17 samples, 0.39%)</title><rect x="60.3277%" y="405" width="0.3923%" height="15" fill="rgb(208,99,42)" fg:x="2614" fg:w="17"/><text x="60.5777%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="60.6970%" y="389" width="0.0231%" height="15" fill="rgb(253,99,2)" fg:x="2630" fg:w="1"/><text x="60.9470%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.07%)</title><rect x="60.9047%" y="357" width="0.0692%" height="15" fill="rgb(220,168,23)" fg:x="2639" fg:w="3"/><text x="61.1547%" y="367.50"></text></g><g><title>hashbrown::raw::inner::ProbeSeq::move_next (1 samples, 0.02%)</title><rect x="60.9739%" y="357" width="0.0231%" height="15" fill="rgb(242,38,24)" fg:x="2642" fg:w="1"/><text x="61.2239%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (2 samples, 0.05%)</title><rect x="60.9970%" y="357" width="0.0462%" height="15" fill="rgb(225,182,9)" fg:x="2643" fg:w="2"/><text x="61.2470%" y="367.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (1 samples, 0.02%)</title><rect x="61.0201%" y="341" width="0.0231%" height="15" fill="rgb(243,178,37)" fg:x="2644" fg:w="1"/><text x="61.2701%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (5 samples, 0.12%)</title><rect x="61.0432%" y="357" width="0.1154%" height="15" fill="rgb(232,139,19)" fg:x="2645" fg:w="5"/><text x="61.2932%" y="367.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (5 samples, 0.12%)</title><rect x="61.0432%" y="341" width="0.1154%" height="15" fill="rgb(225,201,24)" fg:x="2645" fg:w="5"/><text x="61.2932%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (4 samples, 0.09%)</title><rect x="61.1586%" y="357" width="0.0923%" height="15" fill="rgb(221,47,46)" fg:x="2650" fg:w="4"/><text x="61.4086%" y="367.50"></text></g><g><title>hashbrown::raw::inner::h2 (14 samples, 0.32%)</title><rect x="61.2509%" y="357" width="0.3231%" height="15" fill="rgb(249,23,13)" fg:x="2654" fg:w="14"/><text x="61.5009%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (50 samples, 1.15%)</title><rect x="60.7201%" y="389" width="1.1539%" height="15" fill="rgb(219,9,5)" fg:x="2631" fg:w="50"/><text x="60.9701%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (42 samples, 0.97%)</title><rect x="60.9047%" y="373" width="0.9693%" height="15" fill="rgb(254,171,16)" fg:x="2639" fg:w="42"/><text x="61.1547%" y="383.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (13 samples, 0.30%)</title><rect x="61.5740%" y="357" width="0.3000%" height="15" fill="rgb(230,171,20)" fg:x="2668" fg:w="13"/><text x="61.8240%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (13 samples, 0.30%)</title><rect x="61.5740%" y="341" width="0.3000%" height="15" fill="rgb(210,71,41)" fg:x="2668" fg:w="13"/><text x="61.8240%" y="351.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;bool&gt; for usize&gt;::from (1 samples, 0.02%)</title><rect x="61.9201%" y="357" width="0.0231%" height="15" fill="rgb(206,173,20)" fg:x="2683" fg:w="1"/><text x="62.1701%" y="367.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (96 samples, 2.22%)</title><rect x="59.8200%" y="469" width="2.2156%" height="15" fill="rgb(233,88,34)" fg:x="2592" fg:w="96"/><text x="60.0700%" y="479.50">i..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (96 samples, 2.22%)</title><rect x="59.8200%" y="453" width="2.2156%" height="15" fill="rgb(223,209,46)" fg:x="2592" fg:w="96"/><text x="60.0700%" y="463.50">i..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (95 samples, 2.19%)</title><rect x="59.8431%" y="437" width="2.1925%" height="15" fill="rgb(250,43,18)" fg:x="2593" fg:w="95"/><text x="60.0931%" y="447.50">i..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (74 samples, 1.71%)</title><rect x="60.3277%" y="421" width="1.7078%" height="15" fill="rgb(208,13,10)" fg:x="2614" fg:w="74"/><text x="60.5777%" y="431.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (57 samples, 1.32%)</title><rect x="60.7201%" y="405" width="1.3155%" height="15" fill="rgb(212,200,36)" fg:x="2631" fg:w="57"/><text x="60.9701%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (7 samples, 0.16%)</title><rect x="61.8740%" y="389" width="0.1616%" height="15" fill="rgb(225,90,30)" fg:x="2681" fg:w="7"/><text x="62.1240%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (7 samples, 0.16%)</title><rect x="61.8740%" y="373" width="0.1616%" height="15" fill="rgb(236,182,39)" fg:x="2681" fg:w="7"/><text x="62.1240%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (4 samples, 0.09%)</title><rect x="61.9432%" y="357" width="0.0923%" height="15" fill="rgb(212,144,35)" fg:x="2684" fg:w="4"/><text x="62.1932%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (4 samples, 0.09%)</title><rect x="61.9432%" y="341" width="0.0923%" height="15" fill="rgb(228,63,44)" fg:x="2684" fg:w="4"/><text x="62.1932%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (3 samples, 0.07%)</title><rect x="61.9663%" y="325" width="0.0692%" height="15" fill="rgb(228,109,6)" fg:x="2685" fg:w="3"/><text x="62.2163%" y="335.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (70 samples, 1.62%)</title><rect x="62.0355%" y="469" width="1.6155%" height="15" fill="rgb(238,117,24)" fg:x="2688" fg:w="70"/><text x="62.2855%" y="479.50"></text></g><g><title>__rdl_alloc (2 samples, 0.05%)</title><rect x="64.4819%" y="437" width="0.0462%" height="15" fill="rgb(242,26,26)" fg:x="2794" fg:w="2"/><text x="64.7319%" y="447.50"></text></g><g><title>__rust_alloc (6 samples, 0.14%)</title><rect x="64.5280%" y="437" width="0.1385%" height="15" fill="rgb(221,92,48)" fg:x="2796" fg:w="6"/><text x="64.7780%" y="447.50"></text></g><g><title>[libc.so.6] (9 samples, 0.21%)</title><rect x="65.8666%" y="405" width="0.2077%" height="15" fill="rgb(209,209,32)" fg:x="2854" fg:w="9"/><text x="66.1166%" y="415.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (275 samples, 6.35%)</title><rect x="59.7508%" y="501" width="6.3466%" height="15" fill="rgb(221,70,22)" fg:x="2589" fg:w="275"/><text x="60.0008%" y="511.50">simple_l..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (273 samples, 6.30%)</title><rect x="59.7969%" y="485" width="6.3005%" height="15" fill="rgb(248,145,5)" fg:x="2591" fg:w="273"/><text x="60.0469%" y="495.50">simple_l..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (106 samples, 2.45%)</title><rect x="63.6511%" y="469" width="2.4463%" height="15" fill="rgb(226,116,26)" fg:x="2758" fg:w="106"/><text x="63.9011%" y="479.50">si..</text></g><g><title>alloc::alloc::alloc (79 samples, 1.82%)</title><rect x="64.2742%" y="453" width="1.8232%" height="15" fill="rgb(244,5,17)" fg:x="2785" fg:w="79"/><text x="64.5242%" y="463.50">a..</text></g><g><title>malloc (62 samples, 1.43%)</title><rect x="64.6665%" y="437" width="1.4309%" height="15" fill="rgb(252,159,33)" fg:x="2802" fg:w="62"/><text x="64.9165%" y="447.50"></text></g><g><title>[libc.so.6] (49 samples, 1.13%)</title><rect x="64.9665%" y="421" width="1.1309%" height="15" fill="rgb(206,71,0)" fg:x="2815" fg:w="49"/><text x="65.2165%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0743%" y="405" width="0.0231%" height="15" fill="rgb(233,118,54)" fg:x="2863" fg:w="1"/><text x="66.3243%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="66.0743%" y="389" width="0.0231%" height="15" fill="rgb(234,83,48)" fg:x="2863" fg:w="1"/><text x="66.3243%" y="399.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (2 samples, 0.05%)</title><rect x="66.1666%" y="485" width="0.0462%" height="15" fill="rgb(228,3,54)" fg:x="2867" fg:w="2"/><text x="66.4166%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.05%)</title><rect x="66.1666%" y="469" width="0.0462%" height="15" fill="rgb(226,155,13)" fg:x="2867" fg:w="2"/><text x="66.4166%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.05%)</title><rect x="66.1666%" y="453" width="0.0462%" height="15" fill="rgb(241,28,37)" fg:x="2867" fg:w="2"/><text x="66.4166%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.05%)</title><rect x="66.1666%" y="437" width="0.0462%" height="15" fill="rgb(233,93,10)" fg:x="2867" fg:w="2"/><text x="66.4166%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.12%)</title><rect x="66.3051%" y="453" width="0.1154%" height="15" fill="rgb(225,113,19)" fg:x="2873" fg:w="5"/><text x="66.5551%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.12%)</title><rect x="66.3051%" y="437" width="0.1154%" height="15" fill="rgb(241,2,18)" fg:x="2873" fg:w="5"/><text x="66.5551%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.12%)</title><rect x="66.3051%" y="421" width="0.1154%" height="15" fill="rgb(228,207,21)" fg:x="2873" fg:w="5"/><text x="66.5551%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.02%)</title><rect x="66.4205%" y="453" width="0.0231%" height="15" fill="rgb(213,211,35)" fg:x="2878" fg:w="1"/><text x="66.6705%" y="463.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (7 samples, 0.16%)</title><rect x="66.3051%" y="469" width="0.1616%" height="15" fill="rgb(209,83,10)" fg:x="2873" fg:w="7"/><text x="66.5551%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.02%)</title><rect x="66.4436%" y="453" width="0.0231%" height="15" fill="rgb(209,164,1)" fg:x="2879" fg:w="1"/><text x="66.6936%" y="463.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="66.4667%" y="469" width="0.0231%" height="15" fill="rgb(213,184,43)" fg:x="2880" fg:w="1"/><text x="66.7167%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="66.4667%" y="453" width="0.0231%" height="15" fill="rgb(231,61,34)" fg:x="2880" fg:w="1"/><text x="66.7167%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.02%)</title><rect x="66.4667%" y="437" width="0.0231%" height="15" fill="rgb(235,75,3)" fg:x="2880" fg:w="1"/><text x="66.7167%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.02%)</title><rect x="66.4667%" y="421" width="0.0231%" height="15" fill="rgb(220,106,47)" fg:x="2880" fg:w="1"/><text x="66.7167%" y="431.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (37 samples, 0.85%)</title><rect x="66.4897%" y="469" width="0.8539%" height="15" fill="rgb(210,196,33)" fg:x="2881" fg:w="37"/><text x="66.7397%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (37 samples, 0.85%)</title><rect x="66.4897%" y="453" width="0.8539%" height="15" fill="rgb(229,154,42)" fg:x="2881" fg:w="37"/><text x="66.7397%" y="463.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::external (1 samples, 0.02%)</title><rect x="67.3436%" y="469" width="0.0231%" height="15" fill="rgb(228,114,26)" fg:x="2918" fg:w="1"/><text x="67.5936%" y="479.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::set_external (1 samples, 0.02%)</title><rect x="67.3436%" y="453" width="0.0231%" height="15" fill="rgb(208,144,1)" fg:x="2918" fg:w="1"/><text x="67.5936%" y="463.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.02%)</title><rect x="67.3436%" y="437" width="0.0231%" height="15" fill="rgb(239,112,37)" fg:x="2918" fg:w="1"/><text x="67.5936%" y="447.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.02%)</title><rect x="67.3436%" y="421" width="0.0231%" height="15" fill="rgb(210,96,50)" fg:x="2918" fg:w="1"/><text x="67.5936%" y="431.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.02%)</title><rect x="67.3436%" y="405" width="0.0231%" height="15" fill="rgb(222,178,2)" fg:x="2918" fg:w="1"/><text x="67.5936%" y="415.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="67.3667%" y="309" width="0.0231%" height="15" fill="rgb(226,74,18)" fg:x="2919" fg:w="1"/><text x="67.6167%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once (9 samples, 0.21%)</title><rect x="67.3667%" y="453" width="0.2077%" height="15" fill="rgb(225,67,54)" fg:x="2919" fg:w="9"/><text x="67.6167%" y="463.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::new (9 samples, 0.21%)</title><rect x="67.3667%" y="437" width="0.2077%" height="15" fill="rgb(251,92,32)" fg:x="2919" fg:w="9"/><text x="67.6167%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (9 samples, 0.21%)</title><rect x="67.3667%" y="421" width="0.2077%" height="15" fill="rgb(228,149,22)" fg:x="2919" fg:w="9"/><text x="67.6167%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.21%)</title><rect x="67.3667%" y="405" width="0.2077%" height="15" fill="rgb(243,54,13)" fg:x="2919" fg:w="9"/><text x="67.6167%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.21%)</title><rect x="67.3667%" y="389" width="0.2077%" height="15" fill="rgb(243,180,28)" fg:x="2919" fg:w="9"/><text x="67.6167%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.21%)</title><rect x="67.3667%" y="373" width="0.2077%" height="15" fill="rgb(208,167,24)" fg:x="2919" fg:w="9"/><text x="67.6167%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.21%)</title><rect x="67.3667%" y="357" width="0.2077%" height="15" fill="rgb(245,73,45)" fg:x="2919" fg:w="9"/><text x="67.6167%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.21%)</title><rect x="67.3667%" y="341" width="0.2077%" height="15" fill="rgb(237,203,48)" fg:x="2919" fg:w="9"/><text x="67.6167%" y="351.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.21%)</title><rect x="67.3667%" y="325" width="0.2077%" height="15" fill="rgb(211,197,16)" fg:x="2919" fg:w="9"/><text x="67.6167%" y="335.50"></text></g><g><title>malloc (8 samples, 0.18%)</title><rect x="67.3898%" y="309" width="0.1846%" height="15" fill="rgb(243,99,51)" fg:x="2920" fg:w="8"/><text x="67.6398%" y="319.50"></text></g><g><title>[libc.so.6] (4 samples, 0.09%)</title><rect x="67.4821%" y="293" width="0.0923%" height="15" fill="rgb(215,123,29)" fg:x="2924" fg:w="4"/><text x="67.7321%" y="303.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (2 samples, 0.05%)</title><rect x="67.5744%" y="453" width="0.0462%" height="15" fill="rgb(239,186,37)" fg:x="2928" fg:w="2"/><text x="67.8244%" y="463.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (2 samples, 0.05%)</title><rect x="67.5744%" y="437" width="0.0462%" height="15" fill="rgb(252,136,39)" fg:x="2928" fg:w="2"/><text x="67.8244%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.07%)</title><rect x="67.7360%" y="357" width="0.0692%" height="15" fill="rgb(223,213,32)" fg:x="2935" fg:w="3"/><text x="67.9860%" y="367.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (3 samples, 0.07%)</title><rect x="67.7360%" y="341" width="0.0692%" height="15" fill="rgb(233,115,5)" fg:x="2935" fg:w="3"/><text x="67.9860%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (5 samples, 0.12%)</title><rect x="67.7129%" y="373" width="0.1154%" height="15" fill="rgb(207,226,44)" fg:x="2934" fg:w="5"/><text x="67.9629%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.02%)</title><rect x="67.8052%" y="357" width="0.0231%" height="15" fill="rgb(208,126,0)" fg:x="2938" fg:w="1"/><text x="68.0552%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="67.8052%" y="341" width="0.0231%" height="15" fill="rgb(244,66,21)" fg:x="2938" fg:w="1"/><text x="68.0552%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (2 samples, 0.05%)</title><rect x="67.8283%" y="373" width="0.0462%" height="15" fill="rgb(222,97,12)" fg:x="2939" fg:w="2"/><text x="68.0783%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (2 samples, 0.05%)</title><rect x="67.8283%" y="357" width="0.0462%" height="15" fill="rgb(219,213,19)" fg:x="2939" fg:w="2"/><text x="68.0783%" y="367.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.02%)</title><rect x="67.8514%" y="341" width="0.0231%" height="15" fill="rgb(252,169,30)" fg:x="2940" fg:w="1"/><text x="68.1014%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (23 samples, 0.53%)</title><rect x="67.3667%" y="469" width="0.5308%" height="15" fill="rgb(206,32,51)" fg:x="2919" fg:w="23"/><text x="67.6167%" y="479.50"></text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (12 samples, 0.28%)</title><rect x="67.6206%" y="453" width="0.2769%" height="15" fill="rgb(250,172,42)" fg:x="2930" fg:w="12"/><text x="67.8706%" y="463.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (12 samples, 0.28%)</title><rect x="67.6206%" y="437" width="0.2769%" height="15" fill="rgb(209,34,43)" fg:x="2930" fg:w="12"/><text x="67.8706%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (12 samples, 0.28%)</title><rect x="67.6206%" y="421" width="0.2769%" height="15" fill="rgb(223,11,35)" fg:x="2930" fg:w="12"/><text x="67.8706%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (12 samples, 0.28%)</title><rect x="67.6206%" y="405" width="0.2769%" height="15" fill="rgb(251,219,26)" fg:x="2930" fg:w="12"/><text x="67.8706%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (12 samples, 0.28%)</title><rect x="67.6206%" y="389" width="0.2769%" height="15" fill="rgb(231,119,3)" fg:x="2930" fg:w="12"/><text x="67.8706%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.02%)</title><rect x="67.8745%" y="373" width="0.0231%" height="15" fill="rgb(216,97,11)" fg:x="2941" fg:w="1"/><text x="68.1245%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.05%)</title><rect x="68.3360%" y="373" width="0.0462%" height="15" fill="rgb(223,59,9)" fg:x="2961" fg:w="2"/><text x="68.5860%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.05%)</title><rect x="68.3360%" y="357" width="0.0462%" height="15" fill="rgb(233,93,31)" fg:x="2961" fg:w="2"/><text x="68.5860%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="68.4053%" y="357" width="0.0231%" height="15" fill="rgb(239,81,33)" fg:x="2964" fg:w="1"/><text x="68.6553%" y="367.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="68.4053%" y="341" width="0.0231%" height="15" fill="rgb(213,120,34)" fg:x="2964" fg:w="1"/><text x="68.6553%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (1 samples, 0.02%)</title><rect x="68.4053%" y="325" width="0.0231%" height="15" fill="rgb(243,49,53)" fg:x="2964" fg:w="1"/><text x="68.6553%" y="335.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (4 samples, 0.09%)</title><rect x="68.4283%" y="309" width="0.0923%" height="15" fill="rgb(247,216,33)" fg:x="2965" fg:w="4"/><text x="68.6783%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (5 samples, 0.12%)</title><rect x="68.4283%" y="325" width="0.1154%" height="15" fill="rgb(226,26,14)" fg:x="2965" fg:w="5"/><text x="68.6783%" y="335.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.02%)</title><rect x="68.5207%" y="309" width="0.0231%" height="15" fill="rgb(215,49,53)" fg:x="2969" fg:w="1"/><text x="68.7707%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.02%)</title><rect x="68.5207%" y="293" width="0.0231%" height="15" fill="rgb(245,162,40)" fg:x="2969" fg:w="1"/><text x="68.7707%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.02%)</title><rect x="68.5207%" y="277" width="0.0231%" height="15" fill="rgb(229,68,17)" fg:x="2969" fg:w="1"/><text x="68.7707%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.02%)</title><rect x="68.5207%" y="261" width="0.0231%" height="15" fill="rgb(213,182,10)" fg:x="2969" fg:w="1"/><text x="68.7707%" y="271.50"></text></g><g><title>malloc (1 samples, 0.02%)</title><rect x="68.5207%" y="245" width="0.0231%" height="15" fill="rgb(245,125,30)" fg:x="2969" fg:w="1"/><text x="68.7707%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (16 samples, 0.37%)</title><rect x="68.2206%" y="437" width="0.3693%" height="15" fill="rgb(232,202,2)" fg:x="2956" fg:w="16"/><text x="68.4706%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (16 samples, 0.37%)</title><rect x="68.2206%" y="421" width="0.3693%" height="15" fill="rgb(237,140,51)" fg:x="2956" fg:w="16"/><text x="68.4706%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (16 samples, 0.37%)</title><rect x="68.2206%" y="405" width="0.3693%" height="15" fill="rgb(236,157,25)" fg:x="2956" fg:w="16"/><text x="68.4706%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (15 samples, 0.35%)</title><rect x="68.2437%" y="389" width="0.3462%" height="15" fill="rgb(219,209,0)" fg:x="2957" fg:w="15"/><text x="68.4937%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (9 samples, 0.21%)</title><rect x="68.3822%" y="373" width="0.2077%" height="15" fill="rgb(240,116,54)" fg:x="2963" fg:w="9"/><text x="68.6322%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (7 samples, 0.16%)</title><rect x="68.4283%" y="357" width="0.1616%" height="15" fill="rgb(216,10,36)" fg:x="2965" fg:w="7"/><text x="68.6783%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (7 samples, 0.16%)</title><rect x="68.4283%" y="341" width="0.1616%" height="15" fill="rgb(222,72,44)" fg:x="2965" fg:w="7"/><text x="68.6783%" y="351.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (2 samples, 0.05%)</title><rect x="68.5437%" y="325" width="0.0462%" height="15" fill="rgb(232,159,9)" fg:x="2970" fg:w="2"/><text x="68.7937%" y="335.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (7 samples, 0.16%)</title><rect x="68.5899%" y="357" width="0.1616%" height="15" fill="rgb(210,39,32)" fg:x="2972" fg:w="7"/><text x="68.8399%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (2 samples, 0.05%)</title><rect x="68.7053%" y="341" width="0.0462%" height="15" fill="rgb(216,194,45)" fg:x="2977" fg:w="2"/><text x="68.9553%" y="351.50"></text></g><g><title>hashbrown::map::make_hash (14 samples, 0.32%)</title><rect x="68.5899%" y="437" width="0.3231%" height="15" fill="rgb(218,18,35)" fg:x="2972" fg:w="14"/><text x="68.8399%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (14 samples, 0.32%)</title><rect x="68.5899%" y="421" width="0.3231%" height="15" fill="rgb(207,83,51)" fg:x="2972" fg:w="14"/><text x="68.8399%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (14 samples, 0.32%)</title><rect x="68.5899%" y="405" width="0.3231%" height="15" fill="rgb(225,63,43)" fg:x="2972" fg:w="14"/><text x="68.8399%" y="415.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (14 samples, 0.32%)</title><rect x="68.5899%" y="389" width="0.3231%" height="15" fill="rgb(207,57,36)" fg:x="2972" fg:w="14"/><text x="68.8399%" y="399.50"></text></g><g><title>core::hash::Hasher::write_usize (14 samples, 0.32%)</title><rect x="68.5899%" y="373" width="0.3231%" height="15" fill="rgb(216,99,33)" fg:x="2972" fg:w="14"/><text x="68.8399%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (7 samples, 0.16%)</title><rect x="68.7514%" y="357" width="0.1616%" height="15" fill="rgb(225,42,16)" fg:x="2979" fg:w="7"/><text x="69.0014%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.12%)</title><rect x="69.1438%" y="405" width="0.1154%" height="15" fill="rgb(220,201,45)" fg:x="2996" fg:w="5"/><text x="69.3938%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="69.2361%" y="389" width="0.0231%" height="15" fill="rgb(225,33,4)" fg:x="3000" fg:w="1"/><text x="69.4861%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.05%)</title><rect x="69.2592%" y="405" width="0.0462%" height="15" fill="rgb(224,33,50)" fg:x="3001" fg:w="2"/><text x="69.5092%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.05%)</title><rect x="69.2592%" y="389" width="0.0462%" height="15" fill="rgb(246,198,51)" fg:x="3001" fg:w="2"/><text x="69.5092%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.05%)</title><rect x="69.2592%" y="373" width="0.0462%" height="15" fill="rgb(205,22,4)" fg:x="3001" fg:w="2"/><text x="69.5092%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.05%)</title><rect x="69.2592%" y="357" width="0.0462%" height="15" fill="rgb(206,3,8)" fg:x="3001" fg:w="2"/><text x="69.5092%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.05%)</title><rect x="69.2592%" y="341" width="0.0462%" height="15" fill="rgb(251,23,15)" fg:x="3001" fg:w="2"/><text x="69.5092%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (7 samples, 0.16%)</title><rect x="69.3053%" y="405" width="0.1616%" height="15" fill="rgb(252,88,28)" fg:x="3003" fg:w="7"/><text x="69.5553%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 0.16%)</title><rect x="69.4669%" y="405" width="0.1616%" height="15" fill="rgb(212,127,14)" fg:x="3010" fg:w="7"/><text x="69.7169%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.16%)</title><rect x="69.4669%" y="389" width="0.1616%" height="15" fill="rgb(247,145,37)" fg:x="3010" fg:w="7"/><text x="69.7169%" y="399.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (71 samples, 1.64%)</title><rect x="68.0129%" y="453" width="1.6386%" height="15" fill="rgb(209,117,53)" fg:x="2947" fg:w="71"/><text x="68.2629%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (32 samples, 0.74%)</title><rect x="68.9130%" y="437" width="0.7385%" height="15" fill="rgb(212,90,42)" fg:x="2986" fg:w="32"/><text x="69.1630%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (31 samples, 0.72%)</title><rect x="68.9361%" y="421" width="0.7154%" height="15" fill="rgb(218,164,37)" fg:x="2987" fg:w="31"/><text x="69.1861%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.02%)</title><rect x="69.6284%" y="405" width="0.0231%" height="15" fill="rgb(246,65,34)" fg:x="3017" fg:w="1"/><text x="69.8784%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.02%)</title><rect x="69.6284%" y="389" width="0.0231%" height="15" fill="rgb(231,100,33)" fg:x="3017" fg:w="1"/><text x="69.8784%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="69.6284%" y="373" width="0.0231%" height="15" fill="rgb(228,126,14)" fg:x="3017" fg:w="1"/><text x="69.8784%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (79 samples, 1.82%)</title><rect x="67.8975%" y="469" width="1.8232%" height="15" fill="rgb(215,173,21)" fg:x="2942" fg:w="79"/><text x="68.1475%" y="479.50">s..</text></g><g><title>std::collections::hash::map::map_entry (3 samples, 0.07%)</title><rect x="69.6515%" y="453" width="0.0692%" height="15" fill="rgb(210,6,40)" fg:x="3018" fg:w="3"/><text x="69.9015%" y="463.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (6 samples, 0.14%)</title><rect x="69.8823%" y="325" width="0.1385%" height="15" fill="rgb(212,48,18)" fg:x="3028" fg:w="6"/><text x="70.1323%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (2 samples, 0.05%)</title><rect x="69.9746%" y="309" width="0.0462%" height="15" fill="rgb(230,214,11)" fg:x="3032" fg:w="2"/><text x="70.2246%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.16%)</title><rect x="69.8823%" y="405" width="0.1616%" height="15" fill="rgb(254,105,39)" fg:x="3028" fg:w="7"/><text x="70.1323%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.16%)</title><rect x="69.8823%" y="389" width="0.1616%" height="15" fill="rgb(245,158,5)" fg:x="3028" fg:w="7"/><text x="70.1323%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.16%)</title><rect x="69.8823%" y="373" width="0.1616%" height="15" fill="rgb(249,208,11)" fg:x="3028" fg:w="7"/><text x="70.1323%" y="383.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (7 samples, 0.16%)</title><rect x="69.8823%" y="357" width="0.1616%" height="15" fill="rgb(210,39,28)" fg:x="3028" fg:w="7"/><text x="70.1323%" y="367.50"></text></g><g><title>core::hash::Hasher::write_usize (7 samples, 0.16%)</title><rect x="69.8823%" y="341" width="0.1616%" height="15" fill="rgb(211,56,53)" fg:x="3028" fg:w="7"/><text x="70.1323%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.02%)</title><rect x="70.0208%" y="325" width="0.0231%" height="15" fill="rgb(226,201,30)" fg:x="3034" fg:w="1"/><text x="70.2708%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.30%)</title><rect x="70.2054%" y="357" width="0.3000%" height="15" fill="rgb(239,101,34)" fg:x="3042" fg:w="13"/><text x="70.4554%" y="367.50"></text></g><g><title>hashbrown::raw::h2 (8 samples, 0.18%)</title><rect x="70.5054%" y="357" width="0.1846%" height="15" fill="rgb(226,209,5)" fg:x="3055" fg:w="8"/><text x="70.7554%" y="367.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (47 samples, 1.08%)</title><rect x="69.7207%" y="469" width="1.0847%" height="15" fill="rgb(250,105,47)" fg:x="3021" fg:w="47"/><text x="69.9707%" y="479.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (47 samples, 1.08%)</title><rect x="69.7207%" y="453" width="1.0847%" height="15" fill="rgb(230,72,3)" fg:x="3021" fg:w="47"/><text x="69.9707%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (47 samples, 1.08%)</title><rect x="69.7207%" y="437" width="1.0847%" height="15" fill="rgb(232,218,39)" fg:x="3021" fg:w="47"/><text x="69.9707%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (45 samples, 1.04%)</title><rect x="69.7669%" y="421" width="1.0385%" height="15" fill="rgb(248,166,6)" fg:x="3023" fg:w="45"/><text x="70.0169%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (33 samples, 0.76%)</title><rect x="70.0438%" y="405" width="0.7616%" height="15" fill="rgb(247,89,20)" fg:x="3035" fg:w="33"/><text x="70.2938%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (33 samples, 0.76%)</title><rect x="70.0438%" y="389" width="0.7616%" height="15" fill="rgb(248,130,54)" fg:x="3035" fg:w="33"/><text x="70.2938%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (33 samples, 0.76%)</title><rect x="70.0438%" y="373" width="0.7616%" height="15" fill="rgb(234,196,4)" fg:x="3035" fg:w="33"/><text x="70.2938%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 0.12%)</title><rect x="70.6901%" y="357" width="0.1154%" height="15" fill="rgb(250,143,31)" fg:x="3063" fg:w="5"/><text x="70.9401%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.12%)</title><rect x="70.6901%" y="341" width="0.1154%" height="15" fill="rgb(211,110,34)" fg:x="3063" fg:w="5"/><text x="70.9401%" y="351.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (4 samples, 0.09%)</title><rect x="70.8516%" y="341" width="0.0923%" height="15" fill="rgb(215,124,48)" fg:x="3070" fg:w="4"/><text x="71.1016%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.02%)</title><rect x="70.9208%" y="325" width="0.0231%" height="15" fill="rgb(216,46,13)" fg:x="3073" fg:w="1"/><text x="71.1708%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (7 samples, 0.16%)</title><rect x="70.8516%" y="421" width="0.1616%" height="15" fill="rgb(205,184,25)" fg:x="3070" fg:w="7"/><text x="71.1016%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.16%)</title><rect x="70.8516%" y="405" width="0.1616%" height="15" fill="rgb(228,1,10)" fg:x="3070" fg:w="7"/><text x="71.1016%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.16%)</title><rect x="70.8516%" y="389" width="0.1616%" height="15" fill="rgb(213,116,27)" fg:x="3070" fg:w="7"/><text x="71.1016%" y="399.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (7 samples, 0.16%)</title><rect x="70.8516%" y="373" width="0.1616%" height="15" fill="rgb(241,95,50)" fg:x="3070" fg:w="7"/><text x="71.1016%" y="383.50"></text></g><g><title>core::hash::Hasher::write_usize (7 samples, 0.16%)</title><rect x="70.8516%" y="357" width="0.1616%" height="15" fill="rgb(238,48,32)" fg:x="3070" fg:w="7"/><text x="71.1016%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (3 samples, 0.07%)</title><rect x="70.9439%" y="341" width="0.0692%" height="15" fill="rgb(235,113,49)" fg:x="3074" fg:w="3"/><text x="71.1939%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.02%)</title><rect x="71.0824%" y="357" width="0.0231%" height="15" fill="rgb(205,127,43)" fg:x="3080" fg:w="1"/><text x="71.3324%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.02%)</title><rect x="71.0824%" y="341" width="0.0231%" height="15" fill="rgb(250,162,2)" fg:x="3080" fg:w="1"/><text x="71.3324%" y="351.50"></text></g><g><title>core::mem::swap (2 samples, 0.05%)</title><rect x="71.1285%" y="341" width="0.0462%" height="15" fill="rgb(220,13,41)" fg:x="3082" fg:w="2"/><text x="71.3785%" y="351.50"></text></g><g><title>core::mem::swap_simple (2 samples, 0.05%)</title><rect x="71.1285%" y="325" width="0.0462%" height="15" fill="rgb(249,221,25)" fg:x="3082" fg:w="2"/><text x="71.3785%" y="335.50"></text></g><g><title>core::ptr::read (2 samples, 0.05%)</title><rect x="71.1285%" y="309" width="0.0462%" height="15" fill="rgb(215,208,19)" fg:x="3082" fg:w="2"/><text x="71.3785%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.02%)</title><rect x="71.1747%" y="341" width="0.0231%" height="15" fill="rgb(236,175,2)" fg:x="3084" fg:w="1"/><text x="71.4247%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.02%)</title><rect x="71.1747%" y="325" width="0.0231%" height="15" fill="rgb(241,52,2)" fg:x="3084" fg:w="1"/><text x="71.4247%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.02%)</title><rect x="71.1747%" y="309" width="0.0231%" height="15" fill="rgb(248,140,14)" fg:x="3084" fg:w="1"/><text x="71.4247%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (7 samples, 0.16%)</title><rect x="71.1978%" y="309" width="0.1616%" height="15" fill="rgb(253,22,42)" fg:x="3085" fg:w="7"/><text x="71.4478%" y="319.50"></text></g><g><title>core::intrinsics::write_bytes (7 samples, 0.16%)</title><rect x="71.1978%" y="293" width="0.1616%" height="15" fill="rgb(234,61,47)" fg:x="3085" fg:w="7"/><text x="71.4478%" y="303.50"></text></g><g><title>[libc.so.6] (7 samples, 0.16%)</title><rect x="71.1978%" y="277" width="0.1616%" height="15" fill="rgb(208,226,15)" fg:x="3085" fg:w="7"/><text x="71.4478%" y="287.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (2 samples, 0.05%)</title><rect x="71.3593%" y="293" width="0.0462%" height="15" fill="rgb(217,221,4)" fg:x="3092" fg:w="2"/><text x="71.6093%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.05%)</title><rect x="71.3593%" y="277" width="0.0462%" height="15" fill="rgb(212,174,34)" fg:x="3092" fg:w="2"/><text x="71.6093%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.05%)</title><rect x="71.3593%" y="261" width="0.0462%" height="15" fill="rgb(253,83,4)" fg:x="3092" fg:w="2"/><text x="71.6093%" y="271.50"></text></g><g><title>__rdl_alloc (2 samples, 0.05%)</title><rect x="71.4517%" y="229" width="0.0462%" height="15" fill="rgb(250,195,49)" fg:x="3096" fg:w="2"/><text x="71.7017%" y="239.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="71.4978%" y="229" width="0.0231%" height="15" fill="rgb(241,192,25)" fg:x="3098" fg:w="1"/><text x="71.7478%" y="239.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (14 samples, 0.32%)</title><rect x="71.4055%" y="293" width="0.3231%" height="15" fill="rgb(208,124,10)" fg:x="3094" fg:w="14"/><text x="71.6555%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.32%)</title><rect x="71.4055%" y="277" width="0.3231%" height="15" fill="rgb(222,33,0)" fg:x="3094" fg:w="14"/><text x="71.6555%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.32%)</title><rect x="71.4055%" y="261" width="0.3231%" height="15" fill="rgb(234,209,28)" fg:x="3094" fg:w="14"/><text x="71.6555%" y="271.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.32%)</title><rect x="71.4055%" y="245" width="0.3231%" height="15" fill="rgb(224,11,23)" fg:x="3094" fg:w="14"/><text x="71.6555%" y="255.50"></text></g><g><title>malloc (9 samples, 0.21%)</title><rect x="71.5209%" y="229" width="0.2077%" height="15" fill="rgb(232,99,1)" fg:x="3099" fg:w="9"/><text x="71.7709%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="71.7055%" y="213" width="0.0231%" height="15" fill="rgb(237,95,45)" fg:x="3107" fg:w="1"/><text x="71.9555%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (17 samples, 0.39%)</title><rect x="71.3593%" y="309" width="0.3923%" height="15" fill="rgb(208,109,11)" fg:x="3092" fg:w="17"/><text x="71.6093%" y="319.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.02%)</title><rect x="71.7286%" y="293" width="0.0231%" height="15" fill="rgb(216,190,48)" fg:x="3108" fg:w="1"/><text x="71.9786%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (30 samples, 0.69%)</title><rect x="71.1055%" y="357" width="0.6924%" height="15" fill="rgb(251,171,36)" fg:x="3081" fg:w="30"/><text x="71.3555%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (26 samples, 0.60%)</title><rect x="71.1978%" y="341" width="0.6000%" height="15" fill="rgb(230,62,22)" fg:x="3085" fg:w="26"/><text x="71.4478%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (26 samples, 0.60%)</title><rect x="71.1978%" y="325" width="0.6000%" height="15" fill="rgb(225,114,35)" fg:x="3085" fg:w="26"/><text x="71.4478%" y="335.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (2 samples, 0.05%)</title><rect x="71.7517%" y="309" width="0.0462%" height="15" fill="rgb(215,118,42)" fg:x="3109" fg:w="2"/><text x="72.0017%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (35 samples, 0.81%)</title><rect x="71.0132%" y="405" width="0.8078%" height="15" fill="rgb(243,119,21)" fg:x="3077" fg:w="35"/><text x="71.2632%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (34 samples, 0.78%)</title><rect x="71.0362%" y="389" width="0.7847%" height="15" fill="rgb(252,177,53)" fg:x="3078" fg:w="34"/><text x="71.2862%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (33 samples, 0.76%)</title><rect x="71.0593%" y="373" width="0.7616%" height="15" fill="rgb(237,209,29)" fg:x="3079" fg:w="33"/><text x="71.3093%" y="383.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.02%)</title><rect x="71.7978%" y="357" width="0.0231%" height="15" fill="rgb(212,65,23)" fg:x="3111" fg:w="1"/><text x="72.0478%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.32%)</title><rect x="71.8209%" y="389" width="0.3231%" height="15" fill="rgb(230,222,46)" fg:x="3112" fg:w="14"/><text x="72.0709%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (14 samples, 0.32%)</title><rect x="71.8209%" y="373" width="0.3231%" height="15" fill="rgb(215,135,32)" fg:x="3112" fg:w="14"/><text x="72.0709%" y="383.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.07%)</title><rect x="72.1440%" y="389" width="0.0692%" height="15" fill="rgb(246,101,22)" fg:x="3126" fg:w="3"/><text x="72.3940%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (36 samples, 0.83%)</title><rect x="72.2132%" y="389" width="0.8308%" height="15" fill="rgb(206,107,13)" fg:x="3129" fg:w="36"/><text x="72.4632%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (36 samples, 0.83%)</title><rect x="72.2132%" y="373" width="0.8308%" height="15" fill="rgb(250,100,44)" fg:x="3129" fg:w="36"/><text x="72.4632%" y="383.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::set_func_args (591 samples, 13.64%)</title><rect x="59.4507%" y="517" width="13.6395%" height="15" fill="rgb(231,147,38)" fg:x="2576" fg:w="591"/><text x="59.7007%" y="527.50">simple_lisp::interpre..</text></g><g><title>simple_lisp::interpreter::Interpreter::define_var (303 samples, 6.99%)</title><rect x="66.0974%" y="501" width="6.9928%" height="15" fill="rgb(229,8,40)" fg:x="2864" fg:w="303"/><text x="66.3474%" y="511.50">simple_li..</text></g><g><title>simple_lisp::interpreter::Env::insert (298 samples, 6.88%)</title><rect x="66.2128%" y="485" width="6.8775%" height="15" fill="rgb(221,135,30)" fg:x="2869" fg:w="298"/><text x="66.4628%" y="495.50">simple_li..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (99 samples, 2.28%)</title><rect x="70.8054%" y="469" width="2.2848%" height="15" fill="rgb(249,193,18)" fg:x="3068" fg:w="99"/><text x="71.0554%" y="479.50">s..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (99 samples, 2.28%)</title><rect x="70.8054%" y="453" width="2.2848%" height="15" fill="rgb(209,133,39)" fg:x="3068" fg:w="99"/><text x="71.0554%" y="463.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (98 samples, 2.26%)</title><rect x="70.8285%" y="437" width="2.2617%" height="15" fill="rgb(232,100,14)" fg:x="3069" fg:w="98"/><text x="71.0785%" y="447.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (90 samples, 2.08%)</title><rect x="71.0132%" y="421" width="2.0771%" height="15" fill="rgb(224,185,1)" fg:x="3077" fg:w="90"/><text x="71.2632%" y="431.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (55 samples, 1.27%)</title><rect x="71.8209%" y="405" width="1.2693%" height="15" fill="rgb(223,139,8)" fg:x="3112" fg:w="55"/><text x="72.0709%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2 samples, 0.05%)</title><rect x="73.0441%" y="389" width="0.0462%" height="15" fill="rgb(232,213,38)" fg:x="3165" fg:w="2"/><text x="73.2941%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.05%)</title><rect x="73.0441%" y="373" width="0.0462%" height="15" fill="rgb(207,94,22)" fg:x="3165" fg:w="2"/><text x="73.2941%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.05%)</title><rect x="73.0441%" y="357" width="0.0462%" height="15" fill="rgb(219,183,54)" fg:x="3165" fg:w="2"/><text x="73.2941%" y="367.50"></text></g><g><title>simple_lisp::interpreter::ast::FnSignature::match_arg_count (2 samples, 0.05%)</title><rect x="73.0902%" y="517" width="0.0462%" height="15" fill="rgb(216,185,54)" fg:x="3167" fg:w="2"/><text x="73.3402%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (10 samples, 0.23%)</title><rect x="73.1364%" y="501" width="0.2308%" height="15" fill="rgb(254,217,39)" fg:x="3169" fg:w="10"/><text x="73.3864%" y="511.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as indexmap::Entries&gt;::as_entries (5 samples, 0.12%)</title><rect x="73.4133%" y="469" width="0.1154%" height="15" fill="rgb(240,178,23)" fg:x="3181" fg:w="5"/><text x="73.6633%" y="479.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as indexmap::Entries&gt;::as_entries (5 samples, 0.12%)</title><rect x="73.4133%" y="453" width="0.1154%" height="15" fill="rgb(218,11,47)" fg:x="3181" fg:w="5"/><text x="73.6633%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.12%)</title><rect x="73.4133%" y="437" width="0.1154%" height="15" fill="rgb(218,51,51)" fg:x="3181" fg:w="5"/><text x="73.6633%" y="447.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (47 samples, 1.08%)</title><rect x="73.5287%" y="421" width="1.0847%" height="15" fill="rgb(238,126,27)" fg:x="3186" fg:w="47"/><text x="73.7787%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (31 samples, 0.72%)</title><rect x="73.8980%" y="405" width="0.7154%" height="15" fill="rgb(249,202,22)" fg:x="3202" fg:w="31"/><text x="74.1480%" y="415.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (50 samples, 1.15%)</title><rect x="73.5287%" y="469" width="1.1539%" height="15" fill="rgb(254,195,49)" fg:x="3186" fg:w="50"/><text x="73.7787%" y="479.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::InstructionId as core::hash::Hash&gt;::hash (50 samples, 1.15%)</title><rect x="73.5287%" y="453" width="1.1539%" height="15" fill="rgb(208,123,14)" fg:x="3186" fg:w="50"/><text x="73.7787%" y="463.50"></text></g><g><title>core::hash::Hasher::write_usize (50 samples, 1.15%)</title><rect x="73.5287%" y="437" width="1.1539%" height="15" fill="rgb(224,200,8)" fg:x="3186" fg:w="50"/><text x="73.7787%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (3 samples, 0.07%)</title><rect x="74.6134%" y="421" width="0.0692%" height="15" fill="rgb(217,61,36)" fg:x="3233" fg:w="3"/><text x="74.8634%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.09%)</title><rect x="74.7288%" y="453" width="0.0923%" height="15" fill="rgb(206,35,45)" fg:x="3238" fg:w="4"/><text x="74.9788%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (4 samples, 0.09%)</title><rect x="74.7288%" y="437" width="0.0923%" height="15" fill="rgb(217,65,33)" fg:x="3238" fg:w="4"/><text x="74.9788%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.09%)</title><rect x="74.7288%" y="421" width="0.0923%" height="15" fill="rgb(222,158,48)" fg:x="3238" fg:w="4"/><text x="74.9788%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.30%)</title><rect x="75.4673%" y="405" width="0.3000%" height="15" fill="rgb(254,2,54)" fg:x="3270" fg:w="13"/><text x="75.7173%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::_{{closure}} (33 samples, 0.76%)</title><rect x="75.7674%" y="405" width="0.7616%" height="15" fill="rgb(250,143,38)" fg:x="3283" fg:w="33"/><text x="76.0174%" y="415.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (25 samples, 0.58%)</title><rect x="75.9520%" y="389" width="0.5770%" height="15" fill="rgb(248,25,0)" fg:x="3291" fg:w="25"/><text x="76.2020%" y="399.50"></text></g><g><title>hashbrown::raw::inner::h2 (44 samples, 1.02%)</title><rect x="76.5290%" y="405" width="1.0155%" height="15" fill="rgb(206,152,27)" fg:x="3316" fg:w="44"/><text x="76.7790%" y="415.50"></text></g><g><title>simple_lisp::interpreter::ast::InstructionIter::jump (194 samples, 4.48%)</title><rect x="73.1364%" y="517" width="4.4773%" height="15" fill="rgb(240,77,30)" fg:x="3169" fg:w="194"/><text x="73.3864%" y="527.50">simpl..</text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::get_index_of (184 samples, 4.25%)</title><rect x="73.3672%" y="501" width="4.2465%" height="15" fill="rgb(231,5,3)" fg:x="3179" fg:w="184"/><text x="73.6172%" y="511.50">index..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (183 samples, 4.22%)</title><rect x="73.3903%" y="485" width="4.2234%" height="15" fill="rgb(207,226,32)" fg:x="3180" fg:w="183"/><text x="73.6403%" y="495.50">index..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (127 samples, 2.93%)</title><rect x="74.6827%" y="469" width="2.9310%" height="15" fill="rgb(222,207,47)" fg:x="3236" fg:w="127"/><text x="74.9327%" y="479.50">in..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (121 samples, 2.79%)</title><rect x="74.8211%" y="453" width="2.7925%" height="15" fill="rgb(229,115,45)" fg:x="3242" fg:w="121"/><text x="75.0711%" y="463.50">ha..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (121 samples, 2.79%)</title><rect x="74.8211%" y="437" width="2.7925%" height="15" fill="rgb(224,191,6)" fg:x="3242" fg:w="121"/><text x="75.0711%" y="447.50">ha..</text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (121 samples, 2.79%)</title><rect x="74.8211%" y="421" width="2.7925%" height="15" fill="rgb(230,227,24)" fg:x="3242" fg:w="121"/><text x="75.0711%" y="431.50">ha..</text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (3 samples, 0.07%)</title><rect x="77.5444%" y="405" width="0.0692%" height="15" fill="rgb(228,80,19)" fg:x="3360" fg:w="3"/><text x="77.7944%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.07%)</title><rect x="77.5444%" y="389" width="0.0692%" height="15" fill="rgb(247,229,0)" fg:x="3360" fg:w="3"/><text x="77.7944%" y="399.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.02%)</title><rect x="77.7060%" y="373" width="0.0231%" height="15" fill="rgb(237,194,15)" fg:x="3367" fg:w="1"/><text x="77.9560%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.02%)</title><rect x="77.7060%" y="357" width="0.0231%" height="15" fill="rgb(219,203,20)" fg:x="3367" fg:w="1"/><text x="77.9560%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (3 samples, 0.07%)</title><rect x="77.7060%" y="501" width="0.0692%" height="15" fill="rgb(234,128,8)" fg:x="3367" fg:w="3"/><text x="77.9560%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect x="77.7060%" y="485" width="0.0692%" height="15" fill="rgb(248,202,8)" fg:x="3367" fg:w="3"/><text x="77.9560%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (3 samples, 0.07%)</title><rect x="77.7060%" y="469" width="0.0692%" height="15" fill="rgb(206,104,37)" fg:x="3367" fg:w="3"/><text x="77.9560%" y="479.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect x="77.7060%" y="453" width="0.0692%" height="15" fill="rgb(223,8,27)" fg:x="3367" fg:w="3"/><text x="77.9560%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (3 samples, 0.07%)</title><rect x="77.7060%" y="437" width="0.0692%" height="15" fill="rgb(216,217,28)" fg:x="3367" fg:w="3"/><text x="77.9560%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect x="77.7060%" y="421" width="0.0692%" height="15" fill="rgb(249,199,1)" fg:x="3367" fg:w="3"/><text x="77.9560%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.07%)</title><rect x="77.7060%" y="405" width="0.0692%" height="15" fill="rgb(240,85,17)" fg:x="3367" fg:w="3"/><text x="77.9560%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.07%)</title><rect x="77.7060%" y="389" width="0.0692%" height="15" fill="rgb(206,108,45)" fg:x="3367" fg:w="3"/><text x="77.9560%" y="399.50"></text></g><g><title>cfree (2 samples, 0.05%)</title><rect x="77.7291%" y="373" width="0.0462%" height="15" fill="rgb(245,210,41)" fg:x="3368" fg:w="2"/><text x="77.9791%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="77.7521%" y="357" width="0.0231%" height="15" fill="rgb(206,13,37)" fg:x="3369" fg:w="1"/><text x="78.0021%" y="367.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::Data as core::clone::Clone&gt;::clone (5 samples, 0.12%)</title><rect x="77.7752%" y="485" width="0.1154%" height="15" fill="rgb(250,61,18)" fg:x="3370" fg:w="5"/><text x="78.0252%" y="495.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (3 samples, 0.07%)</title><rect x="77.9137%" y="405" width="0.0692%" height="15" fill="rgb(235,172,48)" fg:x="3376" fg:w="3"/><text x="78.1637%" y="415.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::HashableDataRef as core::hash::Hash&gt;::hash (3 samples, 0.07%)</title><rect x="77.9137%" y="389" width="0.0692%" height="15" fill="rgb(249,201,17)" fg:x="3376" fg:w="3"/><text x="78.1637%" y="399.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.07%)</title><rect x="77.9137%" y="373" width="0.0692%" height="15" fill="rgb(219,208,6)" fg:x="3376" fg:w="3"/><text x="78.1637%" y="383.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (3 samples, 0.07%)</title><rect x="77.9137%" y="357" width="0.0692%" height="15" fill="rgb(248,31,23)" fg:x="3376" fg:w="3"/><text x="78.1637%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (2 samples, 0.05%)</title><rect x="77.9368%" y="341" width="0.0462%" height="15" fill="rgb(245,15,42)" fg:x="3377" fg:w="2"/><text x="78.1868%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (1 samples, 0.02%)</title><rect x="78.1214%" y="341" width="0.0231%" height="15" fill="rgb(222,217,39)" fg:x="3385" fg:w="1"/><text x="78.3714%" y="351.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (12 samples, 0.28%)</title><rect x="77.8906%" y="453" width="0.2769%" height="15" fill="rgb(210,219,27)" fg:x="3375" fg:w="12"/><text x="78.1406%" y="463.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (12 samples, 0.28%)</title><rect x="77.8906%" y="437" width="0.2769%" height="15" fill="rgb(252,166,36)" fg:x="3375" fg:w="12"/><text x="78.1406%" y="447.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (12 samples, 0.28%)</title><rect x="77.8906%" y="421" width="0.2769%" height="15" fill="rgb(245,132,34)" fg:x="3375" fg:w="12"/><text x="78.1406%" y="431.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (8 samples, 0.18%)</title><rect x="77.9829%" y="405" width="0.1846%" height="15" fill="rgb(236,54,3)" fg:x="3379" fg:w="8"/><text x="78.2329%" y="415.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (8 samples, 0.18%)</title><rect x="77.9829%" y="389" width="0.1846%" height="15" fill="rgb(241,173,43)" fg:x="3379" fg:w="8"/><text x="78.2329%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (8 samples, 0.18%)</title><rect x="77.9829%" y="373" width="0.1846%" height="15" fill="rgb(215,190,9)" fg:x="3379" fg:w="8"/><text x="78.2329%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (2 samples, 0.05%)</title><rect x="78.1214%" y="357" width="0.0462%" height="15" fill="rgb(242,101,16)" fg:x="3385" fg:w="2"/><text x="78.3714%" y="367.50"></text></g><g><title>hashbrown::raw::inner::h2 (1 samples, 0.02%)</title><rect x="78.1445%" y="341" width="0.0231%" height="15" fill="rgb(223,190,21)" fg:x="3386" fg:w="1"/><text x="78.3945%" y="351.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (10 samples, 0.23%)</title><rect x="78.1676%" y="453" width="0.2308%" height="15" fill="rgb(215,228,25)" fg:x="3387" fg:w="10"/><text x="78.4176%" y="463.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="78.4445%" y="421" width="0.0231%" height="15" fill="rgb(225,36,22)" fg:x="3399" fg:w="1"/><text x="78.6945%" y="431.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.39%)</title><rect x="78.3983%" y="437" width="0.3923%" height="15" fill="rgb(251,106,46)" fg:x="3397" fg:w="17"/><text x="78.6483%" y="447.50"></text></g><g><title>malloc (14 samples, 0.32%)</title><rect x="78.4676%" y="421" width="0.3231%" height="15" fill="rgb(208,90,1)" fg:x="3400" fg:w="14"/><text x="78.7176%" y="431.50"></text></g><g><title>[libc.so.6] (13 samples, 0.30%)</title><rect x="78.4907%" y="405" width="0.3000%" height="15" fill="rgb(243,10,4)" fg:x="3401" fg:w="13"/><text x="78.7407%" y="415.50"></text></g><g><title>[libc.so.6] (5 samples, 0.12%)</title><rect x="78.6753%" y="389" width="0.1154%" height="15" fill="rgb(212,137,27)" fg:x="3409" fg:w="5"/><text x="78.9253%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.02%)</title><rect x="78.7907%" y="373" width="0.0231%" height="15" fill="rgb(231,220,49)" fg:x="3414" fg:w="1"/><text x="79.0407%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.02%)</title><rect x="78.7907%" y="357" width="0.0231%" height="15" fill="rgb(237,96,20)" fg:x="3414" fg:w="1"/><text x="79.0407%" y="367.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.02%)</title><rect x="78.7907%" y="341" width="0.0231%" height="15" fill="rgb(239,229,30)" fg:x="3414" fg:w="1"/><text x="79.0407%" y="351.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (41 samples, 0.95%)</title><rect x="77.8906%" y="485" width="0.9462%" height="15" fill="rgb(219,65,33)" fg:x="3375" fg:w="41"/><text x="78.1406%" y="495.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (41 samples, 0.95%)</title><rect x="77.8906%" y="469" width="0.9462%" height="15" fill="rgb(243,134,7)" fg:x="3375" fg:w="41"/><text x="78.1406%" y="479.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (19 samples, 0.44%)</title><rect x="78.3983%" y="453" width="0.4385%" height="15" fill="rgb(216,177,54)" fg:x="3397" fg:w="19"/><text x="78.6483%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (2 samples, 0.05%)</title><rect x="78.7907%" y="437" width="0.0462%" height="15" fill="rgb(211,160,20)" fg:x="3414" fg:w="2"/><text x="79.0407%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="78.7907%" y="421" width="0.0462%" height="15" fill="rgb(239,85,39)" fg:x="3414" fg:w="2"/><text x="79.0407%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.05%)</title><rect x="78.7907%" y="405" width="0.0462%" height="15" fill="rgb(232,125,22)" fg:x="3414" fg:w="2"/><text x="79.0407%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (2 samples, 0.05%)</title><rect x="78.7907%" y="389" width="0.0462%" height="15" fill="rgb(244,57,34)" fg:x="3414" fg:w="2"/><text x="79.0407%" y="399.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new::_{{closure}} (1 samples, 0.02%)</title><rect x="78.8138%" y="373" width="0.0231%" height="15" fill="rgb(214,203,32)" fg:x="3415" fg:w="1"/><text x="79.0638%" y="383.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clone_data (53 samples, 1.22%)</title><rect x="77.7752%" y="501" width="1.2232%" height="15" fill="rgb(207,58,43)" fg:x="3370" fg:w="53"/><text x="78.0252%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (7 samples, 0.16%)</title><rect x="78.8368%" y="485" width="0.1616%" height="15" fill="rgb(215,193,15)" fg:x="3416" fg:w="7"/><text x="79.0868%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (7 samples, 0.16%)</title><rect x="78.8368%" y="469" width="0.1616%" height="15" fill="rgb(232,15,44)" fg:x="3416" fg:w="7"/><text x="79.0868%" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (7 samples, 0.16%)</title><rect x="78.8368%" y="453" width="0.1616%" height="15" fill="rgb(212,3,48)" fg:x="3416" fg:w="7"/><text x="79.0868%" y="463.50"></text></g><g><title>core::cell::BorrowRef::new (7 samples, 0.16%)</title><rect x="78.8368%" y="437" width="0.1616%" height="15" fill="rgb(218,128,7)" fg:x="3416" fg:w="7"/><text x="79.0868%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (4 samples, 0.09%)</title><rect x="78.9061%" y="421" width="0.0923%" height="15" fill="rgb(226,216,39)" fg:x="3419" fg:w="4"/><text x="79.1561%" y="431.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::add (64 samples, 1.48%)</title><rect x="77.6137%" y="517" width="1.4770%" height="15" fill="rgb(243,47,51)" fg:x="3363" fg:w="64"/><text x="77.8637%" y="527.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::do_the_thing_add (4 samples, 0.09%)</title><rect x="78.9984%" y="501" width="0.0923%" height="15" fill="rgb(241,183,40)" fg:x="3423" fg:w="4"/><text x="79.2484%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.07%)</title><rect x="79.2061%" y="501" width="0.0692%" height="15" fill="rgb(231,217,32)" fg:x="3432" fg:w="3"/><text x="79.4561%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.02%)</title><rect x="79.2753%" y="501" width="0.0231%" height="15" fill="rgb(229,61,38)" fg:x="3435" fg:w="1"/><text x="79.5253%" y="511.50"></text></g><g><title>cfree (3 samples, 0.07%)</title><rect x="79.2984%" y="501" width="0.0692%" height="15" fill="rgb(225,210,5)" fg:x="3436" fg:w="3"/><text x="79.5484%" y="511.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="79.3215%" y="485" width="0.0462%" height="15" fill="rgb(231,79,45)" fg:x="3437" fg:w="2"/><text x="79.5715%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (3 samples, 0.07%)</title><rect x="79.3676%" y="501" width="0.0692%" height="15" fill="rgb(224,100,7)" fg:x="3439" fg:w="3"/><text x="79.6176%" y="511.50"></text></g><g><title>core::cmp::PartialEq::ne (3 samples, 0.07%)</title><rect x="79.3676%" y="485" width="0.0692%" height="15" fill="rgb(241,198,18)" fg:x="3439" fg:w="3"/><text x="79.6176%" y="495.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::Data as core::cmp::PartialEq&gt;::eq (1 samples, 0.02%)</title><rect x="79.4138%" y="469" width="0.0231%" height="15" fill="rgb(252,97,53)" fg:x="3441" fg:w="1"/><text x="79.6638%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.21%)</title><rect x="79.4369%" y="405" width="0.2077%" height="15" fill="rgb(220,88,7)" fg:x="3442" fg:w="9"/><text x="79.6869%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.21%)</title><rect x="79.4369%" y="389" width="0.2077%" height="15" fill="rgb(213,176,14)" fg:x="3442" fg:w="9"/><text x="79.6869%" y="399.50"></text></g><g><title>cfree (9 samples, 0.21%)</title><rect x="79.4369%" y="373" width="0.2077%" height="15" fill="rgb(246,73,7)" fg:x="3442" fg:w="9"/><text x="79.6869%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="79.6215%" y="357" width="0.0231%" height="15" fill="rgb(245,64,36)" fg:x="3450" fg:w="1"/><text x="79.8715%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (10 samples, 0.23%)</title><rect x="79.4369%" y="501" width="0.2308%" height="15" fill="rgb(245,80,10)" fg:x="3442" fg:w="10"/><text x="79.6869%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.23%)</title><rect x="79.4369%" y="485" width="0.2308%" height="15" fill="rgb(232,107,50)" fg:x="3442" fg:w="10"/><text x="79.6869%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (10 samples, 0.23%)</title><rect x="79.4369%" y="469" width="0.2308%" height="15" fill="rgb(253,3,0)" fg:x="3442" fg:w="10"/><text x="79.6869%" y="479.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.23%)</title><rect x="79.4369%" y="453" width="0.2308%" height="15" fill="rgb(212,99,53)" fg:x="3442" fg:w="10"/><text x="79.6869%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (10 samples, 0.23%)</title><rect x="79.4369%" y="437" width="0.2308%" height="15" fill="rgb(249,111,54)" fg:x="3442" fg:w="10"/><text x="79.6869%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.23%)</title><rect x="79.4369%" y="421" width="0.2308%" height="15" fill="rgb(249,55,30)" fg:x="3442" fg:w="10"/><text x="79.6869%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.02%)</title><rect x="79.6446%" y="405" width="0.0231%" height="15" fill="rgb(237,47,42)" fg:x="3451" fg:w="1"/><text x="79.8946%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (1 samples, 0.02%)</title><rect x="79.6446%" y="389" width="0.0231%" height="15" fill="rgb(211,20,18)" fg:x="3451" fg:w="1"/><text x="79.8946%" y="399.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (8 samples, 0.18%)</title><rect x="79.7600%" y="421" width="0.1846%" height="15" fill="rgb(231,203,46)" fg:x="3456" fg:w="8"/><text x="80.0100%" y="431.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::HashableDataRef as core::hash::Hash&gt;::hash (8 samples, 0.18%)</title><rect x="79.7600%" y="405" width="0.1846%" height="15" fill="rgb(237,142,3)" fg:x="3456" fg:w="8"/><text x="80.0100%" y="415.50"></text></g><g><title>core::hash::Hasher::write_usize (8 samples, 0.18%)</title><rect x="79.7600%" y="389" width="0.1846%" height="15" fill="rgb(241,107,1)" fg:x="3456" fg:w="8"/><text x="80.0100%" y="399.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (8 samples, 0.18%)</title><rect x="79.7600%" y="373" width="0.1846%" height="15" fill="rgb(229,83,13)" fg:x="3456" fg:w="8"/><text x="80.0100%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (7 samples, 0.16%)</title><rect x="79.7831%" y="357" width="0.1616%" height="15" fill="rgb(241,91,40)" fg:x="3457" fg:w="7"/><text x="80.0331%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.09%)</title><rect x="79.9446%" y="389" width="0.0923%" height="15" fill="rgb(225,3,45)" fg:x="3464" fg:w="4"/><text x="80.1946%" y="399.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (5 samples, 0.12%)</title><rect x="79.9446%" y="405" width="0.1154%" height="15" fill="rgb(244,223,14)" fg:x="3464" fg:w="5"/><text x="80.1946%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.02%)</title><rect x="80.0369%" y="389" width="0.0231%" height="15" fill="rgb(224,124,37)" fg:x="3468" fg:w="1"/><text x="80.2869%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.09%)</title><rect x="80.1985%" y="357" width="0.0923%" height="15" fill="rgb(251,171,30)" fg:x="3475" fg:w="4"/><text x="80.4485%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.02%)</title><rect x="80.2908%" y="357" width="0.0231%" height="15" fill="rgb(236,46,54)" fg:x="3479" fg:w="1"/><text x="80.5408%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.02%)</title><rect x="80.2908%" y="341" width="0.0231%" height="15" fill="rgb(245,213,5)" fg:x="3479" fg:w="1"/><text x="80.5408%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (5 samples, 0.12%)</title><rect x="80.3139%" y="357" width="0.1154%" height="15" fill="rgb(230,144,27)" fg:x="3480" fg:w="5"/><text x="80.5639%" y="367.50"></text></g><g><title>hashbrown::raw::inner::h2 (2 samples, 0.05%)</title><rect x="80.4293%" y="357" width="0.0462%" height="15" fill="rgb(220,86,6)" fg:x="3485" fg:w="2"/><text x="80.6793%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (21 samples, 0.48%)</title><rect x="80.0600%" y="389" width="0.4847%" height="15" fill="rgb(240,20,13)" fg:x="3469" fg:w="21"/><text x="80.3100%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (16 samples, 0.37%)</title><rect x="80.1754%" y="373" width="0.3693%" height="15" fill="rgb(217,89,34)" fg:x="3474" fg:w="16"/><text x="80.4254%" y="383.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (3 samples, 0.07%)</title><rect x="80.4754%" y="357" width="0.0692%" height="15" fill="rgb(229,13,5)" fg:x="3487" fg:w="3"/><text x="80.7254%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.07%)</title><rect x="80.4754%" y="341" width="0.0692%" height="15" fill="rgb(244,67,35)" fg:x="3487" fg:w="3"/><text x="80.7254%" y="351.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (37 samples, 0.85%)</title><rect x="79.7138%" y="469" width="0.8539%" height="15" fill="rgb(221,40,2)" fg:x="3454" fg:w="37"/><text x="79.9638%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (37 samples, 0.85%)</title><rect x="79.7138%" y="453" width="0.8539%" height="15" fill="rgb(237,157,21)" fg:x="3454" fg:w="37"/><text x="79.9638%" y="463.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (36 samples, 0.83%)</title><rect x="79.7369%" y="437" width="0.8308%" height="15" fill="rgb(222,94,11)" fg:x="3455" fg:w="36"/><text x="79.9869%" y="447.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (27 samples, 0.62%)</title><rect x="79.9446%" y="421" width="0.6231%" height="15" fill="rgb(249,113,6)" fg:x="3464" fg:w="27"/><text x="80.1946%" y="431.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (22 samples, 0.51%)</title><rect x="80.0600%" y="405" width="0.5077%" height="15" fill="rgb(238,137,36)" fg:x="3469" fg:w="22"/><text x="80.3100%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.02%)</title><rect x="80.5447%" y="389" width="0.0231%" height="15" fill="rgb(210,102,26)" fg:x="3490" fg:w="1"/><text x="80.7947%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (1 samples, 0.02%)</title><rect x="80.5447%" y="373" width="0.0231%" height="15" fill="rgb(218,30,30)" fg:x="3490" fg:w="1"/><text x="80.7947%" y="383.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (39 samples, 0.90%)</title><rect x="80.5677%" y="469" width="0.9001%" height="15" fill="rgb(214,67,26)" fg:x="3491" fg:w="39"/><text x="80.8177%" y="479.50"></text></g><g><title>__rdl_alloc (2 samples, 0.05%)</title><rect x="81.6294%" y="437" width="0.0462%" height="15" fill="rgb(251,9,53)" fg:x="3537" fg:w="2"/><text x="81.8794%" y="447.50"></text></g><g><title>__rust_alloc (2 samples, 0.05%)</title><rect x="81.6755%" y="437" width="0.0462%" height="15" fill="rgb(228,204,25)" fg:x="3539" fg:w="2"/><text x="81.9255%" y="447.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (124 samples, 2.86%)</title><rect x="79.6677%" y="501" width="2.8618%" height="15" fill="rgb(207,153,8)" fg:x="3452" fg:w="124"/><text x="79.9177%" y="511.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (124 samples, 2.86%)</title><rect x="79.6677%" y="485" width="2.8618%" height="15" fill="rgb(242,9,16)" fg:x="3452" fg:w="124"/><text x="79.9177%" y="495.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (46 samples, 1.06%)</title><rect x="81.4678%" y="469" width="1.0616%" height="15" fill="rgb(217,211,10)" fg:x="3530" fg:w="46"/><text x="81.7178%" y="479.50"></text></g><g><title>alloc::alloc::alloc (41 samples, 0.95%)</title><rect x="81.5832%" y="453" width="0.9462%" height="15" fill="rgb(219,228,52)" fg:x="3535" fg:w="41"/><text x="81.8332%" y="463.50"></text></g><g><title>malloc (35 samples, 0.81%)</title><rect x="81.7217%" y="437" width="0.8078%" height="15" fill="rgb(231,92,29)" fg:x="3541" fg:w="35"/><text x="81.9717%" y="447.50"></text></g><g><title>[libc.so.6] (21 samples, 0.48%)</title><rect x="82.0448%" y="421" width="0.4847%" height="15" fill="rgb(232,8,23)" fg:x="3555" fg:w="21"/><text x="82.2948%" y="431.50"></text></g><g><title>[libc.so.6] (5 samples, 0.12%)</title><rect x="82.4140%" y="405" width="0.1154%" height="15" fill="rgb(216,211,34)" fg:x="3571" fg:w="5"/><text x="82.6640%" y="415.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::equal (150 samples, 3.46%)</title><rect x="79.0907%" y="517" width="3.4618%" height="15" fill="rgb(236,151,0)" fg:x="3427" fg:w="150"/><text x="79.3407%" y="527.50">sim..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (1 samples, 0.02%)</title><rect x="82.5294%" y="501" width="0.0231%" height="15" fill="rgb(209,168,3)" fg:x="3576" fg:w="1"/><text x="82.7794%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (1 samples, 0.02%)</title><rect x="82.5294%" y="485" width="0.0231%" height="15" fill="rgb(208,129,28)" fg:x="3576" fg:w="1"/><text x="82.7794%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (1 samples, 0.02%)</title><rect x="82.5294%" y="469" width="0.0231%" height="15" fill="rgb(229,78,22)" fg:x="3576" fg:w="1"/><text x="82.7794%" y="479.50"></text></g><g><title>core::cell::BorrowRef::new (1 samples, 0.02%)</title><rect x="82.5294%" y="453" width="0.0231%" height="15" fill="rgb(228,187,13)" fg:x="3576" fg:w="1"/><text x="82.7794%" y="463.50"></text></g><g><title>core::cell::is_reading (1 samples, 0.02%)</title><rect x="82.5294%" y="437" width="0.0231%" height="15" fill="rgb(240,119,24)" fg:x="3576" fg:w="1"/><text x="82.7794%" y="447.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::less (1 samples, 0.02%)</title><rect x="82.5525%" y="517" width="0.0231%" height="15" fill="rgb(209,194,42)" fg:x="3577" fg:w="1"/><text x="82.8025%" y="527.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (1 samples, 0.02%)</title><rect x="82.5525%" y="501" width="0.0231%" height="15" fill="rgb(247,200,46)" fg:x="3577" fg:w="1"/><text x="82.8025%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="82.5756%" y="501" width="0.0462%" height="15" fill="rgb(218,76,16)" fg:x="3578" fg:w="2"/><text x="82.8256%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.02%)</title><rect x="82.6217%" y="501" width="0.0231%" height="15" fill="rgb(225,21,48)" fg:x="3580" fg:w="1"/><text x="82.8717%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="82.6217%" y="485" width="0.0231%" height="15" fill="rgb(239,223,50)" fg:x="3580" fg:w="1"/><text x="82.8717%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (1 samples, 0.02%)</title><rect x="82.6217%" y="469" width="0.0231%" height="15" fill="rgb(244,45,21)" fg:x="3580" fg:w="1"/><text x="82.8717%" y="479.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="82.6217%" y="453" width="0.0231%" height="15" fill="rgb(232,33,43)" fg:x="3580" fg:w="1"/><text x="82.8717%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.02%)</title><rect x="82.6217%" y="437" width="0.0231%" height="15" fill="rgb(209,8,3)" fg:x="3580" fg:w="1"/><text x="82.8717%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="82.6217%" y="421" width="0.0231%" height="15" fill="rgb(214,25,53)" fg:x="3580" fg:w="1"/><text x="82.8717%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.02%)</title><rect x="82.6217%" y="405" width="0.0231%" height="15" fill="rgb(254,186,54)" fg:x="3580" fg:w="1"/><text x="82.8717%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.02%)</title><rect x="82.6217%" y="389" width="0.0231%" height="15" fill="rgb(208,174,49)" fg:x="3580" fg:w="1"/><text x="82.8717%" y="399.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="82.6217%" y="373" width="0.0231%" height="15" fill="rgb(233,191,51)" fg:x="3580" fg:w="1"/><text x="82.8717%" y="383.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (4 samples, 0.09%)</title><rect x="82.6448%" y="421" width="0.0923%" height="15" fill="rgb(222,134,10)" fg:x="3581" fg:w="4"/><text x="82.8948%" y="431.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::HashableDataRef as core::hash::Hash&gt;::hash (4 samples, 0.09%)</title><rect x="82.6448%" y="405" width="0.0923%" height="15" fill="rgb(230,226,20)" fg:x="3581" fg:w="4"/><text x="82.8948%" y="415.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.09%)</title><rect x="82.6448%" y="389" width="0.0923%" height="15" fill="rgb(251,111,25)" fg:x="3581" fg:w="4"/><text x="82.8948%" y="399.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (4 samples, 0.09%)</title><rect x="82.6448%" y="373" width="0.0923%" height="15" fill="rgb(224,40,46)" fg:x="3581" fg:w="4"/><text x="82.8948%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.02%)</title><rect x="82.7141%" y="357" width="0.0231%" height="15" fill="rgb(236,108,47)" fg:x="3584" fg:w="1"/><text x="82.9641%" y="367.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (6 samples, 0.14%)</title><rect x="82.7371%" y="405" width="0.1385%" height="15" fill="rgb(234,93,0)" fg:x="3585" fg:w="6"/><text x="82.9871%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (5 samples, 0.12%)</title><rect x="82.7602%" y="389" width="0.1154%" height="15" fill="rgb(224,213,32)" fg:x="3586" fg:w="5"/><text x="83.0102%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (3 samples, 0.07%)</title><rect x="82.8756%" y="357" width="0.0692%" height="15" fill="rgb(251,11,48)" fg:x="3591" fg:w="3"/><text x="83.1256%" y="367.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (3 samples, 0.07%)</title><rect x="82.8756%" y="341" width="0.0692%" height="15" fill="rgb(236,173,5)" fg:x="3591" fg:w="3"/><text x="83.1256%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (3 samples, 0.07%)</title><rect x="82.9448%" y="357" width="0.0692%" height="15" fill="rgb(230,95,12)" fg:x="3594" fg:w="3"/><text x="83.1948%" y="367.50"></text></g><g><title>hashbrown::raw::inner::h2 (2 samples, 0.05%)</title><rect x="83.0141%" y="357" width="0.0462%" height="15" fill="rgb(232,209,1)" fg:x="3597" fg:w="2"/><text x="83.2641%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (9 samples, 0.21%)</title><rect x="82.8756%" y="389" width="0.2077%" height="15" fill="rgb(232,6,1)" fg:x="3591" fg:w="9"/><text x="83.1256%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (9 samples, 0.21%)</title><rect x="82.8756%" y="373" width="0.2077%" height="15" fill="rgb(210,224,50)" fg:x="3591" fg:w="9"/><text x="83.1256%" y="383.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.02%)</title><rect x="83.0602%" y="357" width="0.0231%" height="15" fill="rgb(228,127,35)" fg:x="3599" fg:w="1"/><text x="83.3102%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.02%)</title><rect x="83.0602%" y="341" width="0.0231%" height="15" fill="rgb(245,102,45)" fg:x="3599" fg:w="1"/><text x="83.3102%" y="351.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (21 samples, 0.48%)</title><rect x="82.6448%" y="469" width="0.4847%" height="15" fill="rgb(214,1,49)" fg:x="3581" fg:w="21"/><text x="82.8948%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (21 samples, 0.48%)</title><rect x="82.6448%" y="453" width="0.4847%" height="15" fill="rgb(226,163,40)" fg:x="3581" fg:w="21"/><text x="82.8948%" y="463.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (21 samples, 0.48%)</title><rect x="82.6448%" y="437" width="0.4847%" height="15" fill="rgb(239,212,28)" fg:x="3581" fg:w="21"/><text x="82.8948%" y="447.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (17 samples, 0.39%)</title><rect x="82.7371%" y="421" width="0.3923%" height="15" fill="rgb(220,20,13)" fg:x="3585" fg:w="17"/><text x="82.9871%" y="431.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (11 samples, 0.25%)</title><rect x="82.8756%" y="405" width="0.2539%" height="15" fill="rgb(210,164,35)" fg:x="3591" fg:w="11"/><text x="83.1256%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (2 samples, 0.05%)</title><rect x="83.0833%" y="389" width="0.0462%" height="15" fill="rgb(248,109,41)" fg:x="3600" fg:w="2"/><text x="83.3333%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (2 samples, 0.05%)</title><rect x="83.0833%" y="373" width="0.0462%" height="15" fill="rgb(238,23,50)" fg:x="3600" fg:w="2"/><text x="83.3333%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (2 samples, 0.05%)</title><rect x="83.0833%" y="357" width="0.0462%" height="15" fill="rgb(211,48,49)" fg:x="3600" fg:w="2"/><text x="83.3333%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (2 samples, 0.05%)</title><rect x="83.0833%" y="341" width="0.0462%" height="15" fill="rgb(223,36,21)" fg:x="3600" fg:w="2"/><text x="83.3333%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.02%)</title><rect x="83.1064%" y="325" width="0.0231%" height="15" fill="rgb(207,123,46)" fg:x="3601" fg:w="1"/><text x="83.3564%" y="335.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (8 samples, 0.18%)</title><rect x="83.1295%" y="469" width="0.1846%" height="15" fill="rgb(240,218,32)" fg:x="3602" fg:w="8"/><text x="83.3795%" y="479.50"></text></g><g><title>__rust_alloc (3 samples, 0.07%)</title><rect x="83.3372%" y="437" width="0.0692%" height="15" fill="rgb(252,5,43)" fg:x="3611" fg:w="3"/><text x="83.5872%" y="447.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.55%)</title><rect x="83.3372%" y="453" width="0.5539%" height="15" fill="rgb(252,84,19)" fg:x="3611" fg:w="24"/><text x="83.5872%" y="463.50"></text></g><g><title>malloc (21 samples, 0.48%)</title><rect x="83.4064%" y="437" width="0.4847%" height="15" fill="rgb(243,152,39)" fg:x="3614" fg:w="21"/><text x="83.6564%" y="447.50"></text></g><g><title>[libc.so.6] (10 samples, 0.23%)</title><rect x="83.6603%" y="421" width="0.2308%" height="15" fill="rgb(234,160,15)" fg:x="3625" fg:w="10"/><text x="83.9103%" y="431.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="83.8449%" y="405" width="0.0462%" height="15" fill="rgb(237,34,20)" fg:x="3633" fg:w="2"/><text x="84.0949%" y="415.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (55 samples, 1.27%)</title><rect x="82.6448%" y="501" width="1.2693%" height="15" fill="rgb(229,97,13)" fg:x="3581" fg:w="55"/><text x="82.8948%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (55 samples, 1.27%)</title><rect x="82.6448%" y="485" width="1.2693%" height="15" fill="rgb(234,71,50)" fg:x="3581" fg:w="55"/><text x="82.8948%" y="495.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (26 samples, 0.60%)</title><rect x="83.3141%" y="469" width="0.6000%" height="15" fill="rgb(253,155,4)" fg:x="3610" fg:w="26"/><text x="83.5641%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (1 samples, 0.02%)</title><rect x="83.8911%" y="453" width="0.0231%" height="15" fill="rgb(222,185,37)" fg:x="3635" fg:w="1"/><text x="84.1411%" y="463.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::less_equal (63 samples, 1.45%)</title><rect x="82.5756%" y="517" width="1.4540%" height="15" fill="rgb(251,177,13)" fg:x="3578" fg:w="63"/><text x="82.8256%" y="527.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (5 samples, 0.12%)</title><rect x="83.9141%" y="501" width="0.1154%" height="15" fill="rgb(250,179,40)" fg:x="3636" fg:w="5"/><text x="84.1641%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (5 samples, 0.12%)</title><rect x="83.9141%" y="485" width="0.1154%" height="15" fill="rgb(242,44,2)" fg:x="3636" fg:w="5"/><text x="84.1641%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (5 samples, 0.12%)</title><rect x="83.9141%" y="469" width="0.1154%" height="15" fill="rgb(216,177,13)" fg:x="3636" fg:w="5"/><text x="84.1641%" y="479.50"></text></g><g><title>core::cell::BorrowRef::new (5 samples, 0.12%)</title><rect x="83.9141%" y="453" width="0.1154%" height="15" fill="rgb(216,106,43)" fg:x="3636" fg:w="5"/><text x="84.1641%" y="463.50"></text></g><g><title>core::cell::is_reading (5 samples, 0.12%)</title><rect x="83.9141%" y="437" width="0.1154%" height="15" fill="rgb(216,183,2)" fg:x="3636" fg:w="5"/><text x="84.1641%" y="447.50"></text></g><g><title>__rust_dealloc (1 samples, 0.02%)</title><rect x="84.3757%" y="501" width="0.0231%" height="15" fill="rgb(249,75,3)" fg:x="3656" fg:w="1"/><text x="84.6257%" y="511.50"></text></g><g><title>cfree (2 samples, 0.05%)</title><rect x="84.3988%" y="501" width="0.0462%" height="15" fill="rgb(219,67,39)" fg:x="3657" fg:w="2"/><text x="84.6488%" y="511.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="84.3988%" y="485" width="0.0462%" height="15" fill="rgb(253,228,2)" fg:x="3657" fg:w="2"/><text x="84.6488%" y="495.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::Data as core::clone::Clone&gt;::clone (2 samples, 0.05%)</title><rect x="84.4450%" y="485" width="0.0462%" height="15" fill="rgb(235,138,27)" fg:x="3659" fg:w="2"/><text x="84.6950%" y="495.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (6 samples, 0.14%)</title><rect x="84.6296%" y="357" width="0.1385%" height="15" fill="rgb(236,97,51)" fg:x="3667" fg:w="6"/><text x="84.8796%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (3 samples, 0.07%)</title><rect x="84.6988%" y="341" width="0.0692%" height="15" fill="rgb(240,80,30)" fg:x="3670" fg:w="3"/><text x="84.9488%" y="351.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (8 samples, 0.18%)</title><rect x="84.6296%" y="405" width="0.1846%" height="15" fill="rgb(230,178,19)" fg:x="3667" fg:w="8"/><text x="84.8796%" y="415.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::HashableDataRef as core::hash::Hash&gt;::hash (8 samples, 0.18%)</title><rect x="84.6296%" y="389" width="0.1846%" height="15" fill="rgb(210,190,27)" fg:x="3667" fg:w="8"/><text x="84.8796%" y="399.50"></text></g><g><title>core::hash::Hasher::write_usize (8 samples, 0.18%)</title><rect x="84.6296%" y="373" width="0.1846%" height="15" fill="rgb(222,107,31)" fg:x="3667" fg:w="8"/><text x="84.8796%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (2 samples, 0.05%)</title><rect x="84.7681%" y="357" width="0.0462%" height="15" fill="rgb(216,127,34)" fg:x="3673" fg:w="2"/><text x="85.0181%" y="367.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (1 samples, 0.02%)</title><rect x="84.8142%" y="389" width="0.0231%" height="15" fill="rgb(234,116,52)" fg:x="3675" fg:w="1"/><text x="85.0642%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.02%)</title><rect x="84.8142%" y="373" width="0.0231%" height="15" fill="rgb(222,124,15)" fg:x="3675" fg:w="1"/><text x="85.0642%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.05%)</title><rect x="84.8835%" y="341" width="0.0462%" height="15" fill="rgb(231,179,28)" fg:x="3678" fg:w="2"/><text x="85.1335%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1 samples, 0.02%)</title><rect x="84.9296%" y="341" width="0.0231%" height="15" fill="rgb(226,93,45)" fg:x="3680" fg:w="1"/><text x="85.1796%" y="351.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (1 samples, 0.02%)</title><rect x="84.9296%" y="325" width="0.0231%" height="15" fill="rgb(215,8,51)" fg:x="3680" fg:w="1"/><text x="85.1796%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (1 samples, 0.02%)</title><rect x="84.9527%" y="341" width="0.0231%" height="15" fill="rgb(223,106,5)" fg:x="3681" fg:w="1"/><text x="85.2027%" y="351.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="84.9527%" y="325" width="0.0231%" height="15" fill="rgb(250,191,5)" fg:x="3681" fg:w="1"/><text x="85.2027%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (3 samples, 0.07%)</title><rect x="84.9758%" y="341" width="0.0692%" height="15" fill="rgb(242,132,44)" fg:x="3682" fg:w="3"/><text x="85.2258%" y="351.50"></text></g><g><title>hashbrown::raw::inner::h2 (4 samples, 0.09%)</title><rect x="85.0450%" y="341" width="0.0923%" height="15" fill="rgb(251,152,29)" fg:x="3685" fg:w="4"/><text x="85.2950%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (19 samples, 0.44%)</title><rect x="84.8373%" y="373" width="0.4385%" height="15" fill="rgb(218,179,5)" fg:x="3676" fg:w="19"/><text x="85.0873%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (17 samples, 0.39%)</title><rect x="84.8835%" y="357" width="0.3923%" height="15" fill="rgb(227,67,19)" fg:x="3678" fg:w="17"/><text x="85.1335%" y="367.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (6 samples, 0.14%)</title><rect x="85.1373%" y="341" width="0.1385%" height="15" fill="rgb(233,119,31)" fg:x="3689" fg:w="6"/><text x="85.3873%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.14%)</title><rect x="85.1373%" y="325" width="0.1385%" height="15" fill="rgb(241,120,22)" fg:x="3689" fg:w="6"/><text x="85.3873%" y="335.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (35 samples, 0.81%)</title><rect x="84.4911%" y="453" width="0.8078%" height="15" fill="rgb(224,102,30)" fg:x="3661" fg:w="35"/><text x="84.7411%" y="463.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (35 samples, 0.81%)</title><rect x="84.4911%" y="437" width="0.8078%" height="15" fill="rgb(210,164,37)" fg:x="3661" fg:w="35"/><text x="84.7411%" y="447.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (35 samples, 0.81%)</title><rect x="84.4911%" y="421" width="0.8078%" height="15" fill="rgb(226,191,16)" fg:x="3661" fg:w="35"/><text x="84.7411%" y="431.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (21 samples, 0.48%)</title><rect x="84.8142%" y="405" width="0.4847%" height="15" fill="rgb(214,40,45)" fg:x="3675" fg:w="21"/><text x="85.0642%" y="415.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (20 samples, 0.46%)</title><rect x="84.8373%" y="389" width="0.4616%" height="15" fill="rgb(244,29,26)" fg:x="3676" fg:w="20"/><text x="85.0873%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.02%)</title><rect x="85.2758%" y="373" width="0.0231%" height="15" fill="rgb(216,16,5)" fg:x="3695" fg:w="1"/><text x="85.5258%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (1 samples, 0.02%)</title><rect x="85.2758%" y="357" width="0.0231%" height="15" fill="rgb(249,76,35)" fg:x="3695" fg:w="1"/><text x="85.5258%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (1 samples, 0.02%)</title><rect x="85.2758%" y="341" width="0.0231%" height="15" fill="rgb(207,11,44)" fg:x="3695" fg:w="1"/><text x="85.5258%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (1 samples, 0.02%)</title><rect x="85.2758%" y="325" width="0.0231%" height="15" fill="rgb(228,190,49)" fg:x="3695" fg:w="1"/><text x="85.5258%" y="335.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (45 samples, 1.04%)</title><rect x="85.2989%" y="453" width="1.0385%" height="15" fill="rgb(214,173,12)" fg:x="3696" fg:w="45"/><text x="85.5489%" y="463.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.42%)</title><rect x="86.4990%" y="437" width="0.4154%" height="15" fill="rgb(218,26,35)" fg:x="3748" fg:w="18"/><text x="86.7490%" y="447.50"></text></g><g><title>malloc (16 samples, 0.37%)</title><rect x="86.5451%" y="421" width="0.3693%" height="15" fill="rgb(220,200,19)" fg:x="3750" fg:w="16"/><text x="86.7951%" y="431.50"></text></g><g><title>[libc.so.6] (13 samples, 0.30%)</title><rect x="86.6144%" y="405" width="0.3000%" height="15" fill="rgb(239,95,49)" fg:x="3753" fg:w="13"/><text x="86.8644%" y="415.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="86.8913%" y="389" width="0.0231%" height="15" fill="rgb(235,85,53)" fg:x="3765" fg:w="1"/><text x="87.1413%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.02%)</title><rect x="86.9144%" y="373" width="0.0231%" height="15" fill="rgb(233,133,31)" fg:x="3766" fg:w="1"/><text x="87.1644%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.02%)</title><rect x="86.9144%" y="357" width="0.0231%" height="15" fill="rgb(218,25,20)" fg:x="3766" fg:w="1"/><text x="87.1644%" y="367.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.02%)</title><rect x="86.9144%" y="341" width="0.0231%" height="15" fill="rgb(252,210,38)" fg:x="3766" fg:w="1"/><text x="87.1644%" y="351.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (107 samples, 2.47%)</title><rect x="84.4911%" y="485" width="2.4694%" height="15" fill="rgb(242,134,21)" fg:x="3661" fg:w="107"/><text x="84.7411%" y="495.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (107 samples, 2.47%)</title><rect x="84.4911%" y="469" width="2.4694%" height="15" fill="rgb(213,28,48)" fg:x="3661" fg:w="107"/><text x="84.7411%" y="479.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (27 samples, 0.62%)</title><rect x="86.3374%" y="453" width="0.6231%" height="15" fill="rgb(250,196,2)" fg:x="3741" fg:w="27"/><text x="86.5874%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (2 samples, 0.05%)</title><rect x="86.9144%" y="437" width="0.0462%" height="15" fill="rgb(227,5,17)" fg:x="3766" fg:w="2"/><text x="87.1644%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.05%)</title><rect x="86.9144%" y="421" width="0.0462%" height="15" fill="rgb(221,226,24)" fg:x="3766" fg:w="2"/><text x="87.1644%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.05%)</title><rect x="86.9144%" y="405" width="0.0462%" height="15" fill="rgb(211,5,48)" fg:x="3766" fg:w="2"/><text x="87.1644%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (2 samples, 0.05%)</title><rect x="86.9144%" y="389" width="0.0462%" height="15" fill="rgb(219,150,6)" fg:x="3766" fg:w="2"/><text x="87.1644%" y="399.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new::_{{closure}} (1 samples, 0.02%)</title><rect x="86.9375%" y="373" width="0.0231%" height="15" fill="rgb(251,46,16)" fg:x="3767" fg:w="1"/><text x="87.1875%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (11 samples, 0.25%)</title><rect x="86.9836%" y="421" width="0.2539%" height="15" fill="rgb(220,204,40)" fg:x="3769" fg:w="11"/><text x="87.2336%" y="431.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clone_data (122 samples, 2.82%)</title><rect x="84.4450%" y="501" width="2.8156%" height="15" fill="rgb(211,85,2)" fg:x="3659" fg:w="122"/><text x="84.6950%" y="511.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (13 samples, 0.30%)</title><rect x="86.9605%" y="485" width="0.3000%" height="15" fill="rgb(229,17,7)" fg:x="3768" fg:w="13"/><text x="87.2105%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (13 samples, 0.30%)</title><rect x="86.9605%" y="469" width="0.3000%" height="15" fill="rgb(239,72,28)" fg:x="3768" fg:w="13"/><text x="87.2105%" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (13 samples, 0.30%)</title><rect x="86.9605%" y="453" width="0.3000%" height="15" fill="rgb(230,47,54)" fg:x="3768" fg:w="13"/><text x="87.2105%" y="463.50"></text></g><g><title>core::cell::BorrowRef::new (13 samples, 0.30%)</title><rect x="86.9605%" y="437" width="0.3000%" height="15" fill="rgb(214,50,8)" fg:x="3768" fg:w="13"/><text x="87.2105%" y="447.50"></text></g><g><title>core::cell::is_reading (1 samples, 0.02%)</title><rect x="87.2375%" y="421" width="0.0231%" height="15" fill="rgb(216,198,43)" fg:x="3780" fg:w="1"/><text x="87.4875%" y="431.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::modulo::do_the_thing (3 samples, 0.07%)</title><rect x="87.2606%" y="501" width="0.0692%" height="15" fill="rgb(234,20,35)" fg:x="3781" fg:w="3"/><text x="87.5106%" y="511.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::modulo (144 samples, 3.32%)</title><rect x="84.0295%" y="517" width="3.3233%" height="15" fill="rgb(254,45,19)" fg:x="3641" fg:w="144"/><text x="84.2795%" y="527.50">sim..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (1 samples, 0.02%)</title><rect x="87.3298%" y="501" width="0.0231%" height="15" fill="rgb(219,14,44)" fg:x="3784" fg:w="1"/><text x="87.5798%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (1 samples, 0.02%)</title><rect x="87.3298%" y="485" width="0.0231%" height="15" fill="rgb(217,220,26)" fg:x="3784" fg:w="1"/><text x="87.5798%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (1 samples, 0.02%)</title><rect x="87.3298%" y="469" width="0.0231%" height="15" fill="rgb(213,158,28)" fg:x="3784" fg:w="1"/><text x="87.5798%" y="479.50"></text></g><g><title>core::cell::BorrowRef::new (1 samples, 0.02%)</title><rect x="87.3298%" y="453" width="0.0231%" height="15" fill="rgb(252,51,52)" fg:x="3784" fg:w="1"/><text x="87.5798%" y="463.50"></text></g><g><title>core::cell::is_reading (1 samples, 0.02%)</title><rect x="87.3298%" y="437" width="0.0231%" height="15" fill="rgb(246,89,16)" fg:x="3784" fg:w="1"/><text x="87.5798%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="87.4452%" y="501" width="0.0231%" height="15" fill="rgb(216,158,49)" fg:x="3789" fg:w="1"/><text x="87.6952%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (3 samples, 0.07%)</title><rect x="87.4683%" y="501" width="0.0692%" height="15" fill="rgb(236,107,19)" fg:x="3790" fg:w="3"/><text x="87.7183%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect x="87.4683%" y="485" width="0.0692%" height="15" fill="rgb(228,185,30)" fg:x="3790" fg:w="3"/><text x="87.7183%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (3 samples, 0.07%)</title><rect x="87.4683%" y="469" width="0.0692%" height="15" fill="rgb(246,134,8)" fg:x="3790" fg:w="3"/><text x="87.7183%" y="479.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect x="87.4683%" y="453" width="0.0692%" height="15" fill="rgb(214,143,50)" fg:x="3790" fg:w="3"/><text x="87.7183%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (3 samples, 0.07%)</title><rect x="87.4683%" y="437" width="0.0692%" height="15" fill="rgb(228,75,8)" fg:x="3790" fg:w="3"/><text x="87.7183%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.07%)</title><rect x="87.4683%" y="421" width="0.0692%" height="15" fill="rgb(207,175,4)" fg:x="3790" fg:w="3"/><text x="87.7183%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.07%)</title><rect x="87.4683%" y="405" width="0.0692%" height="15" fill="rgb(205,108,24)" fg:x="3790" fg:w="3"/><text x="87.7183%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.07%)</title><rect x="87.4683%" y="389" width="0.0692%" height="15" fill="rgb(244,120,49)" fg:x="3790" fg:w="3"/><text x="87.7183%" y="399.50"></text></g><g><title>cfree (3 samples, 0.07%)</title><rect x="87.4683%" y="373" width="0.0692%" height="15" fill="rgb(223,47,38)" fg:x="3790" fg:w="3"/><text x="87.7183%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="87.5144%" y="357" width="0.0231%" height="15" fill="rgb(229,179,11)" fg:x="3792" fg:w="1"/><text x="87.7644%" y="367.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (3 samples, 0.07%)</title><rect x="87.5837%" y="421" width="0.0692%" height="15" fill="rgb(231,122,1)" fg:x="3795" fg:w="3"/><text x="87.8337%" y="431.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::HashableDataRef as core::hash::Hash&gt;::hash (3 samples, 0.07%)</title><rect x="87.5837%" y="405" width="0.0692%" height="15" fill="rgb(245,119,9)" fg:x="3795" fg:w="3"/><text x="87.8337%" y="415.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.07%)</title><rect x="87.5837%" y="389" width="0.0692%" height="15" fill="rgb(241,163,25)" fg:x="3795" fg:w="3"/><text x="87.8337%" y="399.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (3 samples, 0.07%)</title><rect x="87.5837%" y="373" width="0.0692%" height="15" fill="rgb(217,214,3)" fg:x="3795" fg:w="3"/><text x="87.8337%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.02%)</title><rect x="87.6298%" y="357" width="0.0231%" height="15" fill="rgb(240,86,28)" fg:x="3797" fg:w="1"/><text x="87.8798%" y="367.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (2 samples, 0.05%)</title><rect x="87.6529%" y="405" width="0.0462%" height="15" fill="rgb(215,47,9)" fg:x="3798" fg:w="2"/><text x="87.9029%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.05%)</title><rect x="87.6529%" y="389" width="0.0462%" height="15" fill="rgb(252,25,45)" fg:x="3798" fg:w="2"/><text x="87.9029%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (3 samples, 0.07%)</title><rect x="87.8144%" y="357" width="0.0692%" height="15" fill="rgb(251,164,9)" fg:x="3805" fg:w="3"/><text x="88.0644%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (10 samples, 0.23%)</title><rect x="87.6991%" y="389" width="0.2308%" height="15" fill="rgb(233,194,0)" fg:x="3800" fg:w="10"/><text x="87.9491%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (7 samples, 0.16%)</title><rect x="87.7683%" y="373" width="0.1616%" height="15" fill="rgb(249,111,24)" fg:x="3803" fg:w="7"/><text x="88.0183%" y="383.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (2 samples, 0.05%)</title><rect x="87.8837%" y="357" width="0.0462%" height="15" fill="rgb(250,223,3)" fg:x="3808" fg:w="2"/><text x="88.1337%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.05%)</title><rect x="87.8837%" y="341" width="0.0462%" height="15" fill="rgb(236,178,37)" fg:x="3808" fg:w="2"/><text x="88.1337%" y="351.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (17 samples, 0.39%)</title><rect x="87.5837%" y="469" width="0.3923%" height="15" fill="rgb(241,158,50)" fg:x="3795" fg:w="17"/><text x="87.8337%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (17 samples, 0.39%)</title><rect x="87.5837%" y="453" width="0.3923%" height="15" fill="rgb(213,121,41)" fg:x="3795" fg:w="17"/><text x="87.8337%" y="463.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (17 samples, 0.39%)</title><rect x="87.5837%" y="437" width="0.3923%" height="15" fill="rgb(240,92,3)" fg:x="3795" fg:w="17"/><text x="87.8337%" y="447.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (14 samples, 0.32%)</title><rect x="87.6529%" y="421" width="0.3231%" height="15" fill="rgb(205,123,3)" fg:x="3798" fg:w="14"/><text x="87.9029%" y="431.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (12 samples, 0.28%)</title><rect x="87.6991%" y="405" width="0.2769%" height="15" fill="rgb(205,97,47)" fg:x="3800" fg:w="12"/><text x="87.9491%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (2 samples, 0.05%)</title><rect x="87.9298%" y="389" width="0.0462%" height="15" fill="rgb(247,152,14)" fg:x="3810" fg:w="2"/><text x="88.1798%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (2 samples, 0.05%)</title><rect x="87.9298%" y="373" width="0.0462%" height="15" fill="rgb(248,195,53)" fg:x="3810" fg:w="2"/><text x="88.1798%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (1 samples, 0.02%)</title><rect x="87.9529%" y="357" width="0.0231%" height="15" fill="rgb(226,201,16)" fg:x="3811" fg:w="1"/><text x="88.2029%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (1 samples, 0.02%)</title><rect x="87.9529%" y="341" width="0.0231%" height="15" fill="rgb(205,98,0)" fg:x="3811" fg:w="1"/><text x="88.2029%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.02%)</title><rect x="87.9529%" y="325" width="0.0231%" height="15" fill="rgb(214,191,48)" fg:x="3811" fg:w="1"/><text x="88.2029%" y="335.50"></text></g><g><title>simple_lisp::interpreter::data::DataBox::new (10 samples, 0.23%)</title><rect x="87.9760%" y="469" width="0.2308%" height="15" fill="rgb(237,112,39)" fg:x="3812" fg:w="10"/><text x="88.2260%" y="479.50"></text></g><g><title>__rdl_alloc (1 samples, 0.02%)</title><rect x="88.2529%" y="437" width="0.0231%" height="15" fill="rgb(247,203,27)" fg:x="3824" fg:w="1"/><text x="88.5029%" y="447.50"></text></g><g><title>__rust_alloc (1 samples, 0.02%)</title><rect x="88.2760%" y="437" width="0.0231%" height="15" fill="rgb(235,124,28)" fg:x="3825" fg:w="1"/><text x="88.5260%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="88.7376%" y="405" width="0.0231%" height="15" fill="rgb(208,207,46)" fg:x="3845" fg:w="1"/><text x="88.9876%" y="415.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (54 samples, 1.25%)</title><rect x="87.5375%" y="501" width="1.2462%" height="15" fill="rgb(234,176,4)" fg:x="3793" fg:w="54"/><text x="87.7875%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (53 samples, 1.22%)</title><rect x="87.5606%" y="485" width="1.2232%" height="15" fill="rgb(230,133,28)" fg:x="3794" fg:w="53"/><text x="87.8106%" y="495.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (25 samples, 0.58%)</title><rect x="88.2068%" y="469" width="0.5770%" height="15" fill="rgb(211,137,40)" fg:x="3822" fg:w="25"/><text x="88.4568%" y="479.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.53%)</title><rect x="88.2529%" y="453" width="0.5308%" height="15" fill="rgb(254,35,13)" fg:x="3824" fg:w="23"/><text x="88.5029%" y="463.50"></text></g><g><title>malloc (21 samples, 0.48%)</title><rect x="88.2991%" y="437" width="0.4847%" height="15" fill="rgb(225,49,51)" fg:x="3826" fg:w="21"/><text x="88.5491%" y="447.50"></text></g><g><title>[libc.so.6] (13 samples, 0.30%)</title><rect x="88.4837%" y="421" width="0.3000%" height="15" fill="rgb(251,10,15)" fg:x="3834" fg:w="13"/><text x="88.7337%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.7607%" y="405" width="0.0231%" height="15" fill="rgb(228,207,15)" fg:x="3846" fg:w="1"/><text x="89.0107%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="88.7607%" y="389" width="0.0231%" height="15" fill="rgb(241,99,19)" fg:x="3846" fg:w="1"/><text x="89.0107%" y="399.50"></text></g><g><title>simple_lisp::interpreter::builtins::core::and (66 samples, 1.52%)</title><rect x="87.3529%" y="517" width="1.5232%" height="15" fill="rgb(207,104,49)" fg:x="3785" fg:w="66"/><text x="87.6029%" y="527.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (4 samples, 0.09%)</title><rect x="88.7838%" y="501" width="0.0923%" height="15" fill="rgb(234,99,18)" fg:x="3847" fg:w="4"/><text x="89.0338%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (4 samples, 0.09%)</title><rect x="88.7838%" y="485" width="0.0923%" height="15" fill="rgb(213,191,49)" fg:x="3847" fg:w="4"/><text x="89.0338%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (4 samples, 0.09%)</title><rect x="88.7838%" y="469" width="0.0923%" height="15" fill="rgb(210,226,19)" fg:x="3847" fg:w="4"/><text x="89.0338%" y="479.50"></text></g><g><title>core::cell::BorrowRef::new (4 samples, 0.09%)</title><rect x="88.7838%" y="453" width="0.0923%" height="15" fill="rgb(229,97,18)" fg:x="3847" fg:w="4"/><text x="89.0338%" y="463.50"></text></g><g><title>core::cell::is_reading (3 samples, 0.07%)</title><rect x="88.8068%" y="437" width="0.0692%" height="15" fill="rgb(211,167,15)" fg:x="3848" fg:w="3"/><text x="89.0568%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.05%)</title><rect x="89.5684%" y="405" width="0.0462%" height="15" fill="rgb(210,169,34)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="415.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::collect::_{{closure}} (2 samples, 0.05%)</title><rect x="89.5684%" y="389" width="0.0462%" height="15" fill="rgb(241,121,31)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="399.50"></text></g><g><title>simple_lisp::interpreter::data::Data::add_data_refs (2 samples, 0.05%)</title><rect x="89.5684%" y="373" width="0.0462%" height="15" fill="rgb(232,40,11)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="383.50"></text></g><g><title>&lt;indexmap::set::IndexSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.05%)</title><rect x="89.5684%" y="357" width="0.0462%" height="15" fill="rgb(205,86,26)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="367.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 0.05%)</title><rect x="89.5684%" y="341" width="0.0462%" height="15" fill="rgb(231,126,28)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.05%)</title><rect x="89.5684%" y="325" width="0.0462%" height="15" fill="rgb(219,221,18)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.05%)</title><rect x="89.5684%" y="309" width="0.0462%" height="15" fill="rgb(211,40,0)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.05%)</title><rect x="89.5684%" y="293" width="0.0462%" height="15" fill="rgb(239,85,43)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.05%)</title><rect x="89.5684%" y="277" width="0.0462%" height="15" fill="rgb(231,55,21)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.05%)</title><rect x="89.5684%" y="261" width="0.0462%" height="15" fill="rgb(225,184,43)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.05%)</title><rect x="89.5684%" y="245" width="0.0462%" height="15" fill="rgb(251,158,41)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.05%)</title><rect x="89.5684%" y="229" width="0.0462%" height="15" fill="rgb(234,159,37)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.05%)</title><rect x="89.5684%" y="213" width="0.0462%" height="15" fill="rgb(216,204,22)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.05%)</title><rect x="89.5684%" y="197" width="0.0462%" height="15" fill="rgb(214,17,3)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.05%)</title><rect x="89.5684%" y="181" width="0.0462%" height="15" fill="rgb(212,111,17)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="191.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (2 samples, 0.05%)</title><rect x="89.5684%" y="165" width="0.0462%" height="15" fill="rgb(221,157,24)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="175.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (2 samples, 0.05%)</title><rect x="89.5684%" y="149" width="0.0462%" height="15" fill="rgb(252,16,13)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="159.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (2 samples, 0.05%)</title><rect x="89.5684%" y="133" width="0.0462%" height="15" fill="rgb(221,62,2)" fg:x="3881" fg:w="2"/><text x="89.8184%" y="143.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (1 samples, 0.02%)</title><rect x="89.5915%" y="117" width="0.0231%" height="15" fill="rgb(247,87,22)" fg:x="3882" fg:w="1"/><text x="89.8415%" y="127.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (1 samples, 0.02%)</title><rect x="89.5915%" y="101" width="0.0231%" height="15" fill="rgb(215,73,9)" fg:x="3882" fg:w="1"/><text x="89.8415%" y="111.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.02%)</title><rect x="89.5915%" y="85" width="0.0231%" height="15" fill="rgb(207,175,33)" fg:x="3882" fg:w="1"/><text x="89.8415%" y="95.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.02%)</title><rect x="89.5915%" y="69" width="0.0231%" height="15" fill="rgb(243,129,54)" fg:x="3882" fg:w="1"/><text x="89.8415%" y="79.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (1 samples, 0.02%)</title><rect x="89.5915%" y="53" width="0.0231%" height="15" fill="rgb(227,119,45)" fg:x="3882" fg:w="1"/><text x="89.8415%" y="63.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.02%)</title><rect x="89.5915%" y="37" width="0.0231%" height="15" fill="rgb(205,109,36)" fg:x="3882" fg:w="1"/><text x="89.8415%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (36 samples, 0.83%)</title><rect x="88.8761%" y="469" width="0.8308%" height="15" fill="rgb(205,6,39)" fg:x="3851" fg:w="36"/><text x="89.1261%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (36 samples, 0.83%)</title><rect x="88.8761%" y="453" width="0.8308%" height="15" fill="rgb(221,32,16)" fg:x="3851" fg:w="36"/><text x="89.1261%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (36 samples, 0.83%)</title><rect x="88.8761%" y="437" width="0.8308%" height="15" fill="rgb(228,144,50)" fg:x="3851" fg:w="36"/><text x="89.1261%" y="447.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (36 samples, 0.83%)</title><rect x="88.8761%" y="421" width="0.8308%" height="15" fill="rgb(229,201,53)" fg:x="3851" fg:w="36"/><text x="89.1261%" y="431.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::collect::_{{closure}} (4 samples, 0.09%)</title><rect x="89.6146%" y="405" width="0.0923%" height="15" fill="rgb(249,153,27)" fg:x="3883" fg:w="4"/><text x="89.8646%" y="415.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::is_external (2 samples, 0.05%)</title><rect x="89.6607%" y="389" width="0.0462%" height="15" fill="rgb(227,106,25)" fg:x="3885" fg:w="2"/><text x="89.9107%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (1 samples, 0.02%)</title><rect x="89.6838%" y="373" width="0.0231%" height="15" fill="rgb(230,65,29)" fg:x="3886" fg:w="1"/><text x="89.9338%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (1 samples, 0.02%)</title><rect x="89.6838%" y="357" width="0.0231%" height="15" fill="rgb(221,57,46)" fg:x="3886" fg:w="1"/><text x="89.9338%" y="367.50"></text></g><g><title>core::cell::BorrowRef::new (1 samples, 0.02%)</title><rect x="89.6838%" y="341" width="0.0231%" height="15" fill="rgb(229,161,17)" fg:x="3886" fg:w="1"/><text x="89.9338%" y="351.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::pop (1 samples, 0.02%)</title><rect x="89.7069%" y="469" width="0.0231%" height="15" fill="rgb(222,213,11)" fg:x="3887" fg:w="1"/><text x="89.9569%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::pop (1 samples, 0.02%)</title><rect x="89.7069%" y="453" width="0.0231%" height="15" fill="rgb(235,35,13)" fg:x="3887" fg:w="1"/><text x="89.9569%" y="463.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::pop (1 samples, 0.02%)</title><rect x="89.7069%" y="437" width="0.0231%" height="15" fill="rgb(233,158,34)" fg:x="3887" fg:w="1"/><text x="89.9569%" y="447.50"></text></g><g><title>indexmap::map::core::erase_index (1 samples, 0.02%)</title><rect x="89.7069%" y="421" width="0.0231%" height="15" fill="rgb(215,151,48)" fg:x="3887" fg:w="1"/><text x="89.9569%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::erase_entry (1 samples, 0.02%)</title><rect x="89.7069%" y="405" width="0.0231%" height="15" fill="rgb(229,84,14)" fg:x="3887" fg:w="1"/><text x="89.9569%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1 samples, 0.02%)</title><rect x="89.7069%" y="389" width="0.0231%" height="15" fill="rgb(229,68,14)" fg:x="3887" fg:w="1"/><text x="89.9569%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (1 samples, 0.02%)</title><rect x="89.7069%" y="373" width="0.0231%" height="15" fill="rgb(243,106,26)" fg:x="3887" fg:w="1"/><text x="89.9569%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.02%)</title><rect x="89.7069%" y="357" width="0.0231%" height="15" fill="rgb(206,45,38)" fg:x="3887" fg:w="1"/><text x="89.9569%" y="367.50"></text></g><g><title>indexmap::map::core::erase_index::_{{closure}} (1 samples, 0.02%)</title><rect x="89.7069%" y="341" width="0.0231%" height="15" fill="rgb(226,6,15)" fg:x="3887" fg:w="1"/><text x="89.9569%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (38 samples, 0.88%)</title><rect x="92.4994%" y="293" width="0.8770%" height="15" fill="rgb(232,22,54)" fg:x="4008" fg:w="38"/><text x="92.7494%" y="303.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (38 samples, 0.88%)</title><rect x="92.4994%" y="277" width="0.8770%" height="15" fill="rgb(229,222,32)" fg:x="4008" fg:w="38"/><text x="92.7494%" y="287.50"></text></g><g><title>core::cell::BorrowRef::new (38 samples, 0.88%)</title><rect x="92.4994%" y="261" width="0.8770%" height="15" fill="rgb(228,62,29)" fg:x="4008" fg:w="38"/><text x="92.7494%" y="271.50"></text></g><g><title>core::cell::is_reading (6 samples, 0.14%)</title><rect x="93.2379%" y="245" width="0.1385%" height="15" fill="rgb(251,103,34)" fg:x="4040" fg:w="6"/><text x="93.4879%" y="255.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::allocation_size (112 samples, 2.58%)</title><rect x="92.4994%" y="325" width="2.5848%" height="15" fill="rgb(233,12,30)" fg:x="4008" fg:w="112"/><text x="92.7494%" y="335.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataBox::allocation_size (112 samples, 2.58%)</title><rect x="92.4994%" y="309" width="2.5848%" height="15" fill="rgb(238,52,0)" fg:x="4008" fg:w="112"/><text x="92.7494%" y="319.50">si..</text></g><g><title>simple_lisp::interpreter::data::Data::allocation_size (74 samples, 1.71%)</title><rect x="93.3764%" y="293" width="1.7078%" height="15" fill="rgb(223,98,5)" fg:x="4046" fg:w="74"/><text x="93.6264%" y="303.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.14%)</title><rect x="95.3612%" y="293" width="0.1385%" height="15" fill="rgb(228,75,37)" fg:x="4132" fg:w="6"/><text x="95.6112%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.14%)</title><rect x="95.3612%" y="277" width="0.1385%" height="15" fill="rgb(205,115,49)" fg:x="4132" fg:w="6"/><text x="95.6112%" y="287.50"></text></g><g><title>__rust_dealloc (9 samples, 0.21%)</title><rect x="95.4997%" y="293" width="0.2077%" height="15" fill="rgb(250,154,43)" fg:x="4138" fg:w="9"/><text x="95.7497%" y="303.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::dealloc (159 samples, 3.67%)</title><rect x="95.0842%" y="325" width="3.6695%" height="15" fill="rgb(226,43,29)" fg:x="4120" fg:w="159"/><text x="95.3342%" y="335.50">simp..</text></g><g><title>alloc::alloc::dealloc (159 samples, 3.67%)</title><rect x="95.0842%" y="309" width="3.6695%" height="15" fill="rgb(249,228,39)" fg:x="4120" fg:w="159"/><text x="95.3342%" y="319.50">allo..</text></g><g><title>cfree (132 samples, 3.05%)</title><rect x="95.7074%" y="293" width="3.0464%" height="15" fill="rgb(216,79,43)" fg:x="4147" fg:w="132"/><text x="95.9574%" y="303.50">cfr..</text></g><g><title>[libc.so.6] (92 samples, 2.12%)</title><rect x="96.6305%" y="277" width="2.1232%" height="15" fill="rgb(228,95,12)" fg:x="4187" fg:w="92"/><text x="96.8805%" y="287.50">[..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_generation (2 samples, 0.05%)</title><rect x="98.7538%" y="325" width="0.0462%" height="15" fill="rgb(249,221,15)" fg:x="4279" fg:w="2"/><text x="99.0038%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.05%)</title><rect x="98.7538%" y="309" width="0.0462%" height="15" fill="rgb(233,34,13)" fg:x="4279" fg:w="2"/><text x="99.0038%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (406 samples, 9.37%)</title><rect x="89.7300%" y="421" width="9.3700%" height="15" fill="rgb(214,103,39)" fg:x="3888" fg:w="406"/><text x="89.9800%" y="431.50">alloc::vec::V..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (406 samples, 9.37%)</title><rect x="89.7300%" y="405" width="9.3700%" height="15" fill="rgb(251,126,39)" fg:x="3888" fg:w="406"/><text x="89.9800%" y="415.50">alloc::vec::V..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::retain_in_order::_{{closure}} (402 samples, 9.28%)</title><rect x="89.8223%" y="389" width="9.2776%" height="15" fill="rgb(214,216,36)" fg:x="3892" fg:w="402"/><text x="90.0723%" y="399.50">indexmap::map..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::retain::_{{closure}} (402 samples, 9.28%)</title><rect x="89.8223%" y="373" width="9.2776%" height="15" fill="rgb(220,221,8)" fg:x="3892" fg:w="402"/><text x="90.0723%" y="383.50">indexmap::map..</text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::retain::_{{closure}} (402 samples, 9.28%)</title><rect x="89.8223%" y="357" width="9.2776%" height="15" fill="rgb(240,216,3)" fg:x="3892" fg:w="402"/><text x="90.0723%" y="367.50">indexmap::set..</text></g><g><title>simple_lisp::interpreter::data::DataStore::collect::_{{closure}} (402 samples, 9.28%)</title><rect x="89.8223%" y="341" width="9.2776%" height="15" fill="rgb(232,218,17)" fg:x="3892" fg:w="402"/><text x="90.0723%" y="351.50">simple_lisp::..</text></g><g><title>simple_lisp::interpreter::data::DataRef::is_external (13 samples, 0.30%)</title><rect x="98.7999%" y="325" width="0.3000%" height="15" fill="rgb(229,163,45)" fg:x="4281" fg:w="13"/><text x="99.0499%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (13 samples, 0.30%)</title><rect x="98.7999%" y="309" width="0.3000%" height="15" fill="rgb(231,110,42)" fg:x="4281" fg:w="13"/><text x="99.0499%" y="319.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (13 samples, 0.30%)</title><rect x="98.7999%" y="293" width="0.3000%" height="15" fill="rgb(208,170,48)" fg:x="4281" fg:w="13"/><text x="99.0499%" y="303.50"></text></g><g><title>core::cell::BorrowRef::new (13 samples, 0.30%)</title><rect x="98.7999%" y="277" width="0.3000%" height="15" fill="rgb(239,116,25)" fg:x="4281" fg:w="13"/><text x="99.0499%" y="287.50"></text></g><g><title>core::cell::is_reading (2 samples, 0.05%)</title><rect x="99.0538%" y="261" width="0.0462%" height="15" fill="rgb(219,200,50)" fg:x="4292" fg:w="2"/><text x="99.3038%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::clear (1 samples, 0.02%)</title><rect x="99.0999%" y="405" width="0.0231%" height="15" fill="rgb(245,200,0)" fg:x="4294" fg:w="1"/><text x="99.3499%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;&amp;mut hashbrown::raw::inner::RawTable&lt;usize&gt;,hashbrown::raw::inner::RawTable&lt;usize&gt;::clear::{{closure}}&gt;&gt; (1 samples, 0.02%)</title><rect x="99.0999%" y="389" width="0.0231%" height="15" fill="rgb(245,119,33)" fg:x="4294" fg:w="1"/><text x="99.3499%" y="399.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="99.0999%" y="373" width="0.0231%" height="15" fill="rgb(231,125,12)" fg:x="4294" fg:w="1"/><text x="99.3499%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::clear::_{{closure}} (1 samples, 0.02%)</title><rect x="99.0999%" y="357" width="0.0231%" height="15" fill="rgb(216,96,41)" fg:x="4294" fg:w="1"/><text x="99.3499%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::clear_no_drop (1 samples, 0.02%)</title><rect x="99.0999%" y="341" width="0.0231%" height="15" fill="rgb(248,43,45)" fg:x="4294" fg:w="1"/><text x="99.3499%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::clear_no_drop (1 samples, 0.02%)</title><rect x="99.0999%" y="325" width="0.0231%" height="15" fill="rgb(217,222,7)" fg:x="4294" fg:w="1"/><text x="99.3499%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.02%)</title><rect x="99.0999%" y="309" width="0.0231%" height="15" fill="rgb(233,28,6)" fg:x="4294" fg:w="1"/><text x="99.3499%" y="319.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.02%)</title><rect x="99.0999%" y="293" width="0.0231%" height="15" fill="rgb(231,218,15)" fg:x="4294" fg:w="1"/><text x="99.3499%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="99.0999%" y="277" width="0.0231%" height="15" fill="rgb(226,171,48)" fg:x="4294" fg:w="1"/><text x="99.3499%" y="287.50"></text></g><g><title>simple_lisp::interpreter::builtins::core::gc_collect (445 samples, 10.27%)</title><rect x="88.8761%" y="517" width="10.2700%" height="15" fill="rgb(235,201,9)" fg:x="3851" fg:w="445"/><text x="89.1261%" y="527.50">simple_lisp::in..</text></g><g><title>simple_lisp::interpreter::Interpreter::gc_collect (445 samples, 10.27%)</title><rect x="88.8761%" y="501" width="10.2700%" height="15" fill="rgb(217,80,15)" fg:x="3851" fg:w="445"/><text x="89.1261%" y="511.50">simple_lisp::in..</text></g><g><title>simple_lisp::interpreter::data::DataStore::collect (445 samples, 10.27%)</title><rect x="88.8761%" y="485" width="10.2700%" height="15" fill="rgb(219,152,8)" fg:x="3851" fg:w="445"/><text x="89.1261%" y="495.50">simple_lisp::in..</text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::retain (408 samples, 9.42%)</title><rect x="89.7300%" y="469" width="9.4161%" height="15" fill="rgb(243,107,38)" fg:x="3888" fg:w="408"/><text x="89.9800%" y="479.50">indexmap::set..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::retain (408 samples, 9.42%)</title><rect x="89.7300%" y="453" width="9.4161%" height="15" fill="rgb(231,17,5)" fg:x="3888" fg:w="408"/><text x="89.9800%" y="463.50">indexmap::map..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::retain_in_order (408 samples, 9.42%)</title><rect x="89.7300%" y="437" width="9.4161%" height="15" fill="rgb(209,25,54)" fg:x="3888" fg:w="408"/><text x="89.9800%" y="447.50">indexmap::map..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::rebuild_hash_table (2 samples, 0.05%)</title><rect x="99.0999%" y="421" width="0.0462%" height="15" fill="rgb(219,0,2)" fg:x="4294" fg:w="2"/><text x="99.3499%" y="431.50"></text></g><g><title>indexmap::map::core::raw::insert_bulk_no_grow (1 samples, 0.02%)</title><rect x="99.1230%" y="405" width="0.0231%" height="15" fill="rgb(246,9,5)" fg:x="4295" fg:w="1"/><text x="99.3730%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.02%)</title><rect x="99.1230%" y="389" width="0.0231%" height="15" fill="rgb(226,159,4)" fg:x="4295" fg:w="1"/><text x="99.3730%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::prepare_insert_slot (1 samples, 0.02%)</title><rect x="99.1230%" y="373" width="0.0231%" height="15" fill="rgb(219,175,34)" fg:x="4295" fg:w="1"/><text x="99.3730%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot (1 samples, 0.02%)</title><rect x="99.1230%" y="357" width="0.0231%" height="15" fill="rgb(236,10,46)" fg:x="4295" fg:w="1"/><text x="99.3730%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::probe_seq (1 samples, 0.02%)</title><rect x="99.1230%" y="341" width="0.0231%" height="15" fill="rgb(240,211,16)" fg:x="4295" fg:w="1"/><text x="99.3730%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.05%)</title><rect x="99.1461%" y="453" width="0.0462%" height="15" fill="rgb(205,3,43)" fg:x="4296" fg:w="2"/><text x="99.3961%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (3 samples, 0.07%)</title><rect x="99.1922%" y="453" width="0.0692%" height="15" fill="rgb(245,7,22)" fg:x="4298" fg:w="3"/><text x="99.4422%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (3 samples, 0.07%)</title><rect x="99.1922%" y="437" width="0.0692%" height="15" fill="rgb(239,132,32)" fg:x="4298" fg:w="3"/><text x="99.4422%" y="447.50"></text></g><g><title>core::mem::replace (3 samples, 0.07%)</title><rect x="99.1922%" y="421" width="0.0692%" height="15" fill="rgb(228,202,34)" fg:x="4298" fg:w="3"/><text x="99.4422%" y="431.50"></text></g><g><title>core::ptr::write (3 samples, 0.07%)</title><rect x="99.1922%" y="405" width="0.0692%" height="15" fill="rgb(254,200,22)" fg:x="4298" fg:w="3"/><text x="99.4422%" y="415.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (21 samples, 0.48%)</title><rect x="99.1461%" y="517" width="0.4847%" height="15" fill="rgb(219,10,39)" fg:x="4296" fg:w="21"/><text x="99.3961%" y="527.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (21 samples, 0.48%)</title><rect x="99.1461%" y="501" width="0.4847%" height="15" fill="rgb(226,210,39)" fg:x="4296" fg:w="21"/><text x="99.3961%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (21 samples, 0.48%)</title><rect x="99.1461%" y="485" width="0.4847%" height="15" fill="rgb(208,219,16)" fg:x="4296" fg:w="21"/><text x="99.3961%" y="495.50"></text></g><g><title>core::cell::BorrowRef::new (21 samples, 0.48%)</title><rect x="99.1461%" y="469" width="0.4847%" height="15" fill="rgb(216,158,51)" fg:x="4296" fg:w="21"/><text x="99.3961%" y="479.50"></text></g><g><title>core::cell::is_reading (16 samples, 0.37%)</title><rect x="99.2615%" y="453" width="0.3693%" height="15" fill="rgb(233,14,44)" fg:x="4301" fg:w="16"/><text x="99.5115%" y="463.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.02%)</title><rect x="99.6538%" y="469" width="0.0231%" height="15" fill="rgb(237,97,39)" fg:x="4318" fg:w="1"/><text x="99.9038%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.02%)</title><rect x="99.6538%" y="453" width="0.0231%" height="15" fill="rgb(218,198,43)" fg:x="4318" fg:w="1"/><text x="99.9038%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.02%)</title><rect x="99.6538%" y="437" width="0.0231%" height="15" fill="rgb(231,104,20)" fg:x="4318" fg:w="1"/><text x="99.9038%" y="447.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (1 samples, 0.02%)</title><rect x="99.6538%" y="421" width="0.0231%" height="15" fill="rgb(254,36,13)" fg:x="4318" fg:w="1"/><text x="99.9038%" y="431.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.02%)</title><rect x="99.6538%" y="405" width="0.0231%" height="15" fill="rgb(248,14,50)" fg:x="4318" fg:w="1"/><text x="99.9038%" y="415.50"></text></g><g><title>&lt;fnv::FnvHasher as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="99.6538%" y="389" width="0.0231%" height="15" fill="rgb(217,107,29)" fg:x="4318" fg:w="1"/><text x="99.9038%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (1 samples, 0.02%)</title><rect x="99.6538%" y="373" width="0.0231%" height="15" fill="rgb(251,169,33)" fg:x="4318" fg:w="1"/><text x="99.9038%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.05%)</title><rect x="99.7692%" y="421" width="0.0462%" height="15" fill="rgb(217,108,32)" fg:x="4323" fg:w="2"/><text x="100.0192%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.05%)</title><rect x="99.7692%" y="405" width="0.0462%" height="15" fill="rgb(219,66,42)" fg:x="4323" fg:w="2"/><text x="100.0192%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.05%)</title><rect x="99.7692%" y="389" width="0.0462%" height="15" fill="rgb(206,180,7)" fg:x="4323" fg:w="2"/><text x="100.0192%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.05%)</title><rect x="99.7692%" y="373" width="0.0462%" height="15" fill="rgb(208,226,31)" fg:x="4323" fg:w="2"/><text x="100.0192%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.05%)</title><rect x="99.7692%" y="357" width="0.0462%" height="15" fill="rgb(218,26,49)" fg:x="4323" fg:w="2"/><text x="100.0192%" y="367.50"></text></g><g><title>_start (4,316 samples, 99.61%)</title><rect x="0.2539%" y="821" width="99.6077%" height="15" fill="rgb(233,197,48)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="831.50">_start</text></g><g><title>__libc_start_main (4,316 samples, 99.61%)</title><rect x="0.2539%" y="805" width="99.6077%" height="15" fill="rgb(252,181,51)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="815.50">__libc_start_main</text></g><g><title>[libc.so.6] (4,316 samples, 99.61%)</title><rect x="0.2539%" y="789" width="99.6077%" height="15" fill="rgb(253,90,19)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="799.50">[libc.so.6]</text></g><g><title>main (4,316 samples, 99.61%)</title><rect x="0.2539%" y="773" width="99.6077%" height="15" fill="rgb(215,171,30)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="783.50">main</text></g><g><title>std::rt::lang_start_internal (4,316 samples, 99.61%)</title><rect x="0.2539%" y="757" width="99.6077%" height="15" fill="rgb(214,222,9)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="767.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (4,316 samples, 99.61%)</title><rect x="0.2539%" y="741" width="99.6077%" height="15" fill="rgb(223,3,22)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,316 samples, 99.61%)</title><rect x="0.2539%" y="725" width="99.6077%" height="15" fill="rgb(225,196,46)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,316 samples, 99.61%)</title><rect x="0.2539%" y="709" width="99.6077%" height="15" fill="rgb(209,110,37)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="719.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (4,316 samples, 99.61%)</title><rect x="0.2539%" y="693" width="99.6077%" height="15" fill="rgb(249,89,12)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="703.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (4,316 samples, 99.61%)</title><rect x="0.2539%" y="677" width="99.6077%" height="15" fill="rgb(226,27,33)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="687.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (4,316 samples, 99.61%)</title><rect x="0.2539%" y="661" width="99.6077%" height="15" fill="rgb(213,82,22)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="671.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (4,316 samples, 99.61%)</title><rect x="0.2539%" y="645" width="99.6077%" height="15" fill="rgb(248,140,0)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="655.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (4,316 samples, 99.61%)</title><rect x="0.2539%" y="629" width="99.6077%" height="15" fill="rgb(228,106,3)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="639.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (4,316 samples, 99.61%)</title><rect x="0.2539%" y="613" width="99.6077%" height="15" fill="rgb(209,23,37)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="623.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4,316 samples, 99.61%)</title><rect x="0.2539%" y="597" width="99.6077%" height="15" fill="rgb(241,93,50)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="607.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (4,316 samples, 99.61%)</title><rect x="0.2539%" y="581" width="99.6077%" height="15" fill="rgb(253,46,43)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="591.50">core::ops::function::FnOnce::call_once</text></g><g><title>simple_lisp::main (4,316 samples, 99.61%)</title><rect x="0.2539%" y="565" width="99.6077%" height="15" fill="rgb(226,206,43)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="575.50">simple_lisp::main</text></g><g><title>simple_lisp::run (4,316 samples, 99.61%)</title><rect x="0.2539%" y="549" width="99.6077%" height="15" fill="rgb(217,54,7)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="559.50">simple_lisp::run</text></g><g><title>simple_lisp::interpreter::Interpreter::run (4,316 samples, 99.61%)</title><rect x="0.2539%" y="533" width="99.6077%" height="15" fill="rgb(223,5,52)" fg:x="11" fg:w="4316"/><text x="0.5039%" y="543.50">simple_lisp::interpreter::Interpreter::run</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (10 samples, 0.23%)</title><rect x="99.6307%" y="517" width="0.2308%" height="15" fill="rgb(206,52,46)" fg:x="4317" fg:w="10"/><text x="99.8807%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (10 samples, 0.23%)</title><rect x="99.6307%" y="501" width="0.2308%" height="15" fill="rgb(253,136,11)" fg:x="4317" fg:w="10"/><text x="99.8807%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (10 samples, 0.23%)</title><rect x="99.6307%" y="485" width="0.2308%" height="15" fill="rgb(208,106,33)" fg:x="4317" fg:w="10"/><text x="99.8807%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (8 samples, 0.18%)</title><rect x="99.6769%" y="469" width="0.1846%" height="15" fill="rgb(206,54,4)" fg:x="4319" fg:w="8"/><text x="99.9269%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (8 samples, 0.18%)</title><rect x="99.6769%" y="453" width="0.1846%" height="15" fill="rgb(213,3,15)" fg:x="4319" fg:w="8"/><text x="99.9269%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (8 samples, 0.18%)</title><rect x="99.6769%" y="437" width="0.1846%" height="15" fill="rgb(252,211,39)" fg:x="4319" fg:w="8"/><text x="99.9269%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.05%)</title><rect x="99.8154%" y="421" width="0.0462%" height="15" fill="rgb(223,6,36)" fg:x="4325" fg:w="2"/><text x="100.0654%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.05%)</title><rect x="99.8154%" y="405" width="0.0462%" height="15" fill="rgb(252,169,45)" fg:x="4325" fg:w="2"/><text x="100.0654%" y="415.50"></text></g><g><title>cfree (1 samples, 0.02%)</title><rect x="99.8615%" y="821" width="0.0231%" height="15" fill="rgb(212,48,26)" fg:x="4327" fg:w="1"/><text x="100.1115%" y="831.50"></text></g><g><title>[libc.so.6] (1 samples, 0.02%)</title><rect x="99.8615%" y="805" width="0.0231%" height="15" fill="rgb(251,102,48)" fg:x="4327" fg:w="1"/><text x="100.1115%" y="815.50"></text></g><g><title>all (4,333 samples, 100%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(243,208,16)" fg:x="0" fg:w="4333"/><text x="0.2500%" y="863.50"></text></g><g><title>simple_lisp (4,333 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(219,96,24)" fg:x="0" fg:w="4333"/><text x="0.2500%" y="847.50">simple_lisp</text></g><g><title>malloc (5 samples, 0.12%)</title><rect x="99.8846%" y="821" width="0.1154%" height="15" fill="rgb(219,33,29)" fg:x="4328" fg:w="5"/><text x="100.1346%" y="831.50"></text></g><g><title>[libc.so.6] (5 samples, 0.12%)</title><rect x="99.8846%" y="805" width="0.1154%" height="15" fill="rgb(223,176,5)" fg:x="4328" fg:w="5"/><text x="100.1346%" y="815.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="99.9538%" y="789" width="0.0462%" height="15" fill="rgb(228,140,14)" fg:x="4331" fg:w="2"/><text x="100.2038%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.02%)</title><rect x="99.9769%" y="773" width="0.0231%" height="15" fill="rgb(217,179,31)" fg:x="4332" fg:w="1"/><text x="100.2269%" y="783.50"></text></g></svg></svg>