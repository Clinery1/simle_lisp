; re-exports
(def and core/and)
(def or core/or)
(def list core/list)
(def length core/length)
(def index core/index)
(def clone core/clone)



(defn print [& args]
    (std/io/write std/io/stdout (std/string/format ...args))
    None)

(defn println
    ([& args] (print ...args "\n"))
    ([] (print "\n")))


(defn listIter [iterList]
    (def i 0)
    (fn {iterList i} []
        (cond
            ((< i (core/length iterList))
                (begin
                    (def idx (core/clone i))
                    (+= i 1)
                    (core/index iterList idx)))
            (else None))))
(defn revListIter [iterList]
    (fn {iterList} []
        (listPop iterList)))

(defn range [start end]
    (def i start)
    (fn {i end} []
        (cond
            ((< i end)
                (begin
                    (def ret (core/clone i))
                    (+= i 1)
                    ret))
            (else None))))
(defn rangeInclusive [start endInclusive]
    (def i start)
    (fn {i endInclusive} []
        (cond
            ((<= i endInclusive) (begin
                (def ret (core/clone i))
                (+= i 1)
                ret))
            (else None))))

(defn forEach [iter func]
    (def val (iter))
    (cond
        ((!= val None) (begin
            (func val)
            (recur iter func)))
        (else None)))

(defn map [iter mapFn]
    (fn {iter mapFn} []
        (def val (iter))
        (cond
            ((= val None) None)
            (else (mapFn val)))))
(defn filter [iter filterFn]
    (fn {iter filterFn} []
        (def val (iter))
        (cond
            ((= val None) None)
            (else (cond
                ((filterFn val) val)
                (else (recur)))))))

(defn enumerate [iter]
    (def i 0)
    (fn {iter i} []
        (def val (iter))
        (cond
            ((= val None) None)
            (else (begin
                (def out (core/list (core/clone i) val))
                (+= i 1)
                out)))))

(defn reduce [iter reduceFn]
    (def out (iter))
    (def rec (fn [iter reduceFn out]
        (def next (iter))
        (cond
            ((= next None) out)
            (else (begin
                (def out (reduceFn out next))
                (recur iter reduceFn out))))))
    (cond
        ((= out None) None)
        (else (rec iter reduceFn out))))

(defn sum [iter]
    (reduce iter +))

(defn addOne [iter]
    (map iter (fn [i] (+ 1 i))))

(defn fold [iter start foldFn]
    (def rec (fn [iter start foldFn]
        (def next (iter))
        (cond
            ((= next None) start)
            (else (begin
                (def start (foldFn start next))
                (recur iter start foldFn))))))
    (rec iter start foldFn))

(defn collectList [iter]
    (fold
        iter
        (core/list)
        (fn [collection item] (+ collection item))))


(defn char2num [char]
    (cond
        ((= char \0) 0)
        ((= char \1) 1)
        ((= char \2) 2)
        ((= char \3) 3)
        ((= char \4) 4)
        ((= char \5) 5)
        ((= char \6) 6)
        ((= char \7) 7)
        ((= char \8) 8)
        ((= char \9) 9)
        (else None)))

(defn str2num [str]
    (def foldStart (object
        (.out 0)
        (.mul 1)
        (.valid #t)))

    (def foldEnd (fold (revListIter (chars str)) foldStart
        (fn [out char]
            (def num (cond
                ((= char \_) \_)
                (else (char2num char))))
            (cond
                ((= num \_) None)
                ((= num None) (out .valid #f))
                (else (begin
                    (out .out (+ (out .out) (* num (out .mul))))
                    (out .mul (* (out .mul) 10)))))
            out)))
    (cond
        ((foldEnd .valid) (foldEnd .out))
        (else None)))
