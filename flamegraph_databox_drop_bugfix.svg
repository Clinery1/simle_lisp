<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="886" onload="init(evt)" viewBox="0 0 1200 886" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="886" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="869.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="869.00"> </text><svg id="frames" x="10" width="1180" total_samples="2801"><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.1428%" y="725" width="0.0357%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="1"/><text x="0.3928%" y="735.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.11%)</title><rect x="0.1071%" y="773" width="0.1071%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="3"/><text x="0.3571%" y="783.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.07%)</title><rect x="0.1428%" y="757" width="0.0714%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="2"/><text x="0.3928%" y="767.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.07%)</title><rect x="0.1428%" y="741" width="0.0714%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="2"/><text x="0.3928%" y="751.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.04%)</title><rect x="0.1785%" y="725" width="0.0357%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="0.4285%" y="735.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.1785%" y="709" width="0.0357%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="0.4285%" y="719.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.1785%" y="693" width="0.0357%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1"/><text x="0.4285%" y="703.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.1785%" y="677" width="0.0357%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="1"/><text x="0.4285%" y="687.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.21%)</title><rect x="0.0357%" y="789" width="0.2142%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="6"/><text x="0.2857%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.2142%" y="773" width="0.0357%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="1"/><text x="0.4642%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.2142%" y="757" width="0.0357%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="1"/><text x="0.4642%" y="767.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.29%)</title><rect x="0.0000%" y="805" width="0.2856%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="8"/><text x="0.2500%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.2499%" y="789" width="0.0357%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="1"/><text x="0.4999%" y="799.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="0.2856%" y="805" width="0.0357%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="1"/><text x="0.5356%" y="815.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="0.2856%" y="789" width="0.0357%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="1"/><text x="0.5356%" y="799.50"></text></g><g><title>__rdl_alloc (3 samples, 0.11%)</title><rect x="9.0682%" y="325" width="0.1071%" height="15" fill="rgb(231,73,38)" fg:x="254" fg:w="3"/><text x="9.3182%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (28 samples, 1.00%)</title><rect x="8.9968%" y="421" width="0.9996%" height="15" fill="rgb(225,20,46)" fg:x="252" fg:w="28"/><text x="9.2468%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (28 samples, 1.00%)</title><rect x="8.9968%" y="405" width="0.9996%" height="15" fill="rgb(210,31,41)" fg:x="252" fg:w="28"/><text x="9.2468%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (28 samples, 1.00%)</title><rect x="8.9968%" y="389" width="0.9996%" height="15" fill="rgb(221,200,47)" fg:x="252" fg:w="28"/><text x="9.2468%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.93%)</title><rect x="9.0682%" y="373" width="0.9282%" height="15" fill="rgb(226,26,5)" fg:x="254" fg:w="26"/><text x="9.3182%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.93%)</title><rect x="9.0682%" y="357" width="0.9282%" height="15" fill="rgb(249,33,26)" fg:x="254" fg:w="26"/><text x="9.3182%" y="367.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.93%)</title><rect x="9.0682%" y="341" width="0.9282%" height="15" fill="rgb(235,183,28)" fg:x="254" fg:w="26"/><text x="9.3182%" y="351.50"></text></g><g><title>malloc (23 samples, 0.82%)</title><rect x="9.1753%" y="325" width="0.8211%" height="15" fill="rgb(221,5,38)" fg:x="257" fg:w="23"/><text x="9.4253%" y="335.50"></text></g><g><title>[libc.so.6] (19 samples, 0.68%)</title><rect x="9.3181%" y="309" width="0.6783%" height="15" fill="rgb(247,18,42)" fg:x="261" fg:w="19"/><text x="9.5681%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (32 samples, 1.14%)</title><rect x="8.9254%" y="501" width="1.1424%" height="15" fill="rgb(241,131,45)" fg:x="250" fg:w="32"/><text x="9.1754%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (30 samples, 1.07%)</title><rect x="8.9968%" y="485" width="1.0710%" height="15" fill="rgb(249,31,29)" fg:x="252" fg:w="30"/><text x="9.2468%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (30 samples, 1.07%)</title><rect x="8.9968%" y="469" width="1.0710%" height="15" fill="rgb(225,111,53)" fg:x="252" fg:w="30"/><text x="9.2468%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (30 samples, 1.07%)</title><rect x="8.9968%" y="453" width="1.0710%" height="15" fill="rgb(238,160,17)" fg:x="252" fg:w="30"/><text x="9.2468%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (30 samples, 1.07%)</title><rect x="8.9968%" y="437" width="1.0710%" height="15" fill="rgb(214,148,48)" fg:x="252" fg:w="30"/><text x="9.2468%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.07%)</title><rect x="9.9964%" y="421" width="0.0714%" height="15" fill="rgb(232,36,49)" fg:x="280" fg:w="2"/><text x="10.2464%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="9.9964%" y="405" width="0.0714%" height="15" fill="rgb(209,103,24)" fg:x="280" fg:w="2"/><text x="10.2464%" y="415.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="9.9964%" y="389" width="0.0714%" height="15" fill="rgb(229,88,8)" fg:x="280" fg:w="2"/><text x="10.2464%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.04%)</title><rect x="10.0678%" y="501" width="0.0357%" height="15" fill="rgb(213,181,19)" fg:x="282" fg:w="1"/><text x="10.3178%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="10.0678%" y="485" width="0.0357%" height="15" fill="rgb(254,191,54)" fg:x="282" fg:w="1"/><text x="10.3178%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="10.0678%" y="469" width="0.0357%" height="15" fill="rgb(241,83,37)" fg:x="282" fg:w="1"/><text x="10.3178%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (11 samples, 0.39%)</title><rect x="10.1035%" y="501" width="0.3927%" height="15" fill="rgb(233,36,39)" fg:x="283" fg:w="11"/><text x="10.3535%" y="511.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="10.4963%" y="501" width="0.0357%" height="15" fill="rgb(226,3,54)" fg:x="294" fg:w="1"/><text x="10.7463%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="10.4963%" y="485" width="0.0357%" height="15" fill="rgb(245,192,40)" fg:x="294" fg:w="1"/><text x="10.7463%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.21%)</title><rect x="10.6391%" y="485" width="0.2142%" height="15" fill="rgb(238,167,29)" fg:x="298" fg:w="6"/><text x="10.8891%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.21%)</title><rect x="10.6391%" y="469" width="0.2142%" height="15" fill="rgb(232,182,51)" fg:x="298" fg:w="6"/><text x="10.8891%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.21%)</title><rect x="10.6391%" y="453" width="0.2142%" height="15" fill="rgb(231,60,39)" fg:x="298" fg:w="6"/><text x="10.8891%" y="463.50"></text></g><g><title>&lt;indexmap::set::IndexSet&lt;T,S&gt; as indexmap::Entries&gt;::as_entries (5 samples, 0.18%)</title><rect x="10.8533%" y="469" width="0.1785%" height="15" fill="rgb(208,69,12)" fg:x="304" fg:w="5"/><text x="11.1033%" y="479.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as indexmap::Entries&gt;::as_entries (5 samples, 0.18%)</title><rect x="10.8533%" y="453" width="0.1785%" height="15" fill="rgb(235,93,37)" fg:x="304" fg:w="5"/><text x="11.1033%" y="463.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as indexmap::Entries&gt;::as_entries (5 samples, 0.18%)</title><rect x="10.8533%" y="437" width="0.1785%" height="15" fill="rgb(213,116,39)" fg:x="304" fg:w="5"/><text x="11.1033%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.18%)</title><rect x="10.8533%" y="421" width="0.1785%" height="15" fill="rgb(222,207,29)" fg:x="304" fg:w="5"/><text x="11.1033%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (15 samples, 0.54%)</title><rect x="11.0318%" y="469" width="0.5355%" height="15" fill="rgb(206,96,30)" fg:x="309" fg:w="15"/><text x="11.2818%" y="479.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::InstructionIter as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 1.14%)</title><rect x="10.5320%" y="501" width="1.1424%" height="15" fill="rgb(218,138,4)" fg:x="295" fg:w="32"/><text x="10.7820%" y="511.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::get_index (23 samples, 0.82%)</title><rect x="10.8533%" y="485" width="0.8211%" height="15" fill="rgb(250,191,14)" fg:x="304" fg:w="23"/><text x="11.1033%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3 samples, 0.11%)</title><rect x="11.5673%" y="469" width="0.1071%" height="15" fill="rgb(239,60,40)" fg:x="324" fg:w="3"/><text x="11.8173%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.11%)</title><rect x="11.5673%" y="453" width="0.1071%" height="15" fill="rgb(206,27,48)" fg:x="324" fg:w="3"/><text x="11.8173%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="11.6744%" y="501" width="0.0357%" height="15" fill="rgb(225,35,8)" fg:x="327" fg:w="1"/><text x="11.9244%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.04%)</title><rect x="11.6744%" y="485" width="0.0357%" height="15" fill="rgb(250,213,24)" fg:x="327" fg:w="1"/><text x="11.9244%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="11.6744%" y="469" width="0.0357%" height="15" fill="rgb(247,123,22)" fg:x="327" fg:w="1"/><text x="11.9244%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.04%)</title><rect x="11.6744%" y="453" width="0.0357%" height="15" fill="rgb(231,138,38)" fg:x="327" fg:w="1"/><text x="11.9244%" y="463.50"></text></g><g><title>core::intrinsics::copy (136 samples, 4.86%)</title><rect x="11.7101%" y="485" width="4.8554%" height="15" fill="rgb(231,145,46)" fg:x="328" fg:w="136"/><text x="11.9601%" y="495.50">core::..</text></g><g><title>[libc.so.6] (131 samples, 4.68%)</title><rect x="11.8886%" y="469" width="4.6769%" height="15" fill="rgb(251,118,11)" fg:x="333" fg:w="131"/><text x="12.1386%" y="479.50">[libc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (137 samples, 4.89%)</title><rect x="11.7101%" y="501" width="4.8911%" height="15" fill="rgb(217,147,25)" fg:x="328" fg:w="137"/><text x="11.9601%" y="511.50">alloc:..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="16.5655%" y="485" width="0.0357%" height="15" fill="rgb(247,81,37)" fg:x="464" fg:w="1"/><text x="16.8155%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.07%)</title><rect x="16.6012%" y="501" width="0.0714%" height="15" fill="rgb(209,12,38)" fg:x="465" fg:w="2"/><text x="16.8512%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.07%)</title><rect x="16.6012%" y="485" width="0.0714%" height="15" fill="rgb(227,1,9)" fg:x="465" fg:w="2"/><text x="16.8512%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.07%)</title><rect x="16.6012%" y="469" width="0.0714%" height="15" fill="rgb(248,47,43)" fg:x="465" fg:w="2"/><text x="16.8512%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.07%)</title><rect x="16.6012%" y="453" width="0.0714%" height="15" fill="rgb(221,10,30)" fg:x="465" fg:w="2"/><text x="16.8512%" y="463.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.07%)</title><rect x="16.6012%" y="437" width="0.0714%" height="15" fill="rgb(210,229,1)" fg:x="465" fg:w="2"/><text x="16.8512%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.07%)</title><rect x="16.6012%" y="421" width="0.0714%" height="15" fill="rgb(222,148,37)" fg:x="465" fg:w="2"/><text x="16.8512%" y="431.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::run::_{{closure}} (2 samples, 0.07%)</title><rect x="16.6012%" y="405" width="0.0714%" height="15" fill="rgb(234,67,33)" fg:x="465" fg:w="2"/><text x="16.8512%" y="415.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_dr_to_scope (2 samples, 0.07%)</title><rect x="16.6012%" y="389" width="0.0714%" height="15" fill="rgb(247,98,35)" fg:x="465" fg:w="2"/><text x="16.8512%" y="399.50"></text></g><g><title>core::mem::drop (1 samples, 0.04%)</title><rect x="16.6726%" y="501" width="0.0357%" height="15" fill="rgb(247,138,52)" fg:x="467" fg:w="1"/><text x="16.9226%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;simple_lisp::interpreter::data::Data&gt;&gt; (1 samples, 0.04%)</title><rect x="16.6726%" y="485" width="0.0357%" height="15" fill="rgb(213,79,30)" fg:x="467" fg:w="1"/><text x="16.9226%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (1 samples, 0.04%)</title><rect x="16.6726%" y="469" width="0.0357%" height="15" fill="rgb(246,177,23)" fg:x="467" fg:w="1"/><text x="16.9226%" y="479.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="16.6726%" y="453" width="0.0357%" height="15" fill="rgb(230,62,27)" fg:x="467" fg:w="1"/><text x="16.9226%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.04%)</title><rect x="16.6726%" y="437" width="0.0357%" height="15" fill="rgb(216,154,8)" fg:x="467" fg:w="1"/><text x="16.9226%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.04%)</title><rect x="16.6726%" y="421" width="0.0357%" height="15" fill="rgb(244,35,45)" fg:x="467" fg:w="1"/><text x="16.9226%" y="431.50"></text></g><g><title>core::mem::replace (1 samples, 0.04%)</title><rect x="16.6726%" y="405" width="0.0357%" height="15" fill="rgb(251,115,12)" fg:x="467" fg:w="1"/><text x="16.9226%" y="415.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="16.6726%" y="389" width="0.0357%" height="15" fill="rgb(240,54,50)" fg:x="467" fg:w="1"/><text x="16.9226%" y="399.50"></text></g><g><title>core::mem::replace (1 samples, 0.04%)</title><rect x="16.7083%" y="501" width="0.0357%" height="15" fill="rgb(233,84,52)" fg:x="468" fg:w="1"/><text x="16.9583%" y="511.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="16.7083%" y="485" width="0.0357%" height="15" fill="rgb(207,117,47)" fg:x="468" fg:w="1"/><text x="16.9583%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (6 samples, 0.21%)</title><rect x="16.7440%" y="501" width="0.2142%" height="15" fill="rgb(249,43,39)" fg:x="469" fg:w="6"/><text x="16.9940%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (2 samples, 0.07%)</title><rect x="16.9582%" y="501" width="0.0714%" height="15" fill="rgb(209,38,44)" fg:x="475" fg:w="2"/><text x="17.2082%" y="511.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::run::_{{closure}} (2 samples, 0.07%)</title><rect x="16.9582%" y="485" width="0.0714%" height="15" fill="rgb(236,212,23)" fg:x="475" fg:w="2"/><text x="17.2082%" y="495.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (2 samples, 0.07%)</title><rect x="16.9582%" y="469" width="0.0714%" height="15" fill="rgb(242,79,21)" fg:x="475" fg:w="2"/><text x="17.2082%" y="479.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (2 samples, 0.07%)</title><rect x="16.9582%" y="453" width="0.0714%" height="15" fill="rgb(211,96,35)" fg:x="475" fg:w="2"/><text x="17.2082%" y="463.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (2 samples, 0.07%)</title><rect x="16.9582%" y="437" width="0.0714%" height="15" fill="rgb(253,215,40)" fg:x="475" fg:w="2"/><text x="17.2082%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;simple_lisp::interpreter::data::Data&gt;&gt; (6 samples, 0.21%)</title><rect x="17.0296%" y="501" width="0.2142%" height="15" fill="rgb(211,81,21)" fg:x="477" fg:w="6"/><text x="17.2796%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (6 samples, 0.21%)</title><rect x="17.0296%" y="485" width="0.2142%" height="15" fill="rgb(208,190,38)" fg:x="477" fg:w="6"/><text x="17.2796%" y="495.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (6 samples, 0.21%)</title><rect x="17.0296%" y="469" width="0.2142%" height="15" fill="rgb(235,213,38)" fg:x="477" fg:w="6"/><text x="17.2796%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (6 samples, 0.21%)</title><rect x="17.0296%" y="453" width="0.2142%" height="15" fill="rgb(237,122,38)" fg:x="477" fg:w="6"/><text x="17.2796%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (6 samples, 0.21%)</title><rect x="17.0296%" y="437" width="0.2142%" height="15" fill="rgb(244,218,35)" fg:x="477" fg:w="6"/><text x="17.2796%" y="447.50"></text></g><g><title>core::mem::replace (6 samples, 0.21%)</title><rect x="17.0296%" y="421" width="0.2142%" height="15" fill="rgb(240,68,47)" fg:x="477" fg:w="6"/><text x="17.2796%" y="431.50"></text></g><g><title>core::ptr::write (6 samples, 0.21%)</title><rect x="17.0296%" y="405" width="0.2142%" height="15" fill="rgb(210,16,53)" fg:x="477" fg:w="6"/><text x="17.2796%" y="415.50"></text></g><g><title>__rust_dealloc (1 samples, 0.04%)</title><rect x="17.2438%" y="341" width="0.0357%" height="15" fill="rgb(235,124,12)" fg:x="483" fg:w="1"/><text x="17.4938%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.29%)</title><rect x="17.2438%" y="469" width="0.2856%" height="15" fill="rgb(224,169,11)" fg:x="483" fg:w="8"/><text x="17.4938%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[simple_lisp::interpreter::ScopeItem]&gt; (8 samples, 0.29%)</title><rect x="17.2438%" y="453" width="0.2856%" height="15" fill="rgb(250,166,2)" fg:x="483" fg:w="8"/><text x="17.4938%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::ScopeItem&gt; (8 samples, 0.29%)</title><rect x="17.2438%" y="437" width="0.2856%" height="15" fill="rgb(242,216,29)" fg:x="483" fg:w="8"/><text x="17.4938%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (8 samples, 0.29%)</title><rect x="17.2438%" y="421" width="0.2856%" height="15" fill="rgb(230,116,27)" fg:x="483" fg:w="8"/><text x="17.4938%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (8 samples, 0.29%)</title><rect x="17.2438%" y="405" width="0.2856%" height="15" fill="rgb(228,99,48)" fg:x="483" fg:w="8"/><text x="17.4938%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.29%)</title><rect x="17.2438%" y="389" width="0.2856%" height="15" fill="rgb(253,11,6)" fg:x="483" fg:w="8"/><text x="17.4938%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.29%)</title><rect x="17.2438%" y="373" width="0.2856%" height="15" fill="rgb(247,143,39)" fg:x="483" fg:w="8"/><text x="17.4938%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.29%)</title><rect x="17.2438%" y="357" width="0.2856%" height="15" fill="rgb(236,97,10)" fg:x="483" fg:w="8"/><text x="17.4938%" y="367.50"></text></g><g><title>cfree (7 samples, 0.25%)</title><rect x="17.2795%" y="341" width="0.2499%" height="15" fill="rgb(233,208,19)" fg:x="484" fg:w="7"/><text x="17.5295%" y="351.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="17.4223%" y="325" width="0.1071%" height="15" fill="rgb(216,164,2)" fg:x="488" fg:w="3"/><text x="17.6723%" y="335.50"></text></g><g><title>__rust_dealloc (2 samples, 0.07%)</title><rect x="17.5652%" y="405" width="0.0714%" height="15" fill="rgb(220,129,5)" fg:x="492" fg:w="2"/><text x="17.8152%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;misc_utils::stack::Stack&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (28 samples, 1.00%)</title><rect x="17.2438%" y="501" width="0.9996%" height="15" fill="rgb(242,17,10)" fg:x="483" fg:w="28"/><text x="17.4938%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (28 samples, 1.00%)</title><rect x="17.2438%" y="485" width="0.9996%" height="15" fill="rgb(242,107,0)" fg:x="483" fg:w="28"/><text x="17.4938%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (20 samples, 0.71%)</title><rect x="17.5295%" y="469" width="0.7140%" height="15" fill="rgb(251,28,31)" fg:x="491" fg:w="20"/><text x="17.7795%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.71%)</title><rect x="17.5295%" y="453" width="0.7140%" height="15" fill="rgb(233,223,10)" fg:x="491" fg:w="20"/><text x="17.7795%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.71%)</title><rect x="17.5295%" y="437" width="0.7140%" height="15" fill="rgb(215,21,27)" fg:x="491" fg:w="20"/><text x="17.7795%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.71%)</title><rect x="17.5295%" y="421" width="0.7140%" height="15" fill="rgb(232,23,21)" fg:x="491" fg:w="20"/><text x="17.7795%" y="431.50"></text></g><g><title>cfree (17 samples, 0.61%)</title><rect x="17.6366%" y="405" width="0.6069%" height="15" fill="rgb(244,5,23)" fg:x="494" fg:w="17"/><text x="17.8866%" y="415.50"></text></g><g><title>[libc.so.6] (14 samples, 0.50%)</title><rect x="17.7437%" y="389" width="0.4998%" height="15" fill="rgb(226,81,46)" fg:x="497" fg:w="14"/><text x="17.9937%" y="399.50"></text></g><g><title>[libc.so.6] (6 samples, 0.21%)</title><rect x="18.0293%" y="373" width="0.2142%" height="15" fill="rgb(247,70,30)" fg:x="505" fg:w="6"/><text x="18.2793%" y="383.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="18.1721%" y="357" width="0.0714%" height="15" fill="rgb(212,68,19)" fg:x="509" fg:w="2"/><text x="18.4221%" y="367.50"></text></g><g><title>misc_utils::slotmap::SlotMap&lt;K,T&gt;::get (2 samples, 0.07%)</title><rect x="18.2435%" y="501" width="0.0714%" height="15" fill="rgb(240,187,13)" fg:x="511" fg:w="2"/><text x="18.4935%" y="511.50"></text></g><g><title>misc_utils::slotmap::Slot&lt;T&gt;::as_ref (2 samples, 0.07%)</title><rect x="18.2435%" y="485" width="0.0714%" height="15" fill="rgb(223,113,26)" fg:x="511" fg:w="2"/><text x="18.4935%" y="495.50"></text></g><g><title>__rdl_alloc (3 samples, 0.11%)</title><rect x="18.3506%" y="373" width="0.1071%" height="15" fill="rgb(206,192,2)" fg:x="514" fg:w="3"/><text x="18.6006%" y="383.50"></text></g><g><title>__rust_alloc (2 samples, 0.07%)</title><rect x="18.4577%" y="373" width="0.0714%" height="15" fill="rgb(241,108,4)" fg:x="517" fg:w="2"/><text x="18.7077%" y="383.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::new (17 samples, 0.61%)</title><rect x="18.3149%" y="501" width="0.6069%" height="15" fill="rgb(247,173,49)" fg:x="513" fg:w="17"/><text x="18.5649%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (17 samples, 0.61%)</title><rect x="18.3149%" y="485" width="0.6069%" height="15" fill="rgb(224,114,35)" fg:x="513" fg:w="17"/><text x="18.5649%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.61%)</title><rect x="18.3149%" y="469" width="0.6069%" height="15" fill="rgb(245,159,27)" fg:x="513" fg:w="17"/><text x="18.5649%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.61%)</title><rect x="18.3149%" y="453" width="0.6069%" height="15" fill="rgb(245,172,44)" fg:x="513" fg:w="17"/><text x="18.5649%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.61%)</title><rect x="18.3149%" y="437" width="0.6069%" height="15" fill="rgb(236,23,11)" fg:x="513" fg:w="17"/><text x="18.5649%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.61%)</title><rect x="18.3149%" y="421" width="0.6069%" height="15" fill="rgb(205,117,38)" fg:x="513" fg:w="17"/><text x="18.5649%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.61%)</title><rect x="18.3149%" y="405" width="0.6069%" height="15" fill="rgb(237,72,25)" fg:x="513" fg:w="17"/><text x="18.5649%" y="415.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.61%)</title><rect x="18.3149%" y="389" width="0.6069%" height="15" fill="rgb(244,70,9)" fg:x="513" fg:w="17"/><text x="18.5649%" y="399.50"></text></g><g><title>malloc (11 samples, 0.39%)</title><rect x="18.5291%" y="373" width="0.3927%" height="15" fill="rgb(217,125,39)" fg:x="519" fg:w="11"/><text x="18.7791%" y="383.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::pop (8 samples, 0.29%)</title><rect x="18.9218%" y="501" width="0.2856%" height="15" fill="rgb(235,36,10)" fg:x="530" fg:w="8"/><text x="19.1718%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (8 samples, 0.29%)</title><rect x="18.9218%" y="485" width="0.2856%" height="15" fill="rgb(251,123,47)" fg:x="530" fg:w="8"/><text x="19.1718%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.04%)</title><rect x="19.1717%" y="469" width="0.0357%" height="15" fill="rgb(221,13,13)" fg:x="537" fg:w="1"/><text x="19.4217%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="19.5644%" y="437" width="0.0357%" height="15" fill="rgb(238,131,9)" fg:x="548" fg:w="1"/><text x="19.8144%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (43 samples, 1.54%)</title><rect x="19.6001%" y="437" width="1.5352%" height="15" fill="rgb(211,50,8)" fg:x="549" fg:w="43"/><text x="19.8501%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (40 samples, 1.43%)</title><rect x="19.7072%" y="421" width="1.4281%" height="15" fill="rgb(245,182,24)" fg:x="552" fg:w="40"/><text x="19.9572%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (40 samples, 1.43%)</title><rect x="19.7072%" y="405" width="1.4281%" height="15" fill="rgb(242,14,37)" fg:x="552" fg:w="40"/><text x="19.9572%" y="415.50"></text></g><g><title>alloc::alloc::realloc (38 samples, 1.36%)</title><rect x="19.7787%" y="389" width="1.3567%" height="15" fill="rgb(246,228,12)" fg:x="554" fg:w="38"/><text x="20.0287%" y="399.50"></text></g><g><title>realloc (38 samples, 1.36%)</title><rect x="19.7787%" y="373" width="1.3567%" height="15" fill="rgb(213,55,15)" fg:x="554" fg:w="38"/><text x="20.0287%" y="383.50"></text></g><g><title>[libc.so.6] (37 samples, 1.32%)</title><rect x="19.8144%" y="357" width="1.3210%" height="15" fill="rgb(209,9,3)" fg:x="555" fg:w="37"/><text x="20.0644%" y="367.50"></text></g><g><title>[libc.so.6] (33 samples, 1.18%)</title><rect x="19.9572%" y="341" width="1.1782%" height="15" fill="rgb(230,59,30)" fg:x="559" fg:w="33"/><text x="20.2072%" y="351.50"></text></g><g><title>[libc.so.6] (20 samples, 0.71%)</title><rect x="20.4213%" y="325" width="0.7140%" height="15" fill="rgb(209,121,21)" fg:x="572" fg:w="20"/><text x="20.6713%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (50 samples, 1.79%)</title><rect x="19.3859%" y="469" width="1.7851%" height="15" fill="rgb(220,109,13)" fg:x="543" fg:w="50"/><text x="19.6359%" y="479.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (45 samples, 1.61%)</title><rect x="19.5644%" y="453" width="1.6066%" height="15" fill="rgb(232,18,1)" fg:x="548" fg:w="45"/><text x="19.8144%" y="463.50"></text></g><g><title>core::cmp::max (1 samples, 0.04%)</title><rect x="21.1353%" y="437" width="0.0357%" height="15" fill="rgb(215,41,42)" fg:x="592" fg:w="1"/><text x="21.3853%" y="447.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.04%)</title><rect x="21.1353%" y="421" width="0.0357%" height="15" fill="rgb(224,123,36)" fg:x="592" fg:w="1"/><text x="21.3853%" y="431.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.04%)</title><rect x="21.1353%" y="405" width="0.0357%" height="15" fill="rgb(240,125,3)" fg:x="592" fg:w="1"/><text x="21.3853%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.11%)</title><rect x="21.1710%" y="469" width="0.1071%" height="15" fill="rgb(205,98,50)" fg:x="593" fg:w="3"/><text x="21.4210%" y="479.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (103 samples, 3.68%)</title><rect x="19.2074%" y="501" width="3.6773%" height="15" fill="rgb(205,185,37)" fg:x="538" fg:w="103"/><text x="19.4574%" y="511.50">misc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (103 samples, 3.68%)</title><rect x="19.2074%" y="485" width="3.6773%" height="15" fill="rgb(238,207,15)" fg:x="538" fg:w="103"/><text x="19.4574%" y="495.50">allo..</text></g><g><title>core::ptr::write (45 samples, 1.61%)</title><rect x="21.2781%" y="469" width="1.6066%" height="15" fill="rgb(213,199,42)" fg:x="596" fg:w="45"/><text x="21.5281%" y="479.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="22.9561%" y="485" width="0.0714%" height="15" fill="rgb(235,201,11)" fg:x="643" fg:w="2"/><text x="23.2061%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="22.9561%" y="469" width="0.0714%" height="15" fill="rgb(207,46,11)" fg:x="643" fg:w="2"/><text x="23.2061%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.07%)</title><rect x="22.9561%" y="453" width="0.0714%" height="15" fill="rgb(241,35,35)" fg:x="643" fg:w="2"/><text x="23.2061%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="22.9561%" y="437" width="0.0714%" height="15" fill="rgb(243,32,47)" fg:x="643" fg:w="2"/><text x="23.2061%" y="447.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (1 samples, 0.04%)</title><rect x="23.0275%" y="485" width="0.0357%" height="15" fill="rgb(247,202,23)" fg:x="645" fg:w="1"/><text x="23.2775%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="23.0275%" y="469" width="0.0357%" height="15" fill="rgb(219,102,11)" fg:x="645" fg:w="1"/><text x="23.2775%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.36%)</title><rect x="23.1703%" y="469" width="0.3570%" height="15" fill="rgb(243,110,44)" fg:x="649" fg:w="10"/><text x="23.4203%" y="479.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.36%)</title><rect x="23.1703%" y="453" width="0.3570%" height="15" fill="rgb(222,74,54)" fg:x="649" fg:w="10"/><text x="23.4203%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.36%)</title><rect x="23.1703%" y="437" width="0.3570%" height="15" fill="rgb(216,99,12)" fg:x="649" fg:w="10"/><text x="23.4203%" y="447.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (6 samples, 0.21%)</title><rect x="23.3131%" y="421" width="0.2142%" height="15" fill="rgb(226,22,26)" fg:x="653" fg:w="6"/><text x="23.5631%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (6 samples, 0.21%)</title><rect x="23.3131%" y="405" width="0.2142%" height="15" fill="rgb(217,163,10)" fg:x="653" fg:w="6"/><text x="23.5631%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (6 samples, 0.21%)</title><rect x="23.3131%" y="389" width="0.2142%" height="15" fill="rgb(213,25,53)" fg:x="653" fg:w="6"/><text x="23.5631%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.21%)</title><rect x="23.3131%" y="373" width="0.2142%" height="15" fill="rgb(252,105,26)" fg:x="653" fg:w="6"/><text x="23.5631%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.11%)</title><rect x="23.8486%" y="405" width="0.1071%" height="15" fill="rgb(220,39,43)" fg:x="668" fg:w="3"/><text x="24.0986%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.14%)</title><rect x="23.8486%" y="421" width="0.1428%" height="15" fill="rgb(229,68,48)" fg:x="668" fg:w="4"/><text x="24.0986%" y="431.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.04%)</title><rect x="23.9557%" y="405" width="0.0357%" height="15" fill="rgb(252,8,32)" fg:x="671" fg:w="1"/><text x="24.2057%" y="415.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.18%)</title><rect x="23.8486%" y="437" width="0.1785%" height="15" fill="rgb(223,20,43)" fg:x="668" fg:w="5"/><text x="24.0986%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.04%)</title><rect x="23.9914%" y="421" width="0.0357%" height="15" fill="rgb(229,81,49)" fg:x="672" fg:w="1"/><text x="24.2414%" y="431.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (1 samples, 0.04%)</title><rect x="23.9914%" y="405" width="0.0357%" height="15" fill="rgb(236,28,36)" fg:x="672" fg:w="1"/><text x="24.2414%" y="415.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="23.9914%" y="389" width="0.0357%" height="15" fill="rgb(249,185,26)" fg:x="672" fg:w="1"/><text x="24.2414%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (15 samples, 0.54%)</title><rect x="24.0271%" y="437" width="0.5355%" height="15" fill="rgb(249,174,33)" fg:x="673" fg:w="15"/><text x="24.2771%" y="447.50"></text></g><g><title>core::ops::function::FnMut::call_mut (15 samples, 0.54%)</title><rect x="24.0271%" y="421" width="0.5355%" height="15" fill="rgb(233,201,37)" fg:x="673" fg:w="15"/><text x="24.2771%" y="431.50"></text></g><g><title>core::mem::drop (15 samples, 0.54%)</title><rect x="24.0271%" y="405" width="0.5355%" height="15" fill="rgb(221,78,26)" fg:x="673" fg:w="15"/><text x="24.2771%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::ExternalData&gt; (15 samples, 0.54%)</title><rect x="24.0271%" y="389" width="0.5355%" height="15" fill="rgb(250,127,30)" fg:x="673" fg:w="15"/><text x="24.2771%" y="399.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::ExternalData as core::ops::drop::Drop&gt;::drop (15 samples, 0.54%)</title><rect x="24.0271%" y="373" width="0.5355%" height="15" fill="rgb(230,49,44)" fg:x="673" fg:w="15"/><text x="24.2771%" y="383.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::unset_external (15 samples, 0.54%)</title><rect x="24.0271%" y="357" width="0.5355%" height="15" fill="rgb(229,67,23)" fg:x="673" fg:w="15"/><text x="24.2771%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (12 samples, 0.43%)</title><rect x="24.1342%" y="341" width="0.4284%" height="15" fill="rgb(249,83,47)" fg:x="676" fg:w="12"/><text x="24.3842%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (12 samples, 0.43%)</title><rect x="24.1342%" y="325" width="0.4284%" height="15" fill="rgb(215,43,3)" fg:x="676" fg:w="12"/><text x="24.3842%" y="335.50"></text></g><g><title>core::cell::BorrowRefMut::new (12 samples, 0.43%)</title><rect x="24.1342%" y="309" width="0.4284%" height="15" fill="rgb(238,154,13)" fg:x="676" fg:w="12"/><text x="24.3842%" y="319.50"></text></g><g><title>core::ptr::read (14 samples, 0.50%)</title><rect x="25.6337%" y="373" width="0.4998%" height="15" fill="rgb(219,56,2)" fg:x="718" fg:w="14"/><text x="25.8837%" y="383.50"></text></g><g><title>core::mem::take (16 samples, 0.57%)</title><rect x="25.6337%" y="405" width="0.5712%" height="15" fill="rgb(233,0,4)" fg:x="718" fg:w="16"/><text x="25.8837%" y="415.50"></text></g><g><title>core::mem::replace (16 samples, 0.57%)</title><rect x="25.6337%" y="389" width="0.5712%" height="15" fill="rgb(235,30,7)" fg:x="718" fg:w="16"/><text x="25.8837%" y="399.50"></text></g><g><title>core::ptr::write (2 samples, 0.07%)</title><rect x="26.1335%" y="373" width="0.0714%" height="15" fill="rgb(250,79,13)" fg:x="732" fg:w="2"/><text x="26.3835%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (77 samples, 2.75%)</title><rect x="23.5273%" y="469" width="2.7490%" height="15" fill="rgb(211,146,34)" fg:x="659" fg:w="77"/><text x="23.7773%" y="479.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (68 samples, 2.43%)</title><rect x="23.8486%" y="453" width="2.4277%" height="15" fill="rgb(228,22,38)" fg:x="668" fg:w="68"/><text x="24.0986%" y="463.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (48 samples, 1.71%)</title><rect x="24.5627%" y="437" width="1.7137%" height="15" fill="rgb(235,168,5)" fg:x="688" fg:w="48"/><text x="24.8127%" y="447.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 1.71%)</title><rect x="24.5627%" y="421" width="1.7137%" height="15" fill="rgb(221,155,16)" fg:x="688" fg:w="48"/><text x="24.8127%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::ExternalData,alloc::alloc::Global&gt;&gt; (2 samples, 0.07%)</title><rect x="26.2049%" y="405" width="0.0714%" height="15" fill="rgb(215,215,53)" fg:x="734" fg:w="2"/><text x="26.4549%" y="415.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="26.2049%" y="389" width="0.0714%" height="15" fill="rgb(223,4,10)" fg:x="734" fg:w="2"/><text x="26.4549%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (1 samples, 0.04%)</title><rect x="26.2763%" y="437" width="0.0357%" height="15" fill="rgb(234,103,6)" fg:x="736" fg:w="1"/><text x="26.5263%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.04%)</title><rect x="26.2763%" y="421" width="0.0357%" height="15" fill="rgb(227,97,0)" fg:x="736" fg:w="1"/><text x="26.5263%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.61%)</title><rect x="26.5976%" y="309" width="0.6069%" height="15" fill="rgb(234,150,53)" fg:x="745" fg:w="17"/><text x="26.8476%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.61%)</title><rect x="26.5976%" y="293" width="0.6069%" height="15" fill="rgb(228,201,54)" fg:x="745" fg:w="17"/><text x="26.8476%" y="303.50"></text></g><g><title>cfree (17 samples, 0.61%)</title><rect x="26.5976%" y="277" width="0.6069%" height="15" fill="rgb(222,22,37)" fg:x="745" fg:w="17"/><text x="26.8476%" y="287.50"></text></g><g><title>[libc.so.6] (11 samples, 0.39%)</title><rect x="26.8119%" y="261" width="0.3927%" height="15" fill="rgb(237,53,32)" fg:x="751" fg:w="11"/><text x="27.0619%" y="271.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::clear (27 samples, 0.96%)</title><rect x="26.2763%" y="469" width="0.9639%" height="15" fill="rgb(233,25,53)" fg:x="736" fg:w="27"/><text x="26.5263%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (27 samples, 0.96%)</title><rect x="26.2763%" y="453" width="0.9639%" height="15" fill="rgb(210,40,34)" fg:x="736" fg:w="27"/><text x="26.5263%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;]&gt; (26 samples, 0.93%)</title><rect x="26.3120%" y="437" width="0.9282%" height="15" fill="rgb(241,220,44)" fg:x="737" fg:w="26"/><text x="26.5620%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (25 samples, 0.89%)</title><rect x="26.3477%" y="421" width="0.8925%" height="15" fill="rgb(235,28,35)" fg:x="738" fg:w="25"/><text x="26.5977%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (25 samples, 0.89%)</title><rect x="26.3477%" y="405" width="0.8925%" height="15" fill="rgb(210,56,17)" fg:x="738" fg:w="25"/><text x="26.5977%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;simple_lisp::interpreter::ast::Ident,(),rustc_hash::FxBuildHasher&gt;&gt; (25 samples, 0.89%)</title><rect x="26.3477%" y="389" width="0.8925%" height="15" fill="rgb(224,130,29)" fg:x="738" fg:w="25"/><text x="26.5977%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(simple_lisp::interpreter::ast::Ident,())&gt;&gt; (25 samples, 0.89%)</title><rect x="26.3477%" y="373" width="0.8925%" height="15" fill="rgb(235,212,8)" fg:x="738" fg:w="25"/><text x="26.5977%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.89%)</title><rect x="26.3477%" y="357" width="0.8925%" height="15" fill="rgb(223,33,50)" fg:x="738" fg:w="25"/><text x="26.5977%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (25 samples, 0.89%)</title><rect x="26.3477%" y="341" width="0.8925%" height="15" fill="rgb(219,149,13)" fg:x="738" fg:w="25"/><text x="26.5977%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (18 samples, 0.64%)</title><rect x="26.5976%" y="325" width="0.6426%" height="15" fill="rgb(250,156,29)" fg:x="745" fg:w="18"/><text x="26.8476%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::allocation_info (1 samples, 0.04%)</title><rect x="27.2046%" y="309" width="0.0357%" height="15" fill="rgb(216,193,19)" fg:x="762" fg:w="1"/><text x="27.4546%" y="319.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.04%)</title><rect x="27.2046%" y="293" width="0.0357%" height="15" fill="rgb(216,135,14)" fg:x="762" fg:w="1"/><text x="27.4546%" y="303.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::drain (2 samples, 0.07%)</title><rect x="27.2403%" y="469" width="0.0714%" height="15" fill="rgb(241,47,5)" fg:x="763" fg:w="2"/><text x="27.4903%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (2 samples, 0.07%)</title><rect x="27.2403%" y="453" width="0.0714%" height="15" fill="rgb(233,42,35)" fg:x="763" fg:w="2"/><text x="27.4903%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (2 samples, 0.07%)</title><rect x="27.2403%" y="437" width="0.0714%" height="15" fill="rgb(231,13,6)" fg:x="763" fg:w="2"/><text x="27.4903%" y="447.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (3 samples, 0.11%)</title><rect x="27.3117%" y="469" width="0.1071%" height="15" fill="rgb(207,181,40)" fg:x="765" fg:w="3"/><text x="27.5617%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.11%)</title><rect x="27.3117%" y="453" width="0.1071%" height="15" fill="rgb(254,173,49)" fg:x="765" fg:w="3"/><text x="27.5617%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (2 samples, 0.07%)</title><rect x="27.4188%" y="373" width="0.0714%" height="15" fill="rgb(221,1,38)" fg:x="768" fg:w="2"/><text x="27.6688%" y="383.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clear_env (132 samples, 4.71%)</title><rect x="22.8847%" y="501" width="4.7126%" height="15" fill="rgb(206,124,46)" fg:x="641" fg:w="132"/><text x="23.1347%" y="511.50">simpl..</text></g><g><title>simple_lisp::interpreter::Env::clear (127 samples, 4.53%)</title><rect x="23.0632%" y="485" width="4.5341%" height="15" fill="rgb(249,21,11)" fg:x="646" fg:w="127"/><text x="23.3132%" y="495.50">simpl..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter_mut (5 samples, 0.18%)</title><rect x="27.4188%" y="469" width="0.1785%" height="15" fill="rgb(222,201,40)" fg:x="768" fg:w="5"/><text x="27.6688%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter_mut (5 samples, 0.18%)</title><rect x="27.4188%" y="453" width="0.1785%" height="15" fill="rgb(235,61,29)" fg:x="768" fg:w="5"/><text x="27.6688%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (5 samples, 0.18%)</title><rect x="27.4188%" y="437" width="0.1785%" height="15" fill="rgb(219,207,3)" fg:x="768" fg:w="5"/><text x="27.6688%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (5 samples, 0.18%)</title><rect x="27.4188%" y="421" width="0.1785%" height="15" fill="rgb(222,56,46)" fg:x="768" fg:w="5"/><text x="27.6688%" y="431.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (5 samples, 0.18%)</title><rect x="27.4188%" y="405" width="0.1785%" height="15" fill="rgb(239,76,54)" fg:x="768" fg:w="5"/><text x="27.6688%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (5 samples, 0.18%)</title><rect x="27.4188%" y="389" width="0.1785%" height="15" fill="rgb(231,124,27)" fg:x="768" fg:w="5"/><text x="27.6688%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (3 samples, 0.11%)</title><rect x="27.4902%" y="373" width="0.1071%" height="15" fill="rgb(249,195,6)" fg:x="770" fg:w="3"/><text x="27.7402%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.11%)</title><rect x="27.4902%" y="357" width="0.1071%" height="15" fill="rgb(237,174,47)" fg:x="770" fg:w="3"/><text x="27.7402%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.07%)</title><rect x="27.7401%" y="453" width="0.0714%" height="15" fill="rgb(206,201,31)" fg:x="777" fg:w="2"/><text x="27.9901%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="27.7401%" y="437" width="0.0714%" height="15" fill="rgb(231,57,52)" fg:x="777" fg:w="2"/><text x="27.9901%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="27.7401%" y="421" width="0.0714%" height="15" fill="rgb(248,177,22)" fg:x="777" fg:w="2"/><text x="27.9901%" y="431.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (3 samples, 0.11%)</title><rect x="27.7401%" y="469" width="0.1071%" height="15" fill="rgb(215,211,37)" fg:x="777" fg:w="3"/><text x="27.9901%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="27.8115%" y="453" width="0.0357%" height="15" fill="rgb(241,128,51)" fg:x="779" fg:w="1"/><text x="28.0615%" y="463.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (8 samples, 0.29%)</title><rect x="27.8472%" y="469" width="0.2856%" height="15" fill="rgb(227,165,31)" fg:x="780" fg:w="8"/><text x="28.0972%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8 samples, 0.29%)</title><rect x="27.8472%" y="453" width="0.2856%" height="15" fill="rgb(228,167,24)" fg:x="780" fg:w="8"/><text x="28.0972%" y="463.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::external (7 samples, 0.25%)</title><rect x="28.1328%" y="469" width="0.2499%" height="15" fill="rgb(228,143,12)" fg:x="788" fg:w="7"/><text x="28.3828%" y="479.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::set_external (7 samples, 0.25%)</title><rect x="28.1328%" y="453" width="0.2499%" height="15" fill="rgb(249,149,8)" fg:x="788" fg:w="7"/><text x="28.3828%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;usize&gt;&gt; (7 samples, 0.25%)</title><rect x="28.1328%" y="437" width="0.2499%" height="15" fill="rgb(243,35,44)" fg:x="788" fg:w="7"/><text x="28.3828%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (7 samples, 0.25%)</title><rect x="28.1328%" y="421" width="0.2499%" height="15" fill="rgb(246,89,9)" fg:x="788" fg:w="7"/><text x="28.3828%" y="431.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (7 samples, 0.25%)</title><rect x="28.1328%" y="405" width="0.2499%" height="15" fill="rgb(233,213,13)" fg:x="788" fg:w="7"/><text x="28.3828%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (7 samples, 0.25%)</title><rect x="28.1328%" y="389" width="0.2499%" height="15" fill="rgb(233,141,41)" fg:x="788" fg:w="7"/><text x="28.3828%" y="399.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (7 samples, 0.25%)</title><rect x="28.1328%" y="373" width="0.2499%" height="15" fill="rgb(239,167,4)" fg:x="788" fg:w="7"/><text x="28.3828%" y="383.50"></text></g><g><title>core::mem::replace (7 samples, 0.25%)</title><rect x="28.1328%" y="357" width="0.2499%" height="15" fill="rgb(209,217,16)" fg:x="788" fg:w="7"/><text x="28.3828%" y="367.50"></text></g><g><title>core::ptr::write (7 samples, 0.25%)</title><rect x="28.1328%" y="341" width="0.2499%" height="15" fill="rgb(219,88,35)" fg:x="788" fg:w="7"/><text x="28.3828%" y="351.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.04%)</title><rect x="28.3827%" y="469" width="0.0357%" height="15" fill="rgb(220,193,23)" fg:x="795" fg:w="1"/><text x="28.6327%" y="479.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (1 samples, 0.04%)</title><rect x="28.3827%" y="453" width="0.0357%" height="15" fill="rgb(230,90,52)" fg:x="795" fg:w="1"/><text x="28.6327%" y="463.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (1 samples, 0.04%)</title><rect x="28.3827%" y="437" width="0.0357%" height="15" fill="rgb(252,106,19)" fg:x="795" fg:w="1"/><text x="28.6327%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="28.5255%" y="405" width="0.0714%" height="15" fill="rgb(206,74,20)" fg:x="799" fg:w="2"/><text x="28.7755%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="28.5612%" y="389" width="0.0357%" height="15" fill="rgb(230,138,44)" fg:x="800" fg:w="1"/><text x="28.8112%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.07%)</title><rect x="28.5969%" y="405" width="0.0714%" height="15" fill="rgb(235,182,43)" fg:x="801" fg:w="2"/><text x="28.8469%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.07%)</title><rect x="28.5969%" y="389" width="0.0714%" height="15" fill="rgb(242,16,51)" fg:x="801" fg:w="2"/><text x="28.8469%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.07%)</title><rect x="28.5969%" y="373" width="0.0714%" height="15" fill="rgb(248,9,4)" fg:x="801" fg:w="2"/><text x="28.8469%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.07%)</title><rect x="28.5969%" y="357" width="0.0714%" height="15" fill="rgb(210,31,22)" fg:x="801" fg:w="2"/><text x="28.8469%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.07%)</title><rect x="28.5969%" y="341" width="0.0714%" height="15" fill="rgb(239,54,39)" fg:x="801" fg:w="2"/><text x="28.8469%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (8 samples, 0.29%)</title><rect x="28.4184%" y="469" width="0.2856%" height="15" fill="rgb(230,99,41)" fg:x="796" fg:w="8"/><text x="28.6684%" y="479.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (8 samples, 0.29%)</title><rect x="28.4184%" y="453" width="0.2856%" height="15" fill="rgb(253,106,12)" fg:x="796" fg:w="8"/><text x="28.6684%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (8 samples, 0.29%)</title><rect x="28.4184%" y="437" width="0.2856%" height="15" fill="rgb(213,46,41)" fg:x="796" fg:w="8"/><text x="28.6684%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (6 samples, 0.21%)</title><rect x="28.4898%" y="421" width="0.2142%" height="15" fill="rgb(215,133,35)" fg:x="798" fg:w="6"/><text x="28.7398%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="28.6683%" y="405" width="0.0357%" height="15" fill="rgb(213,28,5)" fg:x="803" fg:w="1"/><text x="28.9183%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="28.6683%" y="389" width="0.0357%" height="15" fill="rgb(215,77,49)" fg:x="803" fg:w="1"/><text x="28.9183%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="28.8111%" y="357" width="0.0357%" height="15" fill="rgb(248,100,22)" fg:x="807" fg:w="1"/><text x="29.0611%" y="367.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (5 samples, 0.18%)</title><rect x="28.7040%" y="469" width="0.1785%" height="15" fill="rgb(208,67,9)" fg:x="804" fg:w="5"/><text x="28.9540%" y="479.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (5 samples, 0.18%)</title><rect x="28.7040%" y="453" width="0.1785%" height="15" fill="rgb(219,133,21)" fg:x="804" fg:w="5"/><text x="28.9540%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (5 samples, 0.18%)</title><rect x="28.7040%" y="437" width="0.1785%" height="15" fill="rgb(246,46,29)" fg:x="804" fg:w="5"/><text x="28.9540%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 0.18%)</title><rect x="28.7040%" y="421" width="0.1785%" height="15" fill="rgb(246,185,52)" fg:x="804" fg:w="5"/><text x="28.9540%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3 samples, 0.11%)</title><rect x="28.7754%" y="405" width="0.1071%" height="15" fill="rgb(252,136,11)" fg:x="806" fg:w="3"/><text x="29.0254%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.11%)</title><rect x="28.7754%" y="389" width="0.1071%" height="15" fill="rgb(219,138,53)" fg:x="806" fg:w="3"/><text x="29.0254%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.11%)</title><rect x="28.7754%" y="373" width="0.1071%" height="15" fill="rgb(211,51,23)" fg:x="806" fg:w="3"/><text x="29.0254%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="28.8468%" y="357" width="0.0357%" height="15" fill="rgb(247,221,28)" fg:x="808" fg:w="1"/><text x="29.0968%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="28.8468%" y="341" width="0.0357%" height="15" fill="rgb(251,222,45)" fg:x="808" fg:w="1"/><text x="29.0968%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.04%)</title><rect x="29.1325%" y="357" width="0.0357%" height="15" fill="rgb(217,162,53)" fg:x="816" fg:w="1"/><text x="29.3825%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.04%)</title><rect x="29.1325%" y="341" width="0.0357%" height="15" fill="rgb(229,93,14)" fg:x="816" fg:w="1"/><text x="29.3825%" y="351.50"></text></g><g><title>core::mem::swap (1 samples, 0.04%)</title><rect x="29.1682%" y="341" width="0.0357%" height="15" fill="rgb(209,67,49)" fg:x="817" fg:w="1"/><text x="29.4182%" y="351.50"></text></g><g><title>core::mem::swap_simple (1 samples, 0.04%)</title><rect x="29.1682%" y="325" width="0.0357%" height="15" fill="rgb(213,87,29)" fg:x="817" fg:w="1"/><text x="29.4182%" y="335.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="29.1682%" y="309" width="0.0357%" height="15" fill="rgb(205,151,52)" fg:x="817" fg:w="1"/><text x="29.4182%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.04%)</title><rect x="29.2039%" y="309" width="0.0357%" height="15" fill="rgb(253,215,39)" fg:x="818" fg:w="1"/><text x="29.4539%" y="319.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.04%)</title><rect x="29.2039%" y="293" width="0.0357%" height="15" fill="rgb(221,220,41)" fg:x="818" fg:w="1"/><text x="29.4539%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="29.2039%" y="277" width="0.0357%" height="15" fill="rgb(218,133,21)" fg:x="818" fg:w="1"/><text x="29.4539%" y="287.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (3 samples, 0.11%)</title><rect x="29.2396%" y="293" width="0.1071%" height="15" fill="rgb(221,193,43)" fg:x="819" fg:w="3"/><text x="29.4896%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (2 samples, 0.07%)</title><rect x="29.2753%" y="277" width="0.0714%" height="15" fill="rgb(240,128,52)" fg:x="820" fg:w="2"/><text x="29.5253%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (2 samples, 0.07%)</title><rect x="29.2753%" y="261" width="0.0714%" height="15" fill="rgb(253,114,12)" fg:x="820" fg:w="2"/><text x="29.5253%" y="271.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="29.4181%" y="229" width="0.0357%" height="15" fill="rgb(215,223,47)" fg:x="824" fg:w="1"/><text x="29.6681%" y="239.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (9 samples, 0.32%)</title><rect x="29.3467%" y="293" width="0.3213%" height="15" fill="rgb(248,225,23)" fg:x="822" fg:w="9"/><text x="29.5967%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.32%)</title><rect x="29.3467%" y="277" width="0.3213%" height="15" fill="rgb(250,108,0)" fg:x="822" fg:w="9"/><text x="29.5967%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.32%)</title><rect x="29.3467%" y="261" width="0.3213%" height="15" fill="rgb(228,208,7)" fg:x="822" fg:w="9"/><text x="29.5967%" y="271.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.25%)</title><rect x="29.4181%" y="245" width="0.2499%" height="15" fill="rgb(244,45,10)" fg:x="824" fg:w="7"/><text x="29.6681%" y="255.50"></text></g><g><title>malloc (6 samples, 0.21%)</title><rect x="29.4538%" y="229" width="0.2142%" height="15" fill="rgb(207,125,25)" fg:x="825" fg:w="6"/><text x="29.7038%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (16 samples, 0.57%)</title><rect x="29.1682%" y="357" width="0.5712%" height="15" fill="rgb(210,195,18)" fg:x="817" fg:w="16"/><text x="29.4182%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (15 samples, 0.54%)</title><rect x="29.2039%" y="341" width="0.5355%" height="15" fill="rgb(249,80,12)" fg:x="818" fg:w="15"/><text x="29.4539%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (15 samples, 0.54%)</title><rect x="29.2039%" y="325" width="0.5355%" height="15" fill="rgb(221,65,9)" fg:x="818" fg:w="15"/><text x="29.4539%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (14 samples, 0.50%)</title><rect x="29.2396%" y="309" width="0.4998%" height="15" fill="rgb(235,49,36)" fg:x="819" fg:w="14"/><text x="29.4896%" y="319.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (2 samples, 0.07%)</title><rect x="29.6680%" y="293" width="0.0714%" height="15" fill="rgb(225,32,20)" fg:x="831" fg:w="2"/><text x="29.9180%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (22 samples, 0.79%)</title><rect x="29.0253%" y="405" width="0.7854%" height="15" fill="rgb(215,141,46)" fg:x="813" fg:w="22"/><text x="29.2753%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (21 samples, 0.75%)</title><rect x="29.0610%" y="389" width="0.7497%" height="15" fill="rgb(250,160,47)" fg:x="814" fg:w="21"/><text x="29.3110%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (21 samples, 0.75%)</title><rect x="29.0610%" y="373" width="0.7497%" height="15" fill="rgb(216,222,40)" fg:x="814" fg:w="21"/><text x="29.3110%" y="383.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (2 samples, 0.07%)</title><rect x="29.7394%" y="357" width="0.0714%" height="15" fill="rgb(234,217,39)" fg:x="833" fg:w="2"/><text x="29.9894%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.46%)</title><rect x="29.8108%" y="389" width="0.4641%" height="15" fill="rgb(207,178,40)" fg:x="835" fg:w="13"/><text x="30.0608%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (13 samples, 0.46%)</title><rect x="29.8108%" y="373" width="0.4641%" height="15" fill="rgb(221,136,13)" fg:x="835" fg:w="13"/><text x="30.0608%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3 samples, 0.11%)</title><rect x="30.2749%" y="389" width="0.1071%" height="15" fill="rgb(249,199,10)" fg:x="848" fg:w="3"/><text x="30.5249%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (3 samples, 0.11%)</title><rect x="30.2749%" y="373" width="0.1071%" height="15" fill="rgb(249,222,13)" fg:x="848" fg:w="3"/><text x="30.5249%" y="383.50"></text></g><g><title>hashbrown::raw::is_full (3 samples, 0.11%)</title><rect x="30.2749%" y="357" width="0.1071%" height="15" fill="rgb(244,185,38)" fg:x="848" fg:w="3"/><text x="30.5249%" y="367.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.07%)</title><rect x="30.3820%" y="389" width="0.0714%" height="15" fill="rgb(236,202,9)" fg:x="851" fg:w="2"/><text x="30.6320%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (35 samples, 1.25%)</title><rect x="30.4534%" y="389" width="1.2496%" height="15" fill="rgb(250,229,37)" fg:x="853" fg:w="35"/><text x="30.7034%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (35 samples, 1.25%)</title><rect x="30.4534%" y="373" width="1.2496%" height="15" fill="rgb(206,174,23)" fg:x="853" fg:w="35"/><text x="30.7034%" y="383.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::define_var (117 samples, 4.18%)</title><rect x="27.5973%" y="501" width="4.1771%" height="15" fill="rgb(211,33,43)" fg:x="773" fg:w="117"/><text x="27.8473%" y="511.50">simpl..</text></g><g><title>simple_lisp::interpreter::Env::insert (114 samples, 4.07%)</title><rect x="27.7044%" y="485" width="4.0700%" height="15" fill="rgb(245,58,50)" fg:x="776" fg:w="114"/><text x="27.9544%" y="495.50">simp..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (81 samples, 2.89%)</title><rect x="28.8825%" y="469" width="2.8918%" height="15" fill="rgb(244,68,36)" fg:x="809" fg:w="81"/><text x="29.1325%" y="479.50">st..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (81 samples, 2.89%)</title><rect x="28.8825%" y="453" width="2.8918%" height="15" fill="rgb(232,229,15)" fg:x="809" fg:w="81"/><text x="29.1325%" y="463.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (80 samples, 2.86%)</title><rect x="28.9182%" y="437" width="2.8561%" height="15" fill="rgb(254,30,23)" fg:x="810" fg:w="80"/><text x="29.1682%" y="447.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (77 samples, 2.75%)</title><rect x="29.0253%" y="421" width="2.7490%" height="15" fill="rgb(235,160,14)" fg:x="813" fg:w="77"/><text x="29.2753%" y="431.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (55 samples, 1.96%)</title><rect x="29.8108%" y="405" width="1.9636%" height="15" fill="rgb(212,155,44)" fg:x="835" fg:w="55"/><text x="30.0608%" y="415.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2 samples, 0.07%)</title><rect x="31.7030%" y="389" width="0.0714%" height="15" fill="rgb(226,2,50)" fg:x="888" fg:w="2"/><text x="31.9530%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.07%)</title><rect x="31.7030%" y="373" width="0.0714%" height="15" fill="rgb(234,177,6)" fg:x="888" fg:w="2"/><text x="31.9530%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.07%)</title><rect x="31.7030%" y="357" width="0.0714%" height="15" fill="rgb(217,24,9)" fg:x="888" fg:w="2"/><text x="31.9530%" y="367.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (9 samples, 0.32%)</title><rect x="31.8458%" y="485" width="0.3213%" height="15" fill="rgb(220,13,46)" fg:x="892" fg:w="9"/><text x="32.0958%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (9 samples, 0.32%)</title><rect x="31.8458%" y="469" width="0.3213%" height="15" fill="rgb(239,221,27)" fg:x="892" fg:w="9"/><text x="32.0958%" y="479.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (3 samples, 0.11%)</title><rect x="32.5241%" y="469" width="0.1071%" height="15" fill="rgb(222,198,25)" fg:x="911" fg:w="3"/><text x="32.7741%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (3 samples, 0.11%)</title><rect x="32.5241%" y="453" width="0.1071%" height="15" fill="rgb(211,99,13)" fg:x="911" fg:w="3"/><text x="32.7741%" y="463.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::DataRef as core::clone::Clone&gt;::clone (43 samples, 1.54%)</title><rect x="32.6312%" y="469" width="1.5352%" height="15" fill="rgb(232,111,31)" fg:x="914" fg:w="43"/><text x="32.8812%" y="479.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (1 samples, 0.04%)</title><rect x="34.1664%" y="469" width="0.0357%" height="15" fill="rgb(245,82,37)" fg:x="957" fg:w="1"/><text x="34.4164%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="34.1664%" y="453" width="0.0357%" height="15" fill="rgb(227,149,46)" fg:x="957" fg:w="1"/><text x="34.4164%" y="463.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::finish (2 samples, 0.07%)</title><rect x="34.6305%" y="389" width="0.0714%" height="15" fill="rgb(218,36,50)" fg:x="970" fg:w="2"/><text x="34.8805%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (2 samples, 0.07%)</title><rect x="34.6305%" y="373" width="0.0714%" height="15" fill="rgb(226,80,48)" fg:x="970" fg:w="2"/><text x="34.8805%" y="383.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.14%)</title><rect x="34.6305%" y="421" width="0.1428%" height="15" fill="rgb(238,224,15)" fg:x="970" fg:w="4"/><text x="34.8805%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.14%)</title><rect x="34.6305%" y="405" width="0.1428%" height="15" fill="rgb(241,136,10)" fg:x="970" fg:w="4"/><text x="34.8805%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.07%)</title><rect x="34.7019%" y="389" width="0.0714%" height="15" fill="rgb(208,32,45)" fg:x="972" fg:w="2"/><text x="34.9519%" y="399.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (2 samples, 0.07%)</title><rect x="34.7019%" y="373" width="0.0714%" height="15" fill="rgb(207,135,9)" fg:x="972" fg:w="2"/><text x="34.9519%" y="383.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (2 samples, 0.07%)</title><rect x="34.7019%" y="357" width="0.0714%" height="15" fill="rgb(206,86,44)" fg:x="972" fg:w="2"/><text x="34.9519%" y="367.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (2 samples, 0.07%)</title><rect x="34.7019%" y="341" width="0.0714%" height="15" fill="rgb(245,177,15)" fg:x="972" fg:w="2"/><text x="34.9519%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (2 samples, 0.07%)</title><rect x="34.7019%" y="325" width="0.0714%" height="15" fill="rgb(206,64,50)" fg:x="972" fg:w="2"/><text x="34.9519%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (5 samples, 0.18%)</title><rect x="36.7726%" y="357" width="0.1785%" height="15" fill="rgb(234,36,40)" fg:x="1030" fg:w="5"/><text x="37.0226%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.93%)</title><rect x="36.1657%" y="373" width="0.9282%" height="15" fill="rgb(213,64,8)" fg:x="1013" fg:w="26"/><text x="36.4157%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (4 samples, 0.14%)</title><rect x="36.9511%" y="357" width="0.1428%" height="15" fill="rgb(210,75,36)" fg:x="1035" fg:w="4"/><text x="37.2011%" y="367.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (17 samples, 0.61%)</title><rect x="37.0939%" y="357" width="0.6069%" height="15" fill="rgb(229,88,21)" fg:x="1039" fg:w="17"/><text x="37.3439%" y="367.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (17 samples, 0.61%)</title><rect x="37.0939%" y="341" width="0.6069%" height="15" fill="rgb(252,204,47)" fg:x="1039" fg:w="17"/><text x="37.3439%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (17 samples, 0.61%)</title><rect x="37.0939%" y="325" width="0.6069%" height="15" fill="rgb(208,77,27)" fg:x="1039" fg:w="17"/><text x="37.3439%" y="335.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::cmp::PartialEq&gt;::eq (17 samples, 0.61%)</title><rect x="37.0939%" y="309" width="0.6069%" height="15" fill="rgb(221,76,26)" fg:x="1039" fg:w="17"/><text x="37.3439%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (31 samples, 1.11%)</title><rect x="37.0939%" y="373" width="1.1067%" height="15" fill="rgb(225,139,18)" fg:x="1039" fg:w="31"/><text x="37.3439%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (14 samples, 0.50%)</title><rect x="37.7008%" y="357" width="0.4998%" height="15" fill="rgb(230,137,11)" fg:x="1056" fg:w="14"/><text x="37.9508%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (14 samples, 0.50%)</title><rect x="37.7008%" y="341" width="0.4998%" height="15" fill="rgb(212,28,1)" fg:x="1056" fg:w="14"/><text x="37.9508%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (14 samples, 0.50%)</title><rect x="37.7008%" y="325" width="0.4998%" height="15" fill="rgb(248,164,17)" fg:x="1056" fg:w="14"/><text x="37.9508%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (14 samples, 0.50%)</title><rect x="37.7008%" y="309" width="0.4998%" height="15" fill="rgb(222,171,42)" fg:x="1056" fg:w="14"/><text x="37.9508%" y="319.50"></text></g><g><title>hashbrown::raw::h2 (18 samples, 0.64%)</title><rect x="38.2006%" y="373" width="0.6426%" height="15" fill="rgb(243,84,45)" fg:x="1070" fg:w="18"/><text x="38.4506%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (11 samples, 0.39%)</title><rect x="38.8433%" y="373" width="0.3927%" height="15" fill="rgb(252,49,23)" fg:x="1088" fg:w="11"/><text x="39.0933%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (11 samples, 0.39%)</title><rect x="38.8433%" y="357" width="0.3927%" height="15" fill="rgb(215,19,7)" fg:x="1088" fg:w="11"/><text x="39.0933%" y="367.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::get_var (211 samples, 7.53%)</title><rect x="31.7744%" y="501" width="7.5330%" height="15" fill="rgb(238,81,41)" fg:x="890" fg:w="211"/><text x="32.0244%" y="511.50">simple_lis..</text></g><g><title>simple_lisp::interpreter::Env::get (200 samples, 7.14%)</title><rect x="32.1671%" y="485" width="7.1403%" height="15" fill="rgb(210,199,37)" fg:x="901" fg:w="200"/><text x="32.4171%" y="495.50">simple_lis..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (143 samples, 5.11%)</title><rect x="34.2021%" y="469" width="5.1053%" height="15" fill="rgb(244,192,49)" fg:x="958" fg:w="143"/><text x="34.4521%" y="479.50">std::c..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (143 samples, 5.11%)</title><rect x="34.2021%" y="453" width="5.1053%" height="15" fill="rgb(226,211,11)" fg:x="958" fg:w="143"/><text x="34.4521%" y="463.50">hashbr..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (143 samples, 5.11%)</title><rect x="34.2021%" y="437" width="5.1053%" height="15" fill="rgb(236,162,54)" fg:x="958" fg:w="143"/><text x="34.4521%" y="447.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (127 samples, 4.53%)</title><rect x="34.7733%" y="421" width="4.5341%" height="15" fill="rgb(220,229,9)" fg:x="974" fg:w="127"/><text x="35.0233%" y="431.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (127 samples, 4.53%)</title><rect x="34.7733%" y="405" width="4.5341%" height="15" fill="rgb(250,87,22)" fg:x="974" fg:w="127"/><text x="35.0233%" y="415.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (125 samples, 4.46%)</title><rect x="34.8447%" y="389" width="4.4627%" height="15" fill="rgb(239,43,17)" fg:x="976" fg:w="125"/><text x="35.0947%" y="399.50">hashb..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2 samples, 0.07%)</title><rect x="39.2360%" y="373" width="0.0714%" height="15" fill="rgb(231,177,25)" fg:x="1099" fg:w="2"/><text x="39.4860%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.07%)</title><rect x="39.2360%" y="357" width="0.0714%" height="15" fill="rgb(219,179,1)" fg:x="1099" fg:w="2"/><text x="39.4860%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.07%)</title><rect x="39.2360%" y="341" width="0.0714%" height="15" fill="rgb(238,219,53)" fg:x="1099" fg:w="2"/><text x="39.4860%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.04%)</title><rect x="39.3074%" y="485" width="0.0357%" height="15" fill="rgb(232,167,36)" fg:x="1101" fg:w="1"/><text x="39.5574%" y="495.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::pop (1 samples, 0.04%)</title><rect x="39.3431%" y="485" width="0.0357%" height="15" fill="rgb(244,19,51)" fg:x="1102" fg:w="1"/><text x="39.5931%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.04%)</title><rect x="39.3431%" y="469" width="0.0357%" height="15" fill="rgb(224,6,22)" fg:x="1102" fg:w="1"/><text x="39.5931%" y="479.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="39.3431%" y="453" width="0.0357%" height="15" fill="rgb(224,145,5)" fg:x="1102" fg:w="1"/><text x="39.5931%" y="463.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (4 samples, 0.14%)</title><rect x="39.3788%" y="485" width="0.1428%" height="15" fill="rgb(234,130,49)" fg:x="1103" fg:w="4"/><text x="39.6288%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.14%)</title><rect x="39.3788%" y="469" width="0.1428%" height="15" fill="rgb(254,6,2)" fg:x="1103" fg:w="4"/><text x="39.6288%" y="479.50"></text></g><g><title>core::ptr::write (4 samples, 0.14%)</title><rect x="39.3788%" y="453" width="0.1428%" height="15" fill="rgb(208,96,46)" fg:x="1103" fg:w="4"/><text x="39.6288%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="39.5930%" y="469" width="0.0714%" height="15" fill="rgb(239,3,39)" fg:x="1109" fg:w="2"/><text x="39.8430%" y="479.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="39.5930%" y="453" width="0.0714%" height="15" fill="rgb(233,210,1)" fg:x="1109" fg:w="2"/><text x="39.8430%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="39.5930%" y="437" width="0.0714%" height="15" fill="rgb(244,137,37)" fg:x="1109" fg:w="2"/><text x="39.8430%" y="447.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2 samples, 0.07%)</title><rect x="39.5930%" y="421" width="0.0714%" height="15" fill="rgb(240,136,2)" fg:x="1109" fg:w="2"/><text x="39.8430%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="39.5930%" y="405" width="0.0714%" height="15" fill="rgb(239,18,37)" fg:x="1109" fg:w="2"/><text x="39.8430%" y="415.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="40.0571%" y="373" width="0.0357%" height="15" fill="rgb(218,185,22)" fg:x="1122" fg:w="1"/><text x="40.3071%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (13 samples, 0.46%)</title><rect x="39.6644%" y="469" width="0.4641%" height="15" fill="rgb(225,218,4)" fg:x="1111" fg:w="13"/><text x="39.9144%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (13 samples, 0.46%)</title><rect x="39.6644%" y="453" width="0.4641%" height="15" fill="rgb(230,182,32)" fg:x="1111" fg:w="13"/><text x="39.9144%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (13 samples, 0.46%)</title><rect x="39.6644%" y="437" width="0.4641%" height="15" fill="rgb(242,56,43)" fg:x="1111" fg:w="13"/><text x="39.9144%" y="447.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.46%)</title><rect x="39.6644%" y="421" width="0.4641%" height="15" fill="rgb(233,99,24)" fg:x="1111" fg:w="13"/><text x="39.9144%" y="431.50"></text></g><g><title>core::mem::take (2 samples, 0.07%)</title><rect x="40.0571%" y="405" width="0.0714%" height="15" fill="rgb(234,209,42)" fg:x="1122" fg:w="2"/><text x="40.3071%" y="415.50"></text></g><g><title>core::mem::replace (2 samples, 0.07%)</title><rect x="40.0571%" y="389" width="0.0714%" height="15" fill="rgb(227,7,12)" fg:x="1122" fg:w="2"/><text x="40.3071%" y="399.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="40.0928%" y="373" width="0.0357%" height="15" fill="rgb(245,203,43)" fg:x="1123" fg:w="1"/><text x="40.3428%" y="383.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::pop_env (26 samples, 0.93%)</title><rect x="39.3074%" y="501" width="0.9282%" height="15" fill="rgb(238,205,33)" fg:x="1101" fg:w="26"/><text x="39.5574%" y="511.50"></text></g><g><title>simple_lisp::interpreter::Env::clear (20 samples, 0.71%)</title><rect x="39.5216%" y="485" width="0.7140%" height="15" fill="rgb(231,56,7)" fg:x="1107" fg:w="20"/><text x="39.7716%" y="495.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::clear (3 samples, 0.11%)</title><rect x="40.1285%" y="469" width="0.1071%" height="15" fill="rgb(244,186,29)" fg:x="1124" fg:w="3"/><text x="40.3785%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (3 samples, 0.11%)</title><rect x="40.1285%" y="453" width="0.1071%" height="15" fill="rgb(234,111,31)" fg:x="1124" fg:w="3"/><text x="40.3785%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;]&gt; (3 samples, 0.11%)</title><rect x="40.1285%" y="437" width="0.1071%" height="15" fill="rgb(241,149,10)" fg:x="1124" fg:w="3"/><text x="40.3785%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (3 samples, 0.11%)</title><rect x="40.1285%" y="421" width="0.1071%" height="15" fill="rgb(249,206,44)" fg:x="1124" fg:w="3"/><text x="40.3785%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (3 samples, 0.11%)</title><rect x="40.1285%" y="405" width="0.1071%" height="15" fill="rgb(251,153,30)" fg:x="1124" fg:w="3"/><text x="40.3785%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;simple_lisp::interpreter::ast::Ident,(),rustc_hash::FxBuildHasher&gt;&gt; (3 samples, 0.11%)</title><rect x="40.1285%" y="389" width="0.1071%" height="15" fill="rgb(239,152,38)" fg:x="1124" fg:w="3"/><text x="40.3785%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(simple_lisp::interpreter::ast::Ident,())&gt;&gt; (3 samples, 0.11%)</title><rect x="40.1285%" y="373" width="0.1071%" height="15" fill="rgb(249,139,47)" fg:x="1124" fg:w="3"/><text x="40.3785%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="40.1285%" y="357" width="0.1071%" height="15" fill="rgb(244,64,35)" fg:x="1124" fg:w="3"/><text x="40.3785%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (3 samples, 0.11%)</title><rect x="40.1285%" y="341" width="0.1071%" height="15" fill="rgb(216,46,15)" fg:x="1124" fg:w="3"/><text x="40.3785%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (3 samples, 0.11%)</title><rect x="40.1285%" y="325" width="0.1071%" height="15" fill="rgb(250,74,19)" fg:x="1124" fg:w="3"/><text x="40.3785%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.11%)</title><rect x="40.1285%" y="309" width="0.1071%" height="15" fill="rgb(249,42,33)" fg:x="1124" fg:w="3"/><text x="40.3785%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.11%)</title><rect x="40.1285%" y="293" width="0.1071%" height="15" fill="rgb(242,149,17)" fg:x="1124" fg:w="3"/><text x="40.3785%" y="303.50"></text></g><g><title>cfree (2 samples, 0.07%)</title><rect x="40.1642%" y="277" width="0.0714%" height="15" fill="rgb(244,29,21)" fg:x="1125" fg:w="2"/><text x="40.4142%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="40.1642%" y="261" width="0.0714%" height="15" fill="rgb(220,130,37)" fg:x="1125" fg:w="2"/><text x="40.4142%" y="271.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::pop_from_scope (4 samples, 0.14%)</title><rect x="40.2356%" y="501" width="0.1428%" height="15" fill="rgb(211,67,2)" fg:x="1127" fg:w="4"/><text x="40.4856%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.11%)</title><rect x="40.2713%" y="485" width="0.1071%" height="15" fill="rgb(235,68,52)" fg:x="1128" fg:w="3"/><text x="40.5213%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.11%)</title><rect x="41.2353%" y="469" width="0.1071%" height="15" fill="rgb(246,142,3)" fg:x="1155" fg:w="3"/><text x="41.4853%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 0.11%)</title><rect x="41.2353%" y="453" width="0.1071%" height="15" fill="rgb(241,25,7)" fg:x="1155" fg:w="3"/><text x="41.4853%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (3 samples, 0.11%)</title><rect x="41.2353%" y="437" width="0.1071%" height="15" fill="rgb(242,119,39)" fg:x="1155" fg:w="3"/><text x="41.4853%" y="447.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (7 samples, 0.25%)</title><rect x="41.2353%" y="485" width="0.2499%" height="15" fill="rgb(241,98,45)" fg:x="1155" fg:w="7"/><text x="41.4853%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (4 samples, 0.14%)</title><rect x="41.3424%" y="469" width="0.1428%" height="15" fill="rgb(254,28,30)" fg:x="1158" fg:w="4"/><text x="41.5924%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.18%)</title><rect x="42.5205%" y="437" width="0.1785%" height="15" fill="rgb(241,142,54)" fg:x="1191" fg:w="5"/><text x="42.7705%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.07%)</title><rect x="42.6990%" y="437" width="0.0714%" height="15" fill="rgb(222,85,15)" fg:x="1196" fg:w="2"/><text x="42.9490%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.04%)</title><rect x="42.7704%" y="437" width="0.0357%" height="15" fill="rgb(210,85,47)" fg:x="1198" fg:w="1"/><text x="43.0204%" y="447.50"></text></g><g><title>__rdl_alloc (4 samples, 0.14%)</title><rect x="43.1989%" y="421" width="0.1428%" height="15" fill="rgb(224,206,25)" fg:x="1210" fg:w="4"/><text x="43.4489%" y="431.50"></text></g><g><title>__rust_alloc (5 samples, 0.18%)</title><rect x="43.3417%" y="421" width="0.1785%" height="15" fill="rgb(243,201,19)" fg:x="1214" fg:w="5"/><text x="43.5917%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (76 samples, 2.71%)</title><rect x="42.8061%" y="437" width="2.7133%" height="15" fill="rgb(236,59,4)" fg:x="1199" fg:w="76"/><text x="43.0561%" y="447.50">al..</text></g><g><title>malloc (56 samples, 2.00%)</title><rect x="43.5202%" y="421" width="1.9993%" height="15" fill="rgb(254,179,45)" fg:x="1219" fg:w="56"/><text x="43.7702%" y="431.50">m..</text></g><g><title>[libc.so.6] (23 samples, 0.82%)</title><rect x="44.6983%" y="405" width="0.8211%" height="15" fill="rgb(226,14,10)" fg:x="1252" fg:w="23"/><text x="44.9483%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::array (5 samples, 0.18%)</title><rect x="45.5195%" y="437" width="0.1785%" height="15" fill="rgb(244,27,41)" fg:x="1275" fg:w="5"/><text x="45.7695%" y="447.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (5 samples, 0.18%)</title><rect x="45.5195%" y="421" width="0.1785%" height="15" fill="rgb(235,35,32)" fg:x="1275" fg:w="5"/><text x="45.7695%" y="431.50"></text></g><g><title>core::cmp::max (6 samples, 0.21%)</title><rect x="45.6980%" y="437" width="0.2142%" height="15" fill="rgb(218,68,31)" fg:x="1280" fg:w="6"/><text x="45.9480%" y="447.50"></text></g><g><title>core::cmp::Ord::max (6 samples, 0.21%)</title><rect x="45.6980%" y="421" width="0.2142%" height="15" fill="rgb(207,120,37)" fg:x="1280" fg:w="6"/><text x="45.9480%" y="431.50"></text></g><g><title>core::cmp::max_by (6 samples, 0.21%)</title><rect x="45.6980%" y="405" width="0.2142%" height="15" fill="rgb(227,98,0)" fg:x="1280" fg:w="6"/><text x="45.9480%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (105 samples, 3.75%)</title><rect x="42.3063%" y="469" width="3.7487%" height="15" fill="rgb(207,7,3)" fg:x="1185" fg:w="105"/><text x="42.5563%" y="479.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (104 samples, 3.71%)</title><rect x="42.3420%" y="453" width="3.7130%" height="15" fill="rgb(206,98,19)" fg:x="1186" fg:w="104"/><text x="42.5920%" y="463.50">allo..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (4 samples, 0.14%)</title><rect x="45.9122%" y="437" width="0.1428%" height="15" fill="rgb(217,5,26)" fg:x="1286" fg:w="4"/><text x="46.1622%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (4 samples, 0.14%)</title><rect x="45.9122%" y="421" width="0.1428%" height="15" fill="rgb(235,190,38)" fg:x="1286" fg:w="4"/><text x="46.1622%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.07%)</title><rect x="46.0550%" y="469" width="0.0714%" height="15" fill="rgb(247,86,24)" fg:x="1290" fg:w="2"/><text x="46.3050%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.07%)</title><rect x="46.0550%" y="453" width="0.0714%" height="15" fill="rgb(205,101,16)" fg:x="1290" fg:w="2"/><text x="46.3050%" y="463.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_dr_to_scope (167 samples, 5.96%)</title><rect x="40.3784%" y="501" width="5.9622%" height="15" fill="rgb(246,168,33)" fg:x="1131" fg:w="167"/><text x="40.6284%" y="511.50">simple_l..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (136 samples, 4.86%)</title><rect x="41.4852%" y="485" width="4.8554%" height="15" fill="rgb(231,114,1)" fg:x="1162" fg:w="136"/><text x="41.7352%" y="495.50">alloc:..</text></g><g><title>core::ptr::write (6 samples, 0.21%)</title><rect x="46.1264%" y="469" width="0.2142%" height="15" fill="rgb(207,184,53)" fg:x="1292" fg:w="6"/><text x="46.3764%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (1 samples, 0.04%)</title><rect x="46.5548%" y="485" width="0.0357%" height="15" fill="rgb(224,95,51)" fg:x="1304" fg:w="1"/><text x="46.8048%" y="495.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_env (11 samples, 0.39%)</title><rect x="46.3406%" y="501" width="0.3927%" height="15" fill="rgb(212,188,45)" fg:x="1298" fg:w="11"/><text x="46.5906%" y="511.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (4 samples, 0.14%)</title><rect x="46.5905%" y="485" width="0.1428%" height="15" fill="rgb(223,154,38)" fg:x="1305" fg:w="4"/><text x="46.8405%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.14%)</title><rect x="46.5905%" y="469" width="0.1428%" height="15" fill="rgb(251,22,52)" fg:x="1305" fg:w="4"/><text x="46.8405%" y="479.50"></text></g><g><title>core::ptr::write (4 samples, 0.14%)</title><rect x="46.5905%" y="453" width="0.1428%" height="15" fill="rgb(229,209,22)" fg:x="1305" fg:w="4"/><text x="46.8405%" y="463.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="46.7333%" y="485" width="0.0357%" height="15" fill="rgb(234,138,34)" fg:x="1309" fg:w="1"/><text x="46.9833%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="46.7333%" y="469" width="0.0357%" height="15" fill="rgb(212,95,11)" fg:x="1309" fg:w="1"/><text x="46.9833%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="46.7333%" y="453" width="0.0357%" height="15" fill="rgb(240,179,47)" fg:x="1309" fg:w="1"/><text x="46.9833%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="46.7333%" y="437" width="0.0357%" height="15" fill="rgb(240,163,11)" fg:x="1309" fg:w="1"/><text x="46.9833%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="47.2331%" y="437" width="0.0357%" height="15" fill="rgb(236,37,12)" fg:x="1323" fg:w="1"/><text x="47.4831%" y="447.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_env_scope (21 samples, 0.75%)</title><rect x="46.7333%" y="501" width="0.7497%" height="15" fill="rgb(232,164,16)" fg:x="1309" fg:w="21"/><text x="46.9833%" y="511.50"></text></g><g><title>simple_lisp::interpreter::Env::push_scope (20 samples, 0.71%)</title><rect x="46.7690%" y="485" width="0.7140%" height="15" fill="rgb(244,205,15)" fg:x="1310" fg:w="20"/><text x="47.0190%" y="495.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (20 samples, 0.71%)</title><rect x="46.7690%" y="469" width="0.7140%" height="15" fill="rgb(223,117,47)" fg:x="1310" fg:w="20"/><text x="47.0190%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (20 samples, 0.71%)</title><rect x="46.7690%" y="453" width="0.7140%" height="15" fill="rgb(244,107,35)" fg:x="1310" fg:w="20"/><text x="47.0190%" y="463.50"></text></g><g><title>core::ptr::write (6 samples, 0.21%)</title><rect x="47.2688%" y="437" width="0.2142%" height="15" fill="rgb(205,140,8)" fg:x="1324" fg:w="6"/><text x="47.5188%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (14 samples, 0.50%)</title><rect x="48.3399%" y="373" width="0.4998%" height="15" fill="rgb(228,84,46)" fg:x="1354" fg:w="14"/><text x="48.5899%" y="383.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (17 samples, 0.61%)</title><rect x="48.3399%" y="389" width="0.6069%" height="15" fill="rgb(254,188,9)" fg:x="1354" fg:w="17"/><text x="48.5899%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.11%)</title><rect x="48.8397%" y="373" width="0.1071%" height="15" fill="rgb(206,112,54)" fg:x="1368" fg:w="3"/><text x="49.0897%" y="383.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="48.9111%" y="357" width="0.0357%" height="15" fill="rgb(216,84,49)" fg:x="1370" fg:w="1"/><text x="49.1611%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.18%)</title><rect x="48.9468%" y="373" width="0.1785%" height="15" fill="rgb(214,194,35)" fg:x="1371" fg:w="5"/><text x="49.1968%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5 samples, 0.18%)</title><rect x="48.9468%" y="357" width="0.1785%" height="15" fill="rgb(249,28,3)" fg:x="1371" fg:w="5"/><text x="49.1968%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (5 samples, 0.18%)</title><rect x="48.9468%" y="341" width="0.1785%" height="15" fill="rgb(222,56,52)" fg:x="1371" fg:w="5"/><text x="49.1968%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="49.5894%" y="341" width="0.0357%" height="15" fill="rgb(245,217,50)" fg:x="1389" fg:w="1"/><text x="49.8394%" y="351.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (1 samples, 0.04%)</title><rect x="49.5894%" y="325" width="0.0357%" height="15" fill="rgb(213,201,24)" fg:x="1389" fg:w="1"/><text x="49.8394%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.04%)</title><rect x="49.6251%" y="341" width="0.0357%" height="15" fill="rgb(248,116,28)" fg:x="1390" fg:w="1"/><text x="49.8751%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.04%)</title><rect x="49.6251%" y="325" width="0.0357%" height="15" fill="rgb(219,72,43)" fg:x="1390" fg:w="1"/><text x="49.8751%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (3 samples, 0.11%)</title><rect x="49.6608%" y="341" width="0.1071%" height="15" fill="rgb(209,138,14)" fg:x="1391" fg:w="3"/><text x="49.9108%" y="351.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (3 samples, 0.11%)</title><rect x="49.6608%" y="325" width="0.1071%" height="15" fill="rgb(222,18,33)" fg:x="1391" fg:w="3"/><text x="49.9108%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (1 samples, 0.04%)</title><rect x="49.7679%" y="341" width="0.0357%" height="15" fill="rgb(213,199,7)" fg:x="1394" fg:w="1"/><text x="50.0179%" y="351.50"></text></g><g><title>hashbrown::raw::inner::h2 (6 samples, 0.21%)</title><rect x="49.8036%" y="341" width="0.2142%" height="15" fill="rgb(250,110,10)" fg:x="1395" fg:w="6"/><text x="50.0536%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (27 samples, 0.96%)</title><rect x="49.1253%" y="373" width="0.9639%" height="15" fill="rgb(248,123,6)" fg:x="1376" fg:w="27"/><text x="49.3753%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (27 samples, 0.96%)</title><rect x="49.1253%" y="357" width="0.9639%" height="15" fill="rgb(206,91,31)" fg:x="1376" fg:w="27"/><text x="49.3753%" y="367.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (2 samples, 0.07%)</title><rect x="50.0179%" y="341" width="0.0714%" height="15" fill="rgb(211,154,13)" fg:x="1401" fg:w="2"/><text x="50.2679%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.07%)</title><rect x="50.0179%" y="325" width="0.0714%" height="15" fill="rgb(225,148,7)" fg:x="1401" fg:w="2"/><text x="50.2679%" y="335.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (68 samples, 2.43%)</title><rect x="47.7687%" y="453" width="2.4277%" height="15" fill="rgb(220,160,43)" fg:x="1338" fg:w="68"/><text x="48.0187%" y="463.50">in..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (68 samples, 2.43%)</title><rect x="47.7687%" y="437" width="2.4277%" height="15" fill="rgb(213,52,39)" fg:x="1338" fg:w="68"/><text x="48.0187%" y="447.50">in..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (65 samples, 2.32%)</title><rect x="47.8758%" y="421" width="2.3206%" height="15" fill="rgb(243,137,7)" fg:x="1341" fg:w="65"/><text x="48.1258%" y="431.50">i..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (52 samples, 1.86%)</title><rect x="48.3399%" y="405" width="1.8565%" height="15" fill="rgb(230,79,13)" fg:x="1354" fg:w="52"/><text x="48.5899%" y="415.50">i..</text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (35 samples, 1.25%)</title><rect x="48.9468%" y="389" width="1.2496%" height="15" fill="rgb(247,105,23)" fg:x="1371" fg:w="35"/><text x="49.1968%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (3 samples, 0.11%)</title><rect x="50.0893%" y="373" width="0.1071%" height="15" fill="rgb(223,179,41)" fg:x="1403" fg:w="3"/><text x="50.3393%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (3 samples, 0.11%)</title><rect x="50.0893%" y="357" width="0.1071%" height="15" fill="rgb(218,9,34)" fg:x="1403" fg:w="3"/><text x="50.3393%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (2 samples, 0.07%)</title><rect x="50.1250%" y="341" width="0.0714%" height="15" fill="rgb(222,106,8)" fg:x="1404" fg:w="2"/><text x="50.3750%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (2 samples, 0.07%)</title><rect x="50.1250%" y="325" width="0.0714%" height="15" fill="rgb(211,220,0)" fg:x="1404" fg:w="2"/><text x="50.3750%" y="335.50"></text></g><g><title>__rdl_alloc (3 samples, 0.11%)</title><rect x="53.8379%" y="421" width="0.1071%" height="15" fill="rgb(229,52,16)" fg:x="1508" fg:w="3"/><text x="54.0879%" y="431.50"></text></g><g><title>__rust_alloc (5 samples, 0.18%)</title><rect x="53.9450%" y="421" width="0.1785%" height="15" fill="rgb(212,155,18)" fg:x="1511" fg:w="5"/><text x="54.1950%" y="431.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.04%)</title><rect x="54.1235%" y="421" width="0.0357%" height="15" fill="rgb(242,21,14)" fg:x="1516" fg:w="1"/><text x="54.3735%" y="431.50"></text></g><g><title>alloc::alloc::alloc (85 samples, 3.03%)</title><rect x="53.8379%" y="437" width="3.0346%" height="15" fill="rgb(222,19,48)" fg:x="1508" fg:w="85"/><text x="54.0879%" y="447.50">all..</text></g><g><title>malloc (76 samples, 2.71%)</title><rect x="54.1592%" y="421" width="2.7133%" height="15" fill="rgb(232,45,27)" fg:x="1517" fg:w="76"/><text x="54.4092%" y="431.50">ma..</text></g><g><title>[libc.so.6] (54 samples, 1.93%)</title><rect x="54.9447%" y="405" width="1.9279%" height="15" fill="rgb(249,103,42)" fg:x="1539" fg:w="54"/><text x="55.1947%" y="415.50">[..</text></g><g><title>core::ptr::write (12 samples, 0.43%)</title><rect x="56.8725%" y="437" width="0.4284%" height="15" fill="rgb(246,81,33)" fg:x="1593" fg:w="12"/><text x="57.1225%" y="447.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_to_scope (276 samples, 9.85%)</title><rect x="47.4830%" y="501" width="9.8536%" height="15" fill="rgb(252,33,42)" fg:x="1330" fg:w="276"/><text x="47.7330%" y="511.50">simple_lisp::i..</text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (276 samples, 9.85%)</title><rect x="47.4830%" y="485" width="9.8536%" height="15" fill="rgb(209,212,41)" fg:x="1330" fg:w="276"/><text x="47.7330%" y="495.50">simple_lisp::i..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (272 samples, 9.71%)</title><rect x="47.6258%" y="469" width="9.7108%" height="15" fill="rgb(207,154,6)" fg:x="1334" fg:w="272"/><text x="47.8758%" y="479.50">simple_lisp::i..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (200 samples, 7.14%)</title><rect x="50.1964%" y="453" width="7.1403%" height="15" fill="rgb(223,64,47)" fg:x="1406" fg:w="200"/><text x="50.4464%" y="463.50">simple_lis..</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (1 samples, 0.04%)</title><rect x="57.3010%" y="437" width="0.0357%" height="15" fill="rgb(211,161,38)" fg:x="1605" fg:w="1"/><text x="57.5510%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.04%)</title><rect x="57.3010%" y="421" width="0.0357%" height="15" fill="rgb(219,138,40)" fg:x="1605" fg:w="1"/><text x="57.5510%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.04%)</title><rect x="57.3010%" y="405" width="0.0357%" height="15" fill="rgb(241,228,46)" fg:x="1605" fg:w="1"/><text x="57.5510%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (1 samples, 0.04%)</title><rect x="57.3010%" y="389" width="0.0357%" height="15" fill="rgb(223,209,38)" fg:x="1605" fg:w="1"/><text x="57.5510%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.04%)</title><rect x="57.3010%" y="373" width="0.0357%" height="15" fill="rgb(236,164,45)" fg:x="1605" fg:w="1"/><text x="57.5510%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.04%)</title><rect x="57.3010%" y="357" width="0.0357%" height="15" fill="rgb(231,15,5)" fg:x="1605" fg:w="1"/><text x="57.5510%" y="367.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.04%)</title><rect x="57.3010%" y="341" width="0.0357%" height="15" fill="rgb(252,35,15)" fg:x="1605" fg:w="1"/><text x="57.5510%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.04%)</title><rect x="57.4081%" y="485" width="0.0357%" height="15" fill="rgb(248,181,18)" fg:x="1608" fg:w="1"/><text x="57.6581%" y="495.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="57.4081%" y="469" width="0.0357%" height="15" fill="rgb(233,39,42)" fg:x="1608" fg:w="1"/><text x="57.6581%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="57.4438%" y="485" width="0.0357%" height="15" fill="rgb(238,110,33)" fg:x="1609" fg:w="1"/><text x="57.6938%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.04%)</title><rect x="57.4438%" y="469" width="0.0357%" height="15" fill="rgb(233,195,10)" fg:x="1609" fg:w="1"/><text x="57.6938%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="57.4438%" y="453" width="0.0357%" height="15" fill="rgb(254,105,3)" fg:x="1609" fg:w="1"/><text x="57.6938%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.07%)</title><rect x="57.4795%" y="485" width="0.0714%" height="15" fill="rgb(221,225,9)" fg:x="1610" fg:w="2"/><text x="57.7295%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="57.4795%" y="469" width="0.0714%" height="15" fill="rgb(224,227,45)" fg:x="1610" fg:w="2"/><text x="57.7295%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (2 samples, 0.07%)</title><rect x="57.4795%" y="453" width="0.0714%" height="15" fill="rgb(229,198,43)" fg:x="1610" fg:w="2"/><text x="57.7295%" y="463.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (1 samples, 0.04%)</title><rect x="57.5152%" y="437" width="0.0357%" height="15" fill="rgb(206,209,35)" fg:x="1611" fg:w="1"/><text x="57.7652%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.04%)</title><rect x="57.5152%" y="421" width="0.0357%" height="15" fill="rgb(245,195,53)" fg:x="1611" fg:w="1"/><text x="57.7652%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (1 samples, 0.04%)</title><rect x="57.5152%" y="405" width="0.0357%" height="15" fill="rgb(240,92,26)" fg:x="1611" fg:w="1"/><text x="57.7652%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.04%)</title><rect x="57.5509%" y="485" width="0.0357%" height="15" fill="rgb(207,40,23)" fg:x="1612" fg:w="1"/><text x="57.8009%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="57.5509%" y="469" width="0.0357%" height="15" fill="rgb(223,111,35)" fg:x="1612" fg:w="1"/><text x="57.8009%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (1 samples, 0.04%)</title><rect x="57.5509%" y="453" width="0.0357%" height="15" fill="rgb(229,147,28)" fg:x="1612" fg:w="1"/><text x="57.8009%" y="463.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="57.5509%" y="437" width="0.0357%" height="15" fill="rgb(211,29,28)" fg:x="1612" fg:w="1"/><text x="57.8009%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.04%)</title><rect x="57.5509%" y="421" width="0.0357%" height="15" fill="rgb(228,72,33)" fg:x="1612" fg:w="1"/><text x="57.8009%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="57.5509%" y="405" width="0.0357%" height="15" fill="rgb(205,214,31)" fg:x="1612" fg:w="1"/><text x="57.8009%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="57.5509%" y="389" width="0.0357%" height="15" fill="rgb(224,111,15)" fg:x="1612" fg:w="1"/><text x="57.8009%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="57.5509%" y="373" width="0.0357%" height="15" fill="rgb(253,21,26)" fg:x="1612" fg:w="1"/><text x="57.8009%" y="383.50"></text></g><g><title>cfree (1 samples, 0.04%)</title><rect x="57.5509%" y="357" width="0.0357%" height="15" fill="rgb(245,139,43)" fg:x="1612" fg:w="1"/><text x="57.8009%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="57.5509%" y="341" width="0.0357%" height="15" fill="rgb(252,170,7)" fg:x="1612" fg:w="1"/><text x="57.8009%" y="351.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (1 samples, 0.04%)</title><rect x="58.0507%" y="405" width="0.0357%" height="15" fill="rgb(231,118,14)" fg:x="1626" fg:w="1"/><text x="58.3007%" y="415.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="58.0507%" y="389" width="0.0357%" height="15" fill="rgb(238,83,0)" fg:x="1626" fg:w="1"/><text x="58.3007%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (1 samples, 0.04%)</title><rect x="58.0507%" y="373" width="0.0357%" height="15" fill="rgb(221,39,39)" fg:x="1626" fg:w="1"/><text x="58.3007%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="58.0864%" y="373" width="0.0357%" height="15" fill="rgb(222,119,46)" fg:x="1627" fg:w="1"/><text x="58.3364%" y="383.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (2 samples, 0.07%)</title><rect x="58.0864%" y="389" width="0.0714%" height="15" fill="rgb(222,165,49)" fg:x="1627" fg:w="2"/><text x="58.3364%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="58.1221%" y="373" width="0.0357%" height="15" fill="rgb(219,113,52)" fg:x="1628" fg:w="1"/><text x="58.3721%" y="383.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="58.1221%" y="357" width="0.0357%" height="15" fill="rgb(214,7,15)" fg:x="1628" fg:w="1"/><text x="58.3721%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.11%)</title><rect x="58.1578%" y="373" width="0.1071%" height="15" fill="rgb(235,32,4)" fg:x="1629" fg:w="3"/><text x="58.4078%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.11%)</title><rect x="58.1578%" y="357" width="0.1071%" height="15" fill="rgb(238,90,54)" fg:x="1629" fg:w="3"/><text x="58.4078%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.11%)</title><rect x="58.1578%" y="341" width="0.1071%" height="15" fill="rgb(213,208,19)" fg:x="1629" fg:w="3"/><text x="58.4078%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (1 samples, 0.04%)</title><rect x="58.5505%" y="341" width="0.0357%" height="15" fill="rgb(233,156,4)" fg:x="1640" fg:w="1"/><text x="58.8005%" y="351.50"></text></g><g><title>hashbrown::raw::inner::h2 (3 samples, 0.11%)</title><rect x="58.5862%" y="341" width="0.1071%" height="15" fill="rgb(207,194,5)" fg:x="1641" fg:w="3"/><text x="58.8362%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (16 samples, 0.57%)</title><rect x="58.2649%" y="373" width="0.5712%" height="15" fill="rgb(206,111,30)" fg:x="1632" fg:w="16"/><text x="58.5149%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (16 samples, 0.57%)</title><rect x="58.2649%" y="357" width="0.5712%" height="15" fill="rgb(243,70,54)" fg:x="1632" fg:w="16"/><text x="58.5149%" y="367.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (4 samples, 0.14%)</title><rect x="58.6933%" y="341" width="0.1428%" height="15" fill="rgb(242,28,8)" fg:x="1644" fg:w="4"/><text x="58.9433%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.14%)</title><rect x="58.6933%" y="325" width="0.1428%" height="15" fill="rgb(219,106,18)" fg:x="1644" fg:w="4"/><text x="58.9433%" y="335.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (32 samples, 1.14%)</title><rect x="57.7651%" y="453" width="1.1424%" height="15" fill="rgb(244,222,10)" fg:x="1618" fg:w="32"/><text x="58.0151%" y="463.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (32 samples, 1.14%)</title><rect x="57.7651%" y="437" width="1.1424%" height="15" fill="rgb(236,179,52)" fg:x="1618" fg:w="32"/><text x="58.0151%" y="447.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (32 samples, 1.14%)</title><rect x="57.7651%" y="421" width="1.1424%" height="15" fill="rgb(213,23,39)" fg:x="1618" fg:w="32"/><text x="58.0151%" y="431.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (23 samples, 0.82%)</title><rect x="58.0864%" y="405" width="0.8211%" height="15" fill="rgb(238,48,10)" fg:x="1627" fg:w="23"/><text x="58.3364%" y="415.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (21 samples, 0.75%)</title><rect x="58.1578%" y="389" width="0.7497%" height="15" fill="rgb(251,196,23)" fg:x="1629" fg:w="21"/><text x="58.4078%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (2 samples, 0.07%)</title><rect x="58.8361%" y="373" width="0.0714%" height="15" fill="rgb(250,152,24)" fg:x="1648" fg:w="2"/><text x="59.0861%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (2 samples, 0.07%)</title><rect x="58.8361%" y="357" width="0.0714%" height="15" fill="rgb(209,150,17)" fg:x="1648" fg:w="2"/><text x="59.0861%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (1 samples, 0.04%)</title><rect x="58.8718%" y="341" width="0.0357%" height="15" fill="rgb(234,202,34)" fg:x="1649" fg:w="1"/><text x="59.1218%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (1 samples, 0.04%)</title><rect x="58.8718%" y="325" width="0.0357%" height="15" fill="rgb(253,148,53)" fg:x="1649" fg:w="1"/><text x="59.1218%" y="335.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="60.3713%" y="421" width="0.0357%" height="15" fill="rgb(218,129,16)" fg:x="1691" fg:w="1"/><text x="60.6213%" y="431.50"></text></g><g><title>__rust_alloc (4 samples, 0.14%)</title><rect x="60.4070%" y="421" width="0.1428%" height="15" fill="rgb(216,85,19)" fg:x="1692" fg:w="4"/><text x="60.6570%" y="431.50"></text></g><g><title>alloc::alloc::alloc (57 samples, 2.03%)</title><rect x="60.3356%" y="437" width="2.0350%" height="15" fill="rgb(235,228,7)" fg:x="1690" fg:w="57"/><text x="60.5856%" y="447.50">a..</text></g><g><title>malloc (51 samples, 1.82%)</title><rect x="60.5498%" y="421" width="1.8208%" height="15" fill="rgb(245,175,0)" fg:x="1696" fg:w="51"/><text x="60.7998%" y="431.50">m..</text></g><g><title>[libc.so.6] (22 samples, 0.79%)</title><rect x="61.5851%" y="405" width="0.7854%" height="15" fill="rgb(208,168,36)" fg:x="1725" fg:w="22"/><text x="61.8351%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (1 samples, 0.04%)</title><rect x="62.3706%" y="437" width="0.0357%" height="15" fill="rgb(246,171,24)" fg:x="1747" fg:w="1"/><text x="62.6206%" y="447.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (3 samples, 0.11%)</title><rect x="62.4063%" y="437" width="0.1071%" height="15" fill="rgb(215,142,24)" fg:x="1748" fg:w="3"/><text x="62.6563%" y="447.50"></text></g><g><title>core::ptr::write (4 samples, 0.14%)</title><rect x="62.5134%" y="437" width="0.1428%" height="15" fill="rgb(250,187,7)" fg:x="1751" fg:w="4"/><text x="62.7634%" y="447.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (2 samples, 0.07%)</title><rect x="62.6562%" y="373" width="0.0714%" height="15" fill="rgb(228,66,33)" fg:x="1755" fg:w="2"/><text x="62.9062%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (2 samples, 0.07%)</title><rect x="62.6562%" y="357" width="0.0714%" height="15" fill="rgb(234,215,21)" fg:x="1755" fg:w="2"/><text x="62.9062%" y="367.50"></text></g><g><title>core::cell::BorrowRefMut::new (2 samples, 0.07%)</title><rect x="62.6562%" y="341" width="0.0714%" height="15" fill="rgb(222,191,20)" fg:x="1755" fg:w="2"/><text x="62.9062%" y="351.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (148 samples, 5.28%)</title><rect x="57.5866%" y="485" width="5.2838%" height="15" fill="rgb(245,79,54)" fg:x="1613" fg:w="148"/><text x="57.8366%" y="495.50">simple..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (146 samples, 5.21%)</title><rect x="57.6580%" y="469" width="5.2124%" height="15" fill="rgb(240,10,37)" fg:x="1615" fg:w="146"/><text x="57.9080%" y="479.50">simple..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (111 samples, 3.96%)</title><rect x="58.9075%" y="453" width="3.9629%" height="15" fill="rgb(214,192,32)" fg:x="1650" fg:w="111"/><text x="59.1575%" y="463.50">simp..</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (6 samples, 0.21%)</title><rect x="62.6562%" y="437" width="0.2142%" height="15" fill="rgb(209,36,54)" fg:x="1755" fg:w="6"/><text x="62.9062%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6 samples, 0.21%)</title><rect x="62.6562%" y="421" width="0.2142%" height="15" fill="rgb(220,10,11)" fg:x="1755" fg:w="6"/><text x="62.9062%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6 samples, 0.21%)</title><rect x="62.6562%" y="405" width="0.2142%" height="15" fill="rgb(221,106,17)" fg:x="1755" fg:w="6"/><text x="62.9062%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (6 samples, 0.21%)</title><rect x="62.6562%" y="389" width="0.2142%" height="15" fill="rgb(251,142,44)" fg:x="1755" fg:w="6"/><text x="62.9062%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;usize&gt;&gt; (4 samples, 0.14%)</title><rect x="62.7276%" y="373" width="0.1428%" height="15" fill="rgb(238,13,15)" fg:x="1757" fg:w="4"/><text x="62.9776%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (4 samples, 0.14%)</title><rect x="62.7276%" y="357" width="0.1428%" height="15" fill="rgb(208,107,27)" fg:x="1757" fg:w="4"/><text x="62.9776%" y="367.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (4 samples, 0.14%)</title><rect x="62.7276%" y="341" width="0.1428%" height="15" fill="rgb(205,136,37)" fg:x="1757" fg:w="4"/><text x="62.9776%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (4 samples, 0.14%)</title><rect x="62.7276%" y="325" width="0.1428%" height="15" fill="rgb(250,205,27)" fg:x="1757" fg:w="4"/><text x="62.9776%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (4 samples, 0.14%)</title><rect x="62.7276%" y="309" width="0.1428%" height="15" fill="rgb(210,80,43)" fg:x="1757" fg:w="4"/><text x="62.9776%" y="319.50"></text></g><g><title>core::mem::replace (4 samples, 0.14%)</title><rect x="62.7276%" y="293" width="0.1428%" height="15" fill="rgb(247,160,36)" fg:x="1757" fg:w="4"/><text x="62.9776%" y="303.50"></text></g><g><title>core::ptr::write (4 samples, 0.14%)</title><rect x="62.7276%" y="277" width="0.1428%" height="15" fill="rgb(234,13,49)" fg:x="1757" fg:w="4"/><text x="62.9776%" y="287.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (2 samples, 0.07%)</title><rect x="63.1203%" y="453" width="0.0714%" height="15" fill="rgb(234,122,0)" fg:x="1768" fg:w="2"/><text x="63.3703%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.07%)</title><rect x="63.1203%" y="437" width="0.0714%" height="15" fill="rgb(207,146,38)" fg:x="1768" fg:w="2"/><text x="63.3703%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="63.1203%" y="421" width="0.0714%" height="15" fill="rgb(207,177,25)" fg:x="1768" fg:w="2"/><text x="63.3703%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="63.1203%" y="405" width="0.0714%" height="15" fill="rgb(211,178,42)" fg:x="1768" fg:w="2"/><text x="63.3703%" y="415.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (4 samples, 0.14%)</title><rect x="63.1917%" y="453" width="0.1428%" height="15" fill="rgb(230,69,54)" fg:x="1770" fg:w="4"/><text x="63.4417%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (4 samples, 0.14%)</title><rect x="63.1917%" y="437" width="0.1428%" height="15" fill="rgb(214,135,41)" fg:x="1770" fg:w="4"/><text x="63.4417%" y="447.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (5 samples, 0.18%)</title><rect x="63.3345%" y="453" width="0.1785%" height="15" fill="rgb(237,67,25)" fg:x="1774" fg:w="5"/><text x="63.5845%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.18%)</title><rect x="63.3345%" y="437" width="0.1785%" height="15" fill="rgb(222,189,50)" fg:x="1774" fg:w="5"/><text x="63.5845%" y="447.50"></text></g><g><title>core::ptr::write (2 samples, 0.07%)</title><rect x="63.4416%" y="421" width="0.0714%" height="15" fill="rgb(245,148,34)" fg:x="1777" fg:w="2"/><text x="63.6916%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.04%)</title><rect x="63.5130%" y="421" width="0.0357%" height="15" fill="rgb(222,29,6)" fg:x="1779" fg:w="1"/><text x="63.7630%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.04%)</title><rect x="63.5130%" y="405" width="0.0357%" height="15" fill="rgb(221,189,43)" fg:x="1779" fg:w="1"/><text x="63.7630%" y="415.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.04%)</title><rect x="63.5130%" y="389" width="0.0357%" height="15" fill="rgb(207,36,27)" fg:x="1779" fg:w="1"/><text x="63.7630%" y="399.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::external (23 samples, 0.82%)</title><rect x="63.5130%" y="453" width="0.8211%" height="15" fill="rgb(217,90,24)" fg:x="1779" fg:w="23"/><text x="63.7630%" y="463.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::set_external (23 samples, 0.82%)</title><rect x="63.5130%" y="437" width="0.8211%" height="15" fill="rgb(224,66,35)" fg:x="1779" fg:w="23"/><text x="63.7630%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;usize&gt;&gt; (22 samples, 0.79%)</title><rect x="63.5487%" y="421" width="0.7854%" height="15" fill="rgb(221,13,50)" fg:x="1780" fg:w="22"/><text x="63.7987%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (22 samples, 0.79%)</title><rect x="63.5487%" y="405" width="0.7854%" height="15" fill="rgb(236,68,49)" fg:x="1780" fg:w="22"/><text x="63.7987%" y="415.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (22 samples, 0.79%)</title><rect x="63.5487%" y="389" width="0.7854%" height="15" fill="rgb(229,146,28)" fg:x="1780" fg:w="22"/><text x="63.7987%" y="399.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (22 samples, 0.79%)</title><rect x="63.5487%" y="373" width="0.7854%" height="15" fill="rgb(225,31,38)" fg:x="1780" fg:w="22"/><text x="63.7987%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (22 samples, 0.79%)</title><rect x="63.5487%" y="357" width="0.7854%" height="15" fill="rgb(250,208,3)" fg:x="1780" fg:w="22"/><text x="63.7987%" y="367.50"></text></g><g><title>core::mem::replace (22 samples, 0.79%)</title><rect x="63.5487%" y="341" width="0.7854%" height="15" fill="rgb(246,54,23)" fg:x="1780" fg:w="22"/><text x="63.7987%" y="351.50"></text></g><g><title>core::ptr::write (22 samples, 0.79%)</title><rect x="63.5487%" y="325" width="0.7854%" height="15" fill="rgb(243,76,11)" fg:x="1780" fg:w="22"/><text x="63.7987%" y="335.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (10 samples, 0.36%)</title><rect x="64.3342%" y="453" width="0.3570%" height="15" fill="rgb(245,21,50)" fg:x="1802" fg:w="10"/><text x="64.5842%" y="463.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (10 samples, 0.36%)</title><rect x="64.3342%" y="437" width="0.3570%" height="15" fill="rgb(228,9,43)" fg:x="1802" fg:w="10"/><text x="64.5842%" y="447.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (10 samples, 0.36%)</title><rect x="64.3342%" y="421" width="0.3570%" height="15" fill="rgb(208,100,47)" fg:x="1802" fg:w="10"/><text x="64.5842%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="65.0125%" y="389" width="0.0357%" height="15" fill="rgb(232,26,8)" fg:x="1821" fg:w="1"/><text x="65.2625%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="65.0125%" y="373" width="0.0357%" height="15" fill="rgb(216,166,38)" fg:x="1821" fg:w="1"/><text x="65.2625%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.07%)</title><rect x="65.0482%" y="389" width="0.0714%" height="15" fill="rgb(251,202,51)" fg:x="1822" fg:w="2"/><text x="65.2982%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.07%)</title><rect x="65.0482%" y="373" width="0.0714%" height="15" fill="rgb(254,216,34)" fg:x="1822" fg:w="2"/><text x="65.2982%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.07%)</title><rect x="65.0482%" y="357" width="0.0714%" height="15" fill="rgb(251,32,27)" fg:x="1822" fg:w="2"/><text x="65.2982%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.07%)</title><rect x="65.0482%" y="341" width="0.0714%" height="15" fill="rgb(208,127,28)" fg:x="1822" fg:w="2"/><text x="65.2982%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.07%)</title><rect x="65.0482%" y="325" width="0.0714%" height="15" fill="rgb(224,137,22)" fg:x="1822" fg:w="2"/><text x="65.2982%" y="335.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (20 samples, 0.71%)</title><rect x="64.6912%" y="453" width="0.7140%" height="15" fill="rgb(254,70,32)" fg:x="1812" fg:w="20"/><text x="64.9412%" y="463.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (20 samples, 0.71%)</title><rect x="64.6912%" y="437" width="0.7140%" height="15" fill="rgb(229,75,37)" fg:x="1812" fg:w="20"/><text x="64.9412%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (20 samples, 0.71%)</title><rect x="64.6912%" y="421" width="0.7140%" height="15" fill="rgb(252,64,23)" fg:x="1812" fg:w="20"/><text x="64.9412%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (20 samples, 0.71%)</title><rect x="64.6912%" y="405" width="0.7140%" height="15" fill="rgb(232,162,48)" fg:x="1812" fg:w="20"/><text x="64.9412%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 0.29%)</title><rect x="65.1196%" y="389" width="0.2856%" height="15" fill="rgb(246,160,12)" fg:x="1824" fg:w="8"/><text x="65.3696%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.29%)</title><rect x="65.1196%" y="373" width="0.2856%" height="15" fill="rgb(247,166,0)" fg:x="1824" fg:w="8"/><text x="65.3696%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.39%)</title><rect x="65.7265%" y="341" width="0.3927%" height="15" fill="rgb(249,219,21)" fg:x="1841" fg:w="11"/><text x="65.9765%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.04%)</title><rect x="66.1192%" y="341" width="0.0357%" height="15" fill="rgb(205,209,3)" fg:x="1852" fg:w="1"/><text x="66.3692%" y="351.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (37 samples, 1.32%)</title><rect x="65.4052%" y="453" width="1.3210%" height="15" fill="rgb(243,44,1)" fg:x="1832" fg:w="37"/><text x="65.6552%" y="463.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (37 samples, 1.32%)</title><rect x="65.4052%" y="437" width="1.3210%" height="15" fill="rgb(206,159,16)" fg:x="1832" fg:w="37"/><text x="65.6552%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (37 samples, 1.32%)</title><rect x="65.4052%" y="421" width="1.3210%" height="15" fill="rgb(244,77,30)" fg:x="1832" fg:w="37"/><text x="65.6552%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (37 samples, 1.32%)</title><rect x="65.4052%" y="405" width="1.3210%" height="15" fill="rgb(218,69,12)" fg:x="1832" fg:w="37"/><text x="65.6552%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (35 samples, 1.25%)</title><rect x="65.4766%" y="389" width="1.2496%" height="15" fill="rgb(212,87,7)" fg:x="1834" fg:w="35"/><text x="65.7266%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (35 samples, 1.25%)</title><rect x="65.4766%" y="373" width="1.2496%" height="15" fill="rgb(245,114,25)" fg:x="1834" fg:w="35"/><text x="65.7266%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (35 samples, 1.25%)</title><rect x="65.4766%" y="357" width="1.2496%" height="15" fill="rgb(210,61,42)" fg:x="1834" fg:w="35"/><text x="65.7266%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (16 samples, 0.57%)</title><rect x="66.1549%" y="341" width="0.5712%" height="15" fill="rgb(211,52,33)" fg:x="1853" fg:w="16"/><text x="66.4049%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (16 samples, 0.57%)</title><rect x="66.1549%" y="325" width="0.5712%" height="15" fill="rgb(234,58,33)" fg:x="1853" fg:w="16"/><text x="66.4049%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.04%)</title><rect x="66.7976%" y="405" width="0.0357%" height="15" fill="rgb(220,115,36)" fg:x="1871" fg:w="1"/><text x="67.0476%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.04%)</title><rect x="66.7976%" y="389" width="0.0357%" height="15" fill="rgb(243,153,54)" fg:x="1871" fg:w="1"/><text x="67.0476%" y="399.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="66.7976%" y="373" width="0.0357%" height="15" fill="rgb(251,47,18)" fg:x="1871" fg:w="1"/><text x="67.0476%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (1 samples, 0.04%)</title><rect x="66.7976%" y="357" width="0.0357%" height="15" fill="rgb(242,102,42)" fg:x="1871" fg:w="1"/><text x="67.0476%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.04%)</title><rect x="67.0118%" y="325" width="0.0357%" height="15" fill="rgb(234,31,38)" fg:x="1877" fg:w="1"/><text x="67.2618%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.04%)</title><rect x="67.0118%" y="309" width="0.0357%" height="15" fill="rgb(221,117,51)" fg:x="1877" fg:w="1"/><text x="67.2618%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.04%)</title><rect x="67.0118%" y="293" width="0.0357%" height="15" fill="rgb(212,20,18)" fg:x="1877" fg:w="1"/><text x="67.2618%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="67.0118%" y="277" width="0.0357%" height="15" fill="rgb(245,133,36)" fg:x="1877" fg:w="1"/><text x="67.2618%" y="287.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (1 samples, 0.04%)</title><rect x="67.0118%" y="261" width="0.0357%" height="15" fill="rgb(212,6,19)" fg:x="1877" fg:w="1"/><text x="67.2618%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (4 samples, 0.14%)</title><rect x="67.0475%" y="293" width="0.1428%" height="15" fill="rgb(218,1,36)" fg:x="1878" fg:w="4"/><text x="67.2975%" y="303.50"></text></g><g><title>core::intrinsics::write_bytes (4 samples, 0.14%)</title><rect x="67.0475%" y="277" width="0.1428%" height="15" fill="rgb(246,84,54)" fg:x="1878" fg:w="4"/><text x="67.2975%" y="287.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="67.0832%" y="261" width="0.1071%" height="15" fill="rgb(242,110,6)" fg:x="1879" fg:w="3"/><text x="67.3332%" y="271.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.04%)</title><rect x="67.1903%" y="277" width="0.0357%" height="15" fill="rgb(214,47,5)" fg:x="1882" fg:w="1"/><text x="67.4403%" y="287.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="67.2617%" y="213" width="0.0357%" height="15" fill="rgb(218,159,25)" fg:x="1884" fg:w="1"/><text x="67.5117%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (14 samples, 0.50%)</title><rect x="66.9404%" y="341" width="0.4998%" height="15" fill="rgb(215,211,28)" fg:x="1875" fg:w="14"/><text x="67.1904%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (11 samples, 0.39%)</title><rect x="67.0475%" y="325" width="0.3927%" height="15" fill="rgb(238,59,32)" fg:x="1878" fg:w="11"/><text x="67.2975%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (11 samples, 0.39%)</title><rect x="67.0475%" y="309" width="0.3927%" height="15" fill="rgb(226,82,3)" fg:x="1878" fg:w="11"/><text x="67.2975%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (7 samples, 0.25%)</title><rect x="67.1903%" y="293" width="0.2499%" height="15" fill="rgb(240,164,32)" fg:x="1882" fg:w="7"/><text x="67.4403%" y="303.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (6 samples, 0.21%)</title><rect x="67.2260%" y="277" width="0.2142%" height="15" fill="rgb(232,46,7)" fg:x="1883" fg:w="6"/><text x="67.4760%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.21%)</title><rect x="67.2260%" y="261" width="0.2142%" height="15" fill="rgb(229,129,53)" fg:x="1883" fg:w="6"/><text x="67.4760%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.21%)</title><rect x="67.2260%" y="245" width="0.2142%" height="15" fill="rgb(234,188,29)" fg:x="1883" fg:w="6"/><text x="67.4760%" y="255.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.21%)</title><rect x="67.2260%" y="229" width="0.2142%" height="15" fill="rgb(246,141,4)" fg:x="1883" fg:w="6"/><text x="67.4760%" y="239.50"></text></g><g><title>malloc (4 samples, 0.14%)</title><rect x="67.2974%" y="213" width="0.1428%" height="15" fill="rgb(229,23,39)" fg:x="1885" fg:w="4"/><text x="67.5474%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (19 samples, 0.68%)</title><rect x="66.8690%" y="389" width="0.6783%" height="15" fill="rgb(206,12,3)" fg:x="1873" fg:w="19"/><text x="67.1190%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (19 samples, 0.68%)</title><rect x="66.8690%" y="373" width="0.6783%" height="15" fill="rgb(252,226,20)" fg:x="1873" fg:w="19"/><text x="67.1190%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (18 samples, 0.64%)</title><rect x="66.9047%" y="357" width="0.6426%" height="15" fill="rgb(216,123,35)" fg:x="1874" fg:w="18"/><text x="67.1547%" y="367.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (3 samples, 0.11%)</title><rect x="67.4402%" y="341" width="0.1071%" height="15" fill="rgb(212,68,40)" fg:x="1889" fg:w="3"/><text x="67.6902%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.29%)</title><rect x="67.6187%" y="373" width="0.2856%" height="15" fill="rgb(254,125,32)" fg:x="1894" fg:w="8"/><text x="67.8687%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8 samples, 0.29%)</title><rect x="67.6187%" y="357" width="0.2856%" height="15" fill="rgb(253,97,22)" fg:x="1894" fg:w="8"/><text x="67.8687%" y="367.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.11%)</title><rect x="67.9043%" y="373" width="0.1071%" height="15" fill="rgb(241,101,14)" fg:x="1902" fg:w="3"/><text x="68.1543%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (61 samples, 2.18%)</title><rect x="68.0114%" y="373" width="2.1778%" height="15" fill="rgb(238,103,29)" fg:x="1905" fg:w="61"/><text x="68.2614%" y="383.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (61 samples, 2.18%)</title><rect x="68.0114%" y="357" width="2.1778%" height="15" fill="rgb(233,195,47)" fg:x="1905" fg:w="61"/><text x="68.2614%" y="367.50">c..</text></g><g><title>simple_lisp::interpreter::Interpreter::set_func_args (361 samples, 12.89%)</title><rect x="57.3367%" y="501" width="12.8883%" height="15" fill="rgb(246,218,30)" fg:x="1606" fg:w="361"/><text x="57.5867%" y="511.50">simple_lisp::interp..</text></g><g><title>simple_lisp::interpreter::Interpreter::define_var (206 samples, 7.35%)</title><rect x="62.8704%" y="485" width="7.3545%" height="15" fill="rgb(219,145,47)" fg:x="1761" fg:w="206"/><text x="63.1204%" y="495.50">simple_lis..</text></g><g><title>simple_lisp::interpreter::Env::insert (199 samples, 7.10%)</title><rect x="63.1203%" y="469" width="7.1046%" height="15" fill="rgb(243,12,26)" fg:x="1768" fg:w="199"/><text x="63.3703%" y="479.50">simple_lis..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (98 samples, 3.50%)</title><rect x="66.7262%" y="453" width="3.4988%" height="15" fill="rgb(214,87,16)" fg:x="1869" fg:w="98"/><text x="66.9762%" y="463.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (98 samples, 3.50%)</title><rect x="66.7262%" y="437" width="3.4988%" height="15" fill="rgb(208,99,42)" fg:x="1869" fg:w="98"/><text x="66.9762%" y="447.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (98 samples, 3.50%)</title><rect x="66.7262%" y="421" width="3.4988%" height="15" fill="rgb(253,99,2)" fg:x="1869" fg:w="98"/><text x="66.9762%" y="431.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (95 samples, 3.39%)</title><rect x="66.8333%" y="405" width="3.3916%" height="15" fill="rgb(220,168,23)" fg:x="1872" fg:w="95"/><text x="67.0833%" y="415.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (75 samples, 2.68%)</title><rect x="67.5473%" y="389" width="2.6776%" height="15" fill="rgb(242,38,24)" fg:x="1892" fg:w="75"/><text x="67.7973%" y="399.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.04%)</title><rect x="70.1892%" y="373" width="0.0357%" height="15" fill="rgb(225,182,9)" fg:x="1966" fg:w="1"/><text x="70.4392%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="70.1892%" y="357" width="0.0357%" height="15" fill="rgb(243,178,37)" fg:x="1966" fg:w="1"/><text x="70.4392%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="70.1892%" y="341" width="0.0357%" height="15" fill="rgb(232,139,19)" fg:x="1966" fg:w="1"/><text x="70.4392%" y="351.50"></text></g><g><title>simple_lisp::interpreter::ast::FnSignature::match_arg_count (6 samples, 0.21%)</title><rect x="70.2249%" y="501" width="0.2142%" height="15" fill="rgb(225,201,24)" fg:x="1967" fg:w="6"/><text x="70.4749%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (4 samples, 0.14%)</title><rect x="70.4391%" y="485" width="0.1428%" height="15" fill="rgb(221,47,46)" fg:x="1973" fg:w="4"/><text x="70.6891%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.07%)</title><rect x="70.6533%" y="437" width="0.0714%" height="15" fill="rgb(249,23,13)" fg:x="1979" fg:w="2"/><text x="70.9033%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.07%)</title><rect x="70.6533%" y="421" width="0.0714%" height="15" fill="rgb(219,9,5)" fg:x="1979" fg:w="2"/><text x="70.9033%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (2 samples, 0.07%)</title><rect x="70.6533%" y="405" width="0.0714%" height="15" fill="rgb(254,171,16)" fg:x="1979" fg:w="2"/><text x="70.9033%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.25%)</title><rect x="71.2960%" y="389" width="0.2499%" height="15" fill="rgb(230,171,20)" fg:x="1997" fg:w="7"/><text x="71.5460%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::_{{closure}} (23 samples, 0.82%)</title><rect x="71.5459%" y="389" width="0.8211%" height="15" fill="rgb(210,71,41)" fg:x="2004" fg:w="23"/><text x="71.7959%" y="399.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (20 samples, 0.71%)</title><rect x="71.6530%" y="373" width="0.7140%" height="15" fill="rgb(206,173,20)" fg:x="2007" fg:w="20"/><text x="71.9030%" y="383.50"></text></g><g><title>hashbrown::raw::inner::h2 (7 samples, 0.25%)</title><rect x="72.3670%" y="389" width="0.2499%" height="15" fill="rgb(233,88,34)" fg:x="2027" fg:w="7"/><text x="72.6170%" y="399.50"></text></g><g><title>simple_lisp::interpreter::ast::InstructionIter::jump (64 samples, 2.28%)</title><rect x="70.4391%" y="501" width="2.2849%" height="15" fill="rgb(223,209,46)" fg:x="1973" fg:w="64"/><text x="70.6891%" y="511.50">s..</text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::get_index_of (60 samples, 2.14%)</title><rect x="70.5819%" y="485" width="2.1421%" height="15" fill="rgb(250,43,18)" fg:x="1977" fg:w="60"/><text x="70.8319%" y="495.50">i..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (59 samples, 2.11%)</title><rect x="70.6176%" y="469" width="2.1064%" height="15" fill="rgb(208,13,10)" fg:x="1978" fg:w="59"/><text x="70.8676%" y="479.50">i..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (58 samples, 2.07%)</title><rect x="70.6533%" y="453" width="2.0707%" height="15" fill="rgb(212,200,36)" fg:x="1979" fg:w="58"/><text x="70.9033%" y="463.50">i..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (56 samples, 2.00%)</title><rect x="70.7247%" y="437" width="1.9993%" height="15" fill="rgb(225,90,30)" fg:x="1981" fg:w="56"/><text x="70.9747%" y="447.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (56 samples, 2.00%)</title><rect x="70.7247%" y="421" width="1.9993%" height="15" fill="rgb(236,182,39)" fg:x="1981" fg:w="56"/><text x="70.9747%" y="431.50">h..</text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (56 samples, 2.00%)</title><rect x="70.7247%" y="405" width="1.9993%" height="15" fill="rgb(212,144,35)" fg:x="1981" fg:w="56"/><text x="70.9747%" y="415.50">h..</text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (3 samples, 0.11%)</title><rect x="72.6169%" y="389" width="0.1071%" height="15" fill="rgb(228,63,44)" fg:x="2034" fg:w="3"/><text x="72.8669%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.11%)</title><rect x="72.6169%" y="373" width="0.1071%" height="15" fill="rgb(228,109,6)" fg:x="2034" fg:w="3"/><text x="72.8669%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="72.8311%" y="485" width="0.0714%" height="15" fill="rgb(238,117,24)" fg:x="2040" fg:w="2"/><text x="73.0811%" y="495.50"></text></g><g><title>core::ptr::read (2 samples, 0.07%)</title><rect x="72.8311%" y="469" width="0.0714%" height="15" fill="rgb(242,26,26)" fg:x="2040" fg:w="2"/><text x="73.0811%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (4 samples, 0.14%)</title><rect x="72.9025%" y="485" width="0.1428%" height="15" fill="rgb(221,92,48)" fg:x="2042" fg:w="4"/><text x="73.1525%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.14%)</title><rect x="72.9025%" y="469" width="0.1428%" height="15" fill="rgb(209,209,32)" fg:x="2042" fg:w="4"/><text x="73.1525%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (4 samples, 0.14%)</title><rect x="72.9025%" y="453" width="0.1428%" height="15" fill="rgb(221,70,22)" fg:x="2042" fg:w="4"/><text x="73.1525%" y="463.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.14%)</title><rect x="72.9025%" y="437" width="0.1428%" height="15" fill="rgb(248,145,5)" fg:x="2042" fg:w="4"/><text x="73.1525%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (4 samples, 0.14%)</title><rect x="72.9025%" y="421" width="0.1428%" height="15" fill="rgb(226,116,26)" fg:x="2042" fg:w="4"/><text x="73.1525%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.14%)</title><rect x="72.9025%" y="405" width="0.1428%" height="15" fill="rgb(244,5,17)" fg:x="2042" fg:w="4"/><text x="73.1525%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.14%)</title><rect x="72.9025%" y="389" width="0.1428%" height="15" fill="rgb(252,159,33)" fg:x="2042" fg:w="4"/><text x="73.1525%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.14%)</title><rect x="72.9025%" y="373" width="0.1428%" height="15" fill="rgb(206,71,0)" fg:x="2042" fg:w="4"/><text x="73.1525%" y="383.50"></text></g><g><title>cfree (4 samples, 0.14%)</title><rect x="72.9025%" y="357" width="0.1428%" height="15" fill="rgb(233,118,54)" fg:x="2042" fg:w="4"/><text x="73.1525%" y="367.50"></text></g><g><title>[libc.so.6] (4 samples, 0.14%)</title><rect x="72.9025%" y="341" width="0.1428%" height="15" fill="rgb(234,83,48)" fg:x="2042" fg:w="4"/><text x="73.1525%" y="351.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::Data as core::clone::Clone&gt;::clone (4 samples, 0.14%)</title><rect x="73.0453%" y="469" width="0.1428%" height="15" fill="rgb(228,3,54)" fg:x="2046" fg:w="4"/><text x="73.2953%" y="479.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for i64&gt;::clone (1 samples, 0.04%)</title><rect x="73.1524%" y="453" width="0.0357%" height="15" fill="rgb(226,155,13)" fg:x="2049" fg:w="1"/><text x="73.4024%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="73.2596%" y="325" width="0.0357%" height="15" fill="rgb(241,28,37)" fg:x="2052" fg:w="1"/><text x="73.5096%" y="335.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="73.2596%" y="309" width="0.0357%" height="15" fill="rgb(233,93,10)" fg:x="2052" fg:w="1"/><text x="73.5096%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (2 samples, 0.07%)</title><rect x="73.2953%" y="325" width="0.0714%" height="15" fill="rgb(225,113,19)" fg:x="2053" fg:w="2"/><text x="73.5453%" y="335.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (2 samples, 0.07%)</title><rect x="73.2953%" y="309" width="0.0714%" height="15" fill="rgb(241,2,18)" fg:x="2053" fg:w="2"/><text x="73.5453%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (4 samples, 0.14%)</title><rect x="73.2596%" y="357" width="0.1428%" height="15" fill="rgb(228,207,21)" fg:x="2052" fg:w="4"/><text x="73.5096%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (4 samples, 0.14%)</title><rect x="73.2596%" y="341" width="0.1428%" height="15" fill="rgb(213,211,35)" fg:x="2052" fg:w="4"/><text x="73.5096%" y="351.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="73.3667%" y="325" width="0.0357%" height="15" fill="rgb(209,83,10)" fg:x="2055" fg:w="1"/><text x="73.6167%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="73.3667%" y="309" width="0.0357%" height="15" fill="rgb(209,164,1)" fg:x="2055" fg:w="1"/><text x="73.6167%" y="319.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (7 samples, 0.25%)</title><rect x="73.1881%" y="437" width="0.2499%" height="15" fill="rgb(213,184,43)" fg:x="2050" fg:w="7"/><text x="73.4381%" y="447.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (7 samples, 0.25%)</title><rect x="73.1881%" y="421" width="0.2499%" height="15" fill="rgb(231,61,34)" fg:x="2050" fg:w="7"/><text x="73.4381%" y="431.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (6 samples, 0.21%)</title><rect x="73.2238%" y="405" width="0.2142%" height="15" fill="rgb(235,75,3)" fg:x="2051" fg:w="6"/><text x="73.4738%" y="415.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (5 samples, 0.18%)</title><rect x="73.2596%" y="389" width="0.1785%" height="15" fill="rgb(220,106,47)" fg:x="2052" fg:w="5"/><text x="73.5096%" y="399.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (5 samples, 0.18%)</title><rect x="73.2596%" y="373" width="0.1785%" height="15" fill="rgb(210,196,33)" fg:x="2052" fg:w="5"/><text x="73.5096%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.04%)</title><rect x="73.4024%" y="357" width="0.0357%" height="15" fill="rgb(229,154,42)" fg:x="2056" fg:w="1"/><text x="73.6524%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (1 samples, 0.04%)</title><rect x="73.4024%" y="341" width="0.0357%" height="15" fill="rgb(228,114,26)" fg:x="2056" fg:w="1"/><text x="73.6524%" y="351.50"></text></g><g><title>hashbrown::raw::inner::special_is_empty (1 samples, 0.04%)</title><rect x="73.4024%" y="325" width="0.0357%" height="15" fill="rgb(208,144,1)" fg:x="2056" fg:w="1"/><text x="73.6524%" y="335.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.11%)</title><rect x="73.6166%" y="421" width="0.1071%" height="15" fill="rgb(239,112,37)" fg:x="2062" fg:w="3"/><text x="73.8666%" y="431.50"></text></g><g><title>malloc (3 samples, 0.11%)</title><rect x="73.6166%" y="405" width="0.1071%" height="15" fill="rgb(210,96,50)" fg:x="2062" fg:w="3"/><text x="73.8666%" y="415.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="73.6166%" y="389" width="0.1071%" height="15" fill="rgb(222,178,2)" fg:x="2062" fg:w="3"/><text x="73.8666%" y="399.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (18 samples, 0.64%)</title><rect x="73.1881%" y="469" width="0.6426%" height="15" fill="rgb(226,74,18)" fg:x="2050" fg:w="18"/><text x="73.4381%" y="479.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (18 samples, 0.64%)</title><rect x="73.1881%" y="453" width="0.6426%" height="15" fill="rgb(225,67,54)" fg:x="2050" fg:w="18"/><text x="73.4381%" y="463.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (11 samples, 0.39%)</title><rect x="73.4381%" y="437" width="0.3927%" height="15" fill="rgb(251,92,32)" fg:x="2057" fg:w="11"/><text x="73.6881%" y="447.50"></text></g><g><title>core::ptr::write (3 samples, 0.11%)</title><rect x="73.7237%" y="421" width="0.1071%" height="15" fill="rgb(228,149,22)" fg:x="2065" fg:w="3"/><text x="73.9737%" y="431.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clone_data (28 samples, 1.00%)</title><rect x="73.0453%" y="485" width="0.9996%" height="15" fill="rgb(243,54,13)" fg:x="2046" fg:w="28"/><text x="73.2953%" y="495.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (6 samples, 0.21%)</title><rect x="73.8308%" y="469" width="0.2142%" height="15" fill="rgb(243,180,28)" fg:x="2068" fg:w="6"/><text x="74.0808%" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (6 samples, 0.21%)</title><rect x="73.8308%" y="453" width="0.2142%" height="15" fill="rgb(208,167,24)" fg:x="2068" fg:w="6"/><text x="74.0808%" y="463.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (6 samples, 0.21%)</title><rect x="73.8308%" y="437" width="0.2142%" height="15" fill="rgb(245,73,45)" fg:x="2068" fg:w="6"/><text x="74.0808%" y="447.50"></text></g><g><title>core::cell::BorrowRef::new (6 samples, 0.21%)</title><rect x="73.8308%" y="421" width="0.2142%" height="15" fill="rgb(237,203,48)" fg:x="2068" fg:w="6"/><text x="74.0808%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (5 samples, 0.18%)</title><rect x="73.8665%" y="405" width="0.1785%" height="15" fill="rgb(211,197,16)" fg:x="2069" fg:w="5"/><text x="74.1165%" y="415.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::add (38 samples, 1.36%)</title><rect x="72.7240%" y="501" width="1.3567%" height="15" fill="rgb(243,99,51)" fg:x="2037" fg:w="38"/><text x="72.9740%" y="511.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::do_the_thing_add (1 samples, 0.04%)</title><rect x="74.0450%" y="485" width="0.0357%" height="15" fill="rgb(215,123,29)" fg:x="2074" fg:w="1"/><text x="74.2950%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="74.2592%" y="485" width="0.0357%" height="15" fill="rgb(239,186,37)" fg:x="2080" fg:w="1"/><text x="74.5092%" y="495.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.07%)</title><rect x="74.2949%" y="485" width="0.0714%" height="15" fill="rgb(252,136,39)" fg:x="2081" fg:w="2"/><text x="74.5449%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.07%)</title><rect x="74.2949%" y="469" width="0.0714%" height="15" fill="rgb(223,213,32)" fg:x="2081" fg:w="2"/><text x="74.5449%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.04%)</title><rect x="74.3663%" y="485" width="0.0357%" height="15" fill="rgb(233,115,5)" fg:x="2083" fg:w="1"/><text x="74.6163%" y="495.50"></text></g><g><title>cfree (5 samples, 0.18%)</title><rect x="74.4020%" y="485" width="0.1785%" height="15" fill="rgb(207,226,44)" fg:x="2084" fg:w="5"/><text x="74.6520%" y="495.50"></text></g><g><title>[libc.so.6] (4 samples, 0.14%)</title><rect x="74.4377%" y="469" width="0.1428%" height="15" fill="rgb(208,126,0)" fg:x="2085" fg:w="4"/><text x="74.6877%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (3 samples, 0.11%)</title><rect x="74.5805%" y="485" width="0.1071%" height="15" fill="rgb(244,66,21)" fg:x="2089" fg:w="3"/><text x="74.8305%" y="495.50"></text></g><g><title>core::cmp::PartialEq::ne (3 samples, 0.11%)</title><rect x="74.5805%" y="469" width="0.1071%" height="15" fill="rgb(222,97,12)" fg:x="2089" fg:w="3"/><text x="74.8305%" y="479.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::Data as core::cmp::PartialEq&gt;::eq (2 samples, 0.07%)</title><rect x="74.6162%" y="453" width="0.0714%" height="15" fill="rgb(219,213,19)" fg:x="2090" fg:w="2"/><text x="74.8662%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (2 samples, 0.07%)</title><rect x="74.6876%" y="485" width="0.0714%" height="15" fill="rgb(252,169,30)" fg:x="2092" fg:w="2"/><text x="74.9376%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="74.6876%" y="469" width="0.0714%" height="15" fill="rgb(206,32,51)" fg:x="2092" fg:w="2"/><text x="74.9376%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (2 samples, 0.07%)</title><rect x="74.6876%" y="453" width="0.0714%" height="15" fill="rgb(250,172,42)" fg:x="2092" fg:w="2"/><text x="74.9376%" y="463.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="74.6876%" y="437" width="0.0714%" height="15" fill="rgb(209,34,43)" fg:x="2092" fg:w="2"/><text x="74.9376%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (2 samples, 0.07%)</title><rect x="74.6876%" y="421" width="0.0714%" height="15" fill="rgb(223,11,35)" fg:x="2092" fg:w="2"/><text x="74.9376%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="74.6876%" y="405" width="0.0714%" height="15" fill="rgb(251,219,26)" fg:x="2092" fg:w="2"/><text x="74.9376%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.07%)</title><rect x="74.6876%" y="389" width="0.0714%" height="15" fill="rgb(231,119,3)" fg:x="2092" fg:w="2"/><text x="74.9376%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.07%)</title><rect x="74.6876%" y="373" width="0.0714%" height="15" fill="rgb(216,97,11)" fg:x="2092" fg:w="2"/><text x="74.9376%" y="383.50"></text></g><g><title>cfree (2 samples, 0.07%)</title><rect x="74.6876%" y="357" width="0.0714%" height="15" fill="rgb(223,59,9)" fg:x="2092" fg:w="2"/><text x="74.9376%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (4 samples, 0.14%)</title><rect x="74.8661%" y="373" width="0.1428%" height="15" fill="rgb(233,93,31)" fg:x="2097" fg:w="4"/><text x="75.1161%" y="383.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (6 samples, 0.21%)</title><rect x="74.8661%" y="389" width="0.2142%" height="15" fill="rgb(239,81,33)" fg:x="2097" fg:w="6"/><text x="75.1161%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.07%)</title><rect x="75.0089%" y="373" width="0.0714%" height="15" fill="rgb(213,120,34)" fg:x="2101" fg:w="2"/><text x="75.2589%" y="383.50"></text></g><g><title>core::ptr::write (2 samples, 0.07%)</title><rect x="75.0089%" y="357" width="0.0714%" height="15" fill="rgb(243,49,53)" fg:x="2101" fg:w="2"/><text x="75.2589%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.11%)</title><rect x="75.0803%" y="373" width="0.1071%" height="15" fill="rgb(247,216,33)" fg:x="2103" fg:w="3"/><text x="75.3303%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.11%)</title><rect x="75.0803%" y="357" width="0.1071%" height="15" fill="rgb(226,26,14)" fg:x="2103" fg:w="3"/><text x="75.3303%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.11%)</title><rect x="75.0803%" y="341" width="0.1071%" height="15" fill="rgb(215,49,53)" fg:x="2103" fg:w="3"/><text x="75.3303%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1 samples, 0.04%)</title><rect x="75.6159%" y="341" width="0.0357%" height="15" fill="rgb(245,162,40)" fg:x="2118" fg:w="1"/><text x="75.8659%" y="351.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (1 samples, 0.04%)</title><rect x="75.6159%" y="325" width="0.0357%" height="15" fill="rgb(229,68,17)" fg:x="2118" fg:w="1"/><text x="75.8659%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (1 samples, 0.04%)</title><rect x="75.6516%" y="341" width="0.0357%" height="15" fill="rgb(213,182,10)" fg:x="2119" fg:w="1"/><text x="75.9016%" y="351.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="75.6516%" y="325" width="0.0357%" height="15" fill="rgb(245,125,30)" fg:x="2119" fg:w="1"/><text x="75.9016%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (17 samples, 0.61%)</title><rect x="75.1874%" y="373" width="0.6069%" height="15" fill="rgb(232,202,2)" fg:x="2106" fg:w="17"/><text x="75.4374%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (17 samples, 0.61%)</title><rect x="75.1874%" y="357" width="0.6069%" height="15" fill="rgb(237,140,51)" fg:x="2106" fg:w="17"/><text x="75.4374%" y="367.50"></text></g><g><title>hashbrown::raw::inner::h2 (3 samples, 0.11%)</title><rect x="75.6873%" y="341" width="0.1071%" height="15" fill="rgb(236,157,25)" fg:x="2120" fg:w="3"/><text x="75.9373%" y="351.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (1 samples, 0.04%)</title><rect x="75.7944%" y="357" width="0.0357%" height="15" fill="rgb(219,209,0)" fg:x="2123" fg:w="1"/><text x="76.0444%" y="367.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="75.7944%" y="341" width="0.0357%" height="15" fill="rgb(240,116,54)" fg:x="2123" fg:w="1"/><text x="76.0444%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="75.7944%" y="325" width="0.0357%" height="15" fill="rgb(216,10,36)" fg:x="2123" fg:w="1"/><text x="76.0444%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="75.7944%" y="309" width="0.0357%" height="15" fill="rgb(222,72,44)" fg:x="2123" fg:w="1"/><text x="76.0444%" y="319.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (30 samples, 1.07%)</title><rect x="74.8304%" y="453" width="1.0710%" height="15" fill="rgb(232,159,9)" fg:x="2096" fg:w="30"/><text x="75.0804%" y="463.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (30 samples, 1.07%)</title><rect x="74.8304%" y="437" width="1.0710%" height="15" fill="rgb(210,39,32)" fg:x="2096" fg:w="30"/><text x="75.0804%" y="447.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (30 samples, 1.07%)</title><rect x="74.8304%" y="421" width="1.0710%" height="15" fill="rgb(216,194,45)" fg:x="2096" fg:w="30"/><text x="75.0804%" y="431.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (29 samples, 1.04%)</title><rect x="74.8661%" y="405" width="1.0353%" height="15" fill="rgb(218,18,35)" fg:x="2097" fg:w="29"/><text x="75.1161%" y="415.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (23 samples, 0.82%)</title><rect x="75.0803%" y="389" width="0.8211%" height="15" fill="rgb(207,83,51)" fg:x="2103" fg:w="23"/><text x="75.3303%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (3 samples, 0.11%)</title><rect x="75.7944%" y="373" width="0.1071%" height="15" fill="rgb(225,63,43)" fg:x="2123" fg:w="3"/><text x="76.0444%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (2 samples, 0.07%)</title><rect x="75.8301%" y="357" width="0.0714%" height="15" fill="rgb(207,57,36)" fg:x="2124" fg:w="2"/><text x="76.0801%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (2 samples, 0.07%)</title><rect x="75.8301%" y="341" width="0.0714%" height="15" fill="rgb(216,99,33)" fg:x="2124" fg:w="2"/><text x="76.0801%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (2 samples, 0.07%)</title><rect x="75.8301%" y="325" width="0.0714%" height="15" fill="rgb(225,42,16)" fg:x="2124" fg:w="2"/><text x="76.0801%" y="335.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="76.9011%" y="421" width="0.0357%" height="15" fill="rgb(220,201,45)" fg:x="2154" fg:w="1"/><text x="77.1511%" y="431.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="76.9368%" y="421" width="0.0357%" height="15" fill="rgb(225,33,4)" fg:x="2155" fg:w="1"/><text x="77.1868%" y="431.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.57%)</title><rect x="76.9011%" y="437" width="0.5712%" height="15" fill="rgb(224,33,50)" fg:x="2154" fg:w="16"/><text x="77.1511%" y="447.50"></text></g><g><title>malloc (14 samples, 0.50%)</title><rect x="76.9725%" y="421" width="0.4998%" height="15" fill="rgb(246,198,51)" fg:x="2156" fg:w="14"/><text x="77.2225%" y="431.50"></text></g><g><title>[libc.so.6] (10 samples, 0.36%)</title><rect x="77.1153%" y="405" width="0.3570%" height="15" fill="rgb(205,22,4)" fg:x="2160" fg:w="10"/><text x="77.3653%" y="415.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="77.4723%" y="437" width="0.0357%" height="15" fill="rgb(206,3,8)" fg:x="2170" fg:w="1"/><text x="77.7223%" y="447.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.04%)</title><rect x="77.5080%" y="373" width="0.0357%" height="15" fill="rgb(251,23,15)" fg:x="2171" fg:w="1"/><text x="77.7580%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.04%)</title><rect x="77.5080%" y="357" width="0.0357%" height="15" fill="rgb(252,88,28)" fg:x="2171" fg:w="1"/><text x="77.7580%" y="367.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.04%)</title><rect x="77.5080%" y="341" width="0.0357%" height="15" fill="rgb(212,127,14)" fg:x="2171" fg:w="1"/><text x="77.7580%" y="351.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (79 samples, 2.82%)</title><rect x="74.7590%" y="485" width="2.8204%" height="15" fill="rgb(247,145,37)" fg:x="2094" fg:w="79"/><text x="75.0090%" y="495.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (79 samples, 2.82%)</title><rect x="74.7590%" y="469" width="2.8204%" height="15" fill="rgb(209,117,53)" fg:x="2094" fg:w="79"/><text x="75.0090%" y="479.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (47 samples, 1.68%)</title><rect x="75.9015%" y="453" width="1.6780%" height="15" fill="rgb(212,90,42)" fg:x="2126" fg:w="47"/><text x="76.1515%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (2 samples, 0.07%)</title><rect x="77.5080%" y="437" width="0.0714%" height="15" fill="rgb(218,164,37)" fg:x="2171" fg:w="2"/><text x="77.7580%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.07%)</title><rect x="77.5080%" y="421" width="0.0714%" height="15" fill="rgb(246,65,34)" fg:x="2171" fg:w="2"/><text x="77.7580%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.07%)</title><rect x="77.5080%" y="405" width="0.0714%" height="15" fill="rgb(231,100,33)" fg:x="2171" fg:w="2"/><text x="77.7580%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (2 samples, 0.07%)</title><rect x="77.5080%" y="389" width="0.0714%" height="15" fill="rgb(228,126,14)" fg:x="2171" fg:w="2"/><text x="77.7580%" y="399.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new::_{{closure}} (1 samples, 0.04%)</title><rect x="77.5437%" y="373" width="0.0357%" height="15" fill="rgb(215,173,21)" fg:x="2172" fg:w="1"/><text x="77.7937%" y="383.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::equal (102 samples, 3.64%)</title><rect x="74.0807%" y="501" width="3.6416%" height="15" fill="rgb(210,6,40)" fg:x="2075" fg:w="102"/><text x="74.3307%" y="511.50">simp..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (4 samples, 0.14%)</title><rect x="77.5794%" y="485" width="0.1428%" height="15" fill="rgb(212,48,18)" fg:x="2173" fg:w="4"/><text x="77.8294%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (4 samples, 0.14%)</title><rect x="77.5794%" y="469" width="0.1428%" height="15" fill="rgb(230,214,11)" fg:x="2173" fg:w="4"/><text x="77.8294%" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (4 samples, 0.14%)</title><rect x="77.5794%" y="453" width="0.1428%" height="15" fill="rgb(254,105,39)" fg:x="2173" fg:w="4"/><text x="77.8294%" y="463.50"></text></g><g><title>core::cell::BorrowRef::new (4 samples, 0.14%)</title><rect x="77.5794%" y="437" width="0.1428%" height="15" fill="rgb(245,158,5)" fg:x="2173" fg:w="4"/><text x="77.8294%" y="447.50"></text></g><g><title>core::cell::is_reading (4 samples, 0.14%)</title><rect x="77.5794%" y="421" width="0.1428%" height="15" fill="rgb(249,208,11)" fg:x="2173" fg:w="4"/><text x="77.8294%" y="431.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (1 samples, 0.04%)</title><rect x="77.7222%" y="485" width="0.0357%" height="15" fill="rgb(210,39,28)" fg:x="2177" fg:w="1"/><text x="77.9722%" y="495.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (1 samples, 0.04%)</title><rect x="77.7222%" y="469" width="0.0357%" height="15" fill="rgb(211,56,53)" fg:x="2177" fg:w="1"/><text x="77.9722%" y="479.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (1 samples, 0.04%)</title><rect x="77.7222%" y="453" width="0.0357%" height="15" fill="rgb(226,201,30)" fg:x="2177" fg:w="1"/><text x="77.9722%" y="463.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::less (2 samples, 0.07%)</title><rect x="77.7222%" y="501" width="0.0714%" height="15" fill="rgb(239,101,34)" fg:x="2177" fg:w="2"/><text x="77.9722%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (1 samples, 0.04%)</title><rect x="77.7579%" y="485" width="0.0357%" height="15" fill="rgb(226,209,5)" fg:x="2178" fg:w="1"/><text x="78.0079%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (1 samples, 0.04%)</title><rect x="77.7579%" y="469" width="0.0357%" height="15" fill="rgb(250,105,47)" fg:x="2178" fg:w="1"/><text x="78.0079%" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (1 samples, 0.04%)</title><rect x="77.7579%" y="453" width="0.0357%" height="15" fill="rgb(230,72,3)" fg:x="2178" fg:w="1"/><text x="78.0079%" y="463.50"></text></g><g><title>core::cell::BorrowRef::new (1 samples, 0.04%)</title><rect x="77.7579%" y="437" width="0.0357%" height="15" fill="rgb(232,218,39)" fg:x="2178" fg:w="1"/><text x="78.0079%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.04%)</title><rect x="77.7579%" y="421" width="0.0357%" height="15" fill="rgb(248,166,6)" fg:x="2178" fg:w="1"/><text x="78.0079%" y="431.50"></text></g><g><title>__rust_dealloc (1 samples, 0.04%)</title><rect x="77.8293%" y="357" width="0.0357%" height="15" fill="rgb(247,89,20)" fg:x="2180" fg:w="1"/><text x="78.0793%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (6 samples, 0.21%)</title><rect x="77.8293%" y="485" width="0.2142%" height="15" fill="rgb(248,130,54)" fg:x="2180" fg:w="6"/><text x="78.0793%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.21%)</title><rect x="77.8293%" y="469" width="0.2142%" height="15" fill="rgb(234,196,4)" fg:x="2180" fg:w="6"/><text x="78.0793%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (6 samples, 0.21%)</title><rect x="77.8293%" y="453" width="0.2142%" height="15" fill="rgb(250,143,31)" fg:x="2180" fg:w="6"/><text x="78.0793%" y="463.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.21%)</title><rect x="77.8293%" y="437" width="0.2142%" height="15" fill="rgb(211,110,34)" fg:x="2180" fg:w="6"/><text x="78.0793%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (6 samples, 0.21%)</title><rect x="77.8293%" y="421" width="0.2142%" height="15" fill="rgb(215,124,48)" fg:x="2180" fg:w="6"/><text x="78.0793%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.21%)</title><rect x="77.8293%" y="405" width="0.2142%" height="15" fill="rgb(216,46,13)" fg:x="2180" fg:w="6"/><text x="78.0793%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.21%)</title><rect x="77.8293%" y="389" width="0.2142%" height="15" fill="rgb(205,184,25)" fg:x="2180" fg:w="6"/><text x="78.0793%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.21%)</title><rect x="77.8293%" y="373" width="0.2142%" height="15" fill="rgb(228,1,10)" fg:x="2180" fg:w="6"/><text x="78.0793%" y="383.50"></text></g><g><title>cfree (5 samples, 0.18%)</title><rect x="77.8650%" y="357" width="0.1785%" height="15" fill="rgb(213,116,27)" fg:x="2181" fg:w="5"/><text x="78.1150%" y="367.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="77.9365%" y="341" width="0.1071%" height="15" fill="rgb(241,95,50)" fg:x="2183" fg:w="3"/><text x="78.1865%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1 samples, 0.04%)</title><rect x="78.2935%" y="341" width="0.0357%" height="15" fill="rgb(238,48,32)" fg:x="2193" fg:w="1"/><text x="78.5435%" y="351.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (1 samples, 0.04%)</title><rect x="78.2935%" y="325" width="0.0357%" height="15" fill="rgb(235,113,49)" fg:x="2193" fg:w="1"/><text x="78.5435%" y="335.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (8 samples, 0.29%)</title><rect x="78.0793%" y="453" width="0.2856%" height="15" fill="rgb(205,127,43)" fg:x="2187" fg:w="8"/><text x="78.3293%" y="463.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (8 samples, 0.29%)</title><rect x="78.0793%" y="437" width="0.2856%" height="15" fill="rgb(250,162,2)" fg:x="2187" fg:w="8"/><text x="78.3293%" y="447.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (7 samples, 0.25%)</title><rect x="78.1150%" y="421" width="0.2499%" height="15" fill="rgb(220,13,41)" fg:x="2188" fg:w="7"/><text x="78.3650%" y="431.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (6 samples, 0.21%)</title><rect x="78.1507%" y="405" width="0.2142%" height="15" fill="rgb(249,221,25)" fg:x="2189" fg:w="6"/><text x="78.4007%" y="415.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (6 samples, 0.21%)</title><rect x="78.1507%" y="389" width="0.2142%" height="15" fill="rgb(215,208,19)" fg:x="2189" fg:w="6"/><text x="78.4007%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (6 samples, 0.21%)</title><rect x="78.1507%" y="373" width="0.2142%" height="15" fill="rgb(236,175,2)" fg:x="2189" fg:w="6"/><text x="78.4007%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (6 samples, 0.21%)</title><rect x="78.1507%" y="357" width="0.2142%" height="15" fill="rgb(241,52,2)" fg:x="2189" fg:w="6"/><text x="78.4007%" y="367.50"></text></g><g><title>hashbrown::raw::inner::h2 (1 samples, 0.04%)</title><rect x="78.3292%" y="341" width="0.0357%" height="15" fill="rgb(248,140,14)" fg:x="2194" fg:w="1"/><text x="78.5792%" y="351.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="78.6505%" y="421" width="0.0357%" height="15" fill="rgb(253,22,42)" fg:x="2203" fg:w="1"/><text x="78.9005%" y="431.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.14%)</title><rect x="78.6505%" y="437" width="0.1428%" height="15" fill="rgb(234,61,47)" fg:x="2203" fg:w="4"/><text x="78.9005%" y="447.50"></text></g><g><title>malloc (3 samples, 0.11%)</title><rect x="78.6862%" y="421" width="0.1071%" height="15" fill="rgb(208,226,15)" fg:x="2204" fg:w="3"/><text x="78.9362%" y="431.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="78.7219%" y="405" width="0.0714%" height="15" fill="rgb(217,221,4)" fg:x="2205" fg:w="2"/><text x="78.9719%" y="415.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (22 samples, 0.79%)</title><rect x="78.0436%" y="485" width="0.7854%" height="15" fill="rgb(212,174,34)" fg:x="2186" fg:w="22"/><text x="78.2936%" y="495.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (22 samples, 0.79%)</title><rect x="78.0436%" y="469" width="0.7854%" height="15" fill="rgb(253,83,4)" fg:x="2186" fg:w="22"/><text x="78.2936%" y="479.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (13 samples, 0.46%)</title><rect x="78.3649%" y="453" width="0.4641%" height="15" fill="rgb(250,195,49)" fg:x="2195" fg:w="13"/><text x="78.6149%" y="463.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="78.7933%" y="437" width="0.0357%" height="15" fill="rgb(241,192,25)" fg:x="2207" fg:w="1"/><text x="79.0433%" y="447.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::less_equal (33 samples, 1.18%)</title><rect x="77.7936%" y="501" width="1.1782%" height="15" fill="rgb(208,124,10)" fg:x="2179" fg:w="33"/><text x="78.0436%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (4 samples, 0.14%)</title><rect x="78.8290%" y="485" width="0.1428%" height="15" fill="rgb(222,33,0)" fg:x="2208" fg:w="4"/><text x="79.0790%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (4 samples, 0.14%)</title><rect x="78.8290%" y="469" width="0.1428%" height="15" fill="rgb(234,209,28)" fg:x="2208" fg:w="4"/><text x="79.0790%" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (4 samples, 0.14%)</title><rect x="78.8290%" y="453" width="0.1428%" height="15" fill="rgb(224,11,23)" fg:x="2208" fg:w="4"/><text x="79.0790%" y="463.50"></text></g><g><title>core::cell::BorrowRef::new (4 samples, 0.14%)</title><rect x="78.8290%" y="437" width="0.1428%" height="15" fill="rgb(232,99,1)" fg:x="2208" fg:w="4"/><text x="79.0790%" y="447.50"></text></g><g><title>core::cell::is_reading (4 samples, 0.14%)</title><rect x="78.8290%" y="421" width="0.1428%" height="15" fill="rgb(237,95,45)" fg:x="2208" fg:w="4"/><text x="79.0790%" y="431.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="79.4716%" y="485" width="0.0357%" height="15" fill="rgb(208,109,11)" fg:x="2226" fg:w="1"/><text x="79.7216%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="79.4716%" y="469" width="0.0357%" height="15" fill="rgb(216,190,48)" fg:x="2226" fg:w="1"/><text x="79.7216%" y="479.50"></text></g><g><title>cfree (15 samples, 0.54%)</title><rect x="79.5073%" y="485" width="0.5355%" height="15" fill="rgb(251,171,36)" fg:x="2227" fg:w="15"/><text x="79.7573%" y="495.50"></text></g><g><title>[libc.so.6] (9 samples, 0.32%)</title><rect x="79.7215%" y="469" width="0.3213%" height="15" fill="rgb(230,62,22)" fg:x="2233" fg:w="9"/><text x="79.9715%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;simple_lisp::interpreter::data::Data&gt;&gt; (1 samples, 0.04%)</title><rect x="80.0428%" y="485" width="0.0357%" height="15" fill="rgb(225,114,35)" fg:x="2242" fg:w="1"/><text x="80.2928%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (1 samples, 0.04%)</title><rect x="80.0428%" y="469" width="0.0357%" height="15" fill="rgb(215,118,42)" fg:x="2242" fg:w="1"/><text x="80.2928%" y="479.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="80.0428%" y="453" width="0.0357%" height="15" fill="rgb(243,119,21)" fg:x="2242" fg:w="1"/><text x="80.2928%" y="463.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::Data as core::clone::Clone&gt;::clone (4 samples, 0.14%)</title><rect x="80.0785%" y="469" width="0.1428%" height="15" fill="rgb(252,177,53)" fg:x="2243" fg:w="4"/><text x="80.3285%" y="479.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (1 samples, 0.04%)</title><rect x="80.4713%" y="373" width="0.0357%" height="15" fill="rgb(237,209,29)" fg:x="2254" fg:w="1"/><text x="80.7213%" y="383.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (8 samples, 0.29%)</title><rect x="80.2571%" y="437" width="0.2856%" height="15" fill="rgb(212,65,23)" fg:x="2248" fg:w="8"/><text x="80.5071%" y="447.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (8 samples, 0.29%)</title><rect x="80.2571%" y="421" width="0.2856%" height="15" fill="rgb(230,222,46)" fg:x="2248" fg:w="8"/><text x="80.5071%" y="431.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (4 samples, 0.14%)</title><rect x="80.3999%" y="405" width="0.1428%" height="15" fill="rgb(215,135,32)" fg:x="2252" fg:w="4"/><text x="80.6499%" y="415.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (2 samples, 0.07%)</title><rect x="80.4713%" y="389" width="0.0714%" height="15" fill="rgb(246,101,22)" fg:x="2254" fg:w="2"/><text x="80.7213%" y="399.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (1 samples, 0.04%)</title><rect x="80.5070%" y="373" width="0.0357%" height="15" fill="rgb(206,107,13)" fg:x="2255" fg:w="1"/><text x="80.7570%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.04%)</title><rect x="80.5070%" y="357" width="0.0357%" height="15" fill="rgb(250,100,44)" fg:x="2255" fg:w="1"/><text x="80.7570%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.04%)</title><rect x="80.5070%" y="341" width="0.0357%" height="15" fill="rgb(231,147,38)" fg:x="2255" fg:w="1"/><text x="80.7570%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (1 samples, 0.04%)</title><rect x="80.5070%" y="325" width="0.0357%" height="15" fill="rgb(229,8,40)" fg:x="2255" fg:w="1"/><text x="80.7570%" y="335.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="80.5070%" y="309" width="0.0357%" height="15" fill="rgb(221,135,30)" fg:x="2255" fg:w="1"/><text x="80.7570%" y="319.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (1 samples, 0.04%)</title><rect x="80.5070%" y="293" width="0.0357%" height="15" fill="rgb(249,193,18)" fg:x="2255" fg:w="1"/><text x="80.7570%" y="303.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.61%)</title><rect x="81.2210%" y="421" width="0.6069%" height="15" fill="rgb(209,133,39)" fg:x="2275" fg:w="17"/><text x="81.4710%" y="431.50"></text></g><g><title>malloc (17 samples, 0.61%)</title><rect x="81.2210%" y="405" width="0.6069%" height="15" fill="rgb(232,100,14)" fg:x="2275" fg:w="17"/><text x="81.4710%" y="415.50"></text></g><g><title>[libc.so.6] (16 samples, 0.57%)</title><rect x="81.2567%" y="389" width="0.5712%" height="15" fill="rgb(224,185,1)" fg:x="2276" fg:w="16"/><text x="81.5067%" y="399.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (51 samples, 1.82%)</title><rect x="80.2213%" y="469" width="1.8208%" height="15" fill="rgb(223,139,8)" fg:x="2247" fg:w="51"/><text x="80.4713%" y="479.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (51 samples, 1.82%)</title><rect x="80.2213%" y="453" width="1.8208%" height="15" fill="rgb(232,213,38)" fg:x="2247" fg:w="51"/><text x="80.4713%" y="463.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (42 samples, 1.50%)</title><rect x="80.5427%" y="437" width="1.4995%" height="15" fill="rgb(207,94,22)" fg:x="2256" fg:w="42"/><text x="80.7927%" y="447.50"></text></g><g><title>core::ptr::write (6 samples, 0.21%)</title><rect x="81.8279%" y="421" width="0.2142%" height="15" fill="rgb(219,183,54)" fg:x="2292" fg:w="6"/><text x="82.0779%" y="431.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clone_data (59 samples, 2.11%)</title><rect x="80.0785%" y="485" width="2.1064%" height="15" fill="rgb(216,185,54)" fg:x="2243" fg:w="59"/><text x="80.3285%" y="495.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (4 samples, 0.14%)</title><rect x="82.0421%" y="469" width="0.1428%" height="15" fill="rgb(254,217,39)" fg:x="2298" fg:w="4"/><text x="82.2921%" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (4 samples, 0.14%)</title><rect x="82.0421%" y="453" width="0.1428%" height="15" fill="rgb(240,178,23)" fg:x="2298" fg:w="4"/><text x="82.2921%" y="463.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (4 samples, 0.14%)</title><rect x="82.0421%" y="437" width="0.1428%" height="15" fill="rgb(218,11,47)" fg:x="2298" fg:w="4"/><text x="82.2921%" y="447.50"></text></g><g><title>core::cell::BorrowRef::new (4 samples, 0.14%)</title><rect x="82.0421%" y="421" width="0.1428%" height="15" fill="rgb(218,51,51)" fg:x="2298" fg:w="4"/><text x="82.2921%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (4 samples, 0.14%)</title><rect x="82.0421%" y="405" width="0.1428%" height="15" fill="rgb(238,126,27)" fg:x="2298" fg:w="4"/><text x="82.2921%" y="415.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::modulo (96 samples, 3.43%)</title><rect x="78.9718%" y="501" width="3.4273%" height="15" fill="rgb(249,202,22)" fg:x="2212" fg:w="96"/><text x="79.2218%" y="511.50">sim..</text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::modulo::do_the_thing (6 samples, 0.21%)</title><rect x="82.1849%" y="485" width="0.2142%" height="15" fill="rgb(254,195,49)" fg:x="2302" fg:w="6"/><text x="82.4349%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="82.5062%" y="485" width="0.0714%" height="15" fill="rgb(208,123,14)" fg:x="2311" fg:w="2"/><text x="82.7562%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.04%)</title><rect x="82.5777%" y="485" width="0.0357%" height="15" fill="rgb(224,200,8)" fg:x="2313" fg:w="1"/><text x="82.8277%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="82.5777%" y="469" width="0.0357%" height="15" fill="rgb(217,61,36)" fg:x="2313" fg:w="1"/><text x="82.8277%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (1 samples, 0.04%)</title><rect x="82.5777%" y="453" width="0.0357%" height="15" fill="rgb(206,35,45)" fg:x="2313" fg:w="1"/><text x="82.8277%" y="463.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="82.5777%" y="437" width="0.0357%" height="15" fill="rgb(217,65,33)" fg:x="2313" fg:w="1"/><text x="82.8277%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.04%)</title><rect x="82.5777%" y="421" width="0.0357%" height="15" fill="rgb(222,158,48)" fg:x="2313" fg:w="1"/><text x="82.8277%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="82.5777%" y="405" width="0.0357%" height="15" fill="rgb(254,2,54)" fg:x="2313" fg:w="1"/><text x="82.8277%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="82.5777%" y="389" width="0.0357%" height="15" fill="rgb(250,143,38)" fg:x="2313" fg:w="1"/><text x="82.8277%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="82.5777%" y="373" width="0.0357%" height="15" fill="rgb(248,25,0)" fg:x="2313" fg:w="1"/><text x="82.8277%" y="383.50"></text></g><g><title>cfree (1 samples, 0.04%)</title><rect x="82.5777%" y="357" width="0.0357%" height="15" fill="rgb(206,152,27)" fg:x="2313" fg:w="1"/><text x="82.8277%" y="367.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (1 samples, 0.04%)</title><rect x="82.7205%" y="389" width="0.0357%" height="15" fill="rgb(240,77,30)" fg:x="2317" fg:w="1"/><text x="82.9705%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="82.7205%" y="373" width="0.0357%" height="15" fill="rgb(231,5,3)" fg:x="2317" fg:w="1"/><text x="82.9705%" y="383.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="82.7205%" y="357" width="0.0357%" height="15" fill="rgb(207,226,32)" fg:x="2317" fg:w="1"/><text x="82.9705%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="82.7562%" y="373" width="0.0357%" height="15" fill="rgb(222,207,47)" fg:x="2318" fg:w="1"/><text x="83.0062%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.04%)</title><rect x="82.7562%" y="357" width="0.0357%" height="15" fill="rgb(229,115,45)" fg:x="2318" fg:w="1"/><text x="83.0062%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="82.7562%" y="341" width="0.0357%" height="15" fill="rgb(224,191,6)" fg:x="2318" fg:w="1"/><text x="83.0062%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="82.7919%" y="357" width="0.0357%" height="15" fill="rgb(230,227,24)" fg:x="2319" fg:w="1"/><text x="83.0419%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="82.9347%" y="341" width="0.0357%" height="15" fill="rgb(228,80,19)" fg:x="2323" fg:w="1"/><text x="83.1847%" y="351.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (1 samples, 0.04%)</title><rect x="82.9347%" y="325" width="0.0357%" height="15" fill="rgb(247,229,0)" fg:x="2323" fg:w="1"/><text x="83.1847%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (8 samples, 0.29%)</title><rect x="82.7919%" y="373" width="0.2856%" height="15" fill="rgb(237,194,15)" fg:x="2319" fg:w="8"/><text x="83.0419%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (7 samples, 0.25%)</title><rect x="82.8276%" y="357" width="0.2499%" height="15" fill="rgb(219,203,20)" fg:x="2320" fg:w="7"/><text x="83.0776%" y="367.50"></text></g><g><title>hashbrown::raw::inner::h2 (3 samples, 0.11%)</title><rect x="82.9704%" y="341" width="0.1071%" height="15" fill="rgb(234,128,8)" fg:x="2324" fg:w="3"/><text x="83.2204%" y="351.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (14 samples, 0.50%)</title><rect x="82.6491%" y="453" width="0.4998%" height="15" fill="rgb(248,202,8)" fg:x="2315" fg:w="14"/><text x="82.8991%" y="463.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (14 samples, 0.50%)</title><rect x="82.6491%" y="437" width="0.4998%" height="15" fill="rgb(206,104,37)" fg:x="2315" fg:w="14"/><text x="82.8991%" y="447.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (12 samples, 0.43%)</title><rect x="82.7205%" y="421" width="0.4284%" height="15" fill="rgb(223,8,27)" fg:x="2317" fg:w="12"/><text x="82.9705%" y="431.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (12 samples, 0.43%)</title><rect x="82.7205%" y="405" width="0.4284%" height="15" fill="rgb(216,217,28)" fg:x="2317" fg:w="12"/><text x="82.9705%" y="415.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (11 samples, 0.39%)</title><rect x="82.7562%" y="389" width="0.3927%" height="15" fill="rgb(249,199,1)" fg:x="2318" fg:w="11"/><text x="83.0062%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (2 samples, 0.07%)</title><rect x="83.0775%" y="373" width="0.0714%" height="15" fill="rgb(240,85,17)" fg:x="2327" fg:w="2"/><text x="83.3275%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (2 samples, 0.07%)</title><rect x="83.0775%" y="357" width="0.0714%" height="15" fill="rgb(206,108,45)" fg:x="2327" fg:w="2"/><text x="83.3275%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (2 samples, 0.07%)</title><rect x="83.0775%" y="341" width="0.0714%" height="15" fill="rgb(245,210,41)" fg:x="2327" fg:w="2"/><text x="83.3275%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (2 samples, 0.07%)</title><rect x="83.0775%" y="325" width="0.0714%" height="15" fill="rgb(206,13,37)" fg:x="2327" fg:w="2"/><text x="83.3275%" y="335.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.04%)</title><rect x="83.2917%" y="421" width="0.0357%" height="15" fill="rgb(250,61,18)" fg:x="2333" fg:w="1"/><text x="83.5417%" y="431.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.29%)</title><rect x="83.2917%" y="437" width="0.2856%" height="15" fill="rgb(235,172,48)" fg:x="2333" fg:w="8"/><text x="83.5417%" y="447.50"></text></g><g><title>malloc (7 samples, 0.25%)</title><rect x="83.3274%" y="421" width="0.2499%" height="15" fill="rgb(249,201,17)" fg:x="2334" fg:w="7"/><text x="83.5774%" y="431.50"></text></g><g><title>[libc.so.6] (4 samples, 0.14%)</title><rect x="83.4345%" y="405" width="0.1428%" height="15" fill="rgb(219,208,6)" fg:x="2337" fg:w="4"/><text x="83.6845%" y="415.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (28 samples, 1.00%)</title><rect x="82.6134%" y="485" width="0.9996%" height="15" fill="rgb(248,31,23)" fg:x="2314" fg:w="28"/><text x="82.8634%" y="495.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (28 samples, 1.00%)</title><rect x="82.6134%" y="469" width="0.9996%" height="15" fill="rgb(245,15,42)" fg:x="2314" fg:w="28"/><text x="82.8634%" y="479.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (13 samples, 0.46%)</title><rect x="83.1489%" y="453" width="0.4641%" height="15" fill="rgb(222,217,39)" fg:x="2329" fg:w="13"/><text x="83.3989%" y="463.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="83.5773%" y="437" width="0.0357%" height="15" fill="rgb(210,219,27)" fg:x="2341" fg:w="1"/><text x="83.8273%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.04%)</title><rect x="83.6130%" y="421" width="0.0357%" height="15" fill="rgb(252,166,36)" fg:x="2342" fg:w="1"/><text x="83.8630%" y="431.50"></text></g><g><title>simple_lisp::interpreter::builtins::core::and (38 samples, 1.36%)</title><rect x="82.3991%" y="501" width="1.3567%" height="15" fill="rgb(245,132,34)" fg:x="2308" fg:w="38"/><text x="82.6491%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (4 samples, 0.14%)</title><rect x="83.6130%" y="485" width="0.1428%" height="15" fill="rgb(236,54,3)" fg:x="2342" fg:w="4"/><text x="83.8630%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (4 samples, 0.14%)</title><rect x="83.6130%" y="469" width="0.1428%" height="15" fill="rgb(241,173,43)" fg:x="2342" fg:w="4"/><text x="83.8630%" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (4 samples, 0.14%)</title><rect x="83.6130%" y="453" width="0.1428%" height="15" fill="rgb(215,190,9)" fg:x="2342" fg:w="4"/><text x="83.8630%" y="463.50"></text></g><g><title>core::cell::BorrowRef::new (4 samples, 0.14%)</title><rect x="83.6130%" y="437" width="0.1428%" height="15" fill="rgb(242,101,16)" fg:x="2342" fg:w="4"/><text x="83.8630%" y="447.50"></text></g><g><title>core::cell::is_reading (3 samples, 0.11%)</title><rect x="83.6487%" y="421" width="0.1071%" height="15" fill="rgb(223,190,21)" fg:x="2343" fg:w="3"/><text x="83.8987%" y="431.50"></text></g><g><title>&lt;indexmap::set::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="83.7558%" y="405" width="0.0357%" height="15" fill="rgb(215,228,25)" fg:x="2346" fg:w="1"/><text x="84.0058%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="83.7558%" y="389" width="0.0357%" height="15" fill="rgb(225,36,22)" fg:x="2346" fg:w="1"/><text x="84.0058%" y="399.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.04%)</title><rect x="83.7558%" y="373" width="0.0357%" height="15" fill="rgb(251,106,46)" fg:x="2346" fg:w="1"/><text x="84.0058%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.04%)</title><rect x="84.7911%" y="389" width="0.0357%" height="15" fill="rgb(208,90,1)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="399.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::collect::_{{closure}} (1 samples, 0.04%)</title><rect x="84.7911%" y="373" width="0.0357%" height="15" fill="rgb(243,10,4)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="383.50"></text></g><g><title>simple_lisp::interpreter::data::Data::add_data_refs (1 samples, 0.04%)</title><rect x="84.7911%" y="357" width="0.0357%" height="15" fill="rgb(212,137,27)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="367.50"></text></g><g><title>&lt;indexmap::set::IndexSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.04%)</title><rect x="84.7911%" y="341" width="0.0357%" height="15" fill="rgb(231,220,49)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="351.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.04%)</title><rect x="84.7911%" y="325" width="0.0357%" height="15" fill="rgb(237,96,20)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.04%)</title><rect x="84.7911%" y="309" width="0.0357%" height="15" fill="rgb(239,229,30)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="84.7911%" y="293" width="0.0357%" height="15" fill="rgb(219,65,33)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="84.7911%" y="277" width="0.0357%" height="15" fill="rgb(243,134,7)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="84.7911%" y="261" width="0.0357%" height="15" fill="rgb(216,177,54)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="84.7911%" y="245" width="0.0357%" height="15" fill="rgb(211,160,20)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.04%)</title><rect x="84.7911%" y="229" width="0.0357%" height="15" fill="rgb(239,85,39)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.04%)</title><rect x="84.7911%" y="213" width="0.0357%" height="15" fill="rgb(232,125,22)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.04%)</title><rect x="84.7911%" y="197" width="0.0357%" height="15" fill="rgb(244,57,34)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="207.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.04%)</title><rect x="84.7911%" y="181" width="0.0357%" height="15" fill="rgb(214,203,32)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.04%)</title><rect x="84.7911%" y="165" width="0.0357%" height="15" fill="rgb(207,58,43)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="175.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (1 samples, 0.04%)</title><rect x="84.7911%" y="149" width="0.0357%" height="15" fill="rgb(215,193,15)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="159.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (1 samples, 0.04%)</title><rect x="84.7911%" y="133" width="0.0357%" height="15" fill="rgb(232,15,44)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="143.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (1 samples, 0.04%)</title><rect x="84.7911%" y="117" width="0.0357%" height="15" fill="rgb(212,3,48)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="127.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (1 samples, 0.04%)</title><rect x="84.7911%" y="101" width="0.0357%" height="15" fill="rgb(218,128,7)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="111.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (1 samples, 0.04%)</title><rect x="84.7911%" y="85" width="0.0357%" height="15" fill="rgb(226,216,39)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="95.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.04%)</title><rect x="84.7911%" y="69" width="0.0357%" height="15" fill="rgb(243,47,51)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="79.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.04%)</title><rect x="84.7911%" y="53" width="0.0357%" height="15" fill="rgb(241,183,40)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="63.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::fix_insert_slot (1 samples, 0.04%)</title><rect x="84.7911%" y="37" width="0.0357%" height="15" fill="rgb(231,217,32)" fg:x="2375" fg:w="1"/><text x="85.0411%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (35 samples, 1.25%)</title><rect x="83.7558%" y="453" width="1.2496%" height="15" fill="rgb(229,61,38)" fg:x="2346" fg:w="35"/><text x="84.0058%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35 samples, 1.25%)</title><rect x="83.7558%" y="437" width="1.2496%" height="15" fill="rgb(225,210,5)" fg:x="2346" fg:w="35"/><text x="84.0058%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (35 samples, 1.25%)</title><rect x="83.7558%" y="421" width="1.2496%" height="15" fill="rgb(231,79,45)" fg:x="2346" fg:w="35"/><text x="84.0058%" y="431.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (34 samples, 1.21%)</title><rect x="83.7915%" y="405" width="1.2139%" height="15" fill="rgb(224,100,7)" fg:x="2347" fg:w="34"/><text x="84.0415%" y="415.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::collect::_{{closure}} (5 samples, 0.18%)</title><rect x="84.8268%" y="389" width="0.1785%" height="15" fill="rgb(241,198,18)" fg:x="2376" fg:w="5"/><text x="85.0768%" y="399.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::is_external (4 samples, 0.14%)</title><rect x="84.8625%" y="373" width="0.1428%" height="15" fill="rgb(252,97,53)" fg:x="2377" fg:w="4"/><text x="85.1125%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (2 samples, 0.07%)</title><rect x="84.9340%" y="357" width="0.0714%" height="15" fill="rgb(220,88,7)" fg:x="2379" fg:w="2"/><text x="85.1840%" y="367.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (2 samples, 0.07%)</title><rect x="84.9340%" y="341" width="0.0714%" height="15" fill="rgb(213,176,14)" fg:x="2379" fg:w="2"/><text x="85.1840%" y="351.50"></text></g><g><title>core::cell::BorrowRef::new (2 samples, 0.07%)</title><rect x="84.9340%" y="325" width="0.0714%" height="15" fill="rgb(246,73,7)" fg:x="2379" fg:w="2"/><text x="85.1840%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (16 samples, 0.57%)</title><rect x="87.1117%" y="277" width="0.5712%" height="15" fill="rgb(245,64,36)" fg:x="2440" fg:w="16"/><text x="87.3617%" y="287.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (16 samples, 0.57%)</title><rect x="87.1117%" y="261" width="0.5712%" height="15" fill="rgb(245,80,10)" fg:x="2440" fg:w="16"/><text x="87.3617%" y="271.50"></text></g><g><title>core::cell::BorrowRef::new (16 samples, 0.57%)</title><rect x="87.1117%" y="245" width="0.5712%" height="15" fill="rgb(232,107,50)" fg:x="2440" fg:w="16"/><text x="87.3617%" y="255.50"></text></g><g><title>core::cell::is_reading (4 samples, 0.14%)</title><rect x="87.5402%" y="229" width="0.1428%" height="15" fill="rgb(253,3,0)" fg:x="2452" fg:w="4"/><text x="87.7902%" y="239.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::allocation_size (92 samples, 3.28%)</title><rect x="86.7547%" y="309" width="3.2845%" height="15" fill="rgb(212,99,53)" fg:x="2430" fg:w="92"/><text x="87.0047%" y="319.50">sim..</text></g><g><title>simple_lisp::interpreter::data::DataBox::allocation_size (92 samples, 3.28%)</title><rect x="86.7547%" y="293" width="3.2845%" height="15" fill="rgb(249,111,54)" fg:x="2430" fg:w="92"/><text x="87.0047%" y="303.50">sim..</text></g><g><title>simple_lisp::interpreter::data::Data::allocation_size (66 samples, 2.36%)</title><rect x="87.6830%" y="277" width="2.3563%" height="15" fill="rgb(249,55,30)" fg:x="2456" fg:w="66"/><text x="87.9330%" y="287.50">s..</text></g><g><title>__rdl_dealloc (8 samples, 0.29%)</title><rect x="90.4320%" y="277" width="0.2856%" height="15" fill="rgb(237,47,42)" fg:x="2533" fg:w="8"/><text x="90.6820%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.29%)</title><rect x="90.4320%" y="261" width="0.2856%" height="15" fill="rgb(211,20,18)" fg:x="2533" fg:w="8"/><text x="90.6820%" y="271.50"></text></g><g><title>__rust_dealloc (15 samples, 0.54%)</title><rect x="90.7176%" y="277" width="0.5355%" height="15" fill="rgb(231,203,46)" fg:x="2541" fg:w="15"/><text x="90.9676%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (150 samples, 5.36%)</title><rect x="90.0393%" y="293" width="5.3552%" height="15" fill="rgb(237,142,3)" fg:x="2522" fg:w="150"/><text x="90.2893%" y="303.50">alloc::..</text></g><g><title>cfree (116 samples, 4.14%)</title><rect x="91.2531%" y="277" width="4.1414%" height="15" fill="rgb(241,107,1)" fg:x="2556" fg:w="116"/><text x="91.5031%" y="287.50">cfree</text></g><g><title>[libc.so.6] (82 samples, 2.93%)</title><rect x="92.4670%" y="261" width="2.9275%" height="15" fill="rgb(229,83,13)" fg:x="2590" fg:w="82"/><text x="92.7170%" y="271.50">[l..</text></g><g><title>cfree (40 samples, 1.43%)</title><rect x="95.7158%" y="229" width="1.4281%" height="15" fill="rgb(241,91,40)" fg:x="2681" fg:w="40"/><text x="95.9658%" y="239.50"></text></g><g><title>[libc.so.6] (19 samples, 0.68%)</title><rect x="96.4655%" y="213" width="0.6783%" height="15" fill="rgb(225,3,45)" fg:x="2702" fg:w="19"/><text x="96.7155%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.04%)</title><rect x="97.7865%" y="213" width="0.0357%" height="15" fill="rgb(244,223,14)" fg:x="2739" fg:w="1"/><text x="98.0365%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.04%)</title><rect x="97.7865%" y="197" width="0.0357%" height="15" fill="rgb(224,124,37)" fg:x="2739" fg:w="1"/><text x="98.0365%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.04%)</title><rect x="97.7865%" y="181" width="0.0357%" height="15" fill="rgb(251,171,30)" fg:x="2739" fg:w="1"/><text x="98.0365%" y="191.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="97.7865%" y="165" width="0.0357%" height="15" fill="rgb(236,46,54)" fg:x="2739" fg:w="1"/><text x="98.0365%" y="175.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::dealloc (219 samples, 7.82%)</title><rect x="90.0393%" y="309" width="7.8186%" height="15" fill="rgb(245,213,5)" fg:x="2522" fg:w="219"/><text x="90.2893%" y="319.50">simple_lisp..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (69 samples, 2.46%)</title><rect x="95.3945%" y="293" width="2.4634%" height="15" fill="rgb(230,144,27)" fg:x="2672" fg:w="69"/><text x="95.6445%" y="303.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::DataBox&gt; (69 samples, 2.46%)</title><rect x="95.3945%" y="277" width="2.4634%" height="15" fill="rgb(220,86,6)" fg:x="2672" fg:w="69"/><text x="95.6445%" y="287.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;simple_lisp::interpreter::data::Data&gt;&gt; (69 samples, 2.46%)</title><rect x="95.3945%" y="261" width="2.4634%" height="15" fill="rgb(240,20,13)" fg:x="2672" fg:w="69"/><text x="95.6445%" y="271.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;simple_lisp::interpreter::data::Data&gt;&gt; (69 samples, 2.46%)</title><rect x="95.3945%" y="245" width="2.4634%" height="15" fill="rgb(217,89,34)" fg:x="2672" fg:w="69"/><text x="95.6445%" y="255.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::Data&gt; (20 samples, 0.71%)</title><rect x="97.1439%" y="229" width="0.7140%" height="15" fill="rgb(229,13,5)" fg:x="2721" fg:w="20"/><text x="97.3939%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(simple_lisp::interpreter::ast::Ident,simple_lisp::interpreter::data::DataRef)&gt;&gt; (1 samples, 0.04%)</title><rect x="97.8222%" y="213" width="0.0357%" height="15" fill="rgb(244,67,35)" fg:x="2740" fg:w="1"/><text x="98.0722%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(simple_lisp::interpreter::ast::Ident,simple_lisp::interpreter::data::DataRef)&gt;&gt; (1 samples, 0.04%)</title><rect x="97.8222%" y="197" width="0.0357%" height="15" fill="rgb(221,40,2)" fg:x="2740" fg:w="1"/><text x="98.0722%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="97.8222%" y="181" width="0.0357%" height="15" fill="rgb(237,157,21)" fg:x="2740" fg:w="1"/><text x="98.0722%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="97.8222%" y="165" width="0.0357%" height="15" fill="rgb(222,94,11)" fg:x="2740" fg:w="1"/><text x="98.0722%" y="175.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_generation (7 samples, 0.25%)</title><rect x="97.8579%" y="309" width="0.2499%" height="15" fill="rgb(249,113,6)" fg:x="2741" fg:w="7"/><text x="98.1079%" y="319.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (7 samples, 0.25%)</title><rect x="97.8579%" y="293" width="0.2499%" height="15" fill="rgb(238,137,36)" fg:x="2741" fg:w="7"/><text x="98.1079%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (383 samples, 13.67%)</title><rect x="85.0054%" y="405" width="13.6737%" height="15" fill="rgb(210,102,26)" fg:x="2381" fg:w="383"/><text x="85.2554%" y="415.50">alloc::vec::Vec&lt;T,A&gt;:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (383 samples, 13.67%)</title><rect x="85.0054%" y="389" width="13.6737%" height="15" fill="rgb(218,30,30)" fg:x="2381" fg:w="383"/><text x="85.2554%" y="399.50">alloc::vec::Vec&lt;T,A&gt;:..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::retain_in_order::_{{closure}} (375 samples, 13.39%)</title><rect x="85.2910%" y="373" width="13.3881%" height="15" fill="rgb(214,67,26)" fg:x="2389" fg:w="375"/><text x="85.5410%" y="383.50">indexmap::map::core:..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::retain::_{{closure}} (375 samples, 13.39%)</title><rect x="85.2910%" y="357" width="13.3881%" height="15" fill="rgb(251,9,53)" fg:x="2389" fg:w="375"/><text x="85.5410%" y="367.50">indexmap::map::Index..</text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::retain::_{{closure}} (375 samples, 13.39%)</title><rect x="85.2910%" y="341" width="13.3881%" height="15" fill="rgb(228,204,25)" fg:x="2389" fg:w="375"/><text x="85.5410%" y="351.50">indexmap::set::Index..</text></g><g><title>simple_lisp::interpreter::data::DataStore::collect::_{{closure}} (375 samples, 13.39%)</title><rect x="85.2910%" y="325" width="13.3881%" height="15" fill="rgb(207,153,8)" fg:x="2389" fg:w="375"/><text x="85.5410%" y="335.50">simple_lisp::interpr..</text></g><g><title>simple_lisp::interpreter::data::DataRef::is_external (16 samples, 0.57%)</title><rect x="98.1078%" y="309" width="0.5712%" height="15" fill="rgb(242,9,16)" fg:x="2748" fg:w="16"/><text x="98.3578%" y="319.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (15 samples, 0.54%)</title><rect x="98.1435%" y="293" width="0.5355%" height="15" fill="rgb(217,211,10)" fg:x="2749" fg:w="15"/><text x="98.3935%" y="303.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (15 samples, 0.54%)</title><rect x="98.1435%" y="277" width="0.5355%" height="15" fill="rgb(219,228,52)" fg:x="2749" fg:w="15"/><text x="98.3935%" y="287.50"></text></g><g><title>core::cell::BorrowRef::new (15 samples, 0.54%)</title><rect x="98.1435%" y="261" width="0.5355%" height="15" fill="rgb(231,92,29)" fg:x="2749" fg:w="15"/><text x="98.3935%" y="271.50"></text></g><g><title>core::cell::is_reading (10 samples, 0.36%)</title><rect x="98.3220%" y="245" width="0.3570%" height="15" fill="rgb(232,8,23)" fg:x="2754" fg:w="10"/><text x="98.5720%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::clear (1 samples, 0.04%)</title><rect x="98.6790%" y="389" width="0.0357%" height="15" fill="rgb(216,211,34)" fg:x="2764" fg:w="1"/><text x="98.9290%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;&amp;mut hashbrown::raw::inner::RawTable&lt;usize&gt;,hashbrown::raw::inner::RawTable&lt;usize&gt;::clear::{{closure}}&gt;&gt; (1 samples, 0.04%)</title><rect x="98.6790%" y="373" width="0.0357%" height="15" fill="rgb(236,151,0)" fg:x="2764" fg:w="1"/><text x="98.9290%" y="383.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="98.6790%" y="357" width="0.0357%" height="15" fill="rgb(209,168,3)" fg:x="2764" fg:w="1"/><text x="98.9290%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::clear::_{{closure}} (1 samples, 0.04%)</title><rect x="98.6790%" y="341" width="0.0357%" height="15" fill="rgb(208,129,28)" fg:x="2764" fg:w="1"/><text x="98.9290%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::clear_no_drop (1 samples, 0.04%)</title><rect x="98.6790%" y="325" width="0.0357%" height="15" fill="rgb(229,78,22)" fg:x="2764" fg:w="1"/><text x="98.9290%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::clear_no_drop (1 samples, 0.04%)</title><rect x="98.6790%" y="309" width="0.0357%" height="15" fill="rgb(228,187,13)" fg:x="2764" fg:w="1"/><text x="98.9290%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.04%)</title><rect x="98.6790%" y="293" width="0.0357%" height="15" fill="rgb(240,119,24)" fg:x="2764" fg:w="1"/><text x="98.9290%" y="303.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.04%)</title><rect x="98.6790%" y="277" width="0.0357%" height="15" fill="rgb(209,194,42)" fg:x="2764" fg:w="1"/><text x="98.9290%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="98.6790%" y="261" width="0.0357%" height="15" fill="rgb(247,200,46)" fg:x="2764" fg:w="1"/><text x="98.9290%" y="271.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::retain (385 samples, 13.75%)</title><rect x="85.0054%" y="453" width="13.7451%" height="15" fill="rgb(218,76,16)" fg:x="2381" fg:w="385"/><text x="85.2554%" y="463.50">indexmap::set::IndexS..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::retain (385 samples, 13.75%)</title><rect x="85.0054%" y="437" width="13.7451%" height="15" fill="rgb(225,21,48)" fg:x="2381" fg:w="385"/><text x="85.2554%" y="447.50">indexmap::map::IndexM..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::retain_in_order (385 samples, 13.75%)</title><rect x="85.0054%" y="421" width="13.7451%" height="15" fill="rgb(239,223,50)" fg:x="2381" fg:w="385"/><text x="85.2554%" y="431.50">indexmap::map::core::..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::rebuild_hash_table (2 samples, 0.07%)</title><rect x="98.6790%" y="405" width="0.0714%" height="15" fill="rgb(244,45,21)" fg:x="2764" fg:w="2"/><text x="98.9290%" y="415.50"></text></g><g><title>indexmap::map::core::raw::insert_bulk_no_grow (1 samples, 0.04%)</title><rect x="98.7147%" y="389" width="0.0357%" height="15" fill="rgb(232,33,43)" fg:x="2765" fg:w="1"/><text x="98.9647%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.04%)</title><rect x="98.7147%" y="373" width="0.0357%" height="15" fill="rgb(209,8,3)" fg:x="2765" fg:w="1"/><text x="98.9647%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::prepare_insert_slot (1 samples, 0.04%)</title><rect x="98.7147%" y="357" width="0.0357%" height="15" fill="rgb(214,25,53)" fg:x="2765" fg:w="1"/><text x="98.9647%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (1 samples, 0.04%)</title><rect x="98.7147%" y="341" width="0.0357%" height="15" fill="rgb(254,186,54)" fg:x="2765" fg:w="1"/><text x="98.9647%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (1 samples, 0.04%)</title><rect x="98.7147%" y="325" width="0.0357%" height="15" fill="rgb(208,174,49)" fg:x="2765" fg:w="1"/><text x="98.9647%" y="335.50"></text></g><g><title>simple_lisp::interpreter::builtins::core::gc_collect (421 samples, 15.03%)</title><rect x="83.7558%" y="501" width="15.0303%" height="15" fill="rgb(233,191,51)" fg:x="2346" fg:w="421"/><text x="84.0058%" y="511.50">simple_lisp::interprete..</text></g><g><title>simple_lisp::interpreter::Interpreter::gc_collect (421 samples, 15.03%)</title><rect x="83.7558%" y="485" width="15.0303%" height="15" fill="rgb(222,134,10)" fg:x="2346" fg:w="421"/><text x="84.0058%" y="495.50">simple_lisp::interprete..</text></g><g><title>simple_lisp::interpreter::data::DataStore::collect (421 samples, 15.03%)</title><rect x="83.7558%" y="469" width="15.0303%" height="15" fill="rgb(230,226,20)" fg:x="2346" fg:w="421"/><text x="84.0058%" y="479.50">simple_lisp::interprete..</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (1 samples, 0.04%)</title><rect x="98.7504%" y="453" width="0.0357%" height="15" fill="rgb(251,111,25)" fg:x="2766" fg:w="1"/><text x="99.0004%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.04%)</title><rect x="98.7504%" y="437" width="0.0357%" height="15" fill="rgb(224,40,46)" fg:x="2766" fg:w="1"/><text x="99.0004%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.04%)</title><rect x="98.7504%" y="421" width="0.0357%" height="15" fill="rgb(236,108,47)" fg:x="2766" fg:w="1"/><text x="99.0004%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (1 samples, 0.04%)</title><rect x="98.7504%" y="405" width="0.0357%" height="15" fill="rgb(234,93,0)" fg:x="2766" fg:w="1"/><text x="99.0004%" y="415.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.04%)</title><rect x="98.7504%" y="389" width="0.0357%" height="15" fill="rgb(224,213,32)" fg:x="2766" fg:w="1"/><text x="99.0004%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.04%)</title><rect x="98.7504%" y="373" width="0.0357%" height="15" fill="rgb(251,11,48)" fg:x="2766" fg:w="1"/><text x="99.0004%" y="383.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.04%)</title><rect x="98.7504%" y="357" width="0.0357%" height="15" fill="rgb(236,173,5)" fg:x="2766" fg:w="1"/><text x="99.0004%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (6 samples, 0.21%)</title><rect x="98.8218%" y="437" width="0.2142%" height="15" fill="rgb(230,95,12)" fg:x="2768" fg:w="6"/><text x="99.0718%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.04%)</title><rect x="99.0361%" y="437" width="0.0357%" height="15" fill="rgb(232,209,1)" fg:x="2774" fg:w="1"/><text x="99.2861%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.04%)</title><rect x="99.0361%" y="421" width="0.0357%" height="15" fill="rgb(232,6,1)" fg:x="2774" fg:w="1"/><text x="99.2861%" y="431.50"></text></g><g><title>core::mem::replace (1 samples, 0.04%)</title><rect x="99.0361%" y="405" width="0.0357%" height="15" fill="rgb(210,224,50)" fg:x="2774" fg:w="1"/><text x="99.2861%" y="415.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="99.0361%" y="389" width="0.0357%" height="15" fill="rgb(228,127,35)" fg:x="2774" fg:w="1"/><text x="99.2861%" y="399.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (19 samples, 0.68%)</title><rect x="98.7861%" y="501" width="0.6783%" height="15" fill="rgb(245,102,45)" fg:x="2767" fg:w="19"/><text x="99.0361%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (19 samples, 0.68%)</title><rect x="98.7861%" y="485" width="0.6783%" height="15" fill="rgb(214,1,49)" fg:x="2767" fg:w="19"/><text x="99.0361%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (19 samples, 0.68%)</title><rect x="98.7861%" y="469" width="0.6783%" height="15" fill="rgb(226,163,40)" fg:x="2767" fg:w="19"/><text x="99.0361%" y="479.50"></text></g><g><title>core::cell::BorrowRef::new (19 samples, 0.68%)</title><rect x="98.7861%" y="453" width="0.6783%" height="15" fill="rgb(239,212,28)" fg:x="2767" fg:w="19"/><text x="99.0361%" y="463.50"></text></g><g><title>core::cell::is_reading (11 samples, 0.39%)</title><rect x="99.0718%" y="437" width="0.3927%" height="15" fill="rgb(220,20,13)" fg:x="2775" fg:w="11"/><text x="99.3218%" y="447.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.04%)</title><rect x="99.5359%" y="453" width="0.0357%" height="15" fill="rgb(210,164,35)" fg:x="2788" fg:w="1"/><text x="99.7859%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.04%)</title><rect x="99.5359%" y="437" width="0.0357%" height="15" fill="rgb(248,109,41)" fg:x="2788" fg:w="1"/><text x="99.7859%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.04%)</title><rect x="99.5359%" y="421" width="0.0357%" height="15" fill="rgb(238,23,50)" fg:x="2788" fg:w="1"/><text x="99.7859%" y="431.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (1 samples, 0.04%)</title><rect x="99.5359%" y="405" width="0.0357%" height="15" fill="rgb(211,48,49)" fg:x="2788" fg:w="1"/><text x="99.7859%" y="415.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (1 samples, 0.04%)</title><rect x="99.5359%" y="389" width="0.0357%" height="15" fill="rgb(223,36,21)" fg:x="2788" fg:w="1"/><text x="99.7859%" y="399.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (1 samples, 0.04%)</title><rect x="99.5359%" y="373" width="0.0357%" height="15" fill="rgb(207,123,46)" fg:x="2788" fg:w="1"/><text x="99.7859%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (1 samples, 0.04%)</title><rect x="99.5359%" y="357" width="0.0357%" height="15" fill="rgb(240,218,32)" fg:x="2788" fg:w="1"/><text x="99.7859%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="99.6787%" y="405" width="0.0714%" height="15" fill="rgb(252,5,43)" fg:x="2792" fg:w="2"/><text x="99.9287%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.07%)</title><rect x="99.7501%" y="405" width="0.0714%" height="15" fill="rgb(252,84,19)" fg:x="2794" fg:w="2"/><text x="100.0001%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.07%)</title><rect x="99.7501%" y="389" width="0.0714%" height="15" fill="rgb(243,152,39)" fg:x="2794" fg:w="2"/><text x="100.0001%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.07%)</title><rect x="99.7501%" y="373" width="0.0714%" height="15" fill="rgb(234,160,15)" fg:x="2794" fg:w="2"/><text x="100.0001%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.07%)</title><rect x="99.7501%" y="357" width="0.0714%" height="15" fill="rgb(237,34,20)" fg:x="2794" fg:w="2"/><text x="100.0001%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.07%)</title><rect x="99.7501%" y="341" width="0.0714%" height="15" fill="rgb(229,97,13)" fg:x="2794" fg:w="2"/><text x="100.0001%" y="351.50"></text></g><g><title>_start (2,791 samples, 99.64%)</title><rect x="0.3213%" y="805" width="99.6430%" height="15" fill="rgb(234,71,50)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="815.50">_start</text></g><g><title>__libc_start_main (2,791 samples, 99.64%)</title><rect x="0.3213%" y="789" width="99.6430%" height="15" fill="rgb(253,155,4)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="799.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,791 samples, 99.64%)</title><rect x="0.3213%" y="773" width="99.6430%" height="15" fill="rgb(222,185,37)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="783.50">[libc.so.6]</text></g><g><title>main (2,791 samples, 99.64%)</title><rect x="0.3213%" y="757" width="99.6430%" height="15" fill="rgb(251,177,13)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="767.50">main</text></g><g><title>std::rt::lang_start_internal (2,791 samples, 99.64%)</title><rect x="0.3213%" y="741" width="99.6430%" height="15" fill="rgb(250,179,40)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="751.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,791 samples, 99.64%)</title><rect x="0.3213%" y="725" width="99.6430%" height="15" fill="rgb(242,44,2)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,791 samples, 99.64%)</title><rect x="0.3213%" y="709" width="99.6430%" height="15" fill="rgb(216,177,13)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,791 samples, 99.64%)</title><rect x="0.3213%" y="693" width="99.6430%" height="15" fill="rgb(216,106,43)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="703.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (2,791 samples, 99.64%)</title><rect x="0.3213%" y="677" width="99.6430%" height="15" fill="rgb(216,183,2)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="687.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (2,791 samples, 99.64%)</title><rect x="0.3213%" y="661" width="99.6430%" height="15" fill="rgb(249,75,3)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,791 samples, 99.64%)</title><rect x="0.3213%" y="645" width="99.6430%" height="15" fill="rgb(219,67,39)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,791 samples, 99.64%)</title><rect x="0.3213%" y="629" width="99.6430%" height="15" fill="rgb(253,228,2)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="639.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,791 samples, 99.64%)</title><rect x="0.3213%" y="613" width="99.6430%" height="15" fill="rgb(235,138,27)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="623.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (2,791 samples, 99.64%)</title><rect x="0.3213%" y="597" width="99.6430%" height="15" fill="rgb(236,97,51)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="607.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,791 samples, 99.64%)</title><rect x="0.3213%" y="581" width="99.6430%" height="15" fill="rgb(240,80,30)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="591.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,791 samples, 99.64%)</title><rect x="0.3213%" y="565" width="99.6430%" height="15" fill="rgb(230,178,19)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="575.50">core::ops::function::FnOnce::call_once</text></g><g><title>simple_lisp::main (2,791 samples, 99.64%)</title><rect x="0.3213%" y="549" width="99.6430%" height="15" fill="rgb(210,190,27)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="559.50">simple_lisp::main</text></g><g><title>simple_lisp::run (2,791 samples, 99.64%)</title><rect x="0.3213%" y="533" width="99.6430%" height="15" fill="rgb(222,107,31)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="543.50">simple_lisp::run</text></g><g><title>simple_lisp::interpreter::Interpreter::run (2,791 samples, 99.64%)</title><rect x="0.3213%" y="517" width="99.6430%" height="15" fill="rgb(216,127,34)" fg:x="9" fg:w="2791"/><text x="0.5713%" y="527.50">simple_lisp::interpreter::Interpreter::run</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (14 samples, 0.50%)</title><rect x="99.4645%" y="501" width="0.4998%" height="15" fill="rgb(234,116,52)" fg:x="2786" fg:w="14"/><text x="99.7145%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (14 samples, 0.50%)</title><rect x="99.4645%" y="485" width="0.4998%" height="15" fill="rgb(222,124,15)" fg:x="2786" fg:w="14"/><text x="99.7145%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (14 samples, 0.50%)</title><rect x="99.4645%" y="469" width="0.4998%" height="15" fill="rgb(231,179,28)" fg:x="2786" fg:w="14"/><text x="99.7145%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (11 samples, 0.39%)</title><rect x="99.5716%" y="453" width="0.3927%" height="15" fill="rgb(226,93,45)" fg:x="2789" fg:w="11"/><text x="99.8216%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11 samples, 0.39%)</title><rect x="99.5716%" y="437" width="0.3927%" height="15" fill="rgb(215,8,51)" fg:x="2789" fg:w="11"/><text x="99.8216%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (11 samples, 0.39%)</title><rect x="99.5716%" y="421" width="0.3927%" height="15" fill="rgb(223,106,5)" fg:x="2789" fg:w="11"/><text x="99.8216%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.14%)</title><rect x="99.8215%" y="405" width="0.1428%" height="15" fill="rgb(250,191,5)" fg:x="2796" fg:w="4"/><text x="100.0715%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.14%)</title><rect x="99.8215%" y="389" width="0.1428%" height="15" fill="rgb(242,132,44)" fg:x="2796" fg:w="4"/><text x="100.0715%" y="399.50"></text></g><g><title>all (2,801 samples, 100%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(251,152,29)" fg:x="0" fg:w="2801"/><text x="0.2500%" y="847.50"></text></g><g><title>simple_lisp (2,801 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(218,179,5)" fg:x="0" fg:w="2801"/><text x="0.2500%" y="831.50">simple_lisp</text></g><g><title>cfree (1 samples, 0.04%)</title><rect x="99.9643%" y="805" width="0.0357%" height="15" fill="rgb(227,67,19)" fg:x="2800" fg:w="1"/><text x="100.2143%" y="815.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="99.9643%" y="789" width="0.0357%" height="15" fill="rgb(233,119,31)" fg:x="2800" fg:w="1"/><text x="100.2143%" y="799.50"></text></g></svg></svg>