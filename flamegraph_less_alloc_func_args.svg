<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="918" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="901.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="901.00"> </text><svg id="frames" x="10" width="1180" total_samples="2692"><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.1486%" y="757" width="0.0371%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="1"/><text x="0.3986%" y="767.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.1486%" y="741" width="0.0371%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="1"/><text x="0.3986%" y="751.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.11%)</title><rect x="0.1114%" y="805" width="0.1114%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="3"/><text x="0.3614%" y="815.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.07%)</title><rect x="0.1486%" y="789" width="0.0743%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="2"/><text x="0.3986%" y="799.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.07%)</title><rect x="0.1486%" y="773" width="0.0743%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="2"/><text x="0.3986%" y="783.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.04%)</title><rect x="0.1857%" y="757" width="0.0371%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="0.4357%" y="767.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.1857%" y="741" width="0.0371%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1"/><text x="0.4357%" y="751.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.1857%" y="725" width="0.0371%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="1"/><text x="0.4357%" y="735.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="0.1857%" y="709" width="0.0371%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="1"/><text x="0.4357%" y="719.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.22%)</title><rect x="0.0371%" y="821" width="0.2229%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="6"/><text x="0.2871%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.2229%" y="805" width="0.0371%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="1"/><text x="0.4729%" y="815.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.30%)</title><rect x="0.0000%" y="837" width="0.2972%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="8"/><text x="0.2500%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.2600%" y="821" width="0.0371%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="1"/><text x="0.5100%" y="831.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="0.2972%" y="837" width="0.0371%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="1"/><text x="0.5472%" y="847.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="0.2972%" y="821" width="0.0371%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="1"/><text x="0.5472%" y="831.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="8.6181%" y="357" width="0.0371%" height="15" fill="rgb(231,73,38)" fg:x="232" fg:w="1"/><text x="8.8681%" y="367.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="8.6553%" y="357" width="0.0371%" height="15" fill="rgb(225,20,46)" fg:x="233" fg:w="1"/><text x="8.9053%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (36 samples, 1.34%)</title><rect x="8.5438%" y="453" width="1.3373%" height="15" fill="rgb(210,31,41)" fg:x="230" fg:w="36"/><text x="8.7938%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (36 samples, 1.34%)</title><rect x="8.5438%" y="437" width="1.3373%" height="15" fill="rgb(221,200,47)" fg:x="230" fg:w="36"/><text x="8.7938%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (36 samples, 1.34%)</title><rect x="8.5438%" y="421" width="1.3373%" height="15" fill="rgb(226,26,5)" fg:x="230" fg:w="36"/><text x="8.7938%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 1.26%)</title><rect x="8.6181%" y="405" width="1.2630%" height="15" fill="rgb(249,33,26)" fg:x="232" fg:w="34"/><text x="8.8681%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 1.26%)</title><rect x="8.6181%" y="389" width="1.2630%" height="15" fill="rgb(235,183,28)" fg:x="232" fg:w="34"/><text x="8.8681%" y="399.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 1.26%)</title><rect x="8.6181%" y="373" width="1.2630%" height="15" fill="rgb(221,5,38)" fg:x="232" fg:w="34"/><text x="8.8681%" y="383.50"></text></g><g><title>malloc (32 samples, 1.19%)</title><rect x="8.6924%" y="357" width="1.1887%" height="15" fill="rgb(247,18,42)" fg:x="234" fg:w="32"/><text x="8.9424%" y="367.50"></text></g><g><title>[libc.so.6] (10 samples, 0.37%)</title><rect x="9.5097%" y="341" width="0.3715%" height="15" fill="rgb(241,131,45)" fg:x="256" fg:w="10"/><text x="9.7597%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (43 samples, 1.60%)</title><rect x="8.3952%" y="533" width="1.5973%" height="15" fill="rgb(249,31,29)" fg:x="226" fg:w="43"/><text x="8.6452%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (39 samples, 1.45%)</title><rect x="8.5438%" y="517" width="1.4487%" height="15" fill="rgb(225,111,53)" fg:x="230" fg:w="39"/><text x="8.7938%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (39 samples, 1.45%)</title><rect x="8.5438%" y="501" width="1.4487%" height="15" fill="rgb(238,160,17)" fg:x="230" fg:w="39"/><text x="8.7938%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (39 samples, 1.45%)</title><rect x="8.5438%" y="485" width="1.4487%" height="15" fill="rgb(214,148,48)" fg:x="230" fg:w="39"/><text x="8.7938%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (39 samples, 1.45%)</title><rect x="8.5438%" y="469" width="1.4487%" height="15" fill="rgb(232,36,49)" fg:x="230" fg:w="39"/><text x="8.7938%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.11%)</title><rect x="9.8811%" y="453" width="0.1114%" height="15" fill="rgb(209,103,24)" fg:x="266" fg:w="3"/><text x="10.1311%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.11%)</title><rect x="9.8811%" y="437" width="0.1114%" height="15" fill="rgb(229,88,8)" fg:x="266" fg:w="3"/><text x="10.1311%" y="447.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="9.8811%" y="421" width="0.1114%" height="15" fill="rgb(213,181,19)" fg:x="266" fg:w="3"/><text x="10.1311%" y="431.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (8 samples, 0.30%)</title><rect x="9.9926%" y="533" width="0.2972%" height="15" fill="rgb(254,191,54)" fg:x="269" fg:w="8"/><text x="10.2426%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (9 samples, 0.33%)</title><rect x="10.3269%" y="517" width="0.3343%" height="15" fill="rgb(241,83,37)" fg:x="278" fg:w="9"/><text x="10.5769%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.33%)</title><rect x="10.3269%" y="501" width="0.3343%" height="15" fill="rgb(233,36,39)" fg:x="278" fg:w="9"/><text x="10.5769%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.33%)</title><rect x="10.3269%" y="485" width="0.3343%" height="15" fill="rgb(226,3,54)" fg:x="278" fg:w="9"/><text x="10.5769%" y="495.50"></text></g><g><title>&lt;indexmap::set::IndexSet&lt;T,S&gt; as indexmap::Entries&gt;::as_entries (8 samples, 0.30%)</title><rect x="10.6612%" y="501" width="0.2972%" height="15" fill="rgb(245,192,40)" fg:x="287" fg:w="8"/><text x="10.9112%" y="511.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as indexmap::Entries&gt;::as_entries (8 samples, 0.30%)</title><rect x="10.6612%" y="485" width="0.2972%" height="15" fill="rgb(238,167,29)" fg:x="287" fg:w="8"/><text x="10.9112%" y="495.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as indexmap::Entries&gt;::as_entries (8 samples, 0.30%)</title><rect x="10.6612%" y="469" width="0.2972%" height="15" fill="rgb(232,182,51)" fg:x="287" fg:w="8"/><text x="10.9112%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.30%)</title><rect x="10.6612%" y="453" width="0.2972%" height="15" fill="rgb(231,60,39)" fg:x="287" fg:w="8"/><text x="10.9112%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (19 samples, 0.71%)</title><rect x="10.9584%" y="501" width="0.7058%" height="15" fill="rgb(208,69,12)" fg:x="295" fg:w="19"/><text x="11.2084%" y="511.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::InstructionIter as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 1.49%)</title><rect x="10.2897%" y="533" width="1.4859%" height="15" fill="rgb(235,93,37)" fg:x="277" fg:w="40"/><text x="10.5397%" y="543.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::get_index (30 samples, 1.11%)</title><rect x="10.6612%" y="517" width="1.1144%" height="15" fill="rgb(213,116,39)" fg:x="287" fg:w="30"/><text x="10.9112%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3 samples, 0.11%)</title><rect x="11.6642%" y="501" width="0.1114%" height="15" fill="rgb(222,207,29)" fg:x="314" fg:w="3"/><text x="11.9142%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.11%)</title><rect x="11.6642%" y="485" width="0.1114%" height="15" fill="rgb(206,96,30)" fg:x="314" fg:w="3"/><text x="11.9142%" y="495.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::DataRef as core::clone::Clone&gt;::clone (2 samples, 0.07%)</title><rect x="11.7756%" y="533" width="0.0743%" height="15" fill="rgb(218,138,4)" fg:x="317" fg:w="2"/><text x="12.0256%" y="543.50"></text></g><g><title>core::intrinsics::copy (101 samples, 3.75%)</title><rect x="11.8499%" y="517" width="3.7519%" height="15" fill="rgb(250,191,14)" fg:x="319" fg:w="101"/><text x="12.0999%" y="527.50">core..</text></g><g><title>[libc.so.6] (99 samples, 3.68%)</title><rect x="11.9242%" y="501" width="3.6776%" height="15" fill="rgb(239,60,40)" fg:x="321" fg:w="99"/><text x="12.1742%" y="511.50">[lib..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (103 samples, 3.83%)</title><rect x="11.8499%" y="533" width="3.8262%" height="15" fill="rgb(206,27,48)" fg:x="319" fg:w="103"/><text x="12.0999%" y="543.50">allo..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.07%)</title><rect x="15.6018%" y="517" width="0.0743%" height="15" fill="rgb(225,35,8)" fg:x="420" fg:w="2"/><text x="15.8518%" y="527.50"></text></g><g><title>core::mem::drop (1 samples, 0.04%)</title><rect x="15.6761%" y="533" width="0.0371%" height="15" fill="rgb(250,213,24)" fg:x="422" fg:w="1"/><text x="15.9261%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;simple_lisp::interpreter::data::Data&gt;&gt; (1 samples, 0.04%)</title><rect x="15.6761%" y="517" width="0.0371%" height="15" fill="rgb(247,123,22)" fg:x="422" fg:w="1"/><text x="15.9261%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (1 samples, 0.04%)</title><rect x="15.6761%" y="501" width="0.0371%" height="15" fill="rgb(231,138,38)" fg:x="422" fg:w="1"/><text x="15.9261%" y="511.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="15.6761%" y="485" width="0.0371%" height="15" fill="rgb(231,145,46)" fg:x="422" fg:w="1"/><text x="15.9261%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.04%)</title><rect x="15.6761%" y="469" width="0.0371%" height="15" fill="rgb(251,118,11)" fg:x="422" fg:w="1"/><text x="15.9261%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.04%)</title><rect x="15.6761%" y="453" width="0.0371%" height="15" fill="rgb(217,147,25)" fg:x="422" fg:w="1"/><text x="15.9261%" y="463.50"></text></g><g><title>core::mem::replace (1 samples, 0.04%)</title><rect x="15.6761%" y="437" width="0.0371%" height="15" fill="rgb(247,81,37)" fg:x="422" fg:w="1"/><text x="15.9261%" y="447.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="15.6761%" y="421" width="0.0371%" height="15" fill="rgb(209,12,38)" fg:x="422" fg:w="1"/><text x="15.9261%" y="431.50"></text></g><g><title>core::mem::replace (1 samples, 0.04%)</title><rect x="15.7132%" y="533" width="0.0371%" height="15" fill="rgb(227,1,9)" fg:x="423" fg:w="1"/><text x="15.9632%" y="543.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="15.7132%" y="517" width="0.0371%" height="15" fill="rgb(248,47,43)" fg:x="423" fg:w="1"/><text x="15.9632%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (5 samples, 0.19%)</title><rect x="15.7504%" y="533" width="0.1857%" height="15" fill="rgb(221,10,30)" fg:x="424" fg:w="5"/><text x="16.0004%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (4 samples, 0.15%)</title><rect x="15.9361%" y="533" width="0.1486%" height="15" fill="rgb(210,229,1)" fg:x="429" fg:w="4"/><text x="16.1861%" y="543.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::run::_{{closure}} (4 samples, 0.15%)</title><rect x="15.9361%" y="517" width="0.1486%" height="15" fill="rgb(222,148,37)" fg:x="429" fg:w="4"/><text x="16.1861%" y="527.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (4 samples, 0.15%)</title><rect x="15.9361%" y="501" width="0.1486%" height="15" fill="rgb(234,67,33)" fg:x="429" fg:w="4"/><text x="16.1861%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (4 samples, 0.15%)</title><rect x="15.9361%" y="485" width="0.1486%" height="15" fill="rgb(247,98,35)" fg:x="429" fg:w="4"/><text x="16.1861%" y="495.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (4 samples, 0.15%)</title><rect x="15.9361%" y="469" width="0.1486%" height="15" fill="rgb(247,138,52)" fg:x="429" fg:w="4"/><text x="16.1861%" y="479.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.15%)</title><rect x="15.9361%" y="453" width="0.1486%" height="15" fill="rgb(213,79,30)" fg:x="429" fg:w="4"/><text x="16.1861%" y="463.50"></text></g><g><title>malloc (4 samples, 0.15%)</title><rect x="15.9361%" y="437" width="0.1486%" height="15" fill="rgb(246,177,23)" fg:x="429" fg:w="4"/><text x="16.1861%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="16.0475%" y="421" width="0.0371%" height="15" fill="rgb(230,62,27)" fg:x="432" fg:w="1"/><text x="16.2975%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;simple_lisp::interpreter::data::Data&gt;&gt; (13 samples, 0.48%)</title><rect x="16.0847%" y="533" width="0.4829%" height="15" fill="rgb(216,154,8)" fg:x="433" fg:w="13"/><text x="16.3347%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (13 samples, 0.48%)</title><rect x="16.0847%" y="517" width="0.4829%" height="15" fill="rgb(244,35,45)" fg:x="433" fg:w="13"/><text x="16.3347%" y="527.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (13 samples, 0.48%)</title><rect x="16.0847%" y="501" width="0.4829%" height="15" fill="rgb(251,115,12)" fg:x="433" fg:w="13"/><text x="16.3347%" y="511.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (13 samples, 0.48%)</title><rect x="16.0847%" y="485" width="0.4829%" height="15" fill="rgb(240,54,50)" fg:x="433" fg:w="13"/><text x="16.3347%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (13 samples, 0.48%)</title><rect x="16.0847%" y="469" width="0.4829%" height="15" fill="rgb(233,84,52)" fg:x="433" fg:w="13"/><text x="16.3347%" y="479.50"></text></g><g><title>core::mem::replace (13 samples, 0.48%)</title><rect x="16.0847%" y="453" width="0.4829%" height="15" fill="rgb(207,117,47)" fg:x="433" fg:w="13"/><text x="16.3347%" y="463.50"></text></g><g><title>core::ptr::write (13 samples, 0.48%)</title><rect x="16.0847%" y="437" width="0.4829%" height="15" fill="rgb(249,43,39)" fg:x="433" fg:w="13"/><text x="16.3347%" y="447.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="16.6419%" y="373" width="0.0371%" height="15" fill="rgb(209,38,44)" fg:x="448" fg:w="1"/><text x="16.8919%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="16.6419%" y="357" width="0.0371%" height="15" fill="rgb(236,212,23)" fg:x="448" fg:w="1"/><text x="16.8919%" y="367.50"></text></g><g><title>__rust_dealloc (1 samples, 0.04%)</title><rect x="16.6790%" y="373" width="0.0371%" height="15" fill="rgb(242,79,21)" fg:x="449" fg:w="1"/><text x="16.9290%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.52%)</title><rect x="16.6419%" y="405" width="0.5201%" height="15" fill="rgb(211,96,35)" fg:x="448" fg:w="14"/><text x="16.8919%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.52%)</title><rect x="16.6419%" y="389" width="0.5201%" height="15" fill="rgb(253,215,40)" fg:x="448" fg:w="14"/><text x="16.8919%" y="399.50"></text></g><g><title>cfree (12 samples, 0.45%)</title><rect x="16.7162%" y="373" width="0.4458%" height="15" fill="rgb(211,81,21)" fg:x="450" fg:w="12"/><text x="16.9662%" y="383.50"></text></g><g><title>[libc.so.6] (8 samples, 0.30%)</title><rect x="16.8648%" y="357" width="0.2972%" height="15" fill="rgb(208,190,38)" fg:x="454" fg:w="8"/><text x="17.1148%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.63%)</title><rect x="16.5676%" y="501" width="0.6315%" height="15" fill="rgb(235,213,38)" fg:x="446" fg:w="17"/><text x="16.8176%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[simple_lisp::interpreter::ScopeItem]&gt; (17 samples, 0.63%)</title><rect x="16.5676%" y="485" width="0.6315%" height="15" fill="rgb(237,122,38)" fg:x="446" fg:w="17"/><text x="16.8176%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::ScopeItem&gt; (17 samples, 0.63%)</title><rect x="16.5676%" y="469" width="0.6315%" height="15" fill="rgb(244,218,35)" fg:x="446" fg:w="17"/><text x="16.8176%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (15 samples, 0.56%)</title><rect x="16.6419%" y="453" width="0.5572%" height="15" fill="rgb(240,68,47)" fg:x="448" fg:w="15"/><text x="16.8919%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (15 samples, 0.56%)</title><rect x="16.6419%" y="437" width="0.5572%" height="15" fill="rgb(210,16,53)" fg:x="448" fg:w="15"/><text x="16.8919%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.56%)</title><rect x="16.6419%" y="421" width="0.5572%" height="15" fill="rgb(235,124,12)" fg:x="448" fg:w="15"/><text x="16.8919%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="17.1620%" y="405" width="0.0371%" height="15" fill="rgb(224,169,11)" fg:x="462" fg:w="1"/><text x="17.4120%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (1 samples, 0.04%)</title><rect x="17.1620%" y="389" width="0.0371%" height="15" fill="rgb(250,166,2)" fg:x="462" fg:w="1"/><text x="17.4120%" y="399.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="17.2363%" y="437" width="0.0371%" height="15" fill="rgb(242,216,29)" fg:x="464" fg:w="1"/><text x="17.4863%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="17.2363%" y="421" width="0.0371%" height="15" fill="rgb(230,116,27)" fg:x="464" fg:w="1"/><text x="17.4863%" y="431.50"></text></g><g><title>__rust_dealloc (1 samples, 0.04%)</title><rect x="17.2734%" y="437" width="0.0371%" height="15" fill="rgb(228,99,48)" fg:x="465" fg:w="1"/><text x="17.5234%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (35 samples, 1.30%)</title><rect x="17.1991%" y="469" width="1.3001%" height="15" fill="rgb(253,11,6)" fg:x="463" fg:w="35"/><text x="17.4491%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (35 samples, 1.30%)</title><rect x="17.1991%" y="453" width="1.3001%" height="15" fill="rgb(247,143,39)" fg:x="463" fg:w="35"/><text x="17.4491%" y="463.50"></text></g><g><title>cfree (32 samples, 1.19%)</title><rect x="17.3105%" y="437" width="1.1887%" height="15" fill="rgb(236,97,10)" fg:x="466" fg:w="32"/><text x="17.5605%" y="447.50"></text></g><g><title>[libc.so.6] (28 samples, 1.04%)</title><rect x="17.4591%" y="421" width="1.0401%" height="15" fill="rgb(233,208,19)" fg:x="470" fg:w="28"/><text x="17.7091%" y="431.50"></text></g><g><title>[libc.so.6] (10 samples, 0.37%)</title><rect x="18.1278%" y="405" width="0.3715%" height="15" fill="rgb(216,164,2)" fg:x="488" fg:w="10"/><text x="18.3778%" y="415.50"></text></g><g><title>[libc.so.6] (2 samples, 0.07%)</title><rect x="18.4250%" y="389" width="0.0743%" height="15" fill="rgb(220,129,5)" fg:x="496" fg:w="2"/><text x="18.6750%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;misc_utils::stack::Stack&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (53 samples, 1.97%)</title><rect x="16.5676%" y="533" width="1.9688%" height="15" fill="rgb(242,17,10)" fg:x="446" fg:w="53"/><text x="16.8176%" y="543.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (53 samples, 1.97%)</title><rect x="16.5676%" y="517" width="1.9688%" height="15" fill="rgb(242,107,0)" fg:x="446" fg:w="53"/><text x="16.8176%" y="527.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::ScopeItem&gt;&gt; (36 samples, 1.34%)</title><rect x="17.1991%" y="501" width="1.3373%" height="15" fill="rgb(251,28,31)" fg:x="463" fg:w="36"/><text x="17.4491%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 1.34%)</title><rect x="17.1991%" y="485" width="1.3373%" height="15" fill="rgb(233,223,10)" fg:x="463" fg:w="36"/><text x="17.4491%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="18.4993%" y="469" width="0.0371%" height="15" fill="rgb(215,21,27)" fg:x="498" fg:w="1"/><text x="18.7493%" y="479.50"></text></g><g><title>misc_utils::slotmap::SlotMap&lt;K,T&gt;::get (1 samples, 0.04%)</title><rect x="18.5364%" y="533" width="0.0371%" height="15" fill="rgb(232,23,21)" fg:x="499" fg:w="1"/><text x="18.7864%" y="543.50"></text></g><g><title>misc_utils::slotmap::SlotMap&lt;K,T&gt;::is_key_valid (1 samples, 0.04%)</title><rect x="18.5364%" y="517" width="0.0371%" height="15" fill="rgb(244,5,23)" fg:x="499" fg:w="1"/><text x="18.7864%" y="527.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (2 samples, 0.07%)</title><rect x="18.5736%" y="533" width="0.0743%" height="15" fill="rgb(226,81,46)" fg:x="500" fg:w="2"/><text x="18.8236%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.07%)</title><rect x="18.5736%" y="517" width="0.0743%" height="15" fill="rgb(247,70,30)" fg:x="500" fg:w="2"/><text x="18.8236%" y="527.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="18.6478%" y="405" width="0.0371%" height="15" fill="rgb(212,68,19)" fg:x="502" fg:w="1"/><text x="18.8978%" y="415.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::new (26 samples, 0.97%)</title><rect x="18.6478%" y="533" width="0.9658%" height="15" fill="rgb(240,187,13)" fg:x="502" fg:w="26"/><text x="18.8978%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (26 samples, 0.97%)</title><rect x="18.6478%" y="517" width="0.9658%" height="15" fill="rgb(223,113,26)" fg:x="502" fg:w="26"/><text x="18.8978%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (26 samples, 0.97%)</title><rect x="18.6478%" y="501" width="0.9658%" height="15" fill="rgb(206,192,2)" fg:x="502" fg:w="26"/><text x="18.8978%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (26 samples, 0.97%)</title><rect x="18.6478%" y="485" width="0.9658%" height="15" fill="rgb(241,108,4)" fg:x="502" fg:w="26"/><text x="18.8978%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (26 samples, 0.97%)</title><rect x="18.6478%" y="469" width="0.9658%" height="15" fill="rgb(247,173,49)" fg:x="502" fg:w="26"/><text x="18.8978%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.97%)</title><rect x="18.6478%" y="453" width="0.9658%" height="15" fill="rgb(224,114,35)" fg:x="502" fg:w="26"/><text x="18.8978%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.97%)</title><rect x="18.6478%" y="437" width="0.9658%" height="15" fill="rgb(245,159,27)" fg:x="502" fg:w="26"/><text x="18.8978%" y="447.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.97%)</title><rect x="18.6478%" y="421" width="0.9658%" height="15" fill="rgb(245,172,44)" fg:x="502" fg:w="26"/><text x="18.8978%" y="431.50"></text></g><g><title>malloc (25 samples, 0.93%)</title><rect x="18.6850%" y="405" width="0.9287%" height="15" fill="rgb(236,23,11)" fg:x="503" fg:w="25"/><text x="18.9350%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.11%)</title><rect x="19.8737%" y="501" width="0.1114%" height="15" fill="rgb(205,117,38)" fg:x="535" fg:w="3"/><text x="20.1237%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.11%)</title><rect x="19.8737%" y="485" width="0.1114%" height="15" fill="rgb(237,72,25)" fg:x="535" fg:w="3"/><text x="20.1237%" y="495.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::pop (11 samples, 0.41%)</title><rect x="19.6137%" y="533" width="0.4086%" height="15" fill="rgb(244,70,9)" fg:x="528" fg:w="11"/><text x="19.8637%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (11 samples, 0.41%)</title><rect x="19.6137%" y="517" width="0.4086%" height="15" fill="rgb(217,125,39)" fg:x="528" fg:w="11"/><text x="19.8637%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.04%)</title><rect x="19.9851%" y="501" width="0.0371%" height="15" fill="rgb(235,36,10)" fg:x="538" fg:w="1"/><text x="20.2351%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="20.7652%" y="469" width="0.0371%" height="15" fill="rgb(251,123,47)" fg:x="559" fg:w="1"/><text x="21.0152%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="20.8024%" y="469" width="0.0371%" height="15" fill="rgb(221,13,13)" fg:x="560" fg:w="1"/><text x="21.0524%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (1 samples, 0.04%)</title><rect x="20.8024%" y="453" width="0.0371%" height="15" fill="rgb(238,131,9)" fg:x="560" fg:w="1"/><text x="21.0524%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (41 samples, 1.52%)</title><rect x="20.9138%" y="453" width="1.5230%" height="15" fill="rgb(211,50,8)" fg:x="563" fg:w="41"/><text x="21.1638%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (41 samples, 1.52%)</title><rect x="20.9138%" y="437" width="1.5230%" height="15" fill="rgb(245,182,24)" fg:x="563" fg:w="41"/><text x="21.1638%" y="447.50"></text></g><g><title>alloc::alloc::realloc (41 samples, 1.52%)</title><rect x="20.9138%" y="421" width="1.5230%" height="15" fill="rgb(242,14,37)" fg:x="563" fg:w="41"/><text x="21.1638%" y="431.50"></text></g><g><title>realloc (40 samples, 1.49%)</title><rect x="20.9510%" y="405" width="1.4859%" height="15" fill="rgb(246,228,12)" fg:x="564" fg:w="40"/><text x="21.2010%" y="415.50"></text></g><g><title>[libc.so.6] (34 samples, 1.26%)</title><rect x="21.1738%" y="389" width="1.2630%" height="15" fill="rgb(213,55,15)" fg:x="570" fg:w="34"/><text x="21.4238%" y="399.50"></text></g><g><title>[libc.so.6] (30 samples, 1.11%)</title><rect x="21.3224%" y="373" width="1.1144%" height="15" fill="rgb(209,9,3)" fg:x="574" fg:w="30"/><text x="21.5724%" y="383.50"></text></g><g><title>[libc.so.6] (12 samples, 0.45%)</title><rect x="21.9911%" y="357" width="0.4458%" height="15" fill="rgb(230,59,30)" fg:x="592" fg:w="12"/><text x="22.2411%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (56 samples, 2.08%)</title><rect x="20.3938%" y="501" width="2.0802%" height="15" fill="rgb(209,121,21)" fg:x="549" fg:w="56"/><text x="20.6438%" y="511.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (46 samples, 1.71%)</title><rect x="20.7652%" y="485" width="1.7088%" height="15" fill="rgb(220,109,13)" fg:x="559" fg:w="46"/><text x="21.0152%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (44 samples, 1.63%)</title><rect x="20.8395%" y="469" width="1.6345%" height="15" fill="rgb(232,18,1)" fg:x="561" fg:w="44"/><text x="21.0895%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.04%)</title><rect x="22.4368%" y="453" width="0.0371%" height="15" fill="rgb(215,41,42)" fg:x="604" fg:w="1"/><text x="22.6868%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.04%)</title><rect x="22.4740%" y="501" width="0.0371%" height="15" fill="rgb(224,123,36)" fg:x="605" fg:w="1"/><text x="22.7240%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="22.4740%" y="485" width="0.0371%" height="15" fill="rgb(240,125,3)" fg:x="605" fg:w="1"/><text x="22.7240%" y="495.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (91 samples, 3.38%)</title><rect x="20.0223%" y="533" width="3.3804%" height="15" fill="rgb(205,98,50)" fg:x="539" fg:w="91"/><text x="20.2723%" y="543.50">mis..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (91 samples, 3.38%)</title><rect x="20.0223%" y="517" width="3.3804%" height="15" fill="rgb(205,185,37)" fg:x="539" fg:w="91"/><text x="20.2723%" y="527.50">all..</text></g><g><title>core::ptr::write (24 samples, 0.89%)</title><rect x="22.5111%" y="501" width="0.8915%" height="15" fill="rgb(238,207,15)" fg:x="606" fg:w="24"/><text x="22.7611%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="23.6999%" y="501" width="0.1114%" height="15" fill="rgb(213,199,42)" fg:x="638" fg:w="3"/><text x="23.9499%" y="511.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="23.6999%" y="485" width="0.1114%" height="15" fill="rgb(235,201,11)" fg:x="638" fg:w="3"/><text x="23.9499%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="23.6999%" y="469" width="0.1114%" height="15" fill="rgb(207,46,11)" fg:x="638" fg:w="3"/><text x="23.9499%" y="479.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.04%)</title><rect x="23.7741%" y="453" width="0.0371%" height="15" fill="rgb(241,35,35)" fg:x="640" fg:w="1"/><text x="24.0241%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (1 samples, 0.04%)</title><rect x="23.7741%" y="437" width="0.0371%" height="15" fill="rgb(243,32,47)" fg:x="640" fg:w="1"/><text x="24.0241%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="23.7741%" y="421" width="0.0371%" height="15" fill="rgb(247,202,23)" fg:x="640" fg:w="1"/><text x="24.0241%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="23.7741%" y="405" width="0.0371%" height="15" fill="rgb(219,102,11)" fg:x="640" fg:w="1"/><text x="24.0241%" y="415.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.15%)</title><rect x="23.9970%" y="453" width="0.1486%" height="15" fill="rgb(243,110,44)" fg:x="646" fg:w="4"/><text x="24.2470%" y="463.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.07%)</title><rect x="24.0713%" y="437" width="0.0743%" height="15" fill="rgb(222,74,54)" fg:x="648" fg:w="2"/><text x="24.3213%" y="447.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.19%)</title><rect x="23.9970%" y="469" width="0.1857%" height="15" fill="rgb(216,99,12)" fg:x="646" fg:w="5"/><text x="24.2470%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.04%)</title><rect x="24.1456%" y="453" width="0.0371%" height="15" fill="rgb(226,22,26)" fg:x="650" fg:w="1"/><text x="24.3956%" y="463.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (1 samples, 0.04%)</title><rect x="24.1456%" y="437" width="0.0371%" height="15" fill="rgb(217,163,10)" fg:x="650" fg:w="1"/><text x="24.3956%" y="447.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="24.1456%" y="421" width="0.0371%" height="15" fill="rgb(213,25,53)" fg:x="650" fg:w="1"/><text x="24.3956%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (6 samples, 0.22%)</title><rect x="24.1828%" y="469" width="0.2229%" height="15" fill="rgb(252,105,26)" fg:x="651" fg:w="6"/><text x="24.4328%" y="479.50"></text></g><g><title>core::ops::function::FnMut::call_mut (6 samples, 0.22%)</title><rect x="24.1828%" y="453" width="0.2229%" height="15" fill="rgb(220,39,43)" fg:x="651" fg:w="6"/><text x="24.4328%" y="463.50"></text></g><g><title>core::mem::drop (6 samples, 0.22%)</title><rect x="24.1828%" y="437" width="0.2229%" height="15" fill="rgb(229,68,48)" fg:x="651" fg:w="6"/><text x="24.4328%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::ExternalData&gt; (6 samples, 0.22%)</title><rect x="24.1828%" y="421" width="0.2229%" height="15" fill="rgb(252,8,32)" fg:x="651" fg:w="6"/><text x="24.4328%" y="431.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::ExternalData as core::ops::drop::Drop&gt;::drop (6 samples, 0.22%)</title><rect x="24.1828%" y="405" width="0.2229%" height="15" fill="rgb(223,20,43)" fg:x="651" fg:w="6"/><text x="24.4328%" y="415.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::unset_external (6 samples, 0.22%)</title><rect x="24.1828%" y="389" width="0.2229%" height="15" fill="rgb(229,81,49)" fg:x="651" fg:w="6"/><text x="24.4328%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (6 samples, 0.22%)</title><rect x="24.1828%" y="373" width="0.2229%" height="15" fill="rgb(236,28,36)" fg:x="651" fg:w="6"/><text x="24.4328%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (6 samples, 0.22%)</title><rect x="24.1828%" y="357" width="0.2229%" height="15" fill="rgb(249,185,26)" fg:x="651" fg:w="6"/><text x="24.4328%" y="367.50"></text></g><g><title>core::cell::BorrowRefMut::new (6 samples, 0.22%)</title><rect x="24.1828%" y="341" width="0.2229%" height="15" fill="rgb(249,174,33)" fg:x="651" fg:w="6"/><text x="24.4328%" y="351.50"></text></g><g><title>core::ptr::read (3 samples, 0.11%)</title><rect x="24.6657%" y="405" width="0.1114%" height="15" fill="rgb(233,201,37)" fg:x="664" fg:w="3"/><text x="24.9157%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (29 samples, 1.08%)</title><rect x="23.8113%" y="501" width="1.0773%" height="15" fill="rgb(221,78,26)" fg:x="641" fg:w="29"/><text x="24.0613%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (24 samples, 0.89%)</title><rect x="23.9970%" y="485" width="0.8915%" height="15" fill="rgb(250,127,30)" fg:x="646" fg:w="24"/><text x="24.2470%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;simple_lisp::interpreter::data::ExternalData&gt;&gt; (13 samples, 0.48%)</title><rect x="24.4056%" y="469" width="0.4829%" height="15" fill="rgb(230,49,44)" fg:x="657" fg:w="13"/><text x="24.6556%" y="479.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.48%)</title><rect x="24.4056%" y="453" width="0.4829%" height="15" fill="rgb(229,67,23)" fg:x="657" fg:w="13"/><text x="24.6556%" y="463.50"></text></g><g><title>core::mem::take (6 samples, 0.22%)</title><rect x="24.6657%" y="437" width="0.2229%" height="15" fill="rgb(249,83,47)" fg:x="664" fg:w="6"/><text x="24.9157%" y="447.50"></text></g><g><title>core::mem::replace (6 samples, 0.22%)</title><rect x="24.6657%" y="421" width="0.2229%" height="15" fill="rgb(215,43,3)" fg:x="664" fg:w="6"/><text x="24.9157%" y="431.50"></text></g><g><title>core::ptr::write (3 samples, 0.11%)</title><rect x="24.7771%" y="405" width="0.1114%" height="15" fill="rgb(238,154,13)" fg:x="667" fg:w="3"/><text x="25.0271%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_slice (2 samples, 0.07%)</title><rect x="24.8886%" y="469" width="0.0743%" height="15" fill="rgb(219,56,2)" fg:x="670" fg:w="2"/><text x="25.1386%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.07%)</title><rect x="24.8886%" y="453" width="0.0743%" height="15" fill="rgb(233,0,4)" fg:x="670" fg:w="2"/><text x="25.1386%" y="463.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::clear (67 samples, 2.49%)</title><rect x="24.8886%" y="501" width="2.4889%" height="15" fill="rgb(235,30,7)" fg:x="670" fg:w="67"/><text x="25.1386%" y="511.50">mi..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (67 samples, 2.49%)</title><rect x="24.8886%" y="485" width="2.4889%" height="15" fill="rgb(250,79,13)" fg:x="670" fg:w="67"/><text x="25.1386%" y="495.50">al..</text></g><g><title>core::ptr::drop_in_place&lt;[std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;]&gt; (65 samples, 2.41%)</title><rect x="24.9629%" y="469" width="2.4146%" height="15" fill="rgb(211,146,34)" fg:x="672" fg:w="65"/><text x="25.2129%" y="479.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (61 samples, 2.27%)</title><rect x="25.1114%" y="453" width="2.2660%" height="15" fill="rgb(228,22,38)" fg:x="676" fg:w="61"/><text x="25.3614%" y="463.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (61 samples, 2.27%)</title><rect x="25.1114%" y="437" width="2.2660%" height="15" fill="rgb(235,168,5)" fg:x="676" fg:w="61"/><text x="25.3614%" y="447.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;simple_lisp::interpreter::ast::Ident,(),rustc_hash::FxBuildHasher&gt;&gt; (61 samples, 2.27%)</title><rect x="25.1114%" y="421" width="2.2660%" height="15" fill="rgb(221,155,16)" fg:x="676" fg:w="61"/><text x="25.3614%" y="431.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(simple_lisp::interpreter::ast::Ident,())&gt;&gt; (61 samples, 2.27%)</title><rect x="25.1114%" y="405" width="2.2660%" height="15" fill="rgb(215,215,53)" fg:x="676" fg:w="61"/><text x="25.3614%" y="415.50">c..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 2.27%)</title><rect x="25.1114%" y="389" width="2.2660%" height="15" fill="rgb(223,4,10)" fg:x="676" fg:w="61"/><text x="25.3614%" y="399.50">&lt;..</text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (61 samples, 2.27%)</title><rect x="25.1114%" y="373" width="2.2660%" height="15" fill="rgb(234,103,6)" fg:x="676" fg:w="61"/><text x="25.3614%" y="383.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (57 samples, 2.12%)</title><rect x="25.2600%" y="357" width="2.1174%" height="15" fill="rgb(227,97,0)" fg:x="680" fg:w="57"/><text x="25.5100%" y="367.50">h..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (57 samples, 2.12%)</title><rect x="25.2600%" y="341" width="2.1174%" height="15" fill="rgb(234,150,53)" fg:x="680" fg:w="57"/><text x="25.5100%" y="351.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (57 samples, 2.12%)</title><rect x="25.2600%" y="325" width="2.1174%" height="15" fill="rgb(228,201,54)" fg:x="680" fg:w="57"/><text x="25.5100%" y="335.50">a..</text></g><g><title>cfree (54 samples, 2.01%)</title><rect x="25.3715%" y="309" width="2.0059%" height="15" fill="rgb(222,22,37)" fg:x="683" fg:w="54"/><text x="25.6215%" y="319.50">c..</text></g><g><title>[libc.so.6] (42 samples, 1.56%)</title><rect x="25.8172%" y="293" width="1.5602%" height="15" fill="rgb(237,53,32)" fg:x="695" fg:w="42"/><text x="26.0672%" y="303.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::drain (1 samples, 0.04%)</title><rect x="27.3774%" y="501" width="0.0371%" height="15" fill="rgb(233,25,53)" fg:x="737" fg:w="1"/><text x="27.6274%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (1 samples, 0.04%)</title><rect x="27.3774%" y="485" width="0.0371%" height="15" fill="rgb(210,40,34)" fg:x="737" fg:w="1"/><text x="27.6274%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.04%)</title><rect x="27.3774%" y="469" width="0.0371%" height="15" fill="rgb(241,220,44)" fg:x="737" fg:w="1"/><text x="27.6274%" y="479.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="27.3774%" y="453" width="0.0371%" height="15" fill="rgb(235,28,35)" fg:x="737" fg:w="1"/><text x="27.6274%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.04%)</title><rect x="27.3774%" y="437" width="0.0371%" height="15" fill="rgb(210,56,17)" fg:x="737" fg:w="1"/><text x="27.6274%" y="447.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (1 samples, 0.04%)</title><rect x="27.4146%" y="501" width="0.0371%" height="15" fill="rgb(224,130,29)" fg:x="738" fg:w="1"/><text x="27.6646%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="27.4146%" y="485" width="0.0371%" height="15" fill="rgb(235,212,8)" fg:x="738" fg:w="1"/><text x="27.6646%" y="495.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clear_env (110 samples, 4.09%)</title><rect x="23.4027%" y="533" width="4.0862%" height="15" fill="rgb(223,33,50)" fg:x="630" fg:w="110"/><text x="23.6527%" y="543.50">simp..</text></g><g><title>simple_lisp::interpreter::Env::clear (108 samples, 4.01%)</title><rect x="23.4770%" y="517" width="4.0119%" height="15" fill="rgb(219,149,13)" fg:x="632" fg:w="108"/><text x="23.7270%" y="527.50">simp..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter_mut (1 samples, 0.04%)</title><rect x="27.4517%" y="501" width="0.0371%" height="15" fill="rgb(250,156,29)" fg:x="739" fg:w="1"/><text x="27.7017%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter_mut (1 samples, 0.04%)</title><rect x="27.4517%" y="485" width="0.0371%" height="15" fill="rgb(216,193,19)" fg:x="739" fg:w="1"/><text x="27.7017%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1 samples, 0.04%)</title><rect x="27.4517%" y="469" width="0.0371%" height="15" fill="rgb(216,135,14)" fg:x="739" fg:w="1"/><text x="27.7017%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (1 samples, 0.04%)</title><rect x="27.4517%" y="453" width="0.0371%" height="15" fill="rgb(241,47,5)" fg:x="739" fg:w="1"/><text x="27.7017%" y="463.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="27.4517%" y="437" width="0.0371%" height="15" fill="rgb(233,42,35)" fg:x="739" fg:w="1"/><text x="27.7017%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (1 samples, 0.04%)</title><rect x="27.4517%" y="421" width="0.0371%" height="15" fill="rgb(231,13,6)" fg:x="739" fg:w="1"/><text x="27.7017%" y="431.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (1 samples, 0.04%)</title><rect x="27.4517%" y="405" width="0.0371%" height="15" fill="rgb(207,181,40)" fg:x="739" fg:w="1"/><text x="27.7017%" y="415.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="27.6003%" y="517" width="0.0743%" height="15" fill="rgb(254,173,49)" fg:x="743" fg:w="2"/><text x="27.8503%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="27.6374%" y="501" width="0.0371%" height="15" fill="rgb(221,1,38)" fg:x="744" fg:w="1"/><text x="27.8874%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="27.6374%" y="485" width="0.0371%" height="15" fill="rgb(206,124,46)" fg:x="744" fg:w="1"/><text x="27.8874%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="27.6374%" y="469" width="0.0371%" height="15" fill="rgb(249,21,11)" fg:x="744" fg:w="1"/><text x="27.8874%" y="479.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (2 samples, 0.07%)</title><rect x="27.6746%" y="501" width="0.0743%" height="15" fill="rgb(222,201,40)" fg:x="745" fg:w="2"/><text x="27.9246%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.07%)</title><rect x="27.6746%" y="485" width="0.0743%" height="15" fill="rgb(235,61,29)" fg:x="745" fg:w="2"/><text x="27.9246%" y="495.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="27.7489%" y="501" width="0.0371%" height="15" fill="rgb(219,207,3)" fg:x="747" fg:w="1"/><text x="27.9989%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="27.7489%" y="485" width="0.0371%" height="15" fill="rgb(222,56,46)" fg:x="747" fg:w="1"/><text x="27.9989%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="27.7489%" y="469" width="0.0371%" height="15" fill="rgb(239,76,54)" fg:x="747" fg:w="1"/><text x="27.9989%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="27.7489%" y="453" width="0.0371%" height="15" fill="rgb(231,124,27)" fg:x="747" fg:w="1"/><text x="27.9989%" y="463.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (4 samples, 0.15%)</title><rect x="27.7860%" y="501" width="0.1486%" height="15" fill="rgb(249,195,6)" fg:x="748" fg:w="4"/><text x="28.0360%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.15%)</title><rect x="27.7860%" y="485" width="0.1486%" height="15" fill="rgb(237,174,47)" fg:x="748" fg:w="4"/><text x="28.0360%" y="495.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::external (1 samples, 0.04%)</title><rect x="27.9346%" y="501" width="0.0371%" height="15" fill="rgb(206,201,31)" fg:x="752" fg:w="1"/><text x="28.1846%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::set_external (1 samples, 0.04%)</title><rect x="27.9346%" y="485" width="0.0371%" height="15" fill="rgb(231,57,52)" fg:x="752" fg:w="1"/><text x="28.1846%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.04%)</title><rect x="27.9346%" y="469" width="0.0371%" height="15" fill="rgb(248,177,22)" fg:x="752" fg:w="1"/><text x="28.1846%" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.04%)</title><rect x="27.9346%" y="453" width="0.0371%" height="15" fill="rgb(215,211,37)" fg:x="752" fg:w="1"/><text x="28.1846%" y="463.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.04%)</title><rect x="27.9346%" y="437" width="0.0371%" height="15" fill="rgb(241,128,51)" fg:x="752" fg:w="1"/><text x="28.1846%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="28.2318%" y="437" width="0.1114%" height="15" fill="rgb(227,165,31)" fg:x="760" fg:w="3"/><text x="28.4818%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.07%)</title><rect x="28.2689%" y="421" width="0.0743%" height="15" fill="rgb(228,167,24)" fg:x="761" fg:w="2"/><text x="28.5189%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.07%)</title><rect x="28.3432%" y="437" width="0.0743%" height="15" fill="rgb(228,143,12)" fg:x="763" fg:w="2"/><text x="28.5932%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.07%)</title><rect x="28.3432%" y="421" width="0.0743%" height="15" fill="rgb(249,149,8)" fg:x="763" fg:w="2"/><text x="28.5932%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.07%)</title><rect x="28.3432%" y="405" width="0.0743%" height="15" fill="rgb(243,35,44)" fg:x="763" fg:w="2"/><text x="28.5932%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.07%)</title><rect x="28.3432%" y="389" width="0.0743%" height="15" fill="rgb(246,89,9)" fg:x="763" fg:w="2"/><text x="28.5932%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.07%)</title><rect x="28.3432%" y="373" width="0.0743%" height="15" fill="rgb(233,213,13)" fg:x="763" fg:w="2"/><text x="28.5932%" y="383.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (15 samples, 0.56%)</title><rect x="27.9718%" y="501" width="0.5572%" height="15" fill="rgb(233,141,41)" fg:x="753" fg:w="15"/><text x="28.2218%" y="511.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (15 samples, 0.56%)</title><rect x="27.9718%" y="485" width="0.5572%" height="15" fill="rgb(239,167,4)" fg:x="753" fg:w="15"/><text x="28.2218%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (15 samples, 0.56%)</title><rect x="27.9718%" y="469" width="0.5572%" height="15" fill="rgb(209,217,16)" fg:x="753" fg:w="15"/><text x="28.2218%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (9 samples, 0.33%)</title><rect x="28.1947%" y="453" width="0.3343%" height="15" fill="rgb(219,88,35)" fg:x="759" fg:w="9"/><text x="28.4447%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.11%)</title><rect x="28.4175%" y="437" width="0.1114%" height="15" fill="rgb(220,193,23)" fg:x="765" fg:w="3"/><text x="28.6675%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.11%)</title><rect x="28.4175%" y="421" width="0.1114%" height="15" fill="rgb(230,90,52)" fg:x="765" fg:w="3"/><text x="28.6675%" y="431.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (6 samples, 0.22%)</title><rect x="28.5290%" y="501" width="0.2229%" height="15" fill="rgb(252,106,19)" fg:x="768" fg:w="6"/><text x="28.7790%" y="511.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (6 samples, 0.22%)</title><rect x="28.5290%" y="485" width="0.2229%" height="15" fill="rgb(206,74,20)" fg:x="768" fg:w="6"/><text x="28.7790%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (6 samples, 0.22%)</title><rect x="28.5290%" y="469" width="0.2229%" height="15" fill="rgb(230,138,44)" fg:x="768" fg:w="6"/><text x="28.7790%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 0.22%)</title><rect x="28.5290%" y="453" width="0.2229%" height="15" fill="rgb(235,182,43)" fg:x="768" fg:w="6"/><text x="28.7790%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3 samples, 0.11%)</title><rect x="28.6404%" y="437" width="0.1114%" height="15" fill="rgb(242,16,51)" fg:x="771" fg:w="3"/><text x="28.8904%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.11%)</title><rect x="28.6404%" y="421" width="0.1114%" height="15" fill="rgb(248,9,4)" fg:x="771" fg:w="3"/><text x="28.8904%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (3 samples, 0.11%)</title><rect x="28.6404%" y="405" width="0.1114%" height="15" fill="rgb(210,31,22)" fg:x="771" fg:w="3"/><text x="28.8904%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.07%)</title><rect x="28.6776%" y="389" width="0.0743%" height="15" fill="rgb(239,54,39)" fg:x="772" fg:w="2"/><text x="28.9276%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.07%)</title><rect x="28.6776%" y="373" width="0.0743%" height="15" fill="rgb(230,99,41)" fg:x="772" fg:w="2"/><text x="28.9276%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (4 samples, 0.15%)</title><rect x="29.1605%" y="341" width="0.1486%" height="15" fill="rgb(253,106,12)" fg:x="785" fg:w="4"/><text x="29.4105%" y="351.50"></text></g><g><title>core::intrinsics::write_bytes (4 samples, 0.15%)</title><rect x="29.1605%" y="325" width="0.1486%" height="15" fill="rgb(213,46,41)" fg:x="785" fg:w="4"/><text x="29.4105%" y="335.50"></text></g><g><title>[libc.so.6] (3 samples, 0.11%)</title><rect x="29.1976%" y="309" width="0.1114%" height="15" fill="rgb(215,133,35)" fg:x="786" fg:w="3"/><text x="29.4476%" y="319.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (5 samples, 0.19%)</title><rect x="29.3091%" y="325" width="0.1857%" height="15" fill="rgb(213,28,5)" fg:x="789" fg:w="5"/><text x="29.5591%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.19%)</title><rect x="29.3091%" y="309" width="0.1857%" height="15" fill="rgb(215,77,49)" fg:x="789" fg:w="5"/><text x="29.5591%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.19%)</title><rect x="29.3091%" y="293" width="0.1857%" height="15" fill="rgb(248,100,22)" fg:x="789" fg:w="5"/><text x="29.5591%" y="303.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.19%)</title><rect x="29.3091%" y="277" width="0.1857%" height="15" fill="rgb(208,67,9)" fg:x="789" fg:w="5"/><text x="29.5591%" y="287.50"></text></g><g><title>malloc (5 samples, 0.19%)</title><rect x="29.3091%" y="261" width="0.1857%" height="15" fill="rgb(219,133,21)" fg:x="789" fg:w="5"/><text x="29.5591%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (21 samples, 0.78%)</title><rect x="28.8262%" y="437" width="0.7801%" height="15" fill="rgb(246,46,29)" fg:x="776" fg:w="21"/><text x="29.0762%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (21 samples, 0.78%)</title><rect x="28.8262%" y="421" width="0.7801%" height="15" fill="rgb(246,185,52)" fg:x="776" fg:w="21"/><text x="29.0762%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (17 samples, 0.63%)</title><rect x="28.9747%" y="405" width="0.6315%" height="15" fill="rgb(252,136,11)" fg:x="780" fg:w="17"/><text x="29.2247%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (15 samples, 0.56%)</title><rect x="29.0490%" y="389" width="0.5572%" height="15" fill="rgb(219,138,53)" fg:x="782" fg:w="15"/><text x="29.2990%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (12 samples, 0.45%)</title><rect x="29.1605%" y="373" width="0.4458%" height="15" fill="rgb(211,51,23)" fg:x="785" fg:w="12"/><text x="29.4105%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (12 samples, 0.45%)</title><rect x="29.1605%" y="357" width="0.4458%" height="15" fill="rgb(247,221,28)" fg:x="785" fg:w="12"/><text x="29.4105%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (8 samples, 0.30%)</title><rect x="29.3091%" y="341" width="0.2972%" height="15" fill="rgb(251,222,45)" fg:x="789" fg:w="8"/><text x="29.5591%" y="351.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (3 samples, 0.11%)</title><rect x="29.4948%" y="325" width="0.1114%" height="15" fill="rgb(217,162,53)" fg:x="794" fg:w="3"/><text x="29.7448%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="29.6062%" y="421" width="0.1114%" height="15" fill="rgb(229,93,14)" fg:x="797" fg:w="3"/><text x="29.8562%" y="431.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.11%)</title><rect x="29.6062%" y="405" width="0.1114%" height="15" fill="rgb(209,67,49)" fg:x="797" fg:w="3"/><text x="29.8562%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.04%)</title><rect x="29.7177%" y="421" width="0.0371%" height="15" fill="rgb(213,87,29)" fg:x="800" fg:w="1"/><text x="29.9677%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.04%)</title><rect x="29.7177%" y="405" width="0.0371%" height="15" fill="rgb(205,151,52)" fg:x="800" fg:w="1"/><text x="29.9677%" y="415.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.04%)</title><rect x="29.7548%" y="421" width="0.0371%" height="15" fill="rgb(253,215,39)" fg:x="801" fg:w="1"/><text x="30.0048%" y="431.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::define_var (87 samples, 3.23%)</title><rect x="27.4889%" y="533" width="3.2318%" height="15" fill="rgb(221,220,41)" fg:x="740" fg:w="87"/><text x="27.7389%" y="543.50">sim..</text></g><g><title>simple_lisp::interpreter::Env::insert (82 samples, 3.05%)</title><rect x="27.6746%" y="517" width="3.0461%" height="15" fill="rgb(218,133,21)" fg:x="745" fg:w="82"/><text x="27.9246%" y="527.50">sim..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (53 samples, 1.97%)</title><rect x="28.7519%" y="501" width="1.9688%" height="15" fill="rgb(221,193,43)" fg:x="774" fg:w="53"/><text x="29.0019%" y="511.50">s..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (53 samples, 1.97%)</title><rect x="28.7519%" y="485" width="1.9688%" height="15" fill="rgb(240,128,52)" fg:x="774" fg:w="53"/><text x="29.0019%" y="495.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (53 samples, 1.97%)</title><rect x="28.7519%" y="469" width="1.9688%" height="15" fill="rgb(253,114,12)" fg:x="774" fg:w="53"/><text x="29.0019%" y="479.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (51 samples, 1.89%)</title><rect x="28.8262%" y="453" width="1.8945%" height="15" fill="rgb(215,223,47)" fg:x="776" fg:w="51"/><text x="29.0762%" y="463.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (30 samples, 1.11%)</title><rect x="29.6062%" y="437" width="1.1144%" height="15" fill="rgb(248,225,23)" fg:x="797" fg:w="30"/><text x="29.8562%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (25 samples, 0.93%)</title><rect x="29.7920%" y="421" width="0.9287%" height="15" fill="rgb(250,108,0)" fg:x="802" fg:w="25"/><text x="30.0420%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (25 samples, 0.93%)</title><rect x="29.7920%" y="405" width="0.9287%" height="15" fill="rgb(228,208,7)" fg:x="802" fg:w="25"/><text x="30.0420%" y="415.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (16 samples, 0.59%)</title><rect x="30.8692%" y="517" width="0.5944%" height="15" fill="rgb(244,45,10)" fg:x="831" fg:w="16"/><text x="31.1192%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (16 samples, 0.59%)</title><rect x="30.8692%" y="501" width="0.5944%" height="15" fill="rgb(207,125,25)" fg:x="831" fg:w="16"/><text x="31.1192%" y="511.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (6 samples, 0.22%)</title><rect x="31.9837%" y="501" width="0.2229%" height="15" fill="rgb(210,195,18)" fg:x="861" fg:w="6"/><text x="32.2337%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (6 samples, 0.22%)</title><rect x="31.9837%" y="485" width="0.2229%" height="15" fill="rgb(249,80,12)" fg:x="861" fg:w="6"/><text x="32.2337%" y="495.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::DataRef as core::clone::Clone&gt;::clone (42 samples, 1.56%)</title><rect x="32.2065%" y="501" width="1.5602%" height="15" fill="rgb(221,65,9)" fg:x="867" fg:w="42"/><text x="32.4565%" y="511.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="34.0639%" y="421" width="0.0371%" height="15" fill="rgb(235,49,36)" fg:x="917" fg:w="1"/><text x="34.3139%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (1 samples, 0.04%)</title><rect x="34.0639%" y="405" width="0.0371%" height="15" fill="rgb(225,32,20)" fg:x="917" fg:w="1"/><text x="34.3139%" y="415.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.07%)</title><rect x="34.0639%" y="453" width="0.0743%" height="15" fill="rgb(215,141,46)" fg:x="917" fg:w="2"/><text x="34.3139%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="34.0639%" y="437" width="0.0743%" height="15" fill="rgb(250,160,47)" fg:x="917" fg:w="2"/><text x="34.3139%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.04%)</title><rect x="34.1010%" y="421" width="0.0371%" height="15" fill="rgb(216,222,40)" fg:x="918" fg:w="1"/><text x="34.3510%" y="431.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::hash::Hash&gt;::hash (1 samples, 0.04%)</title><rect x="34.1010%" y="405" width="0.0371%" height="15" fill="rgb(234,217,39)" fg:x="918" fg:w="1"/><text x="34.3510%" y="415.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (1 samples, 0.04%)</title><rect x="34.1010%" y="389" width="0.0371%" height="15" fill="rgb(207,178,40)" fg:x="918" fg:w="1"/><text x="34.3510%" y="399.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (1 samples, 0.04%)</title><rect x="34.1010%" y="373" width="0.0371%" height="15" fill="rgb(221,136,13)" fg:x="918" fg:w="1"/><text x="34.3510%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (1 samples, 0.04%)</title><rect x="34.1010%" y="357" width="0.0371%" height="15" fill="rgb(249,199,10)" fg:x="918" fg:w="1"/><text x="34.3510%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.15%)</title><rect x="35.8098%" y="389" width="0.1486%" height="15" fill="rgb(249,222,13)" fg:x="964" fg:w="4"/><text x="36.0598%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.78%)</title><rect x="35.2155%" y="405" width="0.7801%" height="15" fill="rgb(244,185,38)" fg:x="948" fg:w="21"/><text x="35.4655%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.04%)</title><rect x="35.9584%" y="389" width="0.0371%" height="15" fill="rgb(236,202,9)" fg:x="968" fg:w="1"/><text x="36.2084%" y="399.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (12 samples, 0.45%)</title><rect x="35.9955%" y="389" width="0.4458%" height="15" fill="rgb(250,229,37)" fg:x="969" fg:w="12"/><text x="36.2455%" y="399.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (12 samples, 0.45%)</title><rect x="35.9955%" y="373" width="0.4458%" height="15" fill="rgb(206,174,23)" fg:x="969" fg:w="12"/><text x="36.2455%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12 samples, 0.45%)</title><rect x="35.9955%" y="357" width="0.4458%" height="15" fill="rgb(211,33,43)" fg:x="969" fg:w="12"/><text x="36.2455%" y="367.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::Ident as core::cmp::PartialEq&gt;::eq (12 samples, 0.45%)</title><rect x="35.9955%" y="341" width="0.4458%" height="15" fill="rgb(245,58,50)" fg:x="969" fg:w="12"/><text x="36.2455%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (31 samples, 1.15%)</title><rect x="35.9955%" y="405" width="1.1516%" height="15" fill="rgb(244,68,36)" fg:x="969" fg:w="31"/><text x="36.2455%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (19 samples, 0.71%)</title><rect x="36.4413%" y="389" width="0.7058%" height="15" fill="rgb(232,229,15)" fg:x="981" fg:w="19"/><text x="36.6913%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (19 samples, 0.71%)</title><rect x="36.4413%" y="373" width="0.7058%" height="15" fill="rgb(254,30,23)" fg:x="981" fg:w="19"/><text x="36.6913%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (19 samples, 0.71%)</title><rect x="36.4413%" y="357" width="0.7058%" height="15" fill="rgb(235,160,14)" fg:x="981" fg:w="19"/><text x="36.6913%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (19 samples, 0.71%)</title><rect x="36.4413%" y="341" width="0.7058%" height="15" fill="rgb(212,155,44)" fg:x="981" fg:w="19"/><text x="36.6913%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (10 samples, 0.37%)</title><rect x="37.1471%" y="405" width="0.3715%" height="15" fill="rgb(226,2,50)" fg:x="1000" fg:w="10"/><text x="37.3971%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (9 samples, 0.33%)</title><rect x="37.5186%" y="405" width="0.3343%" height="15" fill="rgb(234,177,6)" fg:x="1010" fg:w="9"/><text x="37.7686%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (9 samples, 0.33%)</title><rect x="37.5186%" y="389" width="0.3343%" height="15" fill="rgb(217,24,9)" fg:x="1010" fg:w="9"/><text x="37.7686%" y="399.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::get_var (196 samples, 7.28%)</title><rect x="30.7207%" y="533" width="7.2808%" height="15" fill="rgb(220,13,46)" fg:x="827" fg:w="196"/><text x="30.9707%" y="543.50">simple_lis..</text></g><g><title>simple_lisp::interpreter::Env::get (176 samples, 6.54%)</title><rect x="31.4636%" y="517" width="6.5379%" height="15" fill="rgb(239,221,27)" fg:x="847" fg:w="176"/><text x="31.7136%" y="527.50">simple_li..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (114 samples, 4.23%)</title><rect x="33.7667%" y="501" width="4.2348%" height="15" fill="rgb(222,198,25)" fg:x="909" fg:w="114"/><text x="34.0167%" y="511.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (114 samples, 4.23%)</title><rect x="33.7667%" y="485" width="4.2348%" height="15" fill="rgb(211,99,13)" fg:x="909" fg:w="114"/><text x="34.0167%" y="495.50">hashb..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (114 samples, 4.23%)</title><rect x="33.7667%" y="469" width="4.2348%" height="15" fill="rgb(232,111,31)" fg:x="909" fg:w="114"/><text x="34.0167%" y="479.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (104 samples, 3.86%)</title><rect x="34.1382%" y="453" width="3.8633%" height="15" fill="rgb(245,82,37)" fg:x="919" fg:w="104"/><text x="34.3882%" y="463.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (104 samples, 3.86%)</title><rect x="34.1382%" y="437" width="3.8633%" height="15" fill="rgb(227,149,46)" fg:x="919" fg:w="104"/><text x="34.3882%" y="447.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::find_inner (103 samples, 3.83%)</title><rect x="34.1753%" y="421" width="3.8262%" height="15" fill="rgb(218,36,50)" fg:x="920" fg:w="103"/><text x="34.4253%" y="431.50">hash..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (4 samples, 0.15%)</title><rect x="37.8529%" y="405" width="0.1486%" height="15" fill="rgb(226,80,48)" fg:x="1019" fg:w="4"/><text x="38.1029%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.15%)</title><rect x="37.8529%" y="389" width="0.1486%" height="15" fill="rgb(238,224,15)" fg:x="1019" fg:w="4"/><text x="38.1029%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.15%)</title><rect x="37.8529%" y="373" width="0.1486%" height="15" fill="rgb(241,136,10)" fg:x="1019" fg:w="4"/><text x="38.1029%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.04%)</title><rect x="38.0758%" y="517" width="0.0371%" height="15" fill="rgb(208,32,45)" fg:x="1025" fg:w="1"/><text x="38.3258%" y="527.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::pop (1 samples, 0.04%)</title><rect x="38.1129%" y="517" width="0.0371%" height="15" fill="rgb(207,135,9)" fg:x="1026" fg:w="1"/><text x="38.3629%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.04%)</title><rect x="38.1129%" y="501" width="0.0371%" height="15" fill="rgb(206,86,44)" fg:x="1026" fg:w="1"/><text x="38.3629%" y="511.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="38.1129%" y="485" width="0.0371%" height="15" fill="rgb(245,177,15)" fg:x="1026" fg:w="1"/><text x="38.3629%" y="495.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (1 samples, 0.04%)</title><rect x="38.1501%" y="517" width="0.0371%" height="15" fill="rgb(206,64,50)" fg:x="1027" fg:w="1"/><text x="38.4001%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="38.1501%" y="501" width="0.0371%" height="15" fill="rgb(234,36,40)" fg:x="1027" fg:w="1"/><text x="38.4001%" y="511.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="38.1501%" y="485" width="0.0371%" height="15" fill="rgb(213,64,8)" fg:x="1027" fg:w="1"/><text x="38.4001%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="38.2987%" y="437" width="0.0743%" height="15" fill="rgb(210,75,36)" fg:x="1031" fg:w="2"/><text x="38.5487%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.19%)</title><rect x="38.2987%" y="501" width="0.1857%" height="15" fill="rgb(229,88,21)" fg:x="1031" fg:w="5"/><text x="38.5487%" y="511.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.19%)</title><rect x="38.2987%" y="485" width="0.1857%" height="15" fill="rgb(252,204,47)" fg:x="1031" fg:w="5"/><text x="38.5487%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.19%)</title><rect x="38.2987%" y="469" width="0.1857%" height="15" fill="rgb(208,77,27)" fg:x="1031" fg:w="5"/><text x="38.5487%" y="479.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (5 samples, 0.19%)</title><rect x="38.2987%" y="453" width="0.1857%" height="15" fill="rgb(221,76,26)" fg:x="1031" fg:w="5"/><text x="38.5487%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (3 samples, 0.11%)</title><rect x="38.3730%" y="437" width="0.1114%" height="15" fill="rgb(225,139,18)" fg:x="1033" fg:w="3"/><text x="38.6230%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.11%)</title><rect x="38.3730%" y="421" width="0.1114%" height="15" fill="rgb(230,137,11)" fg:x="1033" fg:w="3"/><text x="38.6230%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.11%)</title><rect x="38.3730%" y="405" width="0.1114%" height="15" fill="rgb(212,28,1)" fg:x="1033" fg:w="3"/><text x="38.6230%" y="415.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="38.6330%" y="469" width="0.1114%" height="15" fill="rgb(248,164,17)" fg:x="1040" fg:w="3"/><text x="38.8830%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="38.6330%" y="453" width="0.1114%" height="15" fill="rgb(222,171,42)" fg:x="1040" fg:w="3"/><text x="38.8830%" y="463.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.11%)</title><rect x="38.6330%" y="437" width="0.1114%" height="15" fill="rgb(243,84,45)" fg:x="1040" fg:w="3"/><text x="38.8830%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 0.30%)</title><rect x="38.4844%" y="501" width="0.2972%" height="15" fill="rgb(252,49,23)" fg:x="1036" fg:w="8"/><text x="38.7344%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.15%)</title><rect x="38.6330%" y="485" width="0.1486%" height="15" fill="rgb(215,19,7)" fg:x="1040" fg:w="4"/><text x="38.8830%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.04%)</title><rect x="38.7444%" y="469" width="0.0371%" height="15" fill="rgb(238,81,41)" fg:x="1043" fg:w="1"/><text x="38.9944%" y="479.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.04%)</title><rect x="38.7444%" y="453" width="0.0371%" height="15" fill="rgb(210,199,37)" fg:x="1043" fg:w="1"/><text x="38.9944%" y="463.50"></text></g><g><title>core::mem::drop (1 samples, 0.04%)</title><rect x="38.7444%" y="437" width="0.0371%" height="15" fill="rgb(244,192,49)" fg:x="1043" fg:w="1"/><text x="38.9944%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::ExternalData&gt; (1 samples, 0.04%)</title><rect x="38.7444%" y="421" width="0.0371%" height="15" fill="rgb(226,211,11)" fg:x="1043" fg:w="1"/><text x="38.9944%" y="431.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::ExternalData as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="38.7444%" y="405" width="0.0371%" height="15" fill="rgb(236,162,54)" fg:x="1043" fg:w="1"/><text x="38.9944%" y="415.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::unset_external (1 samples, 0.04%)</title><rect x="38.7444%" y="389" width="0.0371%" height="15" fill="rgb(220,229,9)" fg:x="1043" fg:w="1"/><text x="38.9944%" y="399.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.04%)</title><rect x="38.7444%" y="373" width="0.0371%" height="15" fill="rgb(250,87,22)" fg:x="1043" fg:w="1"/><text x="38.9944%" y="383.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.04%)</title><rect x="38.7444%" y="357" width="0.0371%" height="15" fill="rgb(239,43,17)" fg:x="1043" fg:w="1"/><text x="38.9944%" y="367.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.04%)</title><rect x="38.7444%" y="341" width="0.0371%" height="15" fill="rgb(231,177,25)" fg:x="1043" fg:w="1"/><text x="38.9944%" y="351.50"></text></g><g><title>__rust_dealloc (1 samples, 0.04%)</title><rect x="38.8187%" y="309" width="0.0371%" height="15" fill="rgb(219,179,1)" fg:x="1045" fg:w="1"/><text x="39.0687%" y="319.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::clear (5 samples, 0.19%)</title><rect x="38.7816%" y="501" width="0.1857%" height="15" fill="rgb(238,219,53)" fg:x="1044" fg:w="5"/><text x="39.0316%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::clear (5 samples, 0.19%)</title><rect x="38.7816%" y="485" width="0.1857%" height="15" fill="rgb(232,167,36)" fg:x="1044" fg:w="5"/><text x="39.0316%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;]&gt; (5 samples, 0.19%)</title><rect x="38.7816%" y="469" width="0.1857%" height="15" fill="rgb(244,19,51)" fg:x="1044" fg:w="5"/><text x="39.0316%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (5 samples, 0.19%)</title><rect x="38.7816%" y="453" width="0.1857%" height="15" fill="rgb(224,6,22)" fg:x="1044" fg:w="5"/><text x="39.0316%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;simple_lisp::interpreter::ast::Ident,rustc_hash::FxBuildHasher&gt;&gt; (5 samples, 0.19%)</title><rect x="38.7816%" y="437" width="0.1857%" height="15" fill="rgb(224,145,5)" fg:x="1044" fg:w="5"/><text x="39.0316%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;simple_lisp::interpreter::ast::Ident,(),rustc_hash::FxBuildHasher&gt;&gt; (5 samples, 0.19%)</title><rect x="38.7816%" y="421" width="0.1857%" height="15" fill="rgb(234,130,49)" fg:x="1044" fg:w="5"/><text x="39.0316%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(simple_lisp::interpreter::ast::Ident,())&gt;&gt; (5 samples, 0.19%)</title><rect x="38.7816%" y="405" width="0.1857%" height="15" fill="rgb(254,6,2)" fg:x="1044" fg:w="5"/><text x="39.0316%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.19%)</title><rect x="38.7816%" y="389" width="0.1857%" height="15" fill="rgb(208,96,46)" fg:x="1044" fg:w="5"/><text x="39.0316%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (5 samples, 0.19%)</title><rect x="38.7816%" y="373" width="0.1857%" height="15" fill="rgb(239,3,39)" fg:x="1044" fg:w="5"/><text x="39.0316%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (4 samples, 0.15%)</title><rect x="38.8187%" y="357" width="0.1486%" height="15" fill="rgb(233,210,1)" fg:x="1045" fg:w="4"/><text x="39.0687%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.15%)</title><rect x="38.8187%" y="341" width="0.1486%" height="15" fill="rgb(244,137,37)" fg:x="1045" fg:w="4"/><text x="39.0687%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.15%)</title><rect x="38.8187%" y="325" width="0.1486%" height="15" fill="rgb(240,136,2)" fg:x="1045" fg:w="4"/><text x="39.0687%" y="335.50"></text></g><g><title>cfree (3 samples, 0.11%)</title><rect x="38.8559%" y="309" width="0.1114%" height="15" fill="rgb(239,18,37)" fg:x="1046" fg:w="3"/><text x="39.1059%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="38.9302%" y="293" width="0.0371%" height="15" fill="rgb(218,185,22)" fg:x="1048" fg:w="1"/><text x="39.1802%" y="303.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::len (3 samples, 0.11%)</title><rect x="38.9673%" y="501" width="0.1114%" height="15" fill="rgb(225,218,4)" fg:x="1049" fg:w="3"/><text x="39.2173%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.11%)</title><rect x="38.9673%" y="485" width="0.1114%" height="15" fill="rgb(230,182,32)" fg:x="1049" fg:w="3"/><text x="39.2173%" y="495.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::pop_env (32 samples, 1.19%)</title><rect x="38.0015%" y="533" width="1.1887%" height="15" fill="rgb(242,56,43)" fg:x="1023" fg:w="32"/><text x="38.2515%" y="543.50"></text></g><g><title>simple_lisp::interpreter::Env::clear (27 samples, 1.00%)</title><rect x="38.1872%" y="517" width="1.0030%" height="15" fill="rgb(233,99,24)" fg:x="1028" fg:w="27"/><text x="38.4372%" y="527.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter_mut (3 samples, 0.11%)</title><rect x="39.0788%" y="501" width="0.1114%" height="15" fill="rgb(234,209,42)" fg:x="1052" fg:w="3"/><text x="39.3288%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter_mut (3 samples, 0.11%)</title><rect x="39.0788%" y="485" width="0.1114%" height="15" fill="rgb(227,7,12)" fg:x="1052" fg:w="3"/><text x="39.3288%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (3 samples, 0.11%)</title><rect x="39.0788%" y="469" width="0.1114%" height="15" fill="rgb(245,203,43)" fg:x="1052" fg:w="3"/><text x="39.3288%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (3 samples, 0.11%)</title><rect x="39.0788%" y="453" width="0.1114%" height="15" fill="rgb(238,205,33)" fg:x="1052" fg:w="3"/><text x="39.3288%" y="463.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (3 samples, 0.11%)</title><rect x="39.0788%" y="437" width="0.1114%" height="15" fill="rgb(231,56,7)" fg:x="1052" fg:w="3"/><text x="39.3288%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (3 samples, 0.11%)</title><rect x="39.0788%" y="421" width="0.1114%" height="15" fill="rgb(244,186,29)" fg:x="1052" fg:w="3"/><text x="39.3288%" y="431.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (3 samples, 0.11%)</title><rect x="39.0788%" y="405" width="0.1114%" height="15" fill="rgb(234,111,31)" fg:x="1052" fg:w="3"/><text x="39.3288%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="39.2273%" y="501" width="0.0371%" height="15" fill="rgb(241,149,10)" fg:x="1056" fg:w="1"/><text x="39.4773%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="39.2273%" y="485" width="0.0371%" height="15" fill="rgb(249,206,44)" fg:x="1056" fg:w="1"/><text x="39.4773%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="39.2273%" y="469" width="0.0371%" height="15" fill="rgb(251,153,30)" fg:x="1056" fg:w="1"/><text x="39.4773%" y="479.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::pop_from_scope (4 samples, 0.15%)</title><rect x="39.1902%" y="533" width="0.1486%" height="15" fill="rgb(239,152,38)" fg:x="1055" fg:w="4"/><text x="39.4402%" y="543.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (3 samples, 0.11%)</title><rect x="39.2273%" y="517" width="0.1114%" height="15" fill="rgb(249,139,47)" fg:x="1056" fg:w="3"/><text x="39.4773%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (2 samples, 0.07%)</title><rect x="39.2645%" y="501" width="0.0743%" height="15" fill="rgb(244,64,35)" fg:x="1057" fg:w="2"/><text x="39.5145%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="39.8960%" y="501" width="0.0743%" height="15" fill="rgb(216,46,15)" fg:x="1074" fg:w="2"/><text x="40.1460%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.07%)</title><rect x="39.8960%" y="485" width="0.0743%" height="15" fill="rgb(250,74,19)" fg:x="1074" fg:w="2"/><text x="40.1460%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="39.8960%" y="469" width="0.0743%" height="15" fill="rgb(249,42,33)" fg:x="1074" fg:w="2"/><text x="40.1460%" y="479.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (9 samples, 0.33%)</title><rect x="39.8960%" y="517" width="0.3343%" height="15" fill="rgb(242,149,17)" fg:x="1074" fg:w="9"/><text x="40.1460%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (7 samples, 0.26%)</title><rect x="39.9703%" y="501" width="0.2600%" height="15" fill="rgb(244,29,21)" fg:x="1076" fg:w="7"/><text x="40.2203%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="41.0475%" y="469" width="0.0371%" height="15" fill="rgb(220,130,37)" fg:x="1105" fg:w="1"/><text x="41.2975%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="41.0847%" y="469" width="0.0371%" height="15" fill="rgb(211,67,2)" fg:x="1106" fg:w="1"/><text x="41.3347%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.04%)</title><rect x="41.1218%" y="469" width="0.0371%" height="15" fill="rgb(235,68,52)" fg:x="1107" fg:w="1"/><text x="41.3718%" y="479.50"></text></g><g><title>__rust_alloc (2 samples, 0.07%)</title><rect x="41.6790%" y="453" width="0.0743%" height="15" fill="rgb(246,142,3)" fg:x="1122" fg:w="2"/><text x="41.9290%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.04%)</title><rect x="41.7533%" y="453" width="0.0371%" height="15" fill="rgb(241,25,7)" fg:x="1124" fg:w="1"/><text x="42.0033%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (61 samples, 2.27%)</title><rect x="41.1590%" y="469" width="2.2660%" height="15" fill="rgb(242,119,39)" fg:x="1108" fg:w="61"/><text x="41.4090%" y="479.50">a..</text></g><g><title>malloc (44 samples, 1.63%)</title><rect x="41.7905%" y="453" width="1.6345%" height="15" fill="rgb(241,98,45)" fg:x="1125" fg:w="44"/><text x="42.0405%" y="463.50"></text></g><g><title>[libc.so.6] (15 samples, 0.56%)</title><rect x="42.8678%" y="437" width="0.5572%" height="15" fill="rgb(254,28,30)" fg:x="1154" fg:w="15"/><text x="43.1178%" y="447.50"></text></g><g><title>core::cmp::max (10 samples, 0.37%)</title><rect x="43.4250%" y="469" width="0.3715%" height="15" fill="rgb(241,142,54)" fg:x="1169" fg:w="10"/><text x="43.6750%" y="479.50"></text></g><g><title>core::cmp::Ord::max (10 samples, 0.37%)</title><rect x="43.4250%" y="453" width="0.3715%" height="15" fill="rgb(222,85,15)" fg:x="1169" fg:w="10"/><text x="43.6750%" y="463.50"></text></g><g><title>core::cmp::max_by (10 samples, 0.37%)</title><rect x="43.4250%" y="437" width="0.3715%" height="15" fill="rgb(210,85,47)" fg:x="1169" fg:w="10"/><text x="43.6750%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (76 samples, 2.82%)</title><rect x="41.0104%" y="501" width="2.8232%" height="15" fill="rgb(224,206,25)" fg:x="1104" fg:w="76"/><text x="41.2604%" y="511.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (76 samples, 2.82%)</title><rect x="41.0104%" y="485" width="2.8232%" height="15" fill="rgb(243,201,19)" fg:x="1104" fg:w="76"/><text x="41.2604%" y="495.50">al..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.04%)</title><rect x="43.7964%" y="469" width="0.0371%" height="15" fill="rgb(236,59,4)" fg:x="1179" fg:w="1"/><text x="44.0464%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.04%)</title><rect x="43.7964%" y="453" width="0.0371%" height="15" fill="rgb(254,179,45)" fg:x="1179" fg:w="1"/><text x="44.0464%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.15%)</title><rect x="43.8336%" y="501" width="0.1486%" height="15" fill="rgb(226,14,10)" fg:x="1180" fg:w="4"/><text x="44.0836%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.15%)</title><rect x="43.8336%" y="485" width="0.1486%" height="15" fill="rgb(244,27,41)" fg:x="1180" fg:w="4"/><text x="44.0836%" y="495.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_dr_to_scope (131 samples, 4.87%)</title><rect x="39.3388%" y="533" width="4.8663%" height="15" fill="rgb(235,35,32)" fg:x="1059" fg:w="131"/><text x="39.5888%" y="543.50">simple..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (107 samples, 3.97%)</title><rect x="40.2303%" y="517" width="3.9747%" height="15" fill="rgb(218,68,31)" fg:x="1083" fg:w="107"/><text x="40.4803%" y="527.50">allo..</text></g><g><title>core::ptr::write (6 samples, 0.22%)</title><rect x="43.9822%" y="501" width="0.2229%" height="15" fill="rgb(207,120,37)" fg:x="1184" fg:w="6"/><text x="44.2322%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (1 samples, 0.04%)</title><rect x="44.2051%" y="517" width="0.0371%" height="15" fill="rgb(227,98,0)" fg:x="1190" fg:w="1"/><text x="44.4551%" y="527.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_env (11 samples, 0.41%)</title><rect x="44.2051%" y="533" width="0.4086%" height="15" fill="rgb(207,7,3)" fg:x="1190" fg:w="11"/><text x="44.4551%" y="543.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (10 samples, 0.37%)</title><rect x="44.2422%" y="517" width="0.3715%" height="15" fill="rgb(206,98,19)" fg:x="1191" fg:w="10"/><text x="44.4922%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10 samples, 0.37%)</title><rect x="44.2422%" y="501" width="0.3715%" height="15" fill="rgb(217,5,26)" fg:x="1191" fg:w="10"/><text x="44.4922%" y="511.50"></text></g><g><title>core::ptr::write (10 samples, 0.37%)</title><rect x="44.2422%" y="485" width="0.3715%" height="15" fill="rgb(235,190,38)" fg:x="1191" fg:w="10"/><text x="44.4922%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="44.6137%" y="501" width="0.0743%" height="15" fill="rgb(247,86,24)" fg:x="1201" fg:w="2"/><text x="44.8637%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.07%)</title><rect x="44.6137%" y="485" width="0.0743%" height="15" fill="rgb(205,101,16)" fg:x="1201" fg:w="2"/><text x="44.8637%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="44.6137%" y="469" width="0.0743%" height="15" fill="rgb(246,168,33)" fg:x="1201" fg:w="2"/><text x="44.8637%" y="479.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (3 samples, 0.11%)</title><rect x="44.6137%" y="517" width="0.1114%" height="15" fill="rgb(231,114,1)" fg:x="1201" fg:w="3"/><text x="44.8637%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (1 samples, 0.04%)</title><rect x="44.6880%" y="501" width="0.0371%" height="15" fill="rgb(207,184,53)" fg:x="1203" fg:w="1"/><text x="44.9380%" y="511.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_env_scope (23 samples, 0.85%)</title><rect x="44.6137%" y="533" width="0.8544%" height="15" fill="rgb(224,95,51)" fg:x="1201" fg:w="23"/><text x="44.8637%" y="543.50"></text></g><g><title>simple_lisp::interpreter::Env::push_scope (20 samples, 0.74%)</title><rect x="44.7251%" y="517" width="0.7429%" height="15" fill="rgb(212,188,45)" fg:x="1204" fg:w="20"/><text x="44.9751%" y="527.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (20 samples, 0.74%)</title><rect x="44.7251%" y="501" width="0.7429%" height="15" fill="rgb(223,154,38)" fg:x="1204" fg:w="20"/><text x="44.9751%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (20 samples, 0.74%)</title><rect x="44.7251%" y="485" width="0.7429%" height="15" fill="rgb(251,22,52)" fg:x="1204" fg:w="20"/><text x="44.9751%" y="495.50"></text></g><g><title>core::ptr::write (7 samples, 0.26%)</title><rect x="45.2080%" y="469" width="0.2600%" height="15" fill="rgb(229,209,22)" fg:x="1217" fg:w="7"/><text x="45.4580%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (7 samples, 0.26%)</title><rect x="47.1025%" y="405" width="0.2600%" height="15" fill="rgb(234,138,34)" fg:x="1268" fg:w="7"/><text x="47.3525%" y="415.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (10 samples, 0.37%)</title><rect x="47.1025%" y="421" width="0.3715%" height="15" fill="rgb(212,95,11)" fg:x="1268" fg:w="10"/><text x="47.3525%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.11%)</title><rect x="47.3626%" y="405" width="0.1114%" height="15" fill="rgb(240,179,47)" fg:x="1275" fg:w="3"/><text x="47.6126%" y="415.50"></text></g><g><title>core::ptr::write (3 samples, 0.11%)</title><rect x="47.3626%" y="389" width="0.1114%" height="15" fill="rgb(240,163,11)" fg:x="1275" fg:w="3"/><text x="47.6126%" y="399.50"></text></g><g><title>hashbrown::raw::inner::h2 (5 samples, 0.19%)</title><rect x="47.6969%" y="373" width="0.1857%" height="15" fill="rgb(236,37,12)" fg:x="1284" fg:w="5"/><text x="47.9469%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (12 samples, 0.45%)</title><rect x="47.4740%" y="405" width="0.4458%" height="15" fill="rgb(232,164,16)" fg:x="1278" fg:w="12"/><text x="47.7240%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (12 samples, 0.45%)</title><rect x="47.4740%" y="389" width="0.4458%" height="15" fill="rgb(244,205,15)" fg:x="1278" fg:w="12"/><text x="47.7240%" y="399.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="47.8826%" y="373" width="0.0371%" height="15" fill="rgb(223,117,47)" fg:x="1289" fg:w="1"/><text x="48.1326%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="47.8826%" y="357" width="0.0371%" height="15" fill="rgb(244,107,35)" fg:x="1289" fg:w="1"/><text x="48.1326%" y="367.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (34 samples, 1.26%)</title><rect x="46.8425%" y="485" width="1.2630%" height="15" fill="rgb(205,140,8)" fg:x="1261" fg:w="34"/><text x="47.0925%" y="495.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (34 samples, 1.26%)</title><rect x="46.8425%" y="469" width="1.2630%" height="15" fill="rgb(228,84,46)" fg:x="1261" fg:w="34"/><text x="47.0925%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (32 samples, 1.19%)</title><rect x="46.9168%" y="453" width="1.1887%" height="15" fill="rgb(254,188,9)" fg:x="1263" fg:w="32"/><text x="47.1668%" y="463.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (27 samples, 1.00%)</title><rect x="47.1025%" y="437" width="1.0030%" height="15" fill="rgb(206,112,54)" fg:x="1268" fg:w="27"/><text x="47.3525%" y="447.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (17 samples, 0.63%)</title><rect x="47.4740%" y="421" width="0.6315%" height="15" fill="rgb(216,84,49)" fg:x="1278" fg:w="17"/><text x="47.7240%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (5 samples, 0.19%)</title><rect x="47.9198%" y="405" width="0.1857%" height="15" fill="rgb(214,194,35)" fg:x="1290" fg:w="5"/><text x="48.1698%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (5 samples, 0.19%)</title><rect x="47.9198%" y="389" width="0.1857%" height="15" fill="rgb(249,28,3)" fg:x="1290" fg:w="5"/><text x="48.1698%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (2 samples, 0.07%)</title><rect x="48.0312%" y="373" width="0.0743%" height="15" fill="rgb(222,56,52)" fg:x="1293" fg:w="2"/><text x="48.2812%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (2 samples, 0.07%)</title><rect x="48.0312%" y="357" width="0.0743%" height="15" fill="rgb(245,217,50)" fg:x="1293" fg:w="2"/><text x="48.2812%" y="367.50"></text></g><g><title>__rdl_alloc (6 samples, 0.22%)</title><rect x="50.1857%" y="453" width="0.2229%" height="15" fill="rgb(213,201,24)" fg:x="1351" fg:w="6"/><text x="50.4357%" y="463.50"></text></g><g><title>__rust_alloc (12 samples, 0.45%)</title><rect x="50.4086%" y="453" width="0.4458%" height="15" fill="rgb(248,116,28)" fg:x="1357" fg:w="12"/><text x="50.6586%" y="463.50"></text></g><g><title>alloc::alloc::alloc (154 samples, 5.72%)</title><rect x="50.0371%" y="469" width="5.7207%" height="15" fill="rgb(219,72,43)" fg:x="1347" fg:w="154"/><text x="50.2871%" y="479.50">alloc::..</text></g><g><title>malloc (132 samples, 4.90%)</title><rect x="50.8544%" y="453" width="4.9034%" height="15" fill="rgb(209,138,14)" fg:x="1369" fg:w="132"/><text x="51.1044%" y="463.50">malloc</text></g><g><title>[libc.so.6] (37 samples, 1.37%)</title><rect x="54.3834%" y="437" width="1.3744%" height="15" fill="rgb(222,18,33)" fg:x="1464" fg:w="37"/><text x="54.6334%" y="447.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="55.7578%" y="469" width="0.0371%" height="15" fill="rgb(213,199,7)" fg:x="1501" fg:w="1"/><text x="56.0078%" y="479.50"></text></g><g><title>core::ptr::write (13 samples, 0.48%)</title><rect x="55.7949%" y="469" width="0.4829%" height="15" fill="rgb(250,110,10)" fg:x="1502" fg:w="13"/><text x="56.0449%" y="479.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::push_to_scope (295 samples, 10.96%)</title><rect x="45.4681%" y="533" width="10.9584%" height="15" fill="rgb(248,123,6)" fg:x="1224" fg:w="295"/><text x="45.7181%" y="543.50">simple_lisp::int..</text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (295 samples, 10.96%)</title><rect x="45.4681%" y="517" width="10.9584%" height="15" fill="rgb(206,91,31)" fg:x="1224" fg:w="295"/><text x="45.7181%" y="527.50">simple_lisp::int..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (290 samples, 10.77%)</title><rect x="45.6538%" y="501" width="10.7727%" height="15" fill="rgb(211,154,13)" fg:x="1229" fg:w="290"/><text x="45.9038%" y="511.50">simple_lisp::int..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (224 samples, 8.32%)</title><rect x="48.1055%" y="485" width="8.3210%" height="15" fill="rgb(225,148,7)" fg:x="1295" fg:w="224"/><text x="48.3555%" y="495.50">simple_lisp:..</text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (4 samples, 0.15%)</title><rect x="56.2779%" y="469" width="0.1486%" height="15" fill="rgb(220,160,43)" fg:x="1515" fg:w="4"/><text x="56.5279%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.15%)</title><rect x="56.2779%" y="453" width="0.1486%" height="15" fill="rgb(213,52,39)" fg:x="1515" fg:w="4"/><text x="56.5279%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.15%)</title><rect x="56.2779%" y="437" width="0.1486%" height="15" fill="rgb(243,137,7)" fg:x="1515" fg:w="4"/><text x="56.5279%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (4 samples, 0.15%)</title><rect x="56.2779%" y="421" width="0.1486%" height="15" fill="rgb(230,79,13)" fg:x="1515" fg:w="4"/><text x="56.5279%" y="431.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (4 samples, 0.15%)</title><rect x="56.2779%" y="405" width="0.1486%" height="15" fill="rgb(247,105,23)" fg:x="1515" fg:w="4"/><text x="56.5279%" y="415.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (4 samples, 0.15%)</title><rect x="56.2779%" y="389" width="0.1486%" height="15" fill="rgb(223,179,41)" fg:x="1515" fg:w="4"/><text x="56.5279%" y="399.50"></text></g><g><title>core::cell::BorrowRefMut::new (4 samples, 0.15%)</title><rect x="56.2779%" y="373" width="0.1486%" height="15" fill="rgb(218,9,34)" fg:x="1515" fg:w="4"/><text x="56.5279%" y="383.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="56.6122%" y="485" width="0.0371%" height="15" fill="rgb(222,106,8)" fg:x="1524" fg:w="1"/><text x="56.8622%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="56.6122%" y="469" width="0.0371%" height="15" fill="rgb(211,220,0)" fg:x="1524" fg:w="1"/><text x="56.8622%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="56.6122%" y="517" width="0.0743%" height="15" fill="rgb(229,52,16)" fg:x="1524" fg:w="2"/><text x="56.8622%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2 samples, 0.07%)</title><rect x="56.6122%" y="501" width="0.0743%" height="15" fill="rgb(212,155,18)" fg:x="1524" fg:w="2"/><text x="56.8622%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="56.6493%" y="485" width="0.0371%" height="15" fill="rgb(242,21,14)" fg:x="1525" fg:w="1"/><text x="56.8993%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.11%)</title><rect x="56.6865%" y="517" width="0.1114%" height="15" fill="rgb(222,19,48)" fg:x="1526" fg:w="3"/><text x="56.9365%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.11%)</title><rect x="56.6865%" y="501" width="0.1114%" height="15" fill="rgb(232,45,27)" fg:x="1526" fg:w="3"/><text x="56.9365%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (3 samples, 0.11%)</title><rect x="56.6865%" y="485" width="0.1114%" height="15" fill="rgb(249,103,42)" fg:x="1526" fg:w="3"/><text x="56.9365%" y="495.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (1 samples, 0.04%)</title><rect x="56.7608%" y="469" width="0.0371%" height="15" fill="rgb(246,81,33)" fg:x="1528" fg:w="1"/><text x="57.0108%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.04%)</title><rect x="56.7608%" y="453" width="0.0371%" height="15" fill="rgb(252,33,42)" fg:x="1528" fg:w="1"/><text x="57.0108%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (1 samples, 0.04%)</title><rect x="56.7608%" y="437" width="0.0371%" height="15" fill="rgb(209,212,41)" fg:x="1528" fg:w="1"/><text x="57.0108%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.26%)</title><rect x="56.7979%" y="421" width="0.2600%" height="15" fill="rgb(207,154,6)" fg:x="1529" fg:w="7"/><text x="57.0479%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.26%)</title><rect x="56.7979%" y="405" width="0.2600%" height="15" fill="rgb(223,64,47)" fg:x="1529" fg:w="7"/><text x="57.0479%" y="415.50"></text></g><g><title>cfree (7 samples, 0.26%)</title><rect x="56.7979%" y="389" width="0.2600%" height="15" fill="rgb(211,161,38)" fg:x="1529" fg:w="7"/><text x="57.0479%" y="399.50"></text></g><g><title>[libc.so.6] (6 samples, 0.22%)</title><rect x="56.8351%" y="373" width="0.2229%" height="15" fill="rgb(219,138,40)" fg:x="1530" fg:w="6"/><text x="57.0851%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (8 samples, 0.30%)</title><rect x="56.7979%" y="517" width="0.2972%" height="15" fill="rgb(241,228,46)" fg:x="1529" fg:w="8"/><text x="57.0479%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.30%)</title><rect x="56.7979%" y="501" width="0.2972%" height="15" fill="rgb(223,209,38)" fg:x="1529" fg:w="8"/><text x="57.0479%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (8 samples, 0.30%)</title><rect x="56.7979%" y="485" width="0.2972%" height="15" fill="rgb(236,164,45)" fg:x="1529" fg:w="8"/><text x="57.0479%" y="495.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.30%)</title><rect x="56.7979%" y="469" width="0.2972%" height="15" fill="rgb(231,15,5)" fg:x="1529" fg:w="8"/><text x="57.0479%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (8 samples, 0.30%)</title><rect x="56.7979%" y="453" width="0.2972%" height="15" fill="rgb(252,35,15)" fg:x="1529" fg:w="8"/><text x="57.0479%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.30%)</title><rect x="56.7979%" y="437" width="0.2972%" height="15" fill="rgb(248,181,18)" fg:x="1529" fg:w="8"/><text x="57.0479%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="57.0579%" y="421" width="0.0371%" height="15" fill="rgb(233,39,42)" fg:x="1536" fg:w="1"/><text x="57.3079%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="57.2065%" y="405" width="0.0371%" height="15" fill="rgb(238,110,33)" fg:x="1540" fg:w="1"/><text x="57.4565%" y="415.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (2 samples, 0.07%)</title><rect x="57.2065%" y="421" width="0.0743%" height="15" fill="rgb(233,195,10)" fg:x="1540" fg:w="2"/><text x="57.4565%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="57.2437%" y="405" width="0.0371%" height="15" fill="rgb(254,105,3)" fg:x="1541" fg:w="1"/><text x="57.4937%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.07%)</title><rect x="57.2808%" y="405" width="0.0743%" height="15" fill="rgb(221,225,9)" fg:x="1542" fg:w="2"/><text x="57.5308%" y="415.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (8 samples, 0.30%)</title><rect x="57.1694%" y="485" width="0.2972%" height="15" fill="rgb(224,227,45)" fg:x="1539" fg:w="8"/><text x="57.4194%" y="495.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (8 samples, 0.30%)</title><rect x="57.1694%" y="469" width="0.2972%" height="15" fill="rgb(229,198,43)" fg:x="1539" fg:w="8"/><text x="57.4194%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (7 samples, 0.26%)</title><rect x="57.2065%" y="453" width="0.2600%" height="15" fill="rgb(206,209,35)" fg:x="1540" fg:w="7"/><text x="57.4565%" y="463.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (7 samples, 0.26%)</title><rect x="57.2065%" y="437" width="0.2600%" height="15" fill="rgb(245,195,53)" fg:x="1540" fg:w="7"/><text x="57.4565%" y="447.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (5 samples, 0.19%)</title><rect x="57.2808%" y="421" width="0.1857%" height="15" fill="rgb(240,92,26)" fg:x="1542" fg:w="5"/><text x="57.5308%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3 samples, 0.11%)</title><rect x="57.3551%" y="405" width="0.1114%" height="15" fill="rgb(207,40,23)" fg:x="1544" fg:w="3"/><text x="57.6051%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (3 samples, 0.11%)</title><rect x="57.3551%" y="389" width="0.1114%" height="15" fill="rgb(223,111,35)" fg:x="1544" fg:w="3"/><text x="57.6051%" y="399.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="57.4294%" y="373" width="0.0371%" height="15" fill="rgb(229,147,28)" fg:x="1546" fg:w="1"/><text x="57.6794%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="57.4294%" y="357" width="0.0371%" height="15" fill="rgb(211,29,28)" fg:x="1546" fg:w="1"/><text x="57.6794%" y="367.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="57.5409%" y="453" width="0.0371%" height="15" fill="rgb(228,72,33)" fg:x="1549" fg:w="1"/><text x="57.7909%" y="463.50"></text></g><g><title>alloc::alloc::alloc (53 samples, 1.97%)</title><rect x="57.5409%" y="469" width="1.9688%" height="15" fill="rgb(205,214,31)" fg:x="1549" fg:w="53"/><text x="57.7909%" y="479.50">a..</text></g><g><title>malloc (52 samples, 1.93%)</title><rect x="57.5780%" y="453" width="1.9316%" height="15" fill="rgb(224,111,15)" fg:x="1550" fg:w="52"/><text x="57.8280%" y="463.50">m..</text></g><g><title>[libc.so.6] (6 samples, 0.22%)</title><rect x="59.2868%" y="437" width="0.2229%" height="15" fill="rgb(253,21,26)" fg:x="1596" fg:w="6"/><text x="59.5368%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (1 samples, 0.04%)</title><rect x="59.5097%" y="469" width="0.0371%" height="15" fill="rgb(245,139,43)" fg:x="1602" fg:w="1"/><text x="59.7597%" y="479.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (68 samples, 2.53%)</title><rect x="57.0951%" y="517" width="2.5260%" height="15" fill="rgb(252,170,7)" fg:x="1537" fg:w="68"/><text x="57.3451%" y="527.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (67 samples, 2.49%)</title><rect x="57.1322%" y="501" width="2.4889%" height="15" fill="rgb(231,118,14)" fg:x="1538" fg:w="67"/><text x="57.3822%" y="511.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (58 samples, 2.15%)</title><rect x="57.4666%" y="485" width="2.1545%" height="15" fill="rgb(238,83,0)" fg:x="1547" fg:w="58"/><text x="57.7166%" y="495.50">s..</text></g><g><title>core::ptr::write (2 samples, 0.07%)</title><rect x="59.5468%" y="469" width="0.0743%" height="15" fill="rgb(221,39,39)" fg:x="1603" fg:w="2"/><text x="59.7968%" y="479.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="59.6954%" y="501" width="0.0371%" height="15" fill="rgb(222,119,46)" fg:x="1607" fg:w="1"/><text x="59.9454%" y="511.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::Index&lt;usize&gt;&gt;::index (2 samples, 0.07%)</title><rect x="59.8068%" y="485" width="0.0743%" height="15" fill="rgb(222,165,49)" fg:x="1610" fg:w="2"/><text x="60.0568%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.04%)</title><rect x="59.8440%" y="469" width="0.0371%" height="15" fill="rgb(219,113,52)" fg:x="1611" fg:w="1"/><text x="60.0940%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="59.8440%" y="453" width="0.0371%" height="15" fill="rgb(214,7,15)" fg:x="1611" fg:w="1"/><text x="60.0940%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="59.8440%" y="437" width="0.0371%" height="15" fill="rgb(235,32,4)" fg:x="1611" fg:w="1"/><text x="60.0940%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="59.8811%" y="469" width="0.0371%" height="15" fill="rgb(238,90,54)" fg:x="1612" fg:w="1"/><text x="60.1311%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="59.8811%" y="453" width="0.0371%" height="15" fill="rgb(213,208,19)" fg:x="1612" fg:w="1"/><text x="60.1311%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="59.8811%" y="437" width="0.0371%" height="15" fill="rgb(233,156,4)" fg:x="1612" fg:w="1"/><text x="60.1311%" y="447.50"></text></g><g><title>&lt;misc_utils::stack::Stack&lt;T&gt; as core::ops::index::IndexMut&lt;usize&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="59.8811%" y="485" width="0.0743%" height="15" fill="rgb(207,194,5)" fg:x="1612" fg:w="2"/><text x="60.1311%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="59.9183%" y="469" width="0.0371%" height="15" fill="rgb(206,111,30)" fg:x="1613" fg:w="1"/><text x="60.1683%" y="479.50"></text></g><g><title>misc_utils::stack::Stack&lt;T&gt;::push (5 samples, 0.19%)</title><rect x="59.9554%" y="485" width="0.1857%" height="15" fill="rgb(243,70,54)" fg:x="1614" fg:w="5"/><text x="60.2054%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.19%)</title><rect x="59.9554%" y="469" width="0.1857%" height="15" fill="rgb(242,28,8)" fg:x="1614" fg:w="5"/><text x="60.2054%" y="479.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (2 samples, 0.07%)</title><rect x="60.1412%" y="453" width="0.0743%" height="15" fill="rgb(219,106,18)" fg:x="1619" fg:w="2"/><text x="60.3912%" y="463.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (2 samples, 0.07%)</title><rect x="60.1412%" y="437" width="0.0743%" height="15" fill="rgb(244,222,10)" fg:x="1619" fg:w="2"/><text x="60.3912%" y="447.50"></text></g><g><title>core::cell::BorrowRefMut::new (2 samples, 0.07%)</title><rect x="60.1412%" y="421" width="0.0743%" height="15" fill="rgb(236,179,52)" fg:x="1619" fg:w="2"/><text x="60.3912%" y="431.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::external (5 samples, 0.19%)</title><rect x="60.1412%" y="485" width="0.1857%" height="15" fill="rgb(213,23,39)" fg:x="1619" fg:w="5"/><text x="60.3912%" y="495.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::set_external (5 samples, 0.19%)</title><rect x="60.1412%" y="469" width="0.1857%" height="15" fill="rgb(238,48,10)" fg:x="1619" fg:w="5"/><text x="60.3912%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefMut&lt;usize&gt;&gt; (3 samples, 0.11%)</title><rect x="60.2155%" y="453" width="0.1114%" height="15" fill="rgb(251,196,23)" fg:x="1621" fg:w="3"/><text x="60.4655%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRefMut&gt; (3 samples, 0.11%)</title><rect x="60.2155%" y="437" width="0.1114%" height="15" fill="rgb(250,152,24)" fg:x="1621" fg:w="3"/><text x="60.4655%" y="447.50"></text></g><g><title>&lt;core::cell::BorrowRefMut as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="60.2155%" y="421" width="0.1114%" height="15" fill="rgb(209,150,17)" fg:x="1621" fg:w="3"/><text x="60.4655%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (3 samples, 0.11%)</title><rect x="60.2155%" y="405" width="0.1114%" height="15" fill="rgb(234,202,34)" fg:x="1621" fg:w="3"/><text x="60.4655%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (3 samples, 0.11%)</title><rect x="60.2155%" y="389" width="0.1114%" height="15" fill="rgb(253,148,53)" fg:x="1621" fg:w="3"/><text x="60.4655%" y="399.50"></text></g><g><title>core::mem::replace (3 samples, 0.11%)</title><rect x="60.2155%" y="373" width="0.1114%" height="15" fill="rgb(218,129,16)" fg:x="1621" fg:w="3"/><text x="60.4655%" y="383.50"></text></g><g><title>core::ptr::write (3 samples, 0.11%)</title><rect x="60.2155%" y="357" width="0.1114%" height="15" fill="rgb(216,85,19)" fg:x="1621" fg:w="3"/><text x="60.4655%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert_with (3 samples, 0.11%)</title><rect x="60.3269%" y="485" width="0.1114%" height="15" fill="rgb(235,228,7)" fg:x="1624" fg:w="3"/><text x="60.5769%" y="495.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (3 samples, 0.11%)</title><rect x="60.3269%" y="469" width="0.1114%" height="15" fill="rgb(245,175,0)" fg:x="1624" fg:w="3"/><text x="60.5769%" y="479.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (3 samples, 0.11%)</title><rect x="60.3269%" y="453" width="0.1114%" height="15" fill="rgb(208,168,36)" fg:x="1624" fg:w="3"/><text x="60.5769%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="60.6612%" y="421" width="0.1114%" height="15" fill="rgb(246,171,24)" fg:x="1633" fg:w="3"/><text x="60.9112%" y="431.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="60.7355%" y="405" width="0.0371%" height="15" fill="rgb(215,142,24)" fg:x="1635" fg:w="1"/><text x="60.9855%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.07%)</title><rect x="60.7727%" y="421" width="0.0743%" height="15" fill="rgb(250,187,7)" fg:x="1636" fg:w="2"/><text x="61.0227%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.07%)</title><rect x="60.7727%" y="405" width="0.0743%" height="15" fill="rgb(228,66,33)" fg:x="1636" fg:w="2"/><text x="61.0227%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.07%)</title><rect x="60.7727%" y="389" width="0.0743%" height="15" fill="rgb(234,215,21)" fg:x="1636" fg:w="2"/><text x="61.0227%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.07%)</title><rect x="60.7727%" y="373" width="0.0743%" height="15" fill="rgb(222,191,20)" fg:x="1636" fg:w="2"/><text x="61.0227%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.07%)</title><rect x="60.7727%" y="357" width="0.0743%" height="15" fill="rgb(245,79,54)" fg:x="1636" fg:w="2"/><text x="61.0227%" y="367.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.07%)</title><rect x="60.8470%" y="421" width="0.0743%" height="15" fill="rgb(240,10,37)" fg:x="1638" fg:w="2"/><text x="61.0970%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (17 samples, 0.63%)</title><rect x="60.4383%" y="485" width="0.6315%" height="15" fill="rgb(214,192,32)" fg:x="1627" fg:w="17"/><text x="60.6883%" y="495.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (17 samples, 0.63%)</title><rect x="60.4383%" y="469" width="0.6315%" height="15" fill="rgb(209,36,54)" fg:x="1627" fg:w="17"/><text x="60.6883%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (17 samples, 0.63%)</title><rect x="60.4383%" y="453" width="0.6315%" height="15" fill="rgb(220,10,11)" fg:x="1627" fg:w="17"/><text x="60.6883%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (15 samples, 0.56%)</title><rect x="60.5126%" y="437" width="0.5572%" height="15" fill="rgb(221,106,17)" fg:x="1629" fg:w="15"/><text x="60.7626%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.15%)</title><rect x="60.9212%" y="421" width="0.1486%" height="15" fill="rgb(251,142,44)" fg:x="1640" fg:w="4"/><text x="61.1712%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.15%)</title><rect x="60.9212%" y="405" width="0.1486%" height="15" fill="rgb(238,13,15)" fg:x="1640" fg:w="4"/><text x="61.1712%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.41%)</title><rect x="61.2184%" y="373" width="0.4086%" height="15" fill="rgb(208,107,27)" fg:x="1648" fg:w="11"/><text x="61.4684%" y="383.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (18 samples, 0.67%)</title><rect x="61.0698%" y="485" width="0.6686%" height="15" fill="rgb(205,136,37)" fg:x="1644" fg:w="18"/><text x="61.3198%" y="495.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (18 samples, 0.67%)</title><rect x="61.0698%" y="469" width="0.6686%" height="15" fill="rgb(250,205,27)" fg:x="1644" fg:w="18"/><text x="61.3198%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (18 samples, 0.67%)</title><rect x="61.0698%" y="453" width="0.6686%" height="15" fill="rgb(210,80,43)" fg:x="1644" fg:w="18"/><text x="61.3198%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (18 samples, 0.67%)</title><rect x="61.0698%" y="437" width="0.6686%" height="15" fill="rgb(247,160,36)" fg:x="1644" fg:w="18"/><text x="61.3198%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (15 samples, 0.56%)</title><rect x="61.1813%" y="421" width="0.5572%" height="15" fill="rgb(234,13,49)" fg:x="1647" fg:w="15"/><text x="61.4313%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (15 samples, 0.56%)</title><rect x="61.1813%" y="405" width="0.5572%" height="15" fill="rgb(234,122,0)" fg:x="1647" fg:w="15"/><text x="61.4313%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (15 samples, 0.56%)</title><rect x="61.1813%" y="389" width="0.5572%" height="15" fill="rgb(207,146,38)" fg:x="1647" fg:w="15"/><text x="61.4313%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.11%)</title><rect x="61.6270%" y="373" width="0.1114%" height="15" fill="rgb(207,177,25)" fg:x="1659" fg:w="3"/><text x="61.8770%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.11%)</title><rect x="61.6270%" y="357" width="0.1114%" height="15" fill="rgb(211,178,42)" fg:x="1659" fg:w="3"/><text x="61.8770%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (2 samples, 0.07%)</title><rect x="61.9242%" y="357" width="0.0743%" height="15" fill="rgb(230,69,54)" fg:x="1667" fg:w="2"/><text x="62.1742%" y="367.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="61.9242%" y="341" width="0.0743%" height="15" fill="rgb(214,135,41)" fg:x="1667" fg:w="2"/><text x="62.1742%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (2 samples, 0.07%)</title><rect x="61.9242%" y="325" width="0.0743%" height="15" fill="rgb(237,67,25)" fg:x="1667" fg:w="2"/><text x="62.1742%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (1 samples, 0.04%)</title><rect x="61.9985%" y="325" width="0.0371%" height="15" fill="rgb(222,189,50)" fg:x="1669" fg:w="1"/><text x="62.2485%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.04%)</title><rect x="61.9985%" y="309" width="0.0371%" height="15" fill="rgb(245,148,34)" fg:x="1669" fg:w="1"/><text x="62.2485%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="61.9985%" y="293" width="0.0371%" height="15" fill="rgb(222,29,6)" fg:x="1669" fg:w="1"/><text x="62.2485%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (4 samples, 0.15%)</title><rect x="61.9985%" y="357" width="0.1486%" height="15" fill="rgb(221,189,43)" fg:x="1669" fg:w="4"/><text x="62.2485%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (4 samples, 0.15%)</title><rect x="61.9985%" y="341" width="0.1486%" height="15" fill="rgb(207,36,27)" fg:x="1669" fg:w="4"/><text x="62.2485%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3 samples, 0.11%)</title><rect x="62.0357%" y="325" width="0.1114%" height="15" fill="rgb(217,90,24)" fg:x="1670" fg:w="3"/><text x="62.2857%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.04%)</title><rect x="62.1100%" y="309" width="0.0371%" height="15" fill="rgb(224,66,35)" fg:x="1672" fg:w="1"/><text x="62.3600%" y="319.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.04%)</title><rect x="62.1100%" y="293" width="0.0371%" height="15" fill="rgb(221,13,50)" fg:x="1672" fg:w="1"/><text x="62.3600%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (9 samples, 0.33%)</title><rect x="62.1471%" y="325" width="0.3343%" height="15" fill="rgb(236,68,49)" fg:x="1673" fg:w="9"/><text x="62.3971%" y="335.50"></text></g><g><title>core::intrinsics::write_bytes (9 samples, 0.33%)</title><rect x="62.1471%" y="309" width="0.3343%" height="15" fill="rgb(229,146,28)" fg:x="1673" fg:w="9"/><text x="62.3971%" y="319.50"></text></g><g><title>[libc.so.6] (6 samples, 0.22%)</title><rect x="62.2585%" y="293" width="0.2229%" height="15" fill="rgb(225,31,38)" fg:x="1676" fg:w="6"/><text x="62.5085%" y="303.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.04%)</title><rect x="62.4814%" y="309" width="0.0371%" height="15" fill="rgb(250,208,3)" fg:x="1682" fg:w="1"/><text x="62.7314%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.04%)</title><rect x="62.4814%" y="293" width="0.0371%" height="15" fill="rgb(246,54,23)" fg:x="1682" fg:w="1"/><text x="62.7314%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.04%)</title><rect x="62.4814%" y="277" width="0.0371%" height="15" fill="rgb(243,76,11)" fg:x="1682" fg:w="1"/><text x="62.7314%" y="287.50"></text></g><g><title>__rust_alloc (2 samples, 0.07%)</title><rect x="62.5929%" y="245" width="0.0743%" height="15" fill="rgb(245,21,50)" fg:x="1685" fg:w="2"/><text x="62.8429%" y="255.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.04%)</title><rect x="62.6672%" y="245" width="0.0371%" height="15" fill="rgb(228,9,43)" fg:x="1687" fg:w="1"/><text x="62.9172%" y="255.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (42 samples, 1.56%)</title><rect x="62.5186%" y="309" width="1.5602%" height="15" fill="rgb(208,100,47)" fg:x="1683" fg:w="42"/><text x="62.7686%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 1.56%)</title><rect x="62.5186%" y="293" width="1.5602%" height="15" fill="rgb(232,26,8)" fg:x="1683" fg:w="42"/><text x="62.7686%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 1.56%)</title><rect x="62.5186%" y="277" width="1.5602%" height="15" fill="rgb(216,166,38)" fg:x="1683" fg:w="42"/><text x="62.7686%" y="287.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 1.56%)</title><rect x="62.5186%" y="261" width="1.5602%" height="15" fill="rgb(251,202,51)" fg:x="1683" fg:w="42"/><text x="62.7686%" y="271.50"></text></g><g><title>malloc (37 samples, 1.37%)</title><rect x="62.7043%" y="245" width="1.3744%" height="15" fill="rgb(254,216,34)" fg:x="1688" fg:w="37"/><text x="62.9543%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (63 samples, 2.34%)</title><rect x="61.8871%" y="373" width="2.3403%" height="15" fill="rgb(251,32,27)" fg:x="1666" fg:w="63"/><text x="62.1371%" y="383.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (56 samples, 2.08%)</title><rect x="62.1471%" y="357" width="2.0802%" height="15" fill="rgb(208,127,28)" fg:x="1673" fg:w="56"/><text x="62.3971%" y="367.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (56 samples, 2.08%)</title><rect x="62.1471%" y="341" width="2.0802%" height="15" fill="rgb(224,137,22)" fg:x="1673" fg:w="56"/><text x="62.3971%" y="351.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (47 samples, 1.75%)</title><rect x="62.4814%" y="325" width="1.7459%" height="15" fill="rgb(254,70,32)" fg:x="1682" fg:w="47"/><text x="62.7314%" y="335.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (4 samples, 0.15%)</title><rect x="64.0788%" y="309" width="0.1486%" height="15" fill="rgb(229,75,37)" fg:x="1725" fg:w="4"/><text x="64.3288%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (64 samples, 2.38%)</title><rect x="61.8871%" y="421" width="2.3774%" height="15" fill="rgb(252,64,23)" fg:x="1666" fg:w="64"/><text x="62.1371%" y="431.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (64 samples, 2.38%)</title><rect x="61.8871%" y="405" width="2.3774%" height="15" fill="rgb(232,162,48)" fg:x="1666" fg:w="64"/><text x="62.1371%" y="415.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (64 samples, 2.38%)</title><rect x="61.8871%" y="389" width="2.3774%" height="15" fill="rgb(246,160,12)" fg:x="1666" fg:w="64"/><text x="62.1371%" y="399.50">ha..</text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (1 samples, 0.04%)</title><rect x="64.2273%" y="373" width="0.0371%" height="15" fill="rgb(247,166,0)" fg:x="1729" fg:w="1"/><text x="64.4773%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.22%)</title><rect x="64.2645%" y="405" width="0.2229%" height="15" fill="rgb(249,219,21)" fg:x="1730" fg:w="6"/><text x="64.5145%" y="415.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (6 samples, 0.22%)</title><rect x="64.2645%" y="389" width="0.2229%" height="15" fill="rgb(205,209,3)" fg:x="1730" fg:w="6"/><text x="64.5145%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3 samples, 0.11%)</title><rect x="64.4874%" y="405" width="0.1114%" height="15" fill="rgb(243,44,1)" fg:x="1736" fg:w="3"/><text x="64.7374%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (3 samples, 0.11%)</title><rect x="64.4874%" y="389" width="0.1114%" height="15" fill="rgb(206,159,16)" fg:x="1736" fg:w="3"/><text x="64.7374%" y="399.50"></text></g><g><title>hashbrown::raw::is_full (3 samples, 0.11%)</title><rect x="64.4874%" y="373" width="0.1114%" height="15" fill="rgb(244,77,30)" fg:x="1736" fg:w="3"/><text x="64.7374%" y="383.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.07%)</title><rect x="64.5988%" y="405" width="0.0743%" height="15" fill="rgb(218,69,12)" fg:x="1739" fg:w="2"/><text x="64.8488%" y="415.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::set_func_args (260 samples, 9.66%)</title><rect x="56.4264%" y="533" width="9.6582%" height="15" fill="rgb(212,87,7)" fg:x="1519" fg:w="260"/><text x="56.6764%" y="543.50">simple_lisp::i..</text></g><g><title>simple_lisp::interpreter::Interpreter::define_var (174 samples, 6.46%)</title><rect x="59.6211%" y="517" width="6.4636%" height="15" fill="rgb(245,114,25)" fg:x="1605" fg:w="174"/><text x="59.8711%" y="527.50">simple_l..</text></g><g><title>simple_lisp::interpreter::Env::insert (171 samples, 6.35%)</title><rect x="59.7325%" y="501" width="6.3522%" height="15" fill="rgb(210,61,42)" fg:x="1608" fg:w="171"/><text x="59.9825%" y="511.50">simple_l..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (117 samples, 4.35%)</title><rect x="61.7385%" y="485" width="4.3462%" height="15" fill="rgb(211,52,33)" fg:x="1662" fg:w="117"/><text x="61.9885%" y="495.50">std::..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (117 samples, 4.35%)</title><rect x="61.7385%" y="469" width="4.3462%" height="15" fill="rgb(234,58,33)" fg:x="1662" fg:w="117"/><text x="61.9885%" y="479.50">hashb..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (116 samples, 4.31%)</title><rect x="61.7756%" y="453" width="4.3091%" height="15" fill="rgb(220,115,36)" fg:x="1663" fg:w="116"/><text x="62.0256%" y="463.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (114 samples, 4.23%)</title><rect x="61.8499%" y="437" width="4.2348%" height="15" fill="rgb(243,153,54)" fg:x="1665" fg:w="114"/><text x="62.0999%" y="447.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (49 samples, 1.82%)</title><rect x="64.2645%" y="421" width="1.8202%" height="15" fill="rgb(251,47,18)" fg:x="1730" fg:w="49"/><text x="64.5145%" y="431.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (38 samples, 1.41%)</title><rect x="64.6731%" y="405" width="1.4116%" height="15" fill="rgb(242,102,42)" fg:x="1741" fg:w="38"/><text x="64.9231%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (38 samples, 1.41%)</title><rect x="64.6731%" y="389" width="1.4116%" height="15" fill="rgb(234,31,38)" fg:x="1741" fg:w="38"/><text x="64.9231%" y="399.50"></text></g><g><title>simple_lisp::interpreter::ScopeItem::last (3 samples, 0.11%)</title><rect x="66.0847%" y="533" width="0.1114%" height="15" fill="rgb(221,117,51)" fg:x="1779" fg:w="3"/><text x="66.3347%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.04%)</title><rect x="66.1590%" y="517" width="0.0371%" height="15" fill="rgb(212,20,18)" fg:x="1781" fg:w="1"/><text x="66.4090%" y="527.50"></text></g><g><title>core::mem::replace (1 samples, 0.04%)</title><rect x="66.1590%" y="501" width="0.0371%" height="15" fill="rgb(245,133,36)" fg:x="1781" fg:w="1"/><text x="66.4090%" y="511.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="66.1590%" y="485" width="0.0371%" height="15" fill="rgb(212,6,19)" fg:x="1781" fg:w="1"/><text x="66.4090%" y="495.50"></text></g><g><title>simple_lisp::interpreter::ast::FnSignature::match_arg_count (3 samples, 0.11%)</title><rect x="66.1961%" y="533" width="0.1114%" height="15" fill="rgb(218,1,36)" fg:x="1782" fg:w="3"/><text x="66.4461%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (8 samples, 0.30%)</title><rect x="66.3076%" y="517" width="0.2972%" height="15" fill="rgb(246,84,54)" fg:x="1785" fg:w="8"/><text x="66.5576%" y="527.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as indexmap::Entries&gt;::as_entries (2 samples, 0.07%)</title><rect x="66.7162%" y="485" width="0.0743%" height="15" fill="rgb(242,110,6)" fg:x="1796" fg:w="2"/><text x="66.9662%" y="495.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;K,V&gt; as indexmap::Entries&gt;::as_entries (2 samples, 0.07%)</title><rect x="66.7162%" y="469" width="0.0743%" height="15" fill="rgb(214,47,5)" fg:x="1796" fg:w="2"/><text x="66.9662%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.07%)</title><rect x="66.7162%" y="453" width="0.0743%" height="15" fill="rgb(218,159,25)" fg:x="1796" fg:w="2"/><text x="66.9662%" y="463.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (3 samples, 0.11%)</title><rect x="66.7905%" y="485" width="0.1114%" height="15" fill="rgb(215,211,28)" fg:x="1798" fg:w="3"/><text x="67.0405%" y="495.50"></text></g><g><title>&lt;simple_lisp::interpreter::ast::InstructionId as core::hash::Hash&gt;::hash (3 samples, 0.11%)</title><rect x="66.7905%" y="469" width="0.1114%" height="15" fill="rgb(238,59,32)" fg:x="1798" fg:w="3"/><text x="67.0405%" y="479.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (2 samples, 0.07%)</title><rect x="66.8276%" y="453" width="0.0743%" height="15" fill="rgb(226,82,3)" fg:x="1799" fg:w="2"/><text x="67.0776%" y="463.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (2 samples, 0.07%)</title><rect x="66.8276%" y="437" width="0.0743%" height="15" fill="rgb(240,164,32)" fg:x="1799" fg:w="2"/><text x="67.0776%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (2 samples, 0.07%)</title><rect x="66.8276%" y="421" width="0.0743%" height="15" fill="rgb(232,46,7)" fg:x="1799" fg:w="2"/><text x="67.0776%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.15%)</title><rect x="66.9019%" y="469" width="0.1486%" height="15" fill="rgb(229,129,53)" fg:x="1801" fg:w="4"/><text x="67.1519%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (4 samples, 0.15%)</title><rect x="66.9019%" y="453" width="0.1486%" height="15" fill="rgb(234,188,29)" fg:x="1801" fg:w="4"/><text x="67.1519%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4 samples, 0.15%)</title><rect x="66.9019%" y="437" width="0.1486%" height="15" fill="rgb(246,141,4)" fg:x="1801" fg:w="4"/><text x="67.1519%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.19%)</title><rect x="67.3105%" y="421" width="0.1857%" height="15" fill="rgb(229,23,39)" fg:x="1812" fg:w="5"/><text x="67.5605%" y="431.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="67.4591%" y="405" width="0.0371%" height="15" fill="rgb(206,12,3)" fg:x="1816" fg:w="1"/><text x="67.7091%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::_{{closure}} (16 samples, 0.59%)</title><rect x="67.4963%" y="421" width="0.5944%" height="15" fill="rgb(252,226,20)" fg:x="1817" fg:w="16"/><text x="67.7463%" y="431.50"></text></g><g><title>indexmap::map::core::equivalent::_{{closure}} (12 samples, 0.45%)</title><rect x="67.6449%" y="405" width="0.4458%" height="15" fill="rgb(216,123,35)" fg:x="1821" fg:w="12"/><text x="67.8949%" y="415.50"></text></g><g><title>hashbrown::raw::inner::h2 (9 samples, 0.33%)</title><rect x="68.0906%" y="421" width="0.3343%" height="15" fill="rgb(212,68,40)" fg:x="1833" fg:w="9"/><text x="68.3406%" y="431.50"></text></g><g><title>simple_lisp::interpreter::ast::InstructionIter::jump (59 samples, 2.19%)</title><rect x="66.3076%" y="533" width="2.1917%" height="15" fill="rgb(254,125,32)" fg:x="1785" fg:w="59"/><text x="66.5576%" y="543.50">s..</text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::get_index_of (51 samples, 1.89%)</title><rect x="66.6048%" y="517" width="1.8945%" height="15" fill="rgb(253,97,22)" fg:x="1793" fg:w="51"/><text x="66.8548%" y="527.50">i..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (51 samples, 1.89%)</title><rect x="66.6048%" y="501" width="1.8945%" height="15" fill="rgb(241,101,14)" fg:x="1793" fg:w="51"/><text x="66.8548%" y="511.50">i..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (43 samples, 1.60%)</title><rect x="66.9019%" y="485" width="1.5973%" height="15" fill="rgb(238,103,29)" fg:x="1801" fg:w="43"/><text x="67.1519%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (39 samples, 1.45%)</title><rect x="67.0505%" y="469" width="1.4487%" height="15" fill="rgb(233,195,47)" fg:x="1805" fg:w="39"/><text x="67.3005%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (39 samples, 1.45%)</title><rect x="67.0505%" y="453" width="1.4487%" height="15" fill="rgb(246,218,30)" fg:x="1805" fg:w="39"/><text x="67.3005%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (39 samples, 1.45%)</title><rect x="67.0505%" y="437" width="1.4487%" height="15" fill="rgb(219,145,47)" fg:x="1805" fg:w="39"/><text x="67.3005%" y="447.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (2 samples, 0.07%)</title><rect x="68.4250%" y="421" width="0.0743%" height="15" fill="rgb(243,12,26)" fg:x="1842" fg:w="2"/><text x="68.6750%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.07%)</title><rect x="68.4250%" y="405" width="0.0743%" height="15" fill="rgb(214,87,16)" fg:x="1842" fg:w="2"/><text x="68.6750%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (5 samples, 0.19%)</title><rect x="68.5736%" y="517" width="0.1857%" height="15" fill="rgb(208,99,42)" fg:x="1846" fg:w="5"/><text x="68.8236%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.19%)</title><rect x="68.5736%" y="501" width="0.1857%" height="15" fill="rgb(253,99,2)" fg:x="1846" fg:w="5"/><text x="68.8236%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (5 samples, 0.19%)</title><rect x="68.5736%" y="485" width="0.1857%" height="15" fill="rgb(220,168,23)" fg:x="1846" fg:w="5"/><text x="68.8236%" y="495.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.19%)</title><rect x="68.5736%" y="469" width="0.1857%" height="15" fill="rgb(242,38,24)" fg:x="1846" fg:w="5"/><text x="68.8236%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (5 samples, 0.19%)</title><rect x="68.5736%" y="453" width="0.1857%" height="15" fill="rgb(225,182,9)" fg:x="1846" fg:w="5"/><text x="68.8236%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.19%)</title><rect x="68.5736%" y="437" width="0.1857%" height="15" fill="rgb(243,178,37)" fg:x="1846" fg:w="5"/><text x="68.8236%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.19%)</title><rect x="68.5736%" y="421" width="0.1857%" height="15" fill="rgb(232,139,19)" fg:x="1846" fg:w="5"/><text x="68.8236%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.19%)</title><rect x="68.5736%" y="405" width="0.1857%" height="15" fill="rgb(225,201,24)" fg:x="1846" fg:w="5"/><text x="68.8236%" y="415.50"></text></g><g><title>cfree (5 samples, 0.19%)</title><rect x="68.5736%" y="389" width="0.1857%" height="15" fill="rgb(221,47,46)" fg:x="1846" fg:w="5"/><text x="68.8236%" y="399.50"></text></g><g><title>[libc.so.6] (4 samples, 0.15%)</title><rect x="68.6107%" y="373" width="0.1486%" height="15" fill="rgb(249,23,13)" fg:x="1847" fg:w="4"/><text x="68.8607%" y="383.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::Data as core::clone::Clone&gt;::clone (4 samples, 0.15%)</title><rect x="68.7593%" y="501" width="0.1486%" height="15" fill="rgb(219,9,5)" fg:x="1851" fg:w="4"/><text x="69.0093%" y="511.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (1 samples, 0.04%)</title><rect x="68.9079%" y="469" width="0.0371%" height="15" fill="rgb(254,171,16)" fg:x="1855" fg:w="1"/><text x="69.1579%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (1 samples, 0.04%)</title><rect x="68.9079%" y="453" width="0.0371%" height="15" fill="rgb(230,171,20)" fg:x="1855" fg:w="1"/><text x="69.1579%" y="463.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.48%)</title><rect x="69.2422%" y="453" width="0.4829%" height="15" fill="rgb(210,71,41)" fg:x="1864" fg:w="13"/><text x="69.4922%" y="463.50"></text></g><g><title>malloc (13 samples, 0.48%)</title><rect x="69.2422%" y="437" width="0.4829%" height="15" fill="rgb(206,173,20)" fg:x="1864" fg:w="13"/><text x="69.4922%" y="447.50"></text></g><g><title>[libc.so.6] (6 samples, 0.22%)</title><rect x="69.5022%" y="421" width="0.2229%" height="15" fill="rgb(233,88,34)" fg:x="1871" fg:w="6"/><text x="69.7522%" y="431.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (23 samples, 0.85%)</title><rect x="68.9079%" y="501" width="0.8544%" height="15" fill="rgb(223,209,46)" fg:x="1855" fg:w="23"/><text x="69.1579%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (23 samples, 0.85%)</title><rect x="68.9079%" y="485" width="0.8544%" height="15" fill="rgb(250,43,18)" fg:x="1855" fg:w="23"/><text x="69.1579%" y="495.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (22 samples, 0.82%)</title><rect x="68.9450%" y="469" width="0.8172%" height="15" fill="rgb(208,13,10)" fg:x="1856" fg:w="22"/><text x="69.1950%" y="479.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="69.7251%" y="453" width="0.0371%" height="15" fill="rgb(212,200,36)" fg:x="1877" fg:w="1"/><text x="69.9751%" y="463.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clone_data (32 samples, 1.19%)</title><rect x="68.7593%" y="517" width="1.1887%" height="15" fill="rgb(225,90,30)" fg:x="1851" fg:w="32"/><text x="69.0093%" y="527.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (5 samples, 0.19%)</title><rect x="69.7623%" y="501" width="0.1857%" height="15" fill="rgb(236,182,39)" fg:x="1878" fg:w="5"/><text x="70.0123%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (5 samples, 0.19%)</title><rect x="69.7623%" y="485" width="0.1857%" height="15" fill="rgb(212,144,35)" fg:x="1878" fg:w="5"/><text x="70.0123%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (5 samples, 0.19%)</title><rect x="69.7623%" y="469" width="0.1857%" height="15" fill="rgb(228,63,44)" fg:x="1878" fg:w="5"/><text x="70.0123%" y="479.50"></text></g><g><title>core::cell::BorrowRef::new (5 samples, 0.19%)</title><rect x="69.7623%" y="453" width="0.1857%" height="15" fill="rgb(228,109,6)" fg:x="1878" fg:w="5"/><text x="70.0123%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (4 samples, 0.15%)</title><rect x="69.7994%" y="437" width="0.1486%" height="15" fill="rgb(238,117,24)" fg:x="1879" fg:w="4"/><text x="70.0494%" y="447.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::add (41 samples, 1.52%)</title><rect x="68.4993%" y="533" width="1.5230%" height="15" fill="rgb(242,26,26)" fg:x="1844" fg:w="41"/><text x="68.7493%" y="543.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::do_the_thing_add (2 samples, 0.07%)</title><rect x="69.9480%" y="517" width="0.0743%" height="15" fill="rgb(221,92,48)" fg:x="1883" fg:w="2"/><text x="70.1980%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="70.3195%" y="517" width="0.1114%" height="15" fill="rgb(209,209,32)" fg:x="1893" fg:w="3"/><text x="70.5695%" y="527.50"></text></g><g><title>__rust_dealloc (1 samples, 0.04%)</title><rect x="70.4309%" y="517" width="0.0371%" height="15" fill="rgb(221,70,22)" fg:x="1896" fg:w="1"/><text x="70.6809%" y="527.50"></text></g><g><title>cfree (1 samples, 0.04%)</title><rect x="70.4681%" y="517" width="0.0371%" height="15" fill="rgb(248,145,5)" fg:x="1897" fg:w="1"/><text x="70.7181%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (5 samples, 0.19%)</title><rect x="70.5052%" y="517" width="0.1857%" height="15" fill="rgb(226,116,26)" fg:x="1898" fg:w="5"/><text x="70.7552%" y="527.50"></text></g><g><title>core::cmp::PartialEq::ne (5 samples, 0.19%)</title><rect x="70.5052%" y="501" width="0.1857%" height="15" fill="rgb(244,5,17)" fg:x="1898" fg:w="5"/><text x="70.7552%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.04%)</title><rect x="70.6909%" y="517" width="0.0371%" height="15" fill="rgb(252,159,33)" fg:x="1903" fg:w="1"/><text x="70.9409%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="70.6909%" y="501" width="0.0371%" height="15" fill="rgb(206,71,0)" fg:x="1903" fg:w="1"/><text x="70.9409%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (1 samples, 0.04%)</title><rect x="70.6909%" y="485" width="0.0371%" height="15" fill="rgb(233,118,54)" fg:x="1903" fg:w="1"/><text x="70.9409%" y="495.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="70.6909%" y="469" width="0.0371%" height="15" fill="rgb(234,83,48)" fg:x="1903" fg:w="1"/><text x="70.9409%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.04%)</title><rect x="70.6909%" y="453" width="0.0371%" height="15" fill="rgb(228,3,54)" fg:x="1903" fg:w="1"/><text x="70.9409%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="70.6909%" y="437" width="0.0371%" height="15" fill="rgb(226,155,13)" fg:x="1903" fg:w="1"/><text x="70.9409%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="70.6909%" y="421" width="0.0371%" height="15" fill="rgb(241,28,37)" fg:x="1903" fg:w="1"/><text x="70.9409%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="70.6909%" y="405" width="0.0371%" height="15" fill="rgb(233,93,10)" fg:x="1903" fg:w="1"/><text x="70.9409%" y="415.50"></text></g><g><title>cfree (1 samples, 0.04%)</title><rect x="70.6909%" y="389" width="0.0371%" height="15" fill="rgb(225,113,19)" fg:x="1903" fg:w="1"/><text x="70.9409%" y="399.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (1 samples, 0.04%)</title><rect x="70.9881%" y="437" width="0.0371%" height="15" fill="rgb(241,2,18)" fg:x="1911" fg:w="1"/><text x="71.2381%" y="447.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::HashableDataRef as core::hash::Hash&gt;::hash (1 samples, 0.04%)</title><rect x="70.9881%" y="421" width="0.0371%" height="15" fill="rgb(228,207,21)" fg:x="1911" fg:w="1"/><text x="71.2381%" y="431.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_usize (1 samples, 0.04%)</title><rect x="70.9881%" y="405" width="0.0371%" height="15" fill="rgb(213,211,35)" fg:x="1911" fg:w="1"/><text x="71.2381%" y="415.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (1 samples, 0.04%)</title><rect x="70.9881%" y="389" width="0.0371%" height="15" fill="rgb(209,83,10)" fg:x="1911" fg:w="1"/><text x="71.2381%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (1 samples, 0.04%)</title><rect x="70.9881%" y="373" width="0.0371%" height="15" fill="rgb(209,164,1)" fg:x="1911" fg:w="1"/><text x="71.2381%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.11%)</title><rect x="71.0253%" y="405" width="0.1114%" height="15" fill="rgb(213,184,43)" fg:x="1912" fg:w="3"/><text x="71.2753%" y="415.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (4 samples, 0.15%)</title><rect x="71.0253%" y="421" width="0.1486%" height="15" fill="rgb(231,61,34)" fg:x="1912" fg:w="4"/><text x="71.2753%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="71.1367%" y="405" width="0.0371%" height="15" fill="rgb(235,75,3)" fg:x="1915" fg:w="1"/><text x="71.3867%" y="415.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="71.1367%" y="389" width="0.0371%" height="15" fill="rgb(220,106,47)" fg:x="1915" fg:w="1"/><text x="71.3867%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.07%)</title><rect x="71.1738%" y="405" width="0.0743%" height="15" fill="rgb(210,196,33)" fg:x="1916" fg:w="2"/><text x="71.4238%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.04%)</title><rect x="71.2110%" y="389" width="0.0371%" height="15" fill="rgb(229,154,42)" fg:x="1917" fg:w="1"/><text x="71.4610%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="71.2110%" y="373" width="0.0371%" height="15" fill="rgb(228,114,26)" fg:x="1917" fg:w="1"/><text x="71.4610%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="71.6568%" y="373" width="0.0371%" height="15" fill="rgb(208,144,1)" fg:x="1929" fg:w="1"/><text x="71.9068%" y="383.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="71.6568%" y="357" width="0.0371%" height="15" fill="rgb(239,112,37)" fg:x="1929" fg:w="1"/><text x="71.9068%" y="367.50"></text></g><g><title>hashbrown::raw::inner::h2 (3 samples, 0.11%)</title><rect x="71.6939%" y="373" width="0.1114%" height="15" fill="rgb(210,96,50)" fg:x="1930" fg:w="3"/><text x="71.9439%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (16 samples, 0.59%)</title><rect x="71.2481%" y="405" width="0.5944%" height="15" fill="rgb(222,178,2)" fg:x="1918" fg:w="16"/><text x="71.4981%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (15 samples, 0.56%)</title><rect x="71.2853%" y="389" width="0.5572%" height="15" fill="rgb(226,74,18)" fg:x="1919" fg:w="15"/><text x="71.5353%" y="399.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (1 samples, 0.04%)</title><rect x="71.8053%" y="373" width="0.0371%" height="15" fill="rgb(225,67,54)" fg:x="1933" fg:w="1"/><text x="72.0553%" y="383.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="71.8053%" y="357" width="0.0371%" height="15" fill="rgb(251,92,32)" fg:x="1933" fg:w="1"/><text x="72.0553%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="71.8053%" y="341" width="0.0371%" height="15" fill="rgb(228,149,22)" fg:x="1933" fg:w="1"/><text x="72.0553%" y="351.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (1 samples, 0.04%)</title><rect x="71.8425%" y="389" width="0.0371%" height="15" fill="rgb(243,54,13)" fg:x="1934" fg:w="1"/><text x="72.0925%" y="399.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="71.8425%" y="373" width="0.0371%" height="15" fill="rgb(243,180,28)" fg:x="1934" fg:w="1"/><text x="72.0925%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="71.8425%" y="357" width="0.0371%" height="15" fill="rgb(208,167,24)" fg:x="1934" fg:w="1"/><text x="72.0925%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="71.8425%" y="341" width="0.0371%" height="15" fill="rgb(245,73,45)" fg:x="1934" fg:w="1"/><text x="72.0925%" y="351.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (32 samples, 1.19%)</title><rect x="70.8024%" y="485" width="1.1887%" height="15" fill="rgb(237,203,48)" fg:x="1906" fg:w="32"/><text x="71.0524%" y="495.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (32 samples, 1.19%)</title><rect x="70.8024%" y="469" width="1.1887%" height="15" fill="rgb(211,197,16)" fg:x="1906" fg:w="32"/><text x="71.0524%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (32 samples, 1.19%)</title><rect x="70.8024%" y="453" width="1.1887%" height="15" fill="rgb(243,99,51)" fg:x="1906" fg:w="32"/><text x="71.0524%" y="463.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (26 samples, 0.97%)</title><rect x="71.0253%" y="437" width="0.9658%" height="15" fill="rgb(215,123,29)" fg:x="1912" fg:w="26"/><text x="71.2753%" y="447.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (22 samples, 0.82%)</title><rect x="71.1738%" y="421" width="0.8172%" height="15" fill="rgb(239,186,37)" fg:x="1916" fg:w="22"/><text x="71.4238%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_in_slot (4 samples, 0.15%)</title><rect x="71.8425%" y="405" width="0.1486%" height="15" fill="rgb(252,136,39)" fg:x="1934" fg:w="4"/><text x="72.0925%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::record_item_insert_at (3 samples, 0.11%)</title><rect x="71.8796%" y="389" width="0.1114%" height="15" fill="rgb(223,213,32)" fg:x="1935" fg:w="3"/><text x="72.1296%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl_h2 (3 samples, 0.11%)</title><rect x="71.8796%" y="373" width="0.1114%" height="15" fill="rgb(233,115,5)" fg:x="1935" fg:w="3"/><text x="72.1296%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::set_ctrl (3 samples, 0.11%)</title><rect x="71.8796%" y="357" width="0.1114%" height="15" fill="rgb(207,226,44)" fg:x="1935" fg:w="3"/><text x="72.1296%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="72.4740%" y="453" width="0.0371%" height="15" fill="rgb(208,126,0)" fg:x="1951" fg:w="1"/><text x="72.7240%" y="463.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.97%)</title><rect x="72.4740%" y="469" width="0.9658%" height="15" fill="rgb(244,66,21)" fg:x="1951" fg:w="26"/><text x="72.7240%" y="479.50"></text></g><g><title>malloc (25 samples, 0.93%)</title><rect x="72.5111%" y="453" width="0.9287%" height="15" fill="rgb(222,97,12)" fg:x="1952" fg:w="25"/><text x="72.7611%" y="463.50"></text></g><g><title>[libc.so.6] (13 samples, 0.48%)</title><rect x="72.9569%" y="437" width="0.4829%" height="15" fill="rgb(219,213,19)" fg:x="1964" fg:w="13"/><text x="73.2069%" y="447.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (76 samples, 2.82%)</title><rect x="70.7281%" y="517" width="2.8232%" height="15" fill="rgb(252,169,30)" fg:x="1904" fg:w="76"/><text x="70.9781%" y="527.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (76 samples, 2.82%)</title><rect x="70.7281%" y="501" width="2.8232%" height="15" fill="rgb(206,32,51)" fg:x="1904" fg:w="76"/><text x="70.9781%" y="511.50">si..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (42 samples, 1.56%)</title><rect x="71.9911%" y="485" width="1.5602%" height="15" fill="rgb(250,172,42)" fg:x="1938" fg:w="42"/><text x="72.2411%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut (3 samples, 0.11%)</title><rect x="73.4398%" y="469" width="0.1114%" height="15" fill="rgb(209,34,43)" fg:x="1977" fg:w="3"/><text x="73.6898%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 0.11%)</title><rect x="73.4398%" y="453" width="0.1114%" height="15" fill="rgb(223,11,35)" fg:x="1977" fg:w="3"/><text x="73.6898%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.11%)</title><rect x="73.4398%" y="437" width="0.1114%" height="15" fill="rgb(251,219,26)" fg:x="1977" fg:w="3"/><text x="73.6898%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;core::cell::RefCell&lt;T&gt;&gt;::with_borrow_mut::_{{closure}} (3 samples, 0.11%)</title><rect x="73.4398%" y="421" width="0.1114%" height="15" fill="rgb(231,119,3)" fg:x="1977" fg:w="3"/><text x="73.6898%" y="431.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new::_{{closure}} (3 samples, 0.11%)</title><rect x="73.4398%" y="405" width="0.1114%" height="15" fill="rgb(216,97,11)" fg:x="1977" fg:w="3"/><text x="73.6898%" y="415.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::equal (97 samples, 3.60%)</title><rect x="70.0223%" y="533" width="3.6033%" height="15" fill="rgb(223,59,9)" fg:x="1885" fg:w="97"/><text x="70.2723%" y="543.50">simp..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (2 samples, 0.07%)</title><rect x="73.5513%" y="517" width="0.0743%" height="15" fill="rgb(233,93,31)" fg:x="1980" fg:w="2"/><text x="73.8013%" y="527.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (2 samples, 0.07%)</title><rect x="73.5513%" y="501" width="0.0743%" height="15" fill="rgb(239,81,33)" fg:x="1980" fg:w="2"/><text x="73.8013%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (2 samples, 0.07%)</title><rect x="73.5513%" y="485" width="0.0743%" height="15" fill="rgb(213,120,34)" fg:x="1980" fg:w="2"/><text x="73.8013%" y="495.50"></text></g><g><title>core::cell::BorrowRef::new (2 samples, 0.07%)</title><rect x="73.5513%" y="469" width="0.0743%" height="15" fill="rgb(243,49,53)" fg:x="1980" fg:w="2"/><text x="73.8013%" y="479.50"></text></g><g><title>core::cell::is_reading (2 samples, 0.07%)</title><rect x="73.5513%" y="453" width="0.0743%" height="15" fill="rgb(247,216,33)" fg:x="1980" fg:w="2"/><text x="73.8013%" y="463.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="73.6256%" y="453" width="0.0371%" height="15" fill="rgb(226,26,14)" fg:x="1982" fg:w="1"/><text x="73.8756%" y="463.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::less (2 samples, 0.07%)</title><rect x="73.6256%" y="533" width="0.0743%" height="15" fill="rgb(215,49,53)" fg:x="1982" fg:w="2"/><text x="73.8756%" y="543.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (2 samples, 0.07%)</title><rect x="73.6256%" y="517" width="0.0743%" height="15" fill="rgb(245,162,40)" fg:x="1982" fg:w="2"/><text x="73.8756%" y="527.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (2 samples, 0.07%)</title><rect x="73.6256%" y="501" width="0.0743%" height="15" fill="rgb(229,68,17)" fg:x="1982" fg:w="2"/><text x="73.8756%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (2 samples, 0.07%)</title><rect x="73.6256%" y="485" width="0.0743%" height="15" fill="rgb(213,182,10)" fg:x="1982" fg:w="2"/><text x="73.8756%" y="495.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.07%)</title><rect x="73.6256%" y="469" width="0.0743%" height="15" fill="rgb(245,125,30)" fg:x="1982" fg:w="2"/><text x="73.8756%" y="479.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="73.6627%" y="453" width="0.0371%" height="15" fill="rgb(232,202,2)" fg:x="1983" fg:w="1"/><text x="73.9127%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="73.8113%" y="517" width="0.0371%" height="15" fill="rgb(237,140,51)" fg:x="1987" fg:w="1"/><text x="74.0613%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (7 samples, 0.26%)</title><rect x="73.8484%" y="517" width="0.2600%" height="15" fill="rgb(236,157,25)" fg:x="1988" fg:w="7"/><text x="74.0984%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.26%)</title><rect x="73.8484%" y="501" width="0.2600%" height="15" fill="rgb(219,209,0)" fg:x="1988" fg:w="7"/><text x="74.0984%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (7 samples, 0.26%)</title><rect x="73.8484%" y="485" width="0.2600%" height="15" fill="rgb(240,116,54)" fg:x="1988" fg:w="7"/><text x="74.0984%" y="495.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.26%)</title><rect x="73.8484%" y="469" width="0.2600%" height="15" fill="rgb(216,10,36)" fg:x="1988" fg:w="7"/><text x="74.0984%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (7 samples, 0.26%)</title><rect x="73.8484%" y="453" width="0.2600%" height="15" fill="rgb(222,72,44)" fg:x="1988" fg:w="7"/><text x="74.0984%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.26%)</title><rect x="73.8484%" y="437" width="0.2600%" height="15" fill="rgb(232,159,9)" fg:x="1988" fg:w="7"/><text x="74.0984%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.26%)</title><rect x="73.8484%" y="421" width="0.2600%" height="15" fill="rgb(210,39,32)" fg:x="1988" fg:w="7"/><text x="74.0984%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.26%)</title><rect x="73.8484%" y="405" width="0.2600%" height="15" fill="rgb(216,194,45)" fg:x="1988" fg:w="7"/><text x="74.0984%" y="415.50"></text></g><g><title>cfree (7 samples, 0.26%)</title><rect x="73.8484%" y="389" width="0.2600%" height="15" fill="rgb(218,18,35)" fg:x="1988" fg:w="7"/><text x="74.0984%" y="399.50"></text></g><g><title>[libc.so.6] (6 samples, 0.22%)</title><rect x="73.8856%" y="373" width="0.2229%" height="15" fill="rgb(207,83,51)" fg:x="1989" fg:w="6"/><text x="74.1356%" y="383.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (1 samples, 0.04%)</title><rect x="74.2571%" y="485" width="0.0371%" height="15" fill="rgb(225,63,43)" fg:x="1999" fg:w="1"/><text x="74.5071%" y="495.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (1 samples, 0.04%)</title><rect x="74.2571%" y="469" width="0.0371%" height="15" fill="rgb(207,57,36)" fg:x="1999" fg:w="1"/><text x="74.5071%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (1 samples, 0.04%)</title><rect x="74.2571%" y="453" width="0.0371%" height="15" fill="rgb(216,99,33)" fg:x="1999" fg:w="1"/><text x="74.5071%" y="463.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (1 samples, 0.04%)</title><rect x="74.2571%" y="437" width="0.0371%" height="15" fill="rgb(225,42,16)" fg:x="1999" fg:w="1"/><text x="74.5071%" y="447.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (1 samples, 0.04%)</title><rect x="74.2571%" y="421" width="0.0371%" height="15" fill="rgb(220,201,45)" fg:x="1999" fg:w="1"/><text x="74.5071%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="74.2571%" y="405" width="0.0371%" height="15" fill="rgb(225,33,4)" fg:x="1999" fg:w="1"/><text x="74.5071%" y="415.50"></text></g><g><title>__rdl_alloc (3 samples, 0.11%)</title><rect x="74.5914%" y="453" width="0.1114%" height="15" fill="rgb(224,33,50)" fg:x="2008" fg:w="3"/><text x="74.8414%" y="463.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (33 samples, 1.23%)</title><rect x="74.1085%" y="517" width="1.2259%" height="15" fill="rgb(246,198,51)" fg:x="1995" fg:w="33"/><text x="74.3585%" y="527.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (32 samples, 1.19%)</title><rect x="74.1456%" y="501" width="1.1887%" height="15" fill="rgb(205,22,4)" fg:x="1996" fg:w="32"/><text x="74.3956%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (28 samples, 1.04%)</title><rect x="74.2942%" y="485" width="1.0401%" height="15" fill="rgb(206,3,8)" fg:x="2000" fg:w="28"/><text x="74.5442%" y="495.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.74%)</title><rect x="74.5914%" y="469" width="0.7429%" height="15" fill="rgb(251,23,15)" fg:x="2008" fg:w="20"/><text x="74.8414%" y="479.50"></text></g><g><title>malloc (17 samples, 0.63%)</title><rect x="74.7028%" y="453" width="0.6315%" height="15" fill="rgb(252,88,28)" fg:x="2011" fg:w="17"/><text x="74.9528%" y="463.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="75.2972%" y="437" width="0.0371%" height="15" fill="rgb(212,127,14)" fg:x="2027" fg:w="1"/><text x="75.5472%" y="447.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::less_equal (47 samples, 1.75%)</title><rect x="73.6999%" y="533" width="1.7459%" height="15" fill="rgb(247,145,37)" fg:x="1984" fg:w="47"/><text x="73.9499%" y="543.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (3 samples, 0.11%)</title><rect x="75.3343%" y="517" width="0.1114%" height="15" fill="rgb(209,117,53)" fg:x="2028" fg:w="3"/><text x="75.5843%" y="527.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (3 samples, 0.11%)</title><rect x="75.3343%" y="501" width="0.1114%" height="15" fill="rgb(212,90,42)" fg:x="2028" fg:w="3"/><text x="75.5843%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (3 samples, 0.11%)</title><rect x="75.3343%" y="485" width="0.1114%" height="15" fill="rgb(218,164,37)" fg:x="2028" fg:w="3"/><text x="75.5843%" y="495.50"></text></g><g><title>core::cell::BorrowRef::new (3 samples, 0.11%)</title><rect x="75.3343%" y="469" width="0.1114%" height="15" fill="rgb(246,65,34)" fg:x="2028" fg:w="3"/><text x="75.5843%" y="479.50"></text></g><g><title>core::cell::is_reading (3 samples, 0.11%)</title><rect x="75.3343%" y="453" width="0.1114%" height="15" fill="rgb(231,100,33)" fg:x="2028" fg:w="3"/><text x="75.5843%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="75.7801%" y="517" width="0.0371%" height="15" fill="rgb(228,126,14)" fg:x="2040" fg:w="1"/><text x="76.0301%" y="527.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="75.7801%" y="501" width="0.0371%" height="15" fill="rgb(215,173,21)" fg:x="2040" fg:w="1"/><text x="76.0301%" y="511.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="75.8172%" y="517" width="0.0371%" height="15" fill="rgb(210,6,40)" fg:x="2041" fg:w="1"/><text x="76.0672%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="75.8172%" y="501" width="0.0371%" height="15" fill="rgb(212,48,18)" fg:x="2041" fg:w="1"/><text x="76.0672%" y="511.50"></text></g><g><title>cfree (9 samples, 0.33%)</title><rect x="75.8544%" y="517" width="0.3343%" height="15" fill="rgb(230,214,11)" fg:x="2042" fg:w="9"/><text x="76.1044%" y="527.50"></text></g><g><title>[libc.so.6] (5 samples, 0.19%)</title><rect x="76.0030%" y="501" width="0.1857%" height="15" fill="rgb(254,105,39)" fg:x="2046" fg:w="5"/><text x="76.2530%" y="511.50"></text></g><g><title>&lt;simple_lisp::interpreter::data::Data as core::clone::Clone&gt;::clone (2 samples, 0.07%)</title><rect x="76.2259%" y="501" width="0.0743%" height="15" fill="rgb(245,158,5)" fg:x="2052" fg:w="2"/><text x="76.4759%" y="511.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (1 samples, 0.04%)</title><rect x="76.3001%" y="405" width="0.0371%" height="15" fill="rgb(249,208,11)" fg:x="2054" fg:w="1"/><text x="76.5501%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="76.3001%" y="389" width="0.0371%" height="15" fill="rgb(210,39,28)" fg:x="2054" fg:w="1"/><text x="76.5501%" y="399.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="76.3001%" y="373" width="0.0371%" height="15" fill="rgb(211,56,53)" fg:x="2054" fg:w="1"/><text x="76.5501%" y="383.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (2 samples, 0.07%)</title><rect x="76.3001%" y="469" width="0.0743%" height="15" fill="rgb(226,201,30)" fg:x="2054" fg:w="2"/><text x="76.5501%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (2 samples, 0.07%)</title><rect x="76.3001%" y="453" width="0.0743%" height="15" fill="rgb(239,101,34)" fg:x="2054" fg:w="2"/><text x="76.5501%" y="463.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (2 samples, 0.07%)</title><rect x="76.3001%" y="437" width="0.0743%" height="15" fill="rgb(226,209,5)" fg:x="2054" fg:w="2"/><text x="76.5501%" y="447.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (2 samples, 0.07%)</title><rect x="76.3001%" y="421" width="0.0743%" height="15" fill="rgb(250,105,47)" fg:x="2054" fg:w="2"/><text x="76.5501%" y="431.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (1 samples, 0.04%)</title><rect x="76.3373%" y="405" width="0.0371%" height="15" fill="rgb(230,72,3)" fg:x="2055" fg:w="1"/><text x="76.5873%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.04%)</title><rect x="76.3373%" y="389" width="0.0371%" height="15" fill="rgb(232,218,39)" fg:x="2055" fg:w="1"/><text x="76.5873%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.04%)</title><rect x="76.3373%" y="373" width="0.0371%" height="15" fill="rgb(248,166,6)" fg:x="2055" fg:w="1"/><text x="76.5873%" y="383.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="76.3373%" y="357" width="0.0371%" height="15" fill="rgb(247,89,20)" fg:x="2055" fg:w="1"/><text x="76.5873%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="76.3373%" y="341" width="0.0371%" height="15" fill="rgb(248,130,54)" fg:x="2055" fg:w="1"/><text x="76.5873%" y="351.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="77.0802%" y="437" width="0.0371%" height="15" fill="rgb(234,196,4)" fg:x="2075" fg:w="1"/><text x="77.3302%" y="447.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (52 samples, 1.93%)</title><rect x="76.3001%" y="501" width="1.9316%" height="15" fill="rgb(250,143,31)" fg:x="2054" fg:w="52"/><text x="76.5501%" y="511.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (52 samples, 1.93%)</title><rect x="76.3001%" y="485" width="1.9316%" height="15" fill="rgb(211,110,34)" fg:x="2054" fg:w="52"/><text x="76.5501%" y="495.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataRef::new (50 samples, 1.86%)</title><rect x="76.3744%" y="469" width="1.8574%" height="15" fill="rgb(215,124,48)" fg:x="2056" fg:w="50"/><text x="76.6244%" y="479.50">s..</text></g><g><title>alloc::alloc::alloc (31 samples, 1.15%)</title><rect x="77.0802%" y="453" width="1.1516%" height="15" fill="rgb(216,46,13)" fg:x="2075" fg:w="31"/><text x="77.3302%" y="463.50"></text></g><g><title>malloc (30 samples, 1.11%)</title><rect x="77.1174%" y="437" width="1.1144%" height="15" fill="rgb(205,184,25)" fg:x="2076" fg:w="30"/><text x="77.3674%" y="447.50"></text></g><g><title>[libc.so.6] (8 samples, 0.30%)</title><rect x="77.9346%" y="421" width="0.2972%" height="15" fill="rgb(228,1,10)" fg:x="2098" fg:w="8"/><text x="78.1846%" y="431.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::clone_data (61 samples, 2.27%)</title><rect x="76.1887%" y="517" width="2.2660%" height="15" fill="rgb(213,116,27)" fg:x="2051" fg:w="61"/><text x="76.4387%" y="527.50">s..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (6 samples, 0.22%)</title><rect x="78.2318%" y="501" width="0.2229%" height="15" fill="rgb(241,95,50)" fg:x="2106" fg:w="6"/><text x="78.4818%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (6 samples, 0.22%)</title><rect x="78.2318%" y="485" width="0.2229%" height="15" fill="rgb(238,48,32)" fg:x="2106" fg:w="6"/><text x="78.4818%" y="495.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (6 samples, 0.22%)</title><rect x="78.2318%" y="469" width="0.2229%" height="15" fill="rgb(235,113,49)" fg:x="2106" fg:w="6"/><text x="78.4818%" y="479.50"></text></g><g><title>core::cell::BorrowRef::new (6 samples, 0.22%)</title><rect x="78.2318%" y="453" width="0.2229%" height="15" fill="rgb(205,127,43)" fg:x="2106" fg:w="6"/><text x="78.4818%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (5 samples, 0.19%)</title><rect x="78.2689%" y="437" width="0.1857%" height="15" fill="rgb(250,162,2)" fg:x="2107" fg:w="5"/><text x="78.5189%" y="447.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::modulo::do_the_thing (7 samples, 0.26%)</title><rect x="78.4547%" y="517" width="0.2600%" height="15" fill="rgb(220,13,41)" fg:x="2112" fg:w="7"/><text x="78.7047%" y="527.50"></text></g><g><title>simple_lisp::interpreter::builtins::arithmetic::modulo (89 samples, 3.31%)</title><rect x="75.4458%" y="533" width="3.3061%" height="15" fill="rgb(249,221,25)" fg:x="2031" fg:w="89"/><text x="75.6958%" y="543.50">sim..</text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (1 samples, 0.04%)</title><rect x="78.7147%" y="517" width="0.0371%" height="15" fill="rgb(215,208,19)" fg:x="2119" fg:w="1"/><text x="78.9647%" y="527.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (1 samples, 0.04%)</title><rect x="78.7147%" y="501" width="0.0371%" height="15" fill="rgb(236,175,2)" fg:x="2119" fg:w="1"/><text x="78.9647%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (1 samples, 0.04%)</title><rect x="78.7147%" y="485" width="0.0371%" height="15" fill="rgb(241,52,2)" fg:x="2119" fg:w="1"/><text x="78.9647%" y="495.50"></text></g><g><title>core::cell::BorrowRef::new (1 samples, 0.04%)</title><rect x="78.7147%" y="469" width="0.0371%" height="15" fill="rgb(248,140,14)" fg:x="2119" fg:w="1"/><text x="78.9647%" y="479.50"></text></g><g><title>core::cell::is_reading (1 samples, 0.04%)</title><rect x="78.7147%" y="453" width="0.0371%" height="15" fill="rgb(253,22,42)" fg:x="2119" fg:w="1"/><text x="78.9647%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="78.7890%" y="517" width="0.0743%" height="15" fill="rgb(234,61,47)" fg:x="2121" fg:w="2"/><text x="79.0390%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.04%)</title><rect x="78.8633%" y="517" width="0.0371%" height="15" fill="rgb(208,226,15)" fg:x="2123" fg:w="1"/><text x="79.1133%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="78.8633%" y="501" width="0.0371%" height="15" fill="rgb(217,221,4)" fg:x="2123" fg:w="1"/><text x="79.1133%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;simple_lisp::interpreter::data::DataRef,alloc::alloc::Global&gt;&gt; (1 samples, 0.04%)</title><rect x="78.8633%" y="485" width="0.0371%" height="15" fill="rgb(212,174,34)" fg:x="2123" fg:w="1"/><text x="79.1133%" y="495.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="78.8633%" y="469" width="0.0371%" height="15" fill="rgb(253,83,4)" fg:x="2123" fg:w="1"/><text x="79.1133%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (1 samples, 0.04%)</title><rect x="78.8633%" y="453" width="0.0371%" height="15" fill="rgb(250,195,49)" fg:x="2123" fg:w="1"/><text x="79.1133%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="78.8633%" y="437" width="0.0371%" height="15" fill="rgb(241,192,25)" fg:x="2123" fg:w="1"/><text x="79.1133%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="78.8633%" y="421" width="0.0371%" height="15" fill="rgb(208,124,10)" fg:x="2123" fg:w="1"/><text x="79.1133%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="78.8633%" y="405" width="0.0371%" height="15" fill="rgb(222,33,0)" fg:x="2123" fg:w="1"/><text x="79.1133%" y="415.50"></text></g><g><title>cfree (1 samples, 0.04%)</title><rect x="78.8633%" y="389" width="0.0371%" height="15" fill="rgb(234,209,28)" fg:x="2123" fg:w="1"/><text x="79.1133%" y="399.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push_entry (1 samples, 0.04%)</title><rect x="78.9747%" y="421" width="0.0371%" height="15" fill="rgb(224,11,23)" fg:x="2126" fg:w="1"/><text x="79.2247%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="78.9747%" y="405" width="0.0371%" height="15" fill="rgb(232,99,1)" fg:x="2126" fg:w="1"/><text x="79.2247%" y="415.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="78.9747%" y="389" width="0.0371%" height="15" fill="rgb(237,95,45)" fg:x="2126" fg:w="1"/><text x="79.2247%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (1 samples, 0.04%)</title><rect x="79.0862%" y="373" width="0.0371%" height="15" fill="rgb(208,109,11)" fg:x="2129" fg:w="1"/><text x="79.3362%" y="383.50"></text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::insert (7 samples, 0.26%)</title><rect x="78.9004%" y="485" width="0.2600%" height="15" fill="rgb(216,190,48)" fg:x="2124" fg:w="7"/><text x="79.1504%" y="495.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (7 samples, 0.26%)</title><rect x="78.9004%" y="469" width="0.2600%" height="15" fill="rgb(251,171,36)" fg:x="2124" fg:w="7"/><text x="79.1504%" y="479.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (7 samples, 0.26%)</title><rect x="78.9004%" y="453" width="0.2600%" height="15" fill="rgb(230,62,22)" fg:x="2124" fg:w="7"/><text x="79.1504%" y="463.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (5 samples, 0.19%)</title><rect x="78.9747%" y="437" width="0.1857%" height="15" fill="rgb(225,114,35)" fg:x="2126" fg:w="5"/><text x="79.2247%" y="447.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (4 samples, 0.15%)</title><rect x="79.0119%" y="421" width="0.1486%" height="15" fill="rgb(215,118,42)" fg:x="2127" fg:w="4"/><text x="79.2619%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (4 samples, 0.15%)</title><rect x="79.0119%" y="405" width="0.1486%" height="15" fill="rgb(243,119,21)" fg:x="2127" fg:w="4"/><text x="79.2619%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (3 samples, 0.11%)</title><rect x="79.0490%" y="389" width="0.1114%" height="15" fill="rgb(252,177,53)" fg:x="2128" fg:w="3"/><text x="79.2990%" y="399.50"></text></g><g><title>hashbrown::raw::inner::h2 (1 samples, 0.04%)</title><rect x="79.1233%" y="373" width="0.0371%" height="15" fill="rgb(237,209,29)" fg:x="2130" fg:w="1"/><text x="79.3733%" y="383.50"></text></g><g><title>simple_lisp::interpreter::Interpreter::alloc (27 samples, 1.00%)</title><rect x="78.9004%" y="517" width="1.0030%" height="15" fill="rgb(212,65,23)" fg:x="2124" fg:w="27"/><text x="79.1504%" y="527.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::insert (27 samples, 1.00%)</title><rect x="78.9004%" y="501" width="1.0030%" height="15" fill="rgb(230,222,46)" fg:x="2124" fg:w="27"/><text x="79.1504%" y="511.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::new (20 samples, 0.74%)</title><rect x="79.1605%" y="485" width="0.7429%" height="15" fill="rgb(215,135,32)" fg:x="2131" fg:w="20"/><text x="79.4105%" y="495.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.59%)</title><rect x="79.3091%" y="469" width="0.5944%" height="15" fill="rgb(246,101,22)" fg:x="2135" fg:w="16"/><text x="79.5591%" y="479.50"></text></g><g><title>malloc (16 samples, 0.59%)</title><rect x="79.3091%" y="453" width="0.5944%" height="15" fill="rgb(206,107,13)" fg:x="2135" fg:w="16"/><text x="79.5591%" y="463.50"></text></g><g><title>[libc.so.6] (6 samples, 0.22%)</title><rect x="79.6805%" y="437" width="0.2229%" height="15" fill="rgb(250,100,44)" fg:x="2145" fg:w="6"/><text x="79.9305%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.07%)</title><rect x="79.9034%" y="453" width="0.0743%" height="15" fill="rgb(231,147,38)" fg:x="2151" fg:w="2"/><text x="80.1534%" y="463.50"></text></g><g><title>simple_lisp::interpreter::builtins::core::and (38 samples, 1.41%)</title><rect x="78.7519%" y="533" width="1.4116%" height="15" fill="rgb(229,8,40)" fg:x="2120" fg:w="38"/><text x="79.0019%" y="543.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (7 samples, 0.26%)</title><rect x="79.9034%" y="517" width="0.2600%" height="15" fill="rgb(221,135,30)" fg:x="2151" fg:w="7"/><text x="80.1534%" y="527.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (7 samples, 0.26%)</title><rect x="79.9034%" y="501" width="0.2600%" height="15" fill="rgb(249,193,18)" fg:x="2151" fg:w="7"/><text x="80.1534%" y="511.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (7 samples, 0.26%)</title><rect x="79.9034%" y="485" width="0.2600%" height="15" fill="rgb(209,133,39)" fg:x="2151" fg:w="7"/><text x="80.1534%" y="495.50"></text></g><g><title>core::cell::BorrowRef::new (7 samples, 0.26%)</title><rect x="79.9034%" y="469" width="0.2600%" height="15" fill="rgb(232,100,14)" fg:x="2151" fg:w="7"/><text x="80.1534%" y="479.50"></text></g><g><title>core::cell::is_reading (5 samples, 0.19%)</title><rect x="79.9777%" y="453" width="0.1857%" height="15" fill="rgb(224,185,1)" fg:x="2153" fg:w="5"/><text x="80.2277%" y="463.50"></text></g><g><title>&lt;indexmap::set::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="80.1634%" y="437" width="0.0371%" height="15" fill="rgb(223,139,8)" fg:x="2158" fg:w="1"/><text x="80.4134%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="80.1634%" y="421" width="0.0371%" height="15" fill="rgb(232,213,38)" fg:x="2158" fg:w="1"/><text x="80.4134%" y="431.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.04%)</title><rect x="80.1634%" y="405" width="0.0371%" height="15" fill="rgb(207,94,22)" fg:x="2158" fg:w="1"/><text x="80.4134%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="81.3150%" y="293" width="0.0371%" height="15" fill="rgb(219,183,54)" fg:x="2189" fg:w="1"/><text x="81.5650%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="81.3150%" y="277" width="0.0371%" height="15" fill="rgb(216,185,54)" fg:x="2189" fg:w="1"/><text x="81.5650%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.04%)</title><rect x="81.3150%" y="261" width="0.0371%" height="15" fill="rgb(254,217,39)" fg:x="2189" fg:w="1"/><text x="81.5650%" y="271.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.04%)</title><rect x="81.3150%" y="245" width="0.0371%" height="15" fill="rgb(240,178,23)" fg:x="2189" fg:w="1"/><text x="81.5650%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.04%)</title><rect x="81.3150%" y="229" width="0.0371%" height="15" fill="rgb(218,11,47)" fg:x="2189" fg:w="1"/><text x="81.5650%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.04%)</title><rect x="81.3150%" y="213" width="0.0371%" height="15" fill="rgb(218,51,51)" fg:x="2189" fg:w="1"/><text x="81.5650%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.04%)</title><rect x="81.3150%" y="197" width="0.0371%" height="15" fill="rgb(238,126,27)" fg:x="2189" fg:w="1"/><text x="81.5650%" y="207.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (1 samples, 0.04%)</title><rect x="81.3150%" y="181" width="0.0371%" height="15" fill="rgb(249,202,22)" fg:x="2189" fg:w="1"/><text x="81.5650%" y="191.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (1 samples, 0.04%)</title><rect x="81.3150%" y="165" width="0.0371%" height="15" fill="rgb(254,195,49)" fg:x="2189" fg:w="1"/><text x="81.5650%" y="175.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (1 samples, 0.04%)</title><rect x="81.3150%" y="149" width="0.0371%" height="15" fill="rgb(208,123,14)" fg:x="2189" fg:w="1"/><text x="81.5650%" y="159.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (1 samples, 0.04%)</title><rect x="81.3150%" y="133" width="0.0371%" height="15" fill="rgb(224,200,8)" fg:x="2189" fg:w="1"/><text x="81.5650%" y="143.50"></text></g><g><title>indexmap::map::core::raw::&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::find_or_insert (1 samples, 0.04%)</title><rect x="81.3150%" y="117" width="0.0371%" height="15" fill="rgb(217,61,36)" fg:x="2189" fg:w="1"/><text x="81.5650%" y="127.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 0.04%)</title><rect x="81.3150%" y="101" width="0.0371%" height="15" fill="rgb(206,35,45)" fg:x="2189" fg:w="1"/><text x="81.5650%" y="111.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_or_find_insert_slot_inner (1 samples, 0.04%)</title><rect x="81.3150%" y="85" width="0.0371%" height="15" fill="rgb(217,65,33)" fg:x="2189" fg:w="1"/><text x="81.5650%" y="95.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (1 samples, 0.04%)</title><rect x="81.3150%" y="69" width="0.0371%" height="15" fill="rgb(222,158,48)" fg:x="2189" fg:w="1"/><text x="81.5650%" y="79.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="81.3150%" y="53" width="0.0371%" height="15" fill="rgb(254,2,54)" fg:x="2189" fg:w="1"/><text x="81.5650%" y="63.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="81.3150%" y="37" width="0.0371%" height="15" fill="rgb(250,143,38)" fg:x="2189" fg:w="1"/><text x="81.5650%" y="47.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.07%)</title><rect x="81.3150%" y="341" width="0.0743%" height="15" fill="rgb(248,25,0)" fg:x="2189" fg:w="2"/><text x="81.5650%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.07%)</title><rect x="81.3150%" y="325" width="0.0743%" height="15" fill="rgb(206,152,27)" fg:x="2189" fg:w="2"/><text x="81.5650%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.07%)</title><rect x="81.3150%" y="309" width="0.0743%" height="15" fill="rgb(240,77,30)" fg:x="2189" fg:w="2"/><text x="81.5650%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="81.3522%" y="293" width="0.0371%" height="15" fill="rgb(231,5,3)" fg:x="2190" fg:w="1"/><text x="81.6022%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="81.3522%" y="277" width="0.0371%" height="15" fill="rgb(207,226,32)" fg:x="2190" fg:w="1"/><text x="81.6022%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="81.3522%" y="261" width="0.0371%" height="15" fill="rgb(222,207,47)" fg:x="2190" fg:w="1"/><text x="81.6022%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.04%)</title><rect x="81.3522%" y="245" width="0.0371%" height="15" fill="rgb(229,115,45)" fg:x="2190" fg:w="1"/><text x="81.6022%" y="255.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.04%)</title><rect x="81.3522%" y="229" width="0.0371%" height="15" fill="rgb(224,191,6)" fg:x="2190" fg:w="1"/><text x="81.6022%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.04%)</title><rect x="81.3522%" y="213" width="0.0371%" height="15" fill="rgb(230,227,24)" fg:x="2190" fg:w="1"/><text x="81.6022%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.04%)</title><rect x="81.3522%" y="197" width="0.0371%" height="15" fill="rgb(228,80,19)" fg:x="2190" fg:w="1"/><text x="81.6022%" y="207.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 0.04%)</title><rect x="81.3522%" y="181" width="0.0371%" height="15" fill="rgb(247,229,0)" fg:x="2190" fg:w="1"/><text x="81.6022%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.04%)</title><rect x="81.3522%" y="165" width="0.0371%" height="15" fill="rgb(237,194,15)" fg:x="2190" fg:w="1"/><text x="81.6022%" y="175.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (1 samples, 0.04%)</title><rect x="81.3522%" y="149" width="0.0371%" height="15" fill="rgb(219,203,20)" fg:x="2190" fg:w="1"/><text x="81.6022%" y="159.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert (1 samples, 0.04%)</title><rect x="81.3522%" y="133" width="0.0371%" height="15" fill="rgb(234,128,8)" fg:x="2190" fg:w="1"/><text x="81.6022%" y="143.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::insert_full (1 samples, 0.04%)</title><rect x="81.3522%" y="117" width="0.0371%" height="15" fill="rgb(248,202,8)" fg:x="2190" fg:w="1"/><text x="81.6022%" y="127.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="81.3893%" y="309" width="0.0371%" height="15" fill="rgb(206,104,37)" fg:x="2191" fg:w="1"/><text x="81.6393%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.04%)</title><rect x="81.3893%" y="293" width="0.0371%" height="15" fill="rgb(223,8,27)" fg:x="2191" fg:w="1"/><text x="81.6393%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::reserve_rehash_inner (1 samples, 0.04%)</title><rect x="81.3893%" y="277" width="0.0371%" height="15" fill="rgb(216,217,28)" fg:x="2191" fg:w="1"/><text x="81.6393%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::resize_inner (1 samples, 0.04%)</title><rect x="81.3893%" y="261" width="0.0371%" height="15" fill="rgb(249,199,1)" fg:x="2191" fg:w="1"/><text x="81.6393%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::prepare_insert_slot (1 samples, 0.04%)</title><rect x="81.3893%" y="245" width="0.0371%" height="15" fill="rgb(240,85,17)" fg:x="2191" fg:w="1"/><text x="81.6393%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot (1 samples, 0.04%)</title><rect x="81.3893%" y="229" width="0.0371%" height="15" fill="rgb(206,108,45)" fg:x="2191" fg:w="1"/><text x="81.6393%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (1 samples, 0.04%)</title><rect x="81.3893%" y="213" width="0.0371%" height="15" fill="rgb(245,210,41)" fg:x="2191" fg:w="1"/><text x="81.6393%" y="223.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (1 samples, 0.04%)</title><rect x="81.3893%" y="197" width="0.0371%" height="15" fill="rgb(206,13,37)" fg:x="2191" fg:w="1"/><text x="81.6393%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="81.3893%" y="181" width="0.0371%" height="15" fill="rgb(250,61,18)" fg:x="2191" fg:w="1"/><text x="81.6393%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (35 samples, 1.30%)</title><rect x="80.1634%" y="485" width="1.3001%" height="15" fill="rgb(235,172,48)" fg:x="2158" fg:w="35"/><text x="80.4134%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35 samples, 1.30%)</title><rect x="80.1634%" y="469" width="1.3001%" height="15" fill="rgb(249,201,17)" fg:x="2158" fg:w="35"/><text x="80.4134%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (35 samples, 1.30%)</title><rect x="80.1634%" y="453" width="1.3001%" height="15" fill="rgb(219,208,6)" fg:x="2158" fg:w="35"/><text x="80.4134%" y="463.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (34 samples, 1.26%)</title><rect x="80.2006%" y="437" width="1.2630%" height="15" fill="rgb(248,31,23)" fg:x="2159" fg:w="34"/><text x="80.4506%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5 samples, 0.19%)</title><rect x="81.2779%" y="421" width="0.1857%" height="15" fill="rgb(245,15,42)" fg:x="2188" fg:w="5"/><text x="81.5279%" y="431.50"></text></g><g><title>simple_lisp::interpreter::data::DataStore::collect::_{{closure}} (5 samples, 0.19%)</title><rect x="81.2779%" y="405" width="0.1857%" height="15" fill="rgb(222,217,39)" fg:x="2188" fg:w="5"/><text x="81.5279%" y="415.50"></text></g><g><title>simple_lisp::interpreter::data::Data::add_data_refs (4 samples, 0.15%)</title><rect x="81.3150%" y="389" width="0.1486%" height="15" fill="rgb(210,219,27)" fg:x="2189" fg:w="4"/><text x="81.5650%" y="399.50"></text></g><g><title>&lt;indexmap::set::IndexSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (4 samples, 0.15%)</title><rect x="81.3150%" y="373" width="0.1486%" height="15" fill="rgb(252,166,36)" fg:x="2189" fg:w="4"/><text x="81.5650%" y="383.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (4 samples, 0.15%)</title><rect x="81.3150%" y="357" width="0.1486%" height="15" fill="rgb(245,132,34)" fg:x="2189" fg:w="4"/><text x="81.5650%" y="367.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::reserve (2 samples, 0.07%)</title><rect x="81.3893%" y="341" width="0.0743%" height="15" fill="rgb(236,54,3)" fg:x="2191" fg:w="2"/><text x="81.6393%" y="351.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::reserve (2 samples, 0.07%)</title><rect x="81.3893%" y="325" width="0.0743%" height="15" fill="rgb(241,173,43)" fg:x="2191" fg:w="2"/><text x="81.6393%" y="335.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::reserve_entries (1 samples, 0.04%)</title><rect x="81.4264%" y="309" width="0.0371%" height="15" fill="rgb(215,190,9)" fg:x="2192" fg:w="1"/><text x="81.6764%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::try_reserve_exact (1 samples, 0.04%)</title><rect x="81.4264%" y="293" width="0.0371%" height="15" fill="rgb(242,101,16)" fg:x="2192" fg:w="1"/><text x="81.6764%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve_exact (1 samples, 0.04%)</title><rect x="81.4264%" y="277" width="0.0371%" height="15" fill="rgb(223,190,21)" fg:x="2192" fg:w="1"/><text x="81.6764%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_exact (1 samples, 0.04%)</title><rect x="81.4264%" y="261" width="0.0371%" height="15" fill="rgb(215,228,25)" fg:x="2192" fg:w="1"/><text x="81.6764%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.04%)</title><rect x="81.4264%" y="245" width="0.0371%" height="15" fill="rgb(225,36,22)" fg:x="2192" fg:w="1"/><text x="81.6764%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::set::IndexSet&lt;simple_lisp::interpreter::data::HashableDataRef,rustc_hash::FxBuildHasher&gt;&gt; (1 samples, 0.04%)</title><rect x="81.4636%" y="485" width="0.0371%" height="15" fill="rgb(251,106,46)" fg:x="2193" fg:w="1"/><text x="81.7136%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::map::IndexMap&lt;simple_lisp::interpreter::data::HashableDataRef,(),rustc_hash::FxBuildHasher&gt;&gt; (1 samples, 0.04%)</title><rect x="81.4636%" y="469" width="0.0371%" height="15" fill="rgb(208,90,1)" fg:x="2193" fg:w="1"/><text x="81.7136%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;indexmap::map::core::IndexMapCore&lt;simple_lisp::interpreter::data::HashableDataRef,()&gt;&gt; (1 samples, 0.04%)</title><rect x="81.4636%" y="453" width="0.0371%" height="15" fill="rgb(243,10,4)" fg:x="2193" fg:w="1"/><text x="81.7136%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;indexmap::Bucket&lt;simple_lisp::interpreter::data::HashableDataRef,()&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="81.4636%" y="437" width="0.0371%" height="15" fill="rgb(212,137,27)" fg:x="2193" fg:w="1"/><text x="81.7136%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;indexmap::Bucket&lt;simple_lisp::interpreter::data::HashableDataRef,()&gt;&gt;&gt; (1 samples, 0.04%)</title><rect x="81.4636%" y="421" width="0.0371%" height="15" fill="rgb(231,220,49)" fg:x="2193" fg:w="1"/><text x="81.7136%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="81.4636%" y="405" width="0.0371%" height="15" fill="rgb(237,96,20)" fg:x="2193" fg:w="1"/><text x="81.7136%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="81.4636%" y="389" width="0.0371%" height="15" fill="rgb(239,229,30)" fg:x="2193" fg:w="1"/><text x="81.7136%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="81.4636%" y="373" width="0.0371%" height="15" fill="rgb(219,65,33)" fg:x="2193" fg:w="1"/><text x="81.7136%" y="383.50"></text></g><g><title>cfree (1 samples, 0.04%)</title><rect x="81.4636%" y="357" width="0.0371%" height="15" fill="rgb(243,134,7)" fg:x="2193" fg:w="1"/><text x="81.7136%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="81.4636%" y="341" width="0.0371%" height="15" fill="rgb(216,177,54)" fg:x="2193" fg:w="1"/><text x="81.7136%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="81.4636%" y="325" width="0.0371%" height="15" fill="rgb(211,160,20)" fg:x="2193" fg:w="1"/><text x="81.7136%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (25 samples, 0.93%)</title><rect x="84.4354%" y="309" width="0.9287%" height="15" fill="rgb(239,85,39)" fg:x="2273" fg:w="25"/><text x="84.6854%" y="319.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (25 samples, 0.93%)</title><rect x="84.4354%" y="293" width="0.9287%" height="15" fill="rgb(232,125,22)" fg:x="2273" fg:w="25"/><text x="84.6854%" y="303.50"></text></g><g><title>core::cell::BorrowRef::new (25 samples, 0.93%)</title><rect x="84.4354%" y="277" width="0.9287%" height="15" fill="rgb(244,57,34)" fg:x="2273" fg:w="25"/><text x="84.6854%" y="287.50"></text></g><g><title>core::cell::is_reading (5 samples, 0.19%)</title><rect x="85.1783%" y="261" width="0.1857%" height="15" fill="rgb(214,203,32)" fg:x="2293" fg:w="5"/><text x="85.4283%" y="271.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::allocation_size (98 samples, 3.64%)</title><rect x="84.1010%" y="341" width="3.6404%" height="15" fill="rgb(207,58,43)" fg:x="2264" fg:w="98"/><text x="84.3510%" y="351.50">simp..</text></g><g><title>simple_lisp::interpreter::data::DataBox::allocation_size (98 samples, 3.64%)</title><rect x="84.1010%" y="325" width="3.6404%" height="15" fill="rgb(215,193,15)" fg:x="2264" fg:w="98"/><text x="84.3510%" y="335.50">simp..</text></g><g><title>simple_lisp::interpreter::data::Data::allocation_size (64 samples, 2.38%)</title><rect x="85.3640%" y="309" width="2.3774%" height="15" fill="rgb(232,15,44)" fg:x="2298" fg:w="64"/><text x="85.6140%" y="319.50">si..</text></g><g><title>__rdl_dealloc (11 samples, 0.41%)</title><rect x="88.1501%" y="309" width="0.4086%" height="15" fill="rgb(212,3,48)" fg:x="2373" fg:w="11"/><text x="88.4001%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11 samples, 0.41%)</title><rect x="88.1501%" y="293" width="0.4086%" height="15" fill="rgb(218,128,7)" fg:x="2373" fg:w="11"/><text x="88.4001%" y="303.50"></text></g><g><title>__rust_dealloc (17 samples, 0.63%)</title><rect x="88.5587%" y="309" width="0.6315%" height="15" fill="rgb(226,216,39)" fg:x="2384" fg:w="17"/><text x="88.8087%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (169 samples, 6.28%)</title><rect x="87.7415%" y="325" width="6.2779%" height="15" fill="rgb(243,47,51)" fg:x="2362" fg:w="169"/><text x="87.9915%" y="335.50">alloc::a..</text></g><g><title>cfree (130 samples, 4.83%)</title><rect x="89.1902%" y="309" width="4.8291%" height="15" fill="rgb(241,183,40)" fg:x="2401" fg:w="130"/><text x="89.4402%" y="319.50">cfree</text></g><g><title>[libc.so.6] (81 samples, 3.01%)</title><rect x="91.0104%" y="293" width="3.0089%" height="15" fill="rgb(231,217,32)" fg:x="2450" fg:w="81"/><text x="91.2604%" y="303.50">[li..</text></g><g><title>__rdl_dealloc (2 samples, 0.07%)</title><rect x="94.0936%" y="261" width="0.0743%" height="15" fill="rgb(229,61,38)" fg:x="2533" fg:w="2"/><text x="94.3436%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.07%)</title><rect x="94.0936%" y="245" width="0.0743%" height="15" fill="rgb(225,210,5)" fg:x="2533" fg:w="2"/><text x="94.3436%" y="255.50"></text></g><g><title>cfree (63 samples, 2.34%)</title><rect x="94.1679%" y="261" width="2.3403%" height="15" fill="rgb(231,79,45)" fg:x="2535" fg:w="63"/><text x="94.4179%" y="271.50">c..</text></g><g><title>[libc.so.6] (37 samples, 1.37%)</title><rect x="95.1337%" y="245" width="1.3744%" height="15" fill="rgb(224,100,7)" fg:x="2561" fg:w="37"/><text x="95.3837%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.11%)</title><rect x="97.5854%" y="245" width="0.1114%" height="15" fill="rgb(241,198,18)" fg:x="2627" fg:w="3"/><text x="97.8354%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.11%)</title><rect x="97.5854%" y="229" width="0.1114%" height="15" fill="rgb(252,97,53)" fg:x="2627" fg:w="3"/><text x="97.8354%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.11%)</title><rect x="97.5854%" y="213" width="0.1114%" height="15" fill="rgb(220,88,7)" fg:x="2627" fg:w="3"/><text x="97.8354%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="97.5854%" y="197" width="0.1114%" height="15" fill="rgb(213,176,14)" fg:x="2627" fg:w="3"/><text x="97.8354%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="97.6597%" y="181" width="0.0371%" height="15" fill="rgb(246,73,7)" fg:x="2629" fg:w="1"/><text x="97.9097%" y="191.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="97.6597%" y="165" width="0.0371%" height="15" fill="rgb(245,64,36)" fg:x="2629" fg:w="1"/><text x="97.9097%" y="175.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::dealloc (271 samples, 10.07%)</title><rect x="87.7415%" y="341" width="10.0669%" height="15" fill="rgb(245,80,10)" fg:x="2362" fg:w="271"/><text x="87.9915%" y="351.50">simple_lisp::in..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (102 samples, 3.79%)</title><rect x="94.0193%" y="325" width="3.7890%" height="15" fill="rgb(232,107,50)" fg:x="2531" fg:w="102"/><text x="94.2693%" y="335.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::DataBox&gt; (102 samples, 3.79%)</title><rect x="94.0193%" y="309" width="3.7890%" height="15" fill="rgb(253,3,0)" fg:x="2531" fg:w="102"/><text x="94.2693%" y="319.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;simple_lisp::interpreter::data::Data&gt;&gt; (102 samples, 3.79%)</title><rect x="94.0193%" y="293" width="3.7890%" height="15" fill="rgb(212,99,53)" fg:x="2531" fg:w="102"/><text x="94.2693%" y="303.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;simple_lisp::interpreter::data::Data&gt;&gt; (102 samples, 3.79%)</title><rect x="94.0193%" y="277" width="3.7890%" height="15" fill="rgb(249,111,54)" fg:x="2531" fg:w="102"/><text x="94.2693%" y="287.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;simple_lisp::interpreter::data::Data&gt; (35 samples, 1.30%)</title><rect x="96.5082%" y="261" width="1.3001%" height="15" fill="rgb(249,55,30)" fg:x="2598" fg:w="35"/><text x="96.7582%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (3 samples, 0.11%)</title><rect x="97.6969%" y="245" width="0.1114%" height="15" fill="rgb(237,47,42)" fg:x="2630" fg:w="3"/><text x="97.9469%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simple_lisp::interpreter::data::DataRef&gt;&gt; (3 samples, 0.11%)</title><rect x="97.6969%" y="229" width="0.1114%" height="15" fill="rgb(211,20,18)" fg:x="2630" fg:w="3"/><text x="97.9469%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="97.6969%" y="213" width="0.1114%" height="15" fill="rgb(231,203,46)" fg:x="2630" fg:w="3"/><text x="97.9469%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.11%)</title><rect x="97.6969%" y="197" width="0.1114%" height="15" fill="rgb(237,142,3)" fg:x="2630" fg:w="3"/><text x="97.9469%" y="207.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_generation (8 samples, 0.30%)</title><rect x="97.8083%" y="341" width="0.2972%" height="15" fill="rgb(241,107,1)" fg:x="2633" fg:w="8"/><text x="98.0583%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (8 samples, 0.30%)</title><rect x="97.8083%" y="325" width="0.2972%" height="15" fill="rgb(229,83,13)" fg:x="2633" fg:w="8"/><text x="98.0583%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (458 samples, 17.01%)</title><rect x="81.5007%" y="437" width="17.0134%" height="15" fill="rgb(241,91,40)" fg:x="2194" fg:w="458"/><text x="81.7507%" y="447.50">alloc::vec::Vec&lt;T,A&gt;::reta..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (458 samples, 17.01%)</title><rect x="81.5007%" y="421" width="17.0134%" height="15" fill="rgb(225,3,45)" fg:x="2194" fg:w="458"/><text x="81.7507%" y="431.50">alloc::vec::Vec&lt;T,A&gt;::reta..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::retain_in_order::_{{closure}} (448 samples, 16.64%)</title><rect x="81.8722%" y="405" width="16.6419%" height="15" fill="rgb(244,223,14)" fg:x="2204" fg:w="448"/><text x="82.1222%" y="415.50">indexmap::map::core::Index..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::retain::_{{closure}} (448 samples, 16.64%)</title><rect x="81.8722%" y="389" width="16.6419%" height="15" fill="rgb(224,124,37)" fg:x="2204" fg:w="448"/><text x="82.1222%" y="399.50">indexmap::map::IndexMap&lt;K,..</text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::retain::_{{closure}} (448 samples, 16.64%)</title><rect x="81.8722%" y="373" width="16.6419%" height="15" fill="rgb(251,171,30)" fg:x="2204" fg:w="448"/><text x="82.1222%" y="383.50">indexmap::set::IndexSet&lt;T,..</text></g><g><title>simple_lisp::interpreter::data::DataStore::collect::_{{closure}} (448 samples, 16.64%)</title><rect x="81.8722%" y="357" width="16.6419%" height="15" fill="rgb(236,46,54)" fg:x="2204" fg:w="448"/><text x="82.1222%" y="367.50">simple_lisp::interpreter::..</text></g><g><title>simple_lisp::interpreter::data::DataRef::is_external (11 samples, 0.41%)</title><rect x="98.1055%" y="341" width="0.4086%" height="15" fill="rgb(245,213,5)" fg:x="2641" fg:w="11"/><text x="98.3555%" y="351.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (11 samples, 0.41%)</title><rect x="98.1055%" y="325" width="0.4086%" height="15" fill="rgb(230,144,27)" fg:x="2641" fg:w="11"/><text x="98.3555%" y="335.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (11 samples, 0.41%)</title><rect x="98.1055%" y="309" width="0.4086%" height="15" fill="rgb(220,86,6)" fg:x="2641" fg:w="11"/><text x="98.3555%" y="319.50"></text></g><g><title>core::cell::BorrowRef::new (11 samples, 0.41%)</title><rect x="98.1055%" y="293" width="0.4086%" height="15" fill="rgb(240,20,13)" fg:x="2641" fg:w="11"/><text x="98.3555%" y="303.50"></text></g><g><title>core::cell::is_reading (7 samples, 0.26%)</title><rect x="98.2541%" y="277" width="0.2600%" height="15" fill="rgb(217,89,34)" fg:x="2645" fg:w="7"/><text x="98.5041%" y="287.50"></text></g><g><title>simple_lisp::interpreter::builtins::core::gc_collect (495 samples, 18.39%)</title><rect x="80.1634%" y="533" width="18.3878%" height="15" fill="rgb(229,13,5)" fg:x="2158" fg:w="495"/><text x="80.4134%" y="543.50">simple_lisp::interpreter::bui..</text></g><g><title>simple_lisp::interpreter::Interpreter::gc_collect (495 samples, 18.39%)</title><rect x="80.1634%" y="517" width="18.3878%" height="15" fill="rgb(244,67,35)" fg:x="2158" fg:w="495"/><text x="80.4134%" y="527.50">simple_lisp::interpreter::Int..</text></g><g><title>simple_lisp::interpreter::data::DataStore::collect (495 samples, 18.39%)</title><rect x="80.1634%" y="501" width="18.3878%" height="15" fill="rgb(221,40,2)" fg:x="2158" fg:w="495"/><text x="80.4134%" y="511.50">simple_lisp::interpreter::dat..</text></g><g><title>indexmap::set::IndexSet&lt;T,S&gt;::retain (459 samples, 17.05%)</title><rect x="81.5007%" y="485" width="17.0505%" height="15" fill="rgb(237,157,21)" fg:x="2194" fg:w="459"/><text x="81.7507%" y="495.50">indexmap::set::IndexSet&lt;T,..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::retain (459 samples, 17.05%)</title><rect x="81.5007%" y="469" width="17.0505%" height="15" fill="rgb(222,94,11)" fg:x="2194" fg:w="459"/><text x="81.7507%" y="479.50">indexmap::map::IndexMap&lt;K,..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::retain_in_order (459 samples, 17.05%)</title><rect x="81.5007%" y="453" width="17.0505%" height="15" fill="rgb(249,113,6)" fg:x="2194" fg:w="459"/><text x="81.7507%" y="463.50">indexmap::map::core::Index..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::rebuild_hash_table (1 samples, 0.04%)</title><rect x="98.5141%" y="437" width="0.0371%" height="15" fill="rgb(238,137,36)" fg:x="2652" fg:w="1"/><text x="98.7641%" y="447.50"></text></g><g><title>indexmap::map::core::raw::insert_bulk_no_grow (1 samples, 0.04%)</title><rect x="98.5141%" y="421" width="0.0371%" height="15" fill="rgb(210,102,26)" fg:x="2652" fg:w="1"/><text x="98.7641%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_no_grow (1 samples, 0.04%)</title><rect x="98.5141%" y="405" width="0.0371%" height="15" fill="rgb(218,30,30)" fg:x="2652" fg:w="1"/><text x="98.7641%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::prepare_insert_slot (1 samples, 0.04%)</title><rect x="98.5141%" y="389" width="0.0371%" height="15" fill="rgb(214,67,26)" fg:x="2652" fg:w="1"/><text x="98.7641%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot (1 samples, 0.04%)</title><rect x="98.5141%" y="373" width="0.0371%" height="15" fill="rgb(251,9,53)" fg:x="2652" fg:w="1"/><text x="98.7641%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_insert_slot_in_group (1 samples, 0.04%)</title><rect x="98.5141%" y="357" width="0.0371%" height="15" fill="rgb(228,204,25)" fg:x="2652" fg:w="1"/><text x="98.7641%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.07%)</title><rect x="98.6627%" y="469" width="0.0743%" height="15" fill="rgb(207,153,8)" fg:x="2656" fg:w="2"/><text x="98.9127%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (6 samples, 0.22%)</title><rect x="98.7370%" y="469" width="0.2229%" height="15" fill="rgb(242,9,16)" fg:x="2658" fg:w="6"/><text x="98.9870%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (6 samples, 0.22%)</title><rect x="98.7370%" y="453" width="0.2229%" height="15" fill="rgb(217,211,10)" fg:x="2658" fg:w="6"/><text x="98.9870%" y="463.50"></text></g><g><title>core::mem::replace (6 samples, 0.22%)</title><rect x="98.7370%" y="437" width="0.2229%" height="15" fill="rgb(219,228,52)" fg:x="2658" fg:w="6"/><text x="98.9870%" y="447.50"></text></g><g><title>core::ptr::write (6 samples, 0.22%)</title><rect x="98.7370%" y="421" width="0.2229%" height="15" fill="rgb(231,92,29)" fg:x="2658" fg:w="6"/><text x="98.9870%" y="431.50"></text></g><g><title>simple_lisp::interpreter::data::DataRef::get_data (21 samples, 0.78%)</title><rect x="98.5513%" y="533" width="0.7801%" height="15" fill="rgb(232,8,23)" fg:x="2653" fg:w="21"/><text x="98.8013%" y="543.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (21 samples, 0.78%)</title><rect x="98.5513%" y="517" width="0.7801%" height="15" fill="rgb(216,211,34)" fg:x="2653" fg:w="21"/><text x="98.8013%" y="527.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (21 samples, 0.78%)</title><rect x="98.5513%" y="501" width="0.7801%" height="15" fill="rgb(236,151,0)" fg:x="2653" fg:w="21"/><text x="98.8013%" y="511.50"></text></g><g><title>core::cell::BorrowRef::new (21 samples, 0.78%)</title><rect x="98.5513%" y="485" width="0.7801%" height="15" fill="rgb(209,168,3)" fg:x="2653" fg:w="21"/><text x="98.8013%" y="495.50"></text></g><g><title>core::cell::is_reading (10 samples, 0.37%)</title><rect x="98.9599%" y="469" width="0.3715%" height="15" fill="rgb(208,129,28)" fg:x="2664" fg:w="10"/><text x="99.2099%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="99.4428%" y="437" width="0.0371%" height="15" fill="rgb(229,78,22)" fg:x="2677" fg:w="1"/><text x="99.6928%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (2 samples, 0.07%)</title><rect x="99.4799%" y="437" width="0.0743%" height="15" fill="rgb(228,187,13)" fg:x="2678" fg:w="2"/><text x="99.7299%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.07%)</title><rect x="99.4799%" y="421" width="0.0743%" height="15" fill="rgb(240,119,24)" fg:x="2678" fg:w="2"/><text x="99.7299%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.07%)</title><rect x="99.4799%" y="405" width="0.0743%" height="15" fill="rgb(209,194,42)" fg:x="2678" fg:w="2"/><text x="99.7299%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.07%)</title><rect x="99.4799%" y="389" width="0.0743%" height="15" fill="rgb(247,200,46)" fg:x="2678" fg:w="2"/><text x="99.7299%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.07%)</title><rect x="99.4799%" y="373" width="0.0743%" height="15" fill="rgb(218,76,16)" fg:x="2678" fg:w="2"/><text x="99.7299%" y="383.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.04%)</title><rect x="99.5542%" y="437" width="0.0371%" height="15" fill="rgb(225,21,48)" fg:x="2680" fg:w="1"/><text x="99.8042%" y="447.50"></text></g><g><title>_start (2,673 samples, 99.29%)</title><rect x="0.3343%" y="837" width="99.2942%" height="15" fill="rgb(239,223,50)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="847.50">_start</text></g><g><title>__libc_start_main (2,673 samples, 99.29%)</title><rect x="0.3343%" y="821" width="99.2942%" height="15" fill="rgb(244,45,21)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="831.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,673 samples, 99.29%)</title><rect x="0.3343%" y="805" width="99.2942%" height="15" fill="rgb(232,33,43)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="815.50">[libc.so.6]</text></g><g><title>main (2,673 samples, 99.29%)</title><rect x="0.3343%" y="789" width="99.2942%" height="15" fill="rgb(209,8,3)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="799.50">main</text></g><g><title>std::rt::lang_start_internal (2,673 samples, 99.29%)</title><rect x="0.3343%" y="773" width="99.2942%" height="15" fill="rgb(214,25,53)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="783.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,673 samples, 99.29%)</title><rect x="0.3343%" y="757" width="99.2942%" height="15" fill="rgb(254,186,54)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,673 samples, 99.29%)</title><rect x="0.3343%" y="741" width="99.2942%" height="15" fill="rgb(208,174,49)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,673 samples, 99.29%)</title><rect x="0.3343%" y="725" width="99.2942%" height="15" fill="rgb(233,191,51)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="735.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (2,673 samples, 99.29%)</title><rect x="0.3343%" y="709" width="99.2942%" height="15" fill="rgb(222,134,10)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="719.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (2,673 samples, 99.29%)</title><rect x="0.3343%" y="693" width="99.2942%" height="15" fill="rgb(230,226,20)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="703.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,673 samples, 99.29%)</title><rect x="0.3343%" y="677" width="99.2942%" height="15" fill="rgb(251,111,25)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="687.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,673 samples, 99.29%)</title><rect x="0.3343%" y="661" width="99.2942%" height="15" fill="rgb(224,40,46)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="671.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,673 samples, 99.29%)</title><rect x="0.3343%" y="645" width="99.2942%" height="15" fill="rgb(236,108,47)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="655.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (2,673 samples, 99.29%)</title><rect x="0.3343%" y="629" width="99.2942%" height="15" fill="rgb(234,93,0)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="639.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,673 samples, 99.29%)</title><rect x="0.3343%" y="613" width="99.2942%" height="15" fill="rgb(224,213,32)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="623.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,673 samples, 99.29%)</title><rect x="0.3343%" y="597" width="99.2942%" height="15" fill="rgb(251,11,48)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="607.50">core::ops::function::FnOnce::call_once</text></g><g><title>simple_lisp::main (2,673 samples, 99.29%)</title><rect x="0.3343%" y="581" width="99.2942%" height="15" fill="rgb(236,173,5)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="591.50">simple_lisp::main</text></g><g><title>simple_lisp::run (2,673 samples, 99.29%)</title><rect x="0.3343%" y="565" width="99.2942%" height="15" fill="rgb(230,95,12)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="575.50">simple_lisp::run</text></g><g><title>simple_lisp::interpreter::Interpreter::run (2,673 samples, 99.29%)</title><rect x="0.3343%" y="549" width="99.2942%" height="15" fill="rgb(232,209,1)" fg:x="9" fg:w="2673"/><text x="0.5843%" y="559.50">simple_lisp::interpreter::Interpreter::run</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (8 samples, 0.30%)</title><rect x="99.3314%" y="533" width="0.2972%" height="15" fill="rgb(232,6,1)" fg:x="2674" fg:w="8"/><text x="99.5814%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (8 samples, 0.30%)</title><rect x="99.3314%" y="517" width="0.2972%" height="15" fill="rgb(210,224,50)" fg:x="2674" fg:w="8"/><text x="99.5814%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (8 samples, 0.30%)</title><rect x="99.3314%" y="501" width="0.2972%" height="15" fill="rgb(228,127,35)" fg:x="2674" fg:w="8"/><text x="99.5814%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (8 samples, 0.30%)</title><rect x="99.3314%" y="485" width="0.2972%" height="15" fill="rgb(245,102,45)" fg:x="2674" fg:w="8"/><text x="99.5814%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (8 samples, 0.30%)</title><rect x="99.3314%" y="469" width="0.2972%" height="15" fill="rgb(214,1,49)" fg:x="2674" fg:w="8"/><text x="99.5814%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (8 samples, 0.30%)</title><rect x="99.3314%" y="453" width="0.2972%" height="15" fill="rgb(226,163,40)" fg:x="2674" fg:w="8"/><text x="99.5814%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.04%)</title><rect x="99.5914%" y="437" width="0.0371%" height="15" fill="rgb(239,212,28)" fg:x="2681" fg:w="1"/><text x="99.8414%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="99.5914%" y="421" width="0.0371%" height="15" fill="rgb(220,20,13)" fg:x="2681" fg:w="1"/><text x="99.8414%" y="431.50"></text></g><g><title>all (2,692 samples, 100%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(210,164,35)" fg:x="0" fg:w="2692"/><text x="0.2500%" y="879.50"></text></g><g><title>simple_lisp (2,692 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(248,109,41)" fg:x="0" fg:w="2692"/><text x="0.2500%" y="863.50">simple_lisp</text></g><g><title>malloc (10 samples, 0.37%)</title><rect x="99.6285%" y="837" width="0.3715%" height="15" fill="rgb(238,23,50)" fg:x="2682" fg:w="10"/><text x="99.8785%" y="847.50"></text></g><g><title>[libc.so.6] (10 samples, 0.37%)</title><rect x="99.6285%" y="821" width="0.3715%" height="15" fill="rgb(211,48,49)" fg:x="2682" fg:w="10"/><text x="99.8785%" y="831.50"></text></g></svg></svg>